MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:48 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                23 December 2017
Time:                09:43:48 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O38N7R3_ "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O38N7R3_ new;
MPRINT(EM_DIAGRAM):   run;
22833      filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22834      *------------------------------------------------------------*;
22835      * Score4: Scoring DATA data;
22836      *------------------------------------------------------------*;
22837      data EMWS1.Score4_TRAIN
22838      / view=EMWS1.Score4_TRAIN
22839      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score4_TRAIN / view=EMWS1.Score4_TRAIN ;
22840      set EMWS1.Clus3_TRAIN
22841      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_TRAIN ;
22842      %inc emflow;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22848      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.SCORE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS3_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22849      quit;
22850      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22851      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22852      * Score4: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score4: Creating Publish Score Variables Table;
22853      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22854      proc sort data=EMWS1.Clus3_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus3_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
22855      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22856      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.CLUS3_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22857      proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
22858      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22859      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22860      data EMWS1.Score4_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score4_EMINPUTVARS;
22861      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
22862      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22863      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
22864      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
22865         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE = "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
22866         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = "Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
22867      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
22868      if upcase(NAME) = "CUSTID" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTID" then HIDE = "N";
22869      if upcase(NAME) = "DISTANCE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "DISTANCE" then HIDE = "N";
22870      if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
22871      if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
22872      if upcase(NAME) = "NEWPREMHEALTH" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMHEALTH" then HIDE = "N";
22873      if upcase(NAME) = "NEWPREMHOUSEHOLD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMHOUSEHOLD" then HIDE = "N";
22874      if upcase(NAME) = "NEWPREMLIFE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMLIFE" then HIDE = "N";
22875      if upcase(NAME) = "NEWPREMMOTOR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMMOTOR" then HIDE = "N";
22876      if upcase(NAME) = "NEWPREMWORK" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMWORK" then HIDE = "N";
22877      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE4_EMINPUTVARS has 22 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22878      proc sort data=EMWS1.Score4_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score4_EMINPUTVARS nodupkey;
22879      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22880      where CREATOR='' or (NAME="" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="" and CREATOR='');
22881      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.SCORE4_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME=' ') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE4_EMINPUTVARS has 14 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22882      %let em_rootkey=;
22883      %let em_keytype=;
22884      %let em_keylen=;
22885      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22886      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
22887      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
22888      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
22889      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
22890      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
22891      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22892      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\EMPUBLISHSCORE.sas";
22893      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22894      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22895      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22901      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22902      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
22903      quit;
22904      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
22905      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
22906      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
22907      retain ID 1 Node "Score4";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score4";
22908      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
22909      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22910      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
22911      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22912      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22913      proc sort data=EMWS1.Clus3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
22914      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22915      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.CLUS3_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22916      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22917      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
22918      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
22919      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22920      proc contents data=EMWS1.Score4_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score4_train out=_meta(keep=NAME) noprint;
22921      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

22922      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
22923      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22924      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22925      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22926      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
22927      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22928      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22929      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
22930      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 1 rows and 5 columns.

22931      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22932      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
22933      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE4_FCMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22934      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas";
22935      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22936      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22937      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [4] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 4;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHealth - -1.08501211322444 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHealth - 0.01346491417017 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHealth - 1.28393537137595 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHealth - -0.03543372708688 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHousehold - -0.67020446789888 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHousehold - -0.24526523426993 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHousehold - 0.06351078161482 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHousehold - 1.50628429946247 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremLife - -0.71602648765378 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremLife - -0.22872463110426 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremLife - 0.18505423226036 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremLife - 1.37875822346978 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremMotor - 1.23895265298044 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremMotor - 0.19616985117357 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremMotor - -0.84044401744246 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremMotor - -1.25811249513167 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremWork - -0.69857344043344 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremWork - -0.22205160536151 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremWork - 0.14838432904781 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremWork - 1.38775088205119 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 4;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
23055      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23056      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23057      quit;
23058      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23059      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23060      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23061      retain ID 2 Node "Clus3";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Clus3";
23062      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23063      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 148 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 148 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23064      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23065      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23066      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 148 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 148 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23067      proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23068      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23069      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.FILTER2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

23070      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23071      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23072      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23073      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23074      proc contents data=EMWS1.Clus3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus3_train out=_meta(keep=NAME) noprint;
23075      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

23076      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23077      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23078      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23079      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23080      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23081      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23082      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 40 observations read from the data set WORK._META.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 40 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23083      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23084      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 56 rows and 5 columns.

23085      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23086      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
23087      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: There were 56 observations read from the data set WORK._TEMPX.
NOTE: 56 observations added.
NOTE: The data set EMWS1.SCORE4_FCMP has 57 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23088      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
23089      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23090      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23091      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   age =2016 - IMP_BirthYear ;
MPRINT(EM_DIAGRAM):   policy_time =2016 - IMP_FirstPolYear ;
MPRINT(EM_DIAGRAM):   reversals =revHealth + revHousehold + revLife + revMotor + revWork ;
23098      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23099      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23100      quit;
23101      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23102      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23103      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23104      retain ID 5 Node "Trans3";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans3";
23105      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23106      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23107      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23108      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23109      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23110      proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23111      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23112      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23113      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23114      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23115      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23116      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23117      proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
23118      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

23119      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23120      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23121      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 37 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23122      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23123      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23124      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23125      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 37 observations read from the data set WORK._META.
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23126      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23127      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 7 rows and 5 columns.

23128      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23129      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
23130      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: There were 7 observations read from the data set WORK._TEMPX.
NOTE: 7 observations added.
NOTE: The data set EMWS1.SCORE4_FCMP has 64 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23131      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
23132      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23133      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23134      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth =IMP_PremHealth * ( NOT revHealth) ;
MPRINT(EM_DIAGRAM):   newPremLife =IMP_PremLife * ( NOT revLife) ;
MPRINT(EM_DIAGRAM):   newPremMotor =IMP_PremMotor * ( NOT revMotor) ;
MPRINT(EM_DIAGRAM):   newPremWork =IMP_PremWork * ( NOT revWork) ;
MPRINT(EM_DIAGRAM):   newPremHousehold =PremHousehold * ( NOT revHousehold) ;
23143      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23144      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23145      quit;
23146      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23147      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23148      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23149      retain ID 6 Node "Trans2";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "Trans2";
23150      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23151      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23152      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23153      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23154      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23155      proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23156      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23157      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 19 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23158      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23159      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23160      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23161      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23162      proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
23163      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

23164      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23165      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23166      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23167      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23168      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23169      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23170      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23171      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23172      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.

23173      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23174      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
23175      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE4_FCMP has 74 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23176      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
23177      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23178      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23179      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth =(IMP_PremHealth < 0) ;
MPRINT(EM_DIAGRAM):   revLife =(IMP_PremLife < 0) ;
MPRINT(EM_DIAGRAM):   revWork =(IMP_PremWork < 0) ;
MPRINT(EM_DIAGRAM):   revHousehold =(PremHousehold < 0) ;
MPRINT(EM_DIAGRAM):   revMotor =(IMP_PremMotor < 0) ;
23188      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23189      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23190      quit;
23191      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23192      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23193      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23194      retain ID 7 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Trans";
23195      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23196      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23197      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23198      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23199      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23200      proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23201      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23202      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23203      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23204      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23205      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23206      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23207      proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
23208      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

23209      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23210      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23211      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23212      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23213      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23214      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23215      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 29 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 29 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23216      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23217      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 5 rows and 5 columns.

23218      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23219      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
23220      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: There were 5 observations read from the data set WORK._TEMPX.
NOTE: 5 observations added.
NOTE: The data set EMWS1.SCORE4_FCMP has 79 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23221      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
23222      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23223      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23224      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_Children 8;
MPRINT(EM_DIAGRAM):   label IMP_Children = 'Imputed Children';
MPRINT(EM_DIAGRAM):   IMP_Children = Children;
MPRINT(EM_DIAGRAM):   if missing(Children) then IMP_Children = 1;
MPRINT(EM_DIAGRAM):   length IMP_EducDeg $25;
MPRINT(EM_DIAGRAM):   label IMP_EducDeg = 'Imputed EducDeg';
MPRINT(EM_DIAGRAM):   IMP_EducDeg = EducDeg;
MPRINT(EM_DIAGRAM):   if EducDeg = '' then IMP_EducDeg = '3 - BSc/MSc';
MPRINT(EM_DIAGRAM):   length IMP_GeoLivArea 8;
MPRINT(EM_DIAGRAM):   label IMP_GeoLivArea = 'Imputed GeoLivArea';
MPRINT(EM_DIAGRAM):   IMP_GeoLivArea = GeoLivArea;
MPRINT(EM_DIAGRAM):   if missing(GeoLivArea) then IMP_GeoLivArea = 4;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   label IMP_BirthYear = 'Imputed BirthYear';
MPRINT(EM_DIAGRAM):   length IMP_BirthYear 8;
MPRINT(EM_DIAGRAM):   IMP_BirthYear = BirthYear;
MPRINT(EM_DIAGRAM):   if missing(BirthYear) then IMP_BirthYear = 1968;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
23271      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

23272      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23273      quit;
23274      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23275      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23276      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23277      retain ID 8 Node "Impt";
MPRINT(EM_DIAGRAM):   retain ID 8 Node "Impt";
23278      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23279      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23280      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23281      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23282      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23283      proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
23284      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23285      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23286      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23287      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23288      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23289      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23290      proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
23291      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

23292      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23293      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23294      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23295      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23296      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23297      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23298      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 24 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23299      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23300      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.

23301      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23302      proc append base=EMWS1.Score4_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score4_FCMP data=_tempx;
23303      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE4_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE4_FCMP has 89 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23304      %macro varDept(fcmpdata=,id=);
23305      %global nobs&id scoreFlag&id;
23306      %let scoreFlag&id = 0;
23307      %if &id=1 or ^&fcmpStart %then %do;
23308      proc sort data=&fcmpdata out=_temp&id nodupkey;
23309      by NAME;
23310      %if EM_SEGMENT ne %then %do;
23311      where id=&id and (LHS in( %let j=1;
23312      %do %while(%scan(EM_SEGMENT, &j) ne );
23313      %let var = %scan(EM_SEGMENT, &j);
23314      "&var" %let j = %eval(&j+1);
23315      %end;
23316      ) or substr(LHS, 1, 3)='EM_');
23317      %end;
23318      %else %do;
23319      where id=&id and substr(LHS, 1, 3)='EM_';
23320      %end;
23321      run;
23322      %let dsid = %sysfunc(open(_temp&id));
23323      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23324      %let dsid = %sysfunc(close(&dsid));
23325      %if &&nobs&id %then %do;
23326      %let scoreFlag&id = 1;
23327      %let fcmpStart = 1;
23328      %end;
23329      %else %let fcmpStart = 0;
23330      %end;
23331      %else %do;
23332      proc sort data=&fcmpdata out=_tempid;
23333      where id=&id;
23334      by LHS;
23335      run;
23336      %let dsid = %sysfunc(open(_tempid));
23337      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23338      %let dsid = %sysfunc(close(&dsid));
23339      %if ^&&nobs&id %then %do;
23340      proc datasets lib=work nolist;
23341      delete _tempid;
23342      run;
23343      quit;
23344      %end;
23345      %else %do;
23346      data _tempAll;
23347      set %let j=%eval(&id-1);
23348      %do x=1 %to &j;
23349      %if &&nobs&x %then %do;
23350      _temp&x %end;
23351      %end;
23352      ;
23353      run;
23354      proc sql;
23355      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
23356      quit;
23357      data _temp&id;
23358      set _temp&id;
23359      where LHS ne '' and NAME ne '' and Node ne '';
23360      run;
23361      proc datasets lib=work nolist;
23362      delete _tempAll;
23363      run;
23364      %let dsid = %sysfunc(open(_temp&id));
23365      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23366      %let dsid = %sysfunc(close(&dsid));
23367      %if ^&&nobs&id %then %do;
23368      proc datasets lib=work nolist;
23369      delete _temp&id;
23370      run;
23371      quit;
23372      %end;
23373      %else %do;
23374      %let scoreFlag&id = 1;
23375      data _temp&id;
23376      set _temp&id;
23377      where LHS ne NAME and node ne '';
23378      run;
23379      %let dsid = %sysfunc(open(_temp&id));
23380      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23381      %let dsid = %sysfunc(close(&dsid));
23382      %if ^&&nobs&id %then %do;
23383      proc datasets lib=work nolist;
23384      delete _temp&id;
23385      run;
23386      quit;
23387      %end;
23388      %else %do;
23389      proc sort data=_temp&id nodupkey;
23390      by LHS NAME;
23391      run;
23392      %end;
23393      %end;
23394      %end;
23395      %end;
23396      %mend varDept;
23397      %macro optCode(outdata=);
23398      %global fcmpStart;
23399      %let fcmpStart = 0;
23400      %let outputVars = EM_SEGMENT;
23401      %let NumNodes=9;
23402      %do k=1 %to &NumNodes;
23403      %vardept(fcmpdata=&outdata, id=&k);
23404      %end;
23405      %mend optCode;
23406      %optcode(outData=EMWS1.Score4_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_SEGMENT" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE (id=1) and ((LHS='EM_SEGMENT') or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 56 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 56 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP2 created, with 6 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 6 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 6 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 7 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 7 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP6 created, with 10 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 5 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp6 ;
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 17 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP7 created, with 5 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp7 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP7.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp6 _temp7 ;
MPRINT(VARDEPT):   run;

NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: There were 5 observations read from the data set WORK._TEMP7.
NOTE: The data set WORK._TEMPALL has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp8 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP8 created, with 8 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 8 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP8 has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 8 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP8 has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp8 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 8 observations read from the data set WORK._TEMP8.
NOTE: 4 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP8 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score4_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE4_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

23407      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23408      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23409      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23410      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23411      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23412      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23413      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23414      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23415      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23416      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.

23417      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

23418      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23419      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23420      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23421      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23422      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23423      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23424      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23425      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23426      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23427      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23428      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23429      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23430      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.

23431      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

23432      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
23433      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
23434      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23435      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23436      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
23437      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23438      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23439      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23440      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
23441      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23443      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23444      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.

23445      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23446      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
23447      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
23448      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 23DEC2017:09:43:51;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth = (IMP_PremHealth < 0);
MPRINT(EM_DIAGRAM):   revHousehold = (PremHousehold < 0);
MPRINT(EM_DIAGRAM):   revLife = (IMP_PremLife < 0);
MPRINT(EM_DIAGRAM):   revMotor = (IMP_PremMotor < 0);
MPRINT(EM_DIAGRAM):   revWork = (IMP_PremWork < 0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth = IMP_PremHealth * ( NOT revHealth);
MPRINT(EM_DIAGRAM):   newPremHousehold = PremHousehold * ( NOT revHousehold);
MPRINT(EM_DIAGRAM):   newPremLife = IMP_PremLife * ( NOT revLife);
MPRINT(EM_DIAGRAM):   newPremMotor = IMP_PremMotor * ( NOT revMotor);
MPRINT(EM_DIAGRAM):   newPremWork = IMP_PremWork * ( NOT revWork);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [4] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 4;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHealth - -1.08501211322444 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHealth - 0.01346491417017 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHealth - 1.28393537137595 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHealth - -0.03543372708688 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHousehold - -0.67020446789888 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHousehold - -0.24526523426993 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHousehold - 0.06351078161482 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHousehold - 1.50628429946247 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremLife - -0.71602648765378 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremLife - -0.22872463110426 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremLife - 0.18505423226036 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremLife - 1.37875822346978 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremMotor - 1.23895265298044 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremMotor - 0.19616985117357 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremMotor - -0.84044401744246 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremMotor - -1.25811249513167 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremWork - -0.69857344043344 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremWork - -0.22205160536151 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremWork - 0.14838432904781 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremWork - 1.38775088205119 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 4;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
23675      %let validvarany = 0;
23676      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
23677      set EMWS1.Score4_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score4_EMINPUTVARS;
23678      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
23679      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
23680      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.SCORE4_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23681      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
23682      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23683      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23684      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23685      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
23686      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23687      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
23688      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
23689      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
23690      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
23691      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
23692      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
23693      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
23694      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
23695      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
23696      end;
MPRINT(EM_DIAGRAM):   end;
23697      output;
MPRINT(EM_DIAGRAM):   output;
23698      end;
MPRINT(EM_DIAGRAM):   end;
23699      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 34 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

23700      proc sort data=_temp2 out=EMWS1.Score4_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score4_EMINPUTVARS;
23701      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23702      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE4_EMINPUTVARS has 5 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=A2Z_INSU.A2Z_INSURANCE noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD13736_DESKTOP-61HCQ9U_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD13736_DESKTOP-61HCQ9U_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('A2Z_INSU.A2Z_INSURANCE');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score4_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set A2Z_INSU.A2Z_INSURANCE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 23DEC2017:09:43:51;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth = (IMP_PremHealth < 0);
MPRINT(EM_DIAGRAM):   revHousehold = (PremHousehold < 0);
MPRINT(EM_DIAGRAM):   revLife = (IMP_PremLife < 0);
MPRINT(EM_DIAGRAM):   revMotor = (IMP_PremMotor < 0);
MPRINT(EM_DIAGRAM):   revWork = (IMP_PremWork < 0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth = IMP_PremHealth * ( NOT revHealth);
MPRINT(EM_DIAGRAM):   newPremHousehold = PremHousehold * ( NOT revHousehold);
MPRINT(EM_DIAGRAM):   newPremLife = IMP_PremLife * ( NOT revLife);
MPRINT(EM_DIAGRAM):   newPremMotor = IMP_PremMotor * ( NOT revMotor);
MPRINT(EM_DIAGRAM):   newPremWork = IMP_PremWork * ( NOT revWork);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [4] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 4;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHealth - -1.08501211322444 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHealth - 0.01346491417017 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHealth - 1.28393537137595 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHealth - -0.03543372708688 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremHousehold - -0.67020446789888 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremHousehold - -0.24526523426993 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremHousehold - 0.06351078161482 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremHousehold - 1.50628429946247 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremLife - -0.71602648765378 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremLife - -0.22872463110426 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremLife - 0.18505423226036 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremLife - 1.37875822346978 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremMotor - 1.23895265298044 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremMotor - 0.19616985117357 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremMotor - -0.84044401744246 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremMotor - -1.25811249513167 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_newPremWork - -0.69857344043344 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_newPremWork - -0.22205160536151 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_newPremWork - 0.14838432904781 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_newPremWork - 1.38775088205119 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 4;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   drop 'BirthYear'n 'Children'n 'ClaimsRate'n 'CustID'n 'CustMonVal'n 'EducDeg'n 'FirstPolYear'n 'GeoLivArea'n 'MonthSal'n 'PremHealth'n 'PremHousehold'n 'PremLife'n 'PremMotor'n 'PremWork'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score4_EMOUTPUTVARS noprint out=EMWS1.Score4_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
23979      data EMWS1.Score4_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score4_EMOUTPUTVARS;
23980      set EMWS1.Score4_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score4_EMOUTPUTVARS(keep=name type label rename=(type=itype));
23981      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
23982      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
23983      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
23984      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
23985      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
23986      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
23987      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
23988      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
23989      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' /* removed EM_ROI */
23990      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
23991      else do;
MPRINT(EM_DIAGRAM):   else do;
23992      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
23993      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
23994      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
23995      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
23996      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
23997      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
23998      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
23999      end;
MPRINT(EM_DIAGRAM):   end;
24000      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set EMWS1.SCORE4_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE4_EMOUTPUTVARS has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24001      proc sort data=EMWS1.Clus3_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus3_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
24002      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24003      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.CLUS3_CMETA_TRAIN.
NOTE: The data set WORK.META has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24004      proc sort data=EMWS1.Score4_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score4_EMOUTPUTVARS;
24005      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24006      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set EMWS1.SCORE4_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE4_EMOUTPUTVARS has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24007      data EMWS1.Score4_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score4_EMOUTPUTVARS;
24008      merge WORK.META EMWS1.Score4_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score4_EMOUTPUTVARS(in=_a);
24009      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
24010      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24011      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score4";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score4";
24012      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
24013      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set WORK.META.
NOTE: There were 18 observations read from the data set EMWS1.SCORE4_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE4_EMOUTPUTVARS has 18 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24014      %let _cn = %sysfunc(getoption(CENTER));
24015      %let _nb = %sysfunc(getoption(NUMBER));
24016      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
24017      title;
MPRINT(EM_DIAGRAM):   title;
24018      proc print data=EMWS1.Score4_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score4_EMINPUTVARS noobs label;
24019      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
24020      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24021      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
24022      run;

NOTE: There were 5 observations read from the data set EMWS1.SCORE4_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24023      title10;
MPRINT(EM_DIAGRAM):   title10;
24024      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
24025      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24026      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24027      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24028      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24029      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24030      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24031      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24032      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24033      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24034      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.

24035      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

24036      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
24037      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
24038      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24039      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24040      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24041      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24042      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24043      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24044      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24045      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24046      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24047      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24048      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.

24049      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

24050      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
24051      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
24052      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24053      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24054      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24055      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24056      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24057      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24058      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24059      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24060      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24061      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24062      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.

24063      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

24064      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
24065      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
24066      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24067      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24068      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24069      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24070      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24071      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24072      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24073      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24074      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24075      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24076      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.

24077      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

24078      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
24079      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
24080      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24081      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24082      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24083      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24084      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24085      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24086      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24087      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24088      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24089      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24090      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.

24091      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24092      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
24093      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
24094      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24095      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24096      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24097      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24098      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24099      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24100      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24101      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24102      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24103      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24104      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.

24105      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

24106      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
24107      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
24108      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24109      %let _cn = %sysfunc(getoption(CENTER));
24110      %let _nb = %sysfunc(getoption(NUMBER));
24111      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
24112      title;
MPRINT(EM_DIAGRAM):   title;
24113      proc print data=EMWS1.Score4_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score4_EMOUTPUTVARS noobs label;
24114      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
24115      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
24116         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" LABEL = "Label";
24117      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24118      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
24119      run;

NOTE: There were 18 observations read from the data set EMWS1.SCORE4_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24120      title10;
MPRINT(EM_DIAGRAM):   title10;
24121      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
24122      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24123      * Score4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score4: Computing metadata for TRAIN data;
24124      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.SCORE4_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score4_TRAIN out=WORK.M0OW17JO noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0OW17JO;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OW17JO(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0OW17JO;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OW17JO;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0DBM9H3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1AJ5TYB(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DBM9H3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score4";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE4_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.23 seconds
      
24471      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24472      * Score4: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score4: Computing metadata for SCORE data;
24473      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score4_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score4_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Score4_SCORE;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score4_SCORE out=WORK.M2CHQNE6 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2CHQNE6;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2CHQNE6(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2CHQNE6;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2CHQNE6;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M326NPRO NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00QKI7K(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   set WORK.M326NPRO;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids2_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids2_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score4_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score4";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
