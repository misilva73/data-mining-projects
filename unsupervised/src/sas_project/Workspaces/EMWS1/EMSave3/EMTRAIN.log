MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:48:36 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                23 December 2017
Time:                09:48:36 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1NOWHAU "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1NOWHAU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:48:36 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:48:36 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22736      proc freq data=EMWS1.EMSave3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EMSave3_VariableSet noprint;
22737      table ROLE*LEVEL/out=WORK.EMSave3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EMSave3META;
22738      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
NOTE: The data set WORK.EMSAVE3META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

22739      proc print data=WORK.EMSave3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EMSave3META label noobs;
22740      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22741      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22742      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22743      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22744      run;

NOTE: There were 5 observations read from the data set WORK.EMSAVE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22745      title10;
MPRINT(EM_DIAGRAM):   title10;
22746      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM1_project';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23072      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23073      * EMSave3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EMSave3: Generation of macros and macro variables;
23074      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23075      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

23076      %let EMEXCEPTIONSTRING=;
23077      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23078      * TRAIN: EMSave3;
MPRINT(EM_DIAGRAM):   * TRAIN: EMSave3;
23079      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23080      %let EM_ACTION = TRAIN;
23081      %let syscc = 0;
23082      *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
MPRINT(EM_DIAGRAM):     *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
23083      
23084      %macro EM_SAVEXT_MAIN;
23085      
23086         %if %upcase("&EM_ACTION") = "CREATE" %then %do;
23087             filename _create catalog 'sashelp.emutil.savext_create.source';
23088             %include _create;
23089             filename _create;
23090             %EM_SAVEXT_CREATE;
23091         %end;
23092         %else
23093         %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
23094             filename _train catalog 'sashelp.emutil.savext_train.source';
23095             %include _train;
23096             filename _train;
23097             %EM_SAVEXT_TRAIN;
23098         %end;
23099      
23100      %mend EM_SAVEXT_MAIN;
23101      
23102      %EM_SAVEXT_MAIN;
MPRINT(EM_SAVEXT_MAIN):   filename _train catalog 'sashelp.emutil.savext_train.source';
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
23103     +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
MPRINT(EM_SAVEXT_MAIN):   *** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
23105     +%macro EM_SAVEXT_TRAIN;
23107     +    *** IMPORT UTILITY MACROS;
23109     +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
23110     +    %include _savutil;
23111     +    filename _savutil;
23113     +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
23114     +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
23115     +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
23117     +    data _null_;
23118     +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
23119     +        _i=0;
23121     +        *** TRAIN;
23122     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
23123     +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
23124     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
23125     +        %end;
23127     +        *** VALIDATE;
23128     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
23129     +            _i=_i+1;
23130     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
23131     +        %end;
23133     +        *** TEST;
23134     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
23135     +            _i=_i+1;
23136     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
23137     +        %end;
23139     +        *** SCORE;
23140     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
23141     +            _i=_i+1;
23142     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
23143     +        %end;
23145     +        *** TRANSACTION;
23146     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
23147     +            _i=_i+1;
23148     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
23149     +        %end;
23151     +        *** ESTABLISH NUMBER OF SETS TO SAVE;
23152     +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
23154     +    run;
23156     +    *** EXIT IF NO PARTITIONS TO SAVE;
23158     +    %if ^(&_NUM_SAVE_SETS) %then %do;
23159     +        %put &EM_CODEBAR;
23160     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
23161     +        %put &WARNING;
23162     +        %put &EM_CODEBAR;
23163     +        %goto quit;
23164     +    %end;
23166     +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
23167     +    *** REVERT TO DEFAULT NAME;
23169     +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
23170     +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
23171     +        %let _BAD_CHAR_FLAG= 0;
23172     +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
23173     +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
23174     +                %then %let _BAD_CHAR_FLAG= 1;
23175     +        %end;
23176     +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
23178     +        %if &_BAD_CHAR_FLAG %then %do;
23179     +           %put &EM_CODEBAR;
23180     +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
23181     +           %put &WARNING;
23182     +           %put &EM_CODEBAR;
23183     +           *** REVERT TO DEFAULT NAME;
23184     +           %let EM_PROPERTY_NAME = em_save;
23185     +        %end;
23186     +    %end;
23187     +    *** ACCOUNT FOR LIB ISSUES;
23189     +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
23190     +        %put &EM_CODEBAR;
23191     +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
23192     +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
23193     +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
23194     +    %end;
23197     +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
23198     +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
23199     +        %let EM_PROPERTY_LIB = _em_save;
23200     +    %end;
23202     +    *** CHECK FOR EXISTING LIB;
23204     +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
23205     +    %if &_rc %then %do;
23206     +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
23207     +        %put &EM_CODEBAR;
23208     +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
23209     +        %put &ERROR1;
23210     +        %put &EM_CODEBAR;
23211     +        %goto quit;
23212     +    %end;
23214     +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
23215     +                                                                            /* AND IN OTHERS AS "" */
23216     +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
23218     +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
23220     +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
23221     +        %do _i=1 %to &_num_save_sets;
23222     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
23223     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
23224     +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
23225     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
23226     +                %put &WARNING;
23227     +                %put &EM_CODEBAR;
23228     +                %goto continue_sas_loop;
23229     +            %end;
23230     +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
23231     +            %continue_sas_loop:
23232     +        %end;
23233     +    %end;
23234     +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
23235     +        %do _i=1 %to &_num_save_sets;
23236     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
23237     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
23238     +                %put &EM_CODEBAR;
23239     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
23240     +                %put &WARNING;
23241     +                %put &EM_CODEBAR;
23242     +                %goto continue_pxpt_loop;
23243     +            %end;
23244     +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
23245     +            %continue_pxpt_loop:
23246     +        %end;
23247     +    %end;
23249     +    *** OUTPUT ****************************************************************;
23251     +    %if %sysfunc(exist(_save_output_temp)) %then %do;
23253     +        %EM_GETNAME(key=SAVEOUT, type=DATA);
23255     +        *** SAVE OUTPUT DATA TO PROJECT;
23257     +        data &EM_USER_SAVEOUT;
23258     +            set _save_output_temp;
23259     +            label
23260     +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
23261     +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
23262     +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
23263     +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
23264     +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
23265     +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
23266     +                %end;
23267     +                ;
23268     +        run;
23270     +        *** PRINT TO OUTPUT;
23272     +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
23273     +        proc print data=&EM_USER_SAVEOUT label noobs; run;
23274     +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
23275     +        title;
23277     +    %end;
23279     +    *** SAVE FORMATS **********************************************************;
23281     +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
23283     +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
23284     +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
23285     +        ("&EM_PROPERTY_REPLACE"="N"))
23286     +            %then %do;
23287     +                %put &EM_CODEBAR;
23288     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
23289     +                %put &WARNING;
23290     +                %put &EM_CODEBAR;
23291     +                %goto quit;
23292     +            %end;
23294     +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
23295     +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
23296     +        ("&EM_PROPERTY_REPLACE"="N"))
23297     +           %then %do;
23298     +                %put &EM_CODEBAR;
23299     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
23300     +                %put &WARNING;
23301     +                %put &EM_CODEBAR;
23302     +                %goto quit;
23303     +            %end;
23305     +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
23306     +    *** CONTINGENT ON FORMATS EXISTING;
23307     +    *** PARSE NODE VARIABLE SET FOR FORMATS;
23309     +    %let _FORMAT_FLAG = 0;
23310     +    data _formats;
23311     +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
23312     +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
23313     +        format = tranwrd(format, '.', '');
23314     +        if indexc(format, '$') then fmttype = 'C';
23315     +        else fmttype = 'N';
23316     +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
23317     +    run;
23318     +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
23319     +    proc delete data=_formats; run;
23321     +    *** HOUSEKEEPING **********************************************************;
23323     +    %quit:
23325     +    %if ^(%sysfunc(libref(_em_save))) %then %do;
23326     +        libname &EM_PROPERTY_LIB clear;
23327     +    %end;
23329     +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
23330     +        proc delete data=_save_output_temp; run;
23331     +    %end;
23333     +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_MAIN):   filename _train;
NOTE: Fileref _TRAIN has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** IMPORT UTILITY MACROS;
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil catalog 'sashelp.emutil.savext_macros.source';
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
23334     +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** UTILITY MACROS FOR EMSAVE NODE ********************************************;
23336     +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
23337     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23339     +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
23341     +    *** CHECK SAS SET NAME LENGTH;
23343     +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
23344     +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
23345     +    %end;
23346     +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
23348     +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
23349     +        %put &EM_CODEBAR;
23350     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
23351     +        %put &WARNING;
23352     +        %put &EM_CODEBAR;
23353     +        *** REVERTING TO DEFAULT NAME;
23354     +        %let EM_PROPERTY_NAME = em_save;
23355     +    %end;
23357     +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
23359     +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
23360     +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23361     +        %put &EM_CODEBAR;
23362     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
23363     +        %put &WARNING;
23364     +        %put &EM_CODEBAR;
23365     +        %goto quit;
23366     +    %end;
23368     +    *** WRITE SAVED DATA SET;
23370     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
23372     +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
23373     +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
23374     +        keep %EM_SAVEXT_VARS;
23375     +    run;
23377     +    *** WRITE RESULTS *********************************************************;
23378     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
23380     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
23381     +    %if &_dsid %then %do;
23382     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
23383     +        %let _rc=%sysfunc(close(&_dsid));
23384     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
23385     +            proc sql noprint;
23386     +                select count(*) into: _SAVE_NOBS
23387     +                from &_SAVE_SET;
23388     +            ;
23389     +            quit;
23390     +        %end;
23391     +    %end;
23392     +    %else %do;
23393     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
23394     +        %put &EM_CODEBAR;
23395     +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
23396     +        %put &ERROR2;
23397     +        %put &EM_CODEBAR;
23398     +        %goto quit;
23399     +    %end;
23401     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
23402     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
23403     +    %end;
23405     +    data _save_output_temp_record;
23406     +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
23407     +        vars=left("&EM_NUM_SAVEXT_VARS");
23408     +        outnobs=left("&EM_PROPERTY_OUTOBS");
23409     +        nobs=left("&_SAVE_NOBS");
23410     +        lib= left("&EM_PROPERTY_LIB");
23411     +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
23412     +    run;
23414     +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
23415     +    proc delete data=_save_output_temp_record; run;
23417     +    *** HOUSEKEEPING **********************************************************;
23419     +    %quit:
23421     +    %if %symexist(_SAVE_NOBS) %then %do;
23422     +        data _null_;
23423     +            call symdel('_SAVE_NOBS', 'NOWARN');
23424     +        run;
23425     +    %end;
23427     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
23428     +        data _null_;
23429     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
23430     +        run;
23431     +    %end;
23433     +%mend EM_SAVEXT_SAS;
23435     +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
23436     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23438     +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
23440     +    *** ACCOUNT FOR DEFAULT DIR;
23442     +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
23444     +    *** CHECK JMP NAME LENGTH;
23446     +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
23447     +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
23448     +    %end;
23449     +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
23451     +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
23452     +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
23453     +            %put &EM_CODEBAR;
23454     +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
23455     +            %put &WARNING;
23456     +            %put &EM_CODEBAR;
23457     +            *** REVERTING TO DEFAULT NAME;
23458     +            %let EM_PROPERTY_NAME = em_save;
23459     +        %end;
23460     +    %end;
23462     +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
23464     +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
23466     +    *** CHECK REPLACE CONSTRAINT;
23468     +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23469     +        %put &EM_CODEBAR;
23470     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
23471     +        %put &WARNING;
23472     +        %put &EM_CODEBAR;
23473     +        %goto quit;
23474     +    %end;
23475     +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23476     +        %let _REPLACE= ;
23477     +    %end;
23478     +    %else %do;
23479     +        %let _REPLACE=replace;
23480     +    %end;
23482     +    *** EXCEL 2010 LIMITATIONS;
23483     +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
23485     +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
23486     +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
23487     +    %end;
23488     +    %else %let _EXCEL_MAX_ROWS= 1048575;
23490     +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
23491     +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
23492     +    %end;
23493     +    %else %let _EXCEL_MAX_COLS=16384;
23495     +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
23497     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
23498     +    %if &_dsid %then %do;
23499     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
23500     +        %let _rc=%sysfunc(close(&_dsid));
23501     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
23502     +            proc sql noprint;
23503     +                select count(*) into: _SAVE_NOBS
23504     +                from &_SAVE_SET;
23505     +                ;
23506     +            quit;
23507     +        %end;
23508     +    %end;
23509     +    %else %do;
23510     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
23511     +        %put &EM_CODEBAR;
23512     +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
23513     +        %put &ERROR3;
23514     +        %put &EM_CODEBAR;
23515     +        %goto quit;
23516     +    %end;
23518     +    *** CHECK EXCEL FILE SIZE;
23520     +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
23521     +        %put &EM_CODEBAR;
23522     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
23523     +        %put &WARNING;
23524     +        %put &EM_CODEBAR;
23525     +    %end;
23527     +    *** EXECUTE EXPORT ********************************************************;
23528     +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
23530     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
23532     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
23533     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
23534     +    %end;
23536     +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
23538     +        *** SPECIAL CONDITION FOR TAB PROPERTY;
23540     +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
23542     +        data _temp_save_view /view=_temp_save_view;
23543     +            set &_SAVE_SET;
23544     +            keep %EM_SAVEXT_VARS;
23545     +        run;
23547     +        %let SYSCC=0;
23548     +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
23549     +        run;
23550     +        quit;
23552     +    %end;
23553     +    %else %do;
23555     +        %let SYSCC=0;
23556     +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
23557     +        run;
23558     +        quit;
23560     +    %end;
23562     +    %if (^&SYSCC=0) %then %do;
23563     +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
23564     +        %put &EM_CODEBAR;
23565     +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
23566     +        %put &ERROR4;
23567     +        %put &EM_CODEBAR;
23568     +        %goto quit;
23569     +    %end;
23571     +    *** WRITE RESULTS *********************************************************;
23572     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
23574     +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
23575     +        data _save_output_temp_record;
23576     +            length name $255 nobs $20 outnobs $20 vars $20;
23577     +            vars=left("&EM_NUM_SAVEXT_VARS");
23578     +            outnobs=left("&EM_PROPERTY_OUTOBS");
23579     +            nobs=left("&_SAVE_NOBS");
23580     +            name=left("&_OUT_FILE_NAME");
23581     +        run;
23582     +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
23583     +        proc delete data=_save_output_temp_record; run;
23584     +    %end;
23585     +    %else %do;
23586     +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
23587     +        %put &EM_CODEBAR;
23588     +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
23589     +        %put &ERROR5;
23590     +        %put &EM_CODEBAR;
23591     +        %goto quit;
23592     +    %end;
23594     +    *** HOUSEKEEPING **********************************************************;
23596     +    %quit:
23598     +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
23600     +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
23601     +        proc datasets lib=work memtype=view nolist;
23602     +            delete _temp_save_view;
23603     +        run;
23604     +        quit;
23605     +    %end;
23607     +    %if %symexist(_SAVE_NOBS) %then %do;
23608     +        data _null_;
23609     +            call symdel('_SAVE_NOBS', 'NOWARN');
23610     +        run;
23611     +    %end;
23613     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
23614     +        data _null_;
23615     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
23616     +        run;
23617     +    %end;
23619     +%mend EM_SAVEXT_PXPT;
23621     +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
23622     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23624     +%macro EM_SAVEXT_CATALOG(_FORMATS);
23626     +    *** SORT AND REMOVE DUPLICATES;
23628     +    proc sort data=&_FORMATS nodupkey;
23629     +        by format;
23630     +    run;
23631     +    quit;
23633     +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
23635     +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
23636     +        out=_formats2(rename=(fmtname=format));
23637     +        by fmtname;
23638     +    run;
23639     +    quit;
23641     +    *** MERGE SAS FORMATS WITH LOCATION;
23643     +    data &_FORMATS;
23644     +        merge &_FORMATS(in=_a) _formats2(in=_b);
23645     +        by format;
23646     +        if _a and _b then output;
23647     +    run;
23649     +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
23651     +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
23652     +    data _null_;
23653     +        set _formats_content_temp (obs=1);
23654     +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
23655     +        else call symput('_USER_FORMATS_FLAG','0');
23656     +    run;
23657     +    %if (^&_USER_FORMATS_FLAG) %then %do;
23658     +        %put &EM_CODEBAR;
23659     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
23660     +        %put &WARNING;
23661     +        %put &EM_CODEBAR;
23662     +        %goto quit;
23663     +    %end;
23665     +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
23667     +    proc sort data=&_FORMATS;
23668     +        by libname memname;
23669     +    run;
23670     +    quit;
23672     +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
23673     +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
23675     +    data _null_;
23676     +        set &_FORMATS end=eof;
23677     +        by libname memname;
23678     +        if first.libname or first.memname then do;
23679     +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
23680     +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
23681     +            call execute('select ');
23682     +        end;
23683     +        if strip(fmttype) eq 'C' then do;
23684     +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
23685     +        end;
23686     +        else call execute(' '||strip(format)||'.format');
23687     +        if last.libname or last.memname then do;
23688     +            call execute(';');
23689     +            call execute('run;');
23690     +        end;
23691     +        if eof then call execute('quit;');
23692     +    run;
23694     +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
23695     +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
23696     +    %end;
23697     +    %else %do;
23698     +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
23699     +    %end;
23701     +    *** HOUSEKEEPING **********************************************************;
23703     +    proc datasets lib=work memtype=catalog nolist;
23704     +        delete &EM_PROPERTY_NAME._FORMATS;
23705     +    run;
23706     +    quit;
23708     +    %quit:
23710     +    proc delete data=_formats_content_temp; run;
23711     +    proc delete data=_formats2; run;
23713     +%mend EM_SAVEXT_CATALOG;
23715     +*** FIND VARIABLES TO KEEP ****************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FIND VARIABLES TO KEEP ****************************************************;
23716     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23718     +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
23720     +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
23722     +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
23724     +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
23725     +        proc sort data=_input_vars; by name; run;
23727     +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
23729     +        proc sort data=&EM_DATA_VARIABLESET
23730     +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
23731     +            by name;
23732     +        run;
23734     +        data _em_savext_vars;
23735     +            merge _input_vars(in=_a) _train_vars(in=_b);
23736     +            by name;
23737     +            keep name;
23738     +            if _a and _b then output;
23739     +        run;
23741     +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
23743     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
23745     +        *** HOUSEKEEPING;
23747     +        proc delete data=_input_vars; run;
23748     +        proc delete data=_train_vars; run;
23749     +        proc delete data=_em_savext_vars; run;
23751     +    %end;
23752     +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
23754     +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
23755     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
23756     +        proc delete data=_em_savext_vars; run;
23758     +    %end;
23760     +%mend EM_SAVEXT_GET_VARS;
23762     +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECKS IF A SET OR VIEW EXISTS ********************************************;
23763     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23765     +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
23767     +    %if (%sysfunc(exist(&_DATASET)) or
23768     +        %sysfunc(exist(&_DATASET, VIEW))) and
23769     +        "&_DATASET" ne "" %then %do;
23770     +            %let _rc=1;
23771     +    %end;
23772     +    %else %do;
23773     +            %let _rc=0;
23774     +    %end;
23776     +    &_rc.
23778     +%mend EM_SAVEXT_SET_EXISTS;
23780     +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
MPRINT(EM_SAVEXT_TRAIN):   *** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
23781     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23783     +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
23785     +    _save_set="&_DATASET";
23786     +    _save_role="&_ROLE";
23787     +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
23788     +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
23789     +    call symput(_save_set_index, _save_set);
23790     +    call symput(_save_role_index, _save_role);
23792     +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil;
NOTE: Fileref _SAVUTIL has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
MPRINT(EM_SAVEXT_TRAIN):   *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
MPRINT(EM_SAVEXT_TRAIN):   *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
MPRINT(EM_SAVEXT_TRAIN):   data _null_;
MPRINT(EM_SAVEXT_TRAIN):   length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
MPRINT(EM_SAVEXT_TRAIN):   _i=0;
MPRINT(EM_SAVEXT_TRAIN):   *** TRAIN;
MPRINT(EM_SAVEXT_TRAIN):   _i=_i+1;
MPRINT(EM_SAVEXT_REGISTER):   _save_set="EMWS1.Score4_TRAIN";
MPRINT(EM_SAVEXT_REGISTER):   _save_role="TRAIN";
MPRINT(EM_SAVEXT_REGISTER):   _save_set_index=cats('_save_set', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   _save_role_index=cats('_save_role', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_set_index, _save_set);
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_role_index, _save_role);
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** VALIDATE;
MPRINT(EM_SAVEXT_TRAIN):   *** TEST;
MPRINT(EM_SAVEXT_TRAIN):   *** SCORE;
MPRINT(EM_SAVEXT_TRAIN):   _i=_i+1;
MPRINT(EM_SAVEXT_REGISTER):   _save_set="EMWS1.Score4_SCORE";
MPRINT(EM_SAVEXT_REGISTER):   _save_role="SCORE";
MPRINT(EM_SAVEXT_REGISTER):   _save_set_index=cats('_save_set', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   _save_role_index=cats('_save_role', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_set_index, _save_set);
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_role_index, _save_role);
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** TRANSACTION;
MPRINT(EM_SAVEXT_TRAIN):   *** ESTABLISH NUMBER OF SETS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** EXIT IF NO PARTITIONS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
MPRINT(EM_SAVEXT_TRAIN):   *** REVERT TO DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR LIB ISSUES;
MPRINT(EM_SAVEXT_TRAIN):   libname _em_save "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3";
NOTE: Libref _EM_SAVE was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\EMSave3
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR EXISTING LIB;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** CALL UTILITY MACROS TO SAVE SETS *************************************;
MPRINT(EM_SAVEXT_GET_VARS):   *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
MPRINT(EM_SAVEXT_GET_VARS):   proc contents data=EMWS1.Score4_TRAIN out=_input_vars(keep=name) noprint;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: The data set WORK._INPUT_VARS has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 41 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** EXCLUDE REJECTED OR UNUSED VARIABLES;
MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=EMWS1.EMSave3_VariableSet (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 9 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 9 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   data _em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   merge _input_vars(in=_a) _train_vars(in=_b);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   keep name;
MPRINT(EM_SAVEXT_GET_VARS):   if _a and _b then output;
MPRINT(EM_SAVEXT_GET_VARS):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 9 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 9 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set _em_savext_vars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(name))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Saturday, 23 December 2017 09:48:37,
      Last Modified=Saturday, 23 December 2017 09:48:37,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD1352_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=             5KB,
      File Size (bytes)=5120

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 65.
NOTE: There were 9 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
23798     +%macro EM_SAVEXT_VARS;
23799     +"CustID"n "Distance"n "EM_SEGMENT"n "_SEGMENT_"n "newPremHealth"n
23800     +"newPremHousehold"n "newPremLife"n "newPremMotor"n "newPremWork"n
23801     +%mend EM_SAVEXT_VARS;
23802     +%global EM_NUM_SAVEXT_VARS;
23803     +%let EM_NUM_SAVEXT_VARS = 9 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_SAVEXT_GET_VARS):  ;
MPRINT(EM_SAVEXT_GET_VARS):   *** HOUSEKEEPING;
MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_train_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_PXPT):   *** ACCOUNT FOR DEFAULT DIR;
MPRINT(EM_SAVEXT_PXPT):   *** CHECK JMP NAME LENGTH;
MPRINT(EM_SAVEXT_PXPT):   *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
MPRINT(EM_SAVEXT_PXPT):   *** CHECK REPLACE CONSTRAINT;
MPRINT(EM_SAVEXT_PXPT):   *** EXCEL 2010 LIMITATIONS;
MPRINT(EM_SAVEXT_PXPT):   *** CAN BE OVERRIDDEN BY STARTUP CODE;
MPRINT(EM_SAVEXT_PXPT):   *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
MPRINT(EM_SAVEXT_PXPT):   proc sql noprint;
MPRINT(EM_SAVEXT_PXPT):   select count(*) into: _SAVE_NOBS from EMWS1.Score4_TRAIN;
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.FILTER2_TRAIN.
NOTE: View EMWS1.SCORE4_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
      
NOTE: There were 9889 observations read from the data set EMWS1.CLUS3_TRAIN.
MPRINT(EM_SAVEXT_PXPT):   ;
MPRINT(EM_SAVEXT_PXPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_SAVEXT_PXPT):   *** CHECK EXCEL FILE SIZE;
MPRINT(EM_SAVEXT_PXPT):   *** EXECUTE EXPORT ********************************************************;
MPRINT(EM_SAVEXT_PXPT):   *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
MPRINT(EM_SAVEXT_PXPT):   *** SPECIAL CONDITION FOR TAB PROPERTY;
MPRINT(EM_SAVEXT_PXPT):   data _temp_save_view /view=_temp_save_view;
MPRINT(EM_SAVEXT_PXPT):   set EMWS1.Score4_TRAIN;
MPRINT(EM_SAVEXT_PXPT):   keep
MPRINT(EM_SAVEXT_VARS):   "CustID"n "Distance"n "EM_SEGMENT"n "_SEGMENT_"n "newPremHealth"n "newPremHousehold"n "newPremLife"n
MPRINT(EM_SAVEXT_PXPT):   "newPremMotor"n "newPremWork"n;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA STEP view saved on file WORK._TEMP_SAVE_VIEW.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.SCORE4_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_SAVEXT_PXPT):   proc export data=_temp_save_view(obs=MAX) outfile="C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv" replace dbms=CSV;
MPRINT(EM_SAVEXT_PXPT):   ADLM;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.FILTER2_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.CLUS3_TRAIN.
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
      
NOTE: There were 9889 observations read from the data set EMWS1.SCORE4_TRAIN.
23804       /**********************************************************************
23805       *   PRODUCT:   SAS
23806       *   VERSION:   9.4
23807       *   CREATOR:   External File Interface
23808       *   DATE:      23DEC17
23809       *   DESC:      Generated SAS Datastep Code
23810       *   TEMPLATE SOURCE:  (None Specified.)
23811       ***********************************************************************/
23812          data _null_;
MPRINT(EM_SAVEXT_PXPT):   data _null_;
23813          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
23814          %let _EFIREC_ = 0;     /* clear export record count macro variable */
23815          file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv' delimiter=',' DSD DROPOVER lrecl=32767;
MPRINT(EM_SAVEXT_PXPT):   file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv' delimiter=',' DSD DROPOVER lrecl=32767;
23816          if _n_ = 1 then        /* write column names or labels */
23817           do;
MPRINT(EM_SAVEXT_PXPT):   if _n_ = 1 then do;
23818             put
23819                "CustID"
23820             ','
23821                "newPremHealth"
23822             ','
23823                "newPremLife"
23824             ','
23825                "newPremMotor"
23826             ','
23827                "newPremWork"
23828             ','
23829                "newPremHousehold"
23830             ','
23831                "_SEGMENT_"
23832             ','
23833                "Distance"
23834             ','
23835                "EM_SEGMENT"
23836             ;
MPRINT(EM_SAVEXT_PXPT):   put "CustID" ',' "newPremHealth" ',' "newPremLife" ',' "newPremMotor" ',' "newPremWork" ',' "newPremHousehold" ',' "_SEGMENT_" ',' "Distance" ',' "EM_SEGMENT" ;
23837           end;
MPRINT(EM_SAVEXT_PXPT):   end;
23838         set  _TEMP_SAVE_VIEW(obs=MAX)   end=EFIEOD;
MPRINT(EM_SAVEXT_PXPT):   set _TEMP_SAVE_VIEW(obs=MAX) end=EFIEOD;
23839             format CustID best12. ;
MPRINT(EM_SAVEXT_PXPT):   format CustID best12. ;
23840             format newPremHealth best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremHealth best12. ;
23841             format newPremLife best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremLife best12. ;
23842             format newPremMotor best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremMotor best12. ;
23843             format newPremWork best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremWork best12. ;
23844             format newPremHousehold best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremHousehold best12. ;
23845             format _SEGMENT_ best12. ;
MPRINT(EM_SAVEXT_PXPT):   format _SEGMENT_ best12. ;
23846             format Distance best12. ;
MPRINT(EM_SAVEXT_PXPT):   format Distance best12. ;
23847             format EM_SEGMENT best12. ;
MPRINT(EM_SAVEXT_PXPT):   format EM_SEGMENT best12. ;
23848           do;
MPRINT(EM_SAVEXT_PXPT):   do;
23849             EFIOUT + 1;
MPRINT(EM_SAVEXT_PXPT):   EFIOUT + 1;
23850             put CustID @;
MPRINT(EM_SAVEXT_PXPT):   put CustID @;
23851             put newPremHealth @;
MPRINT(EM_SAVEXT_PXPT):   put newPremHealth @;
23852             put newPremLife @;
MPRINT(EM_SAVEXT_PXPT):   put newPremLife @;
23853             put newPremMotor @;
MPRINT(EM_SAVEXT_PXPT):   put newPremMotor @;
23854             put newPremWork @;
MPRINT(EM_SAVEXT_PXPT):   put newPremWork @;
23855             put newPremHousehold @;
MPRINT(EM_SAVEXT_PXPT):   put newPremHousehold @;
23856             put _SEGMENT_ @;
MPRINT(EM_SAVEXT_PXPT):   put _SEGMENT_ @;
23857             put Distance @;
MPRINT(EM_SAVEXT_PXPT):   put Distance @;
23858             put EM_SEGMENT ;
MPRINT(EM_SAVEXT_PXPT):   put EM_SEGMENT ;
23859             ;
MPRINT(EM_SAVEXT_PXPT):   ;
23860           end;
MPRINT(EM_SAVEXT_PXPT):   end;
23861          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(EM_SAVEXT_PXPT):   if _ERROR_ then call symputx('_EFIERR_',1);
23862          if EFIEOD then call symputx('_EFIREC_',EFIOUT);
MPRINT(EM_SAVEXT_PXPT):   if EFIEOD then call symputx('_EFIREC_',EFIOUT);
23863          run;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: The file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv' is:
      Filename=C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23 December 2017 09:48:38 o'clock,
      Create Time=23 December 2017 09:48:38 o'clock

NOTE: 9890 records were written to the file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv'.
      The minimum record length was 36.
      The maximum record length was 104.
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.FILTER2_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.CLUS3_TRAIN.
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
      
NOTE: There were 9889 observations read from the data set EMWS1.SCORE4_TRAIN.
NOTE: There were 9889 observations read from the data set WORK._TEMP_SAVE_VIEW.
NOTE: DATA statement used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds
      

9889 records created in C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv from _TEMP_SAVE_VIEW.
  
  
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.FILTER2_TRAIN.
NOTE: There were 9889 observations read from the data set EMWS1.CLUS3_TRAIN.
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.96 seconds
      cpu time            0.93 seconds
      
NOTE: There were 9889 observations read from the data set EMWS1.SCORE4_TRAIN.
NOTE: "C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv" file was successfully created.
NOTE: PROCEDURE EXPORT used (Total process time):
      real time           1.21 seconds
      cpu time            1.18 seconds
      

MPRINT(EM_SAVEXT_PXPT):    ;
MPRINT(EM_SAVEXT_PXPT):   quit;
MPRINT(EM_SAVEXT_PXPT):   *** WRITE RESULTS *********************************************************;
MPRINT(EM_SAVEXT_PXPT):   *** CONTINGENT ON SAVED FILE EXISTING *************************************;
MPRINT(EM_SAVEXT_PXPT):   data _save_output_temp_record;
MPRINT(EM_SAVEXT_PXPT):   length name $255 nobs $20 outnobs $20 vars $20;
MPRINT(EM_SAVEXT_PXPT):   vars=left("9");
MPRINT(EM_SAVEXT_PXPT):   outnobs=left("MAX");
MPRINT(EM_SAVEXT_PXPT):   nobs=left("    9889");
MPRINT(EM_SAVEXT_PXPT):   name=left("C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_TRAIN.csv");
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   proc append base=_save_output_temp data=_save_output_temp_record force;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD to WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 4 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_PXPT):   quit;
MPRINT(EM_SAVEXT_PXPT):   proc delete data=_save_output_temp_record;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_PXPT):   proc datasets lib=work memtype=view nolist;
MPRINT(EM_SAVEXT_PXPT):   delete _temp_save_view;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Deleting WORK._TEMP_SAVE_VIEW (memtype=VIEW).
MPRINT(EM_SAVEXT_PXPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   data _null_;
MPRINT(EM_SAVEXT_PXPT):   call symdel('_SAVE_NOBS', 'NOWARN');
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   data _null_;
MPRINT(EM_SAVEXT_PXPT):   call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_GET_VARS):   *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
MPRINT(EM_SAVEXT_GET_VARS):   proc contents data=EMWS1.Score4_SCORE out=_input_vars(keep=name) noprint;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: The data set WORK._INPUT_VARS has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 41 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** EXCLUDE REJECTED OR UNUSED VARIABLES;
MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=EMWS1.EMSave3_VariableSet (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 9 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 9 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   data _em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   merge _input_vars(in=_a) _train_vars(in=_b);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   keep name;
MPRINT(EM_SAVEXT_GET_VARS):   if _a and _b then output;
MPRINT(EM_SAVEXT_GET_VARS):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 9 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 9 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set _em_savext_vars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(name))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday, 23 December 2017 09:48:37,
      Last Modified=Saturday, 23 December 2017 09:48:37,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD1352_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            17KB,
      File Size (bytes)=17408

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 65.
NOTE: There were 9 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
23864     +%macro EM_SAVEXT_VARS;
23865     +"CustID"n "Distance"n "EM_SEGMENT"n "_SEGMENT_"n "newPremHealth"n
23866     +"newPremHousehold"n "newPremLife"n "newPremMotor"n "newPremWork"n
23867     +%mend EM_SAVEXT_VARS;
23868     +%global EM_NUM_SAVEXT_VARS;
23869     +%let EM_NUM_SAVEXT_VARS = 9 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_SAVEXT_GET_VARS):  ;
MPRINT(EM_SAVEXT_GET_VARS):   *** HOUSEKEEPING;
MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_train_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_PXPT):   *** ACCOUNT FOR DEFAULT DIR;
MPRINT(EM_SAVEXT_PXPT):   *** CHECK JMP NAME LENGTH;
MPRINT(EM_SAVEXT_PXPT):   *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
MPRINT(EM_SAVEXT_PXPT):   *** CHECK REPLACE CONSTRAINT;
MPRINT(EM_SAVEXT_PXPT):   *** EXCEL 2010 LIMITATIONS;
MPRINT(EM_SAVEXT_PXPT):   *** CAN BE OVERRIDDEN BY STARTUP CODE;
MPRINT(EM_SAVEXT_PXPT):   *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
MPRINT(EM_SAVEXT_PXPT):   *** CHECK EXCEL FILE SIZE;
MPRINT(EM_SAVEXT_PXPT):   *** EXECUTE EXPORT ********************************************************;
MPRINT(EM_SAVEXT_PXPT):   *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
MPRINT(EM_SAVEXT_PXPT):   *** SPECIAL CONDITION FOR TAB PROPERTY;
MPRINT(EM_SAVEXT_PXPT):   data _temp_save_view /view=_temp_save_view;
MPRINT(EM_SAVEXT_PXPT):   set EMWS1.Score4_SCORE;
MPRINT(EM_SAVEXT_PXPT):   keep
MPRINT(EM_SAVEXT_VARS):   "CustID"n "Distance"n "EM_SEGMENT"n "_SEGMENT_"n "newPremHealth"n "newPremHousehold"n "newPremLife"n
MPRINT(EM_SAVEXT_PXPT):   "newPremMotor"n "newPremWork"n;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA STEP view saved on file WORK._TEMP_SAVE_VIEW.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_PXPT):   proc export data=_temp_save_view(obs=MAX) outfile="C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv" replace dbms=CSV;
MPRINT(EM_SAVEXT_PXPT):   ADLM;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 407 observations read from the data set EMWS1.SCORE4_SCORE.
23870       /**********************************************************************
23871       *   PRODUCT:   SAS
23872       *   VERSION:   9.4
23873       *   CREATOR:   External File Interface
23874       *   DATE:      23DEC17
23875       *   DESC:      Generated SAS Datastep Code
23876       *   TEMPLATE SOURCE:  (None Specified.)
23877       ***********************************************************************/
23878          data _null_;
MPRINT(EM_SAVEXT_PXPT):   data _null_;
23879          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
23880          %let _EFIREC_ = 0;     /* clear export record count macro variable */
23881          file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv' delimiter=',' DSD DROPOVER lrecl=32767;
MPRINT(EM_SAVEXT_PXPT):   file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv' delimiter=',' DSD DROPOVER lrecl=32767;
23882          if _n_ = 1 then        /* write column names or labels */
23883           do;
MPRINT(EM_SAVEXT_PXPT):   if _n_ = 1 then do;
23884             put
23885                "CustID"
23886             ','
23887                "newPremHealth"
23888             ','
23889                "newPremLife"
23890             ','
23891                "newPremMotor"
23892             ','
23893                "newPremWork"
23894             ','
23895                "newPremHousehold"
23896             ','
23897                "_SEGMENT_"
23898             ','
23899                "Distance"
23900             ','
23901                "EM_SEGMENT"
23902             ;
MPRINT(EM_SAVEXT_PXPT):   put "CustID" ',' "newPremHealth" ',' "newPremLife" ',' "newPremMotor" ',' "newPremWork" ',' "newPremHousehold" ',' "_SEGMENT_" ',' "Distance" ',' "EM_SEGMENT" ;
23903           end;
MPRINT(EM_SAVEXT_PXPT):   end;
23904         set  _TEMP_SAVE_VIEW(obs=MAX)   end=EFIEOD;
MPRINT(EM_SAVEXT_PXPT):   set _TEMP_SAVE_VIEW(obs=MAX) end=EFIEOD;
23905             format CustID best12. ;
MPRINT(EM_SAVEXT_PXPT):   format CustID best12. ;
23906             format newPremHealth best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremHealth best12. ;
23907             format newPremLife best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremLife best12. ;
23908             format newPremMotor best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremMotor best12. ;
23909             format newPremWork best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremWork best12. ;
23910             format newPremHousehold best12. ;
MPRINT(EM_SAVEXT_PXPT):   format newPremHousehold best12. ;
23911             format _SEGMENT_ best12. ;
MPRINT(EM_SAVEXT_PXPT):   format _SEGMENT_ best12. ;
23912             format Distance best12. ;
MPRINT(EM_SAVEXT_PXPT):   format Distance best12. ;
23913             format EM_SEGMENT best12. ;
MPRINT(EM_SAVEXT_PXPT):   format EM_SEGMENT best12. ;
23914           do;
MPRINT(EM_SAVEXT_PXPT):   do;
23915             EFIOUT + 1;
MPRINT(EM_SAVEXT_PXPT):   EFIOUT + 1;
23916             put CustID @;
MPRINT(EM_SAVEXT_PXPT):   put CustID @;
23917             put newPremHealth @;
MPRINT(EM_SAVEXT_PXPT):   put newPremHealth @;
23918             put newPremLife @;
MPRINT(EM_SAVEXT_PXPT):   put newPremLife @;
23919             put newPremMotor @;
MPRINT(EM_SAVEXT_PXPT):   put newPremMotor @;
23920             put newPremWork @;
MPRINT(EM_SAVEXT_PXPT):   put newPremWork @;
23921             put newPremHousehold @;
MPRINT(EM_SAVEXT_PXPT):   put newPremHousehold @;
23922             put _SEGMENT_ @;
MPRINT(EM_SAVEXT_PXPT):   put _SEGMENT_ @;
23923             put Distance @;
MPRINT(EM_SAVEXT_PXPT):   put Distance @;
23924             put EM_SEGMENT ;
MPRINT(EM_SAVEXT_PXPT):   put EM_SEGMENT ;
23925             ;
MPRINT(EM_SAVEXT_PXPT):   ;
23926           end;
MPRINT(EM_SAVEXT_PXPT):   end;
23927          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(EM_SAVEXT_PXPT):   if _ERROR_ then call symputx('_EFIERR_',1);
23928          if EFIEOD then call symputx('_EFIREC_',EFIOUT);
MPRINT(EM_SAVEXT_PXPT):   if EFIEOD then call symputx('_EFIREC_',EFIOUT);
23929          run;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: The file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv' is:
      Filename=C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23 December 2017 09:48:39 o'clock,
      Create Time=23 December 2017 09:48:39 o'clock

NOTE: 408 records were written to the file 'C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv'.
      The minimum record length was 46.
      The maximum record length was 104.
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 407 observations read from the data set EMWS1.SCORE4_SCORE.
NOTE: There were 407 observations read from the data set WORK._TEMP_SAVE_VIEW.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

407 records created in C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv from _TEMP_SAVE_VIEW.
  
  
NOTE: View WORK._TEMP_SAVE_VIEW.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
      
NOTE: There were 407 observations read from the data set EMWS1.SCORE4_SCORE.
NOTE: "C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv" file was successfully created.
NOTE: PROCEDURE EXPORT used (Total process time):
      real time           0.26 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_SAVEXT_PXPT):    ;
MPRINT(EM_SAVEXT_PXPT):   quit;
MPRINT(EM_SAVEXT_PXPT):   *** WRITE RESULTS *********************************************************;
MPRINT(EM_SAVEXT_PXPT):   *** CONTINGENT ON SAVED FILE EXISTING *************************************;
MPRINT(EM_SAVEXT_PXPT):   data _save_output_temp_record;
MPRINT(EM_SAVEXT_PXPT):   length name $255 nobs $20 outnobs $20 vars $20;
MPRINT(EM_SAVEXT_PXPT):   vars=left("9");
MPRINT(EM_SAVEXT_PXPT):   outnobs=left("MAX");
MPRINT(EM_SAVEXT_PXPT):   nobs=left("407");
MPRINT(EM_SAVEXT_PXPT):   name=left("C:\Users\misil\Desktop\MIS\Results\product_clustered_data4_SCORE.csv");
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   proc append base=_save_output_temp data=_save_output_temp_record force;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD to WORK._SAVE_OUTPUT_TEMP.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: 1 observations added.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 2 observations and 4 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   quit;
MPRINT(EM_SAVEXT_PXPT):   proc delete data=_save_output_temp_record;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_PXPT):   proc datasets lib=work memtype=view nolist;
MPRINT(EM_SAVEXT_PXPT):   delete _temp_save_view;
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: Deleting WORK._TEMP_SAVE_VIEW (memtype=VIEW).
MPRINT(EM_SAVEXT_PXPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   data _null_;
MPRINT(EM_SAVEXT_PXPT):   call symdel('_SAVE_NOBS', 'NOWARN');
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_PXPT):   data _null_;
MPRINT(EM_SAVEXT_PXPT):   call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
MPRINT(EM_SAVEXT_PXPT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** OUTPUT ****************************************************************;
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE OUTPUT DATA TO PROJECT;
MPRINT(EM_SAVEXT_TRAIN):   data EMWS1.EMSave3_SAVEOUT;
MPRINT(EM_SAVEXT_TRAIN):   set _save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   label nobs= "Total Observations" outnobs= "Saved Observations" vars= "Number of Variables" name= "Output Location" ;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 2 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS1.EMSAVE3_SAVEOUT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** PRINT TO OUTPUT;
MPRINT(EM_SAVEXT_TRAIN):   title "Saved Data Properties";
MPRINT(EM_SAVEXT_TRAIN):   proc print data=EMWS1.EMSave3_SAVEOUT label noobs;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 2 observations read from the data set EMWS1.EMSAVE3_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SAVEOUT";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61959723691437;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   title;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE FORMATS **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK REPLACE CONSTRAINT FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
MPRINT(EM_SAVEXT_TRAIN):   *** CONTINGENT ON FORMATS EXISTING;
MPRINT(EM_SAVEXT_TRAIN):   *** PARSE NODE VARIABLE SET FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   data _formats;
MPRINT(EM_SAVEXT_TRAIN):   length format $32;
MPRINT(EM_SAVEXT_TRAIN):   set EMWS1.EMSave3_VariableSet(keep=format where=(format ne '')) end=eof;
MPRINT(EM_SAVEXT_TRAIN):   format = tranwrd(format, '.', '');
MPRINT(EM_SAVEXT_TRAIN):   if indexc(format, '$') then fmttype = 'C';
MPRINT(EM_SAVEXT_TRAIN):   else fmttype = 'N';
MPRINT(EM_SAVEXT_TRAIN):   if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 0 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_formats;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   libname _em_save clear;
NOTE: Libref _EM_SAVE has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EMSave3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23930      
23931      *------------------------------------------------------------*;
23932      * End TRAIN: EMSave3;
23933      *------------------------------------------------------------*;

23934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23935      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
23936      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23937      ;
MPRINT(EM_DIAGRAM):   ;
23938      ;
MPRINT(EM_DIAGRAM):   ;
23939      ;
MPRINT(EM_DIAGRAM):   ;
23940      ;
MPRINT(EM_DIAGRAM):   ;
23941      quit;
MPRINT(EM_DIAGRAM):   quit;
23942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23943      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
23944      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23945      /*; *"; *'; */
23946      ;
MPRINT(EM_DIAGRAM):   ;
23947      run;
MPRINT(EM_DIAGRAM):   run;
23948      quit;
MPRINT(EM_DIAGRAM):   quit;
23949      /* Reset EM Options */
23950      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
23951      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
23952      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
23953      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
23954      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
23955      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
