*------------------------------------------------------------*
User:                misil
Date:                24 December 2017
Time:                10:08:29 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "24 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:08:20 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                24 December 2017
Time:                10:08:20 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0QHUU_9 "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0QHUU_9 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "24 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:08:20 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "24 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:08:20 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22434      proc freq data=EMWS1.Score2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Score2_VariableSet noprint;
22435      table ROLE*LEVEL/out=WORK.Score2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Score2META;
22436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.SCORE2_VARIABLESET.
NOTE: The data set WORK.SCORE2META has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
22437      proc print data=WORK.Score2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Score2META label noobs;
22438      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22439      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22440      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22441      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22442      run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22443      title10;
MPRINT(EM_DIAGRAM):   title10;
22444      %let groupid =;
22445      %let endGroupid =;
22446      %let prescoreid =;
22447      %let idsTable =;
22448      %let hpdmTable =;
22449      %let lasthptm =;
22450      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22451      set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
22452      where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
22453      select(upcase(key));
MPRINT(EM_DIAGRAM):   select(upcase(key));
22454      when('LASTHPTM') call symput('lasthptm', DATA);
MPRINT(EM_DIAGRAM):   when('LASTHPTM') call symput('lasthptm', DATA);
22455      when('IDSTABLE') call symput('idsTable', DATA);
MPRINT(EM_DIAGRAM):   when('IDSTABLE') call symput('idsTable', DATA);
22456      when('HPDMSAMPLE') call symput('hpdmSample', DATA);
MPRINT(EM_DIAGRAM):   when('HPDMSAMPLE') call symput('hpdmSample', DATA);
22457      when('PRESCORECODE') call symput('prescoreId', DATA);
MPRINT(EM_DIAGRAM):   when('PRESCORECODE') call symput('prescoreId', DATA);
22458      when('ENDGROUP') call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   when('ENDGROUP') call symput('endGroupId', DATA);
22459      otherwise call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   otherwise call symput('groupId', DATA);
22460      end;
MPRINT(EM_DIAGRAM):   end;
22461      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_EMINFO.
      WHERE UPCASE(key) in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'HPDMSAMPLE', 'IDSTABLE', 'INDEXINFO', 'LASTHPTM', 'PRESCORECODE', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22462      %let em_rootkey=;
22463      %let em_keytype=;
22464      %let em_keylen=;
22465      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22466      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
22467      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
22468      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
22469      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
22470      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
22471      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
MPRINT(EM_DIAGRAM):    data EMWS1.Score2_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids3_DATA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 24DEC2017:10:08:21;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_Children 8;
MPRINT(EM_DIAGRAM):   label IMP_Children = 'Imputed Children';
MPRINT(EM_DIAGRAM):   IMP_Children = Children;
MPRINT(EM_DIAGRAM):   if missing(Children) then IMP_Children = 1;
MPRINT(EM_DIAGRAM):   length IMP_EducDeg $25;
MPRINT(EM_DIAGRAM):   label IMP_EducDeg = 'Imputed EducDeg';
MPRINT(EM_DIAGRAM):   IMP_EducDeg = EducDeg;
MPRINT(EM_DIAGRAM):   if EducDeg = '' then IMP_EducDeg = '3 - BSc/MSc';
MPRINT(EM_DIAGRAM):   length IMP_GeoLivArea 8;
MPRINT(EM_DIAGRAM):   label IMP_GeoLivArea = 'Imputed GeoLivArea';
MPRINT(EM_DIAGRAM):   IMP_GeoLivArea = GeoLivArea;
MPRINT(EM_DIAGRAM):   if missing(GeoLivArea) then IMP_GeoLivArea = 4;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   label IMP_BirthYear = 'Imputed BirthYear';
MPRINT(EM_DIAGRAM):   length IMP_BirthYear 8;
MPRINT(EM_DIAGRAM):   IMP_BirthYear = BirthYear;
MPRINT(EM_DIAGRAM):   if missing(BirthYear) then IMP_BirthYear = 1968;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth =(IMP_PremHealth < 0) ;
MPRINT(EM_DIAGRAM):   revLife =(IMP_PremLife < 0) ;
MPRINT(EM_DIAGRAM):   revWork =(IMP_PremWork < 0) ;
MPRINT(EM_DIAGRAM):   revHousehold =(PremHousehold < 0) ;
MPRINT(EM_DIAGRAM):   revMotor =(IMP_PremMotor < 0) ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth =IMP_PremHealth * ( NOT revHealth) ;
MPRINT(EM_DIAGRAM):   newPremLife =IMP_PremLife * ( NOT revLife) ;
MPRINT(EM_DIAGRAM):   newPremMotor =IMP_PremMotor * ( NOT revMotor) ;
MPRINT(EM_DIAGRAM):   newPremWork =IMP_PremWork * ( NOT revWork) ;
MPRINT(EM_DIAGRAM):   newPremHousehold =PremHousehold * ( NOT revHousehold) ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   age =2016 - IMP_BirthYear ;
MPRINT(EM_DIAGRAM):   policy_time =2016 - IMP_FirstPolYear ;
MPRINT(EM_DIAGRAM):   reversals =revHealth + revHousehold + revLife + revMotor + revWork ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize CustMonVal ;
MPRINT(EM_DIAGRAM):   drop T_CustMonVal ;
MPRINT(EM_DIAGRAM):   if missing( CustMonVal ) then T_CustMonVal = .;
MPRINT(EM_DIAGRAM):   else T_CustMonVal = (CustMonVal - 217.189924021041) * 0.0039155522443;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   drop T_IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   if missing( IMP_MonthSal ) then T_IMP_MonthSal = .;
MPRINT(EM_DIAGRAM):   else T_IMP_MonthSal = (IMP_MonthSal - 2499.16033508669) * 0.00101808692285;
MPRINT(EM_DIAGRAM):   *** Standardize policy_time ;
MPRINT(EM_DIAGRAM):   drop T_policy_time ;
MPRINT(EM_DIAGRAM):   if missing( policy_time ) then T_policy_time = .;
MPRINT(EM_DIAGRAM):   else T_policy_time = (policy_time - 29.9896746541983) * 0.15149321472018;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS5vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS5vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS5vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_CustMonVal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_CustMonVal - -0.39076061394863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_CustMonVal - -0.42165908561841 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_CustMonVal - -0.76744245934745 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_CustMonVal - 1.02915551719338 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_CustMonVal - 1.04707976053683 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_MonthSal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_IMP_MonthSal - 0.90777796399819 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_IMP_MonthSal - 0.80393038224863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_IMP_MonthSal - -0.93835847770537 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_IMP_MonthSal - -0.3347435150201 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_IMP_MonthSal - -0.43430374645756 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_policy_time ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_policy_time - -0.87457841843729 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_policy_time - 0.974252624919 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_policy_time - -0.02723049531797 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_policy_time - -0.88700831268273 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_policy_time - 0.89143361172831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 3 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.0231815394945E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (3 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS5vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus5: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "24 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:08:21 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                24 December 2017
Time:                10:08:21 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1B4P43F "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1B4P43F new;
MPRINT(EM_DIAGRAM):   run;
22805      filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22806      *------------------------------------------------------------*;
22807      * Score2: Scoring DATA data;
22808      *------------------------------------------------------------*;
22809      data EMWS1.Score2_TRAIN
22810      / view=EMWS1.Score2_TRAIN
22811      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score2_TRAIN / view=EMWS1.Score2_TRAIN ;
22812      set EMWS1.Clus5_TRAIN
22813      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_TRAIN ;
22814      %inc emflow;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22820      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.SCORE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS5_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.25 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.27 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22821      quit;
22822      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22823      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22824      * Score2: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score2: Creating Publish Score Variables Table;
22825      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22826      proc sort data=EMWS1.Clus5_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus5_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
22827      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22828      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS5_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
22829      proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
22830      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22831      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
22832      data EMWS1.Score2_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score2_EMINPUTVARS;
22833      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
22834      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22835      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
22836      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
22837         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE = "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
22838         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = "Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
22839      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
22840      if upcase(NAME) = "CLAIMSRATE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CLAIMSRATE" then HIDE = "N";
22841      if upcase(NAME) = "CUSTID" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTID" then HIDE = "N";
22842      if upcase(NAME) = "CUSTMONVAL" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTMONVAL" then HIDE = "N";
22843      if upcase(NAME) = "DISTANCE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "DISTANCE" then HIDE = "N";
22844      if upcase(NAME) = "IMP_CHILDREN" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "IMP_CHILDREN" then HIDE = "N";
22845      if upcase(NAME) = "IMP_EDUCDEG" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "IMP_EDUCDEG" then HIDE = "N";
22846      if upcase(NAME) = "IMP_GEOLIVAREA" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "IMP_GEOLIVAREA" then HIDE = "N";
22847      if upcase(NAME) = "IMP_MONTHSAL" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "IMP_MONTHSAL" then HIDE = "N";
22848      if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
22849      if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
22850      if upcase(NAME) = "AGE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "AGE" then HIDE = "N";
22851      if upcase(NAME) = "POLICY_TIME" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "POLICY_TIME" then HIDE = "N";
22852      if upcase(NAME) = "REVERSALS" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "REVERSALS" then HIDE = "N";
22853      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 13 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE2_EMINPUTVARS has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
22854      proc sort data=EMWS1.Score2_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score2_EMINPUTVARS nodupkey;
22855      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22856      where CREATOR='' or (NAME="" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="" and CREATOR='');
22857      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.SCORE2_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME=' ') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE2_EMINPUTVARS has 14 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22858      %let em_rootkey=;
22859      %let em_keytype=;
22860      %let em_keylen=;
22861      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22862      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
22863      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
22864      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
22865      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
22866      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
22867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22868      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMPUBLISHSCORE.sas";
22869      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22870      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22871      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22877      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
22878      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
22879      quit;
22880      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
22881      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
22882      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
22883      retain ID 1 Node "Score2";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score2";
22884      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
22885      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22886      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
22887      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22888      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22889      proc sort data=EMWS1.Clus5_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus5_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
22890      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22891      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS5_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
22892      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22893      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
22894      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
22895      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22896      proc contents data=EMWS1.Score2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score2_train out=_meta(keep=NAME) noprint;
22897      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
22898      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
22899      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22900      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22901      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22902      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
22903      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22904      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22905      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
22906      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 1 rows and 5 columns.
 
22907      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22908      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
22909      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE2_FCMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22910      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus5\EMFLOWSCORE.sas";
22911      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22912      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22913      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize CustMonVal ;
MPRINT(EM_DIAGRAM):   drop T_CustMonVal ;
MPRINT(EM_DIAGRAM):   if missing( CustMonVal ) then T_CustMonVal = .;
MPRINT(EM_DIAGRAM):   else T_CustMonVal = (CustMonVal - 217.189924021041) * 0.0039155522443;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   drop T_IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   if missing( IMP_MonthSal ) then T_IMP_MonthSal = .;
MPRINT(EM_DIAGRAM):   else T_IMP_MonthSal = (IMP_MonthSal - 2499.16033508669) * 0.00101808692285;
MPRINT(EM_DIAGRAM):   *** Standardize policy_time ;
MPRINT(EM_DIAGRAM):   drop T_policy_time ;
MPRINT(EM_DIAGRAM):   if missing( policy_time ) then T_policy_time = .;
MPRINT(EM_DIAGRAM):   else T_policy_time = (policy_time - 29.9896746541983) * 0.15149321472018;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS5vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS5vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS5vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_CustMonVal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_CustMonVal - -0.39076061394863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_CustMonVal - -0.42165908561841 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_CustMonVal - -0.76744245934745 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_CustMonVal - 1.02915551719338 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_CustMonVal - 1.04707976053683 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_MonthSal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_IMP_MonthSal - 0.90777796399819 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_IMP_MonthSal - 0.80393038224863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_IMP_MonthSal - -0.93835847770537 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_IMP_MonthSal - -0.3347435150201 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_IMP_MonthSal - -0.43430374645756 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_policy_time ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_policy_time - -0.87457841843729 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_policy_time - 0.974252624919 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_policy_time - -0.02723049531797 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_policy_time - -0.88700831268273 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_policy_time - 0.89143361172831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 3 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.0231815394945E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (3 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS5vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus5: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
23011      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23012      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23013      quit;
23014      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23015      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23016      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23017      retain ID 2 Node "Clus5";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Clus5";
23018      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23019      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23020      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23021      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23022      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 110 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 110 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23023      proc sort data=EMWS1.Filter4_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter4_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23024      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23025      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.FILTER4_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23026      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23027      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23028      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23029      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23030      proc contents data=EMWS1.Clus5_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus5_train out=_meta(keep=NAME) noprint;
23031      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
23032      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23033      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23034      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23035      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23036      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23037      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23038      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 40 observations read from the data set WORK._META.
NOTE: There were 10 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 40 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23039      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23040      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 36 rows and 5 columns.
 
23041      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23042      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
23043      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: There were 36 observations read from the data set WORK._TEMPX.
NOTE: 36 observations added.
NOTE: The data set EMWS1.SCORE2_FCMP has 37 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23044      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
23045      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23046      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23047      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   age =2016 - IMP_BirthYear ;
MPRINT(EM_DIAGRAM):   policy_time =2016 - IMP_FirstPolYear ;
MPRINT(EM_DIAGRAM):   reversals =revHealth + revHousehold + revLife + revMotor + revWork ;
23054      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23055      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23056      quit;
23057      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23058      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23059      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23060      retain ID 5 Node "Trans3";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans3";
23061      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23062      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23063      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23064      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23065      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23066      proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23067      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23068      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23069      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23070      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23071      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23072      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23073      proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
23074      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
23075      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23076      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23077      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23078      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23079      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23080      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23081      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 37 observations read from the data set WORK._META.
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23082      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23083      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 7 rows and 5 columns.
 
23084      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23085      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
23086      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: There were 7 observations read from the data set WORK._TEMPX.
NOTE: 7 observations added.
NOTE: The data set EMWS1.SCORE2_FCMP has 44 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23087      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
23088      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23089      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23090      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth =IMP_PremHealth * ( NOT revHealth) ;
MPRINT(EM_DIAGRAM):   newPremLife =IMP_PremLife * ( NOT revLife) ;
MPRINT(EM_DIAGRAM):   newPremMotor =IMP_PremMotor * ( NOT revMotor) ;
MPRINT(EM_DIAGRAM):   newPremWork =IMP_PremWork * ( NOT revWork) ;
MPRINT(EM_DIAGRAM):   newPremHousehold =PremHousehold * ( NOT revHousehold) ;
23099      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23100      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23101      quit;
23102      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23103      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23104      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23105      retain ID 6 Node "Trans2";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "Trans2";
23106      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23107      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23108      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23109      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23110      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23111      proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23112      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23113      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23114      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23115      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23116      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23117      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23118      proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
23119      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
23120      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23121      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23122      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23123      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23124      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23125      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23126      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23127      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23128      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.
 
23129      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23130      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
23131      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE2_FCMP has 54 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23132      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
23133      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23134      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23135      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth =(IMP_PremHealth < 0) ;
MPRINT(EM_DIAGRAM):   revLife =(IMP_PremLife < 0) ;
MPRINT(EM_DIAGRAM):   revWork =(IMP_PremWork < 0) ;
MPRINT(EM_DIAGRAM):   revHousehold =(PremHousehold < 0) ;
MPRINT(EM_DIAGRAM):   revMotor =(IMP_PremMotor < 0) ;
23144      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23145      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23146      quit;
23147      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23148      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23149      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23150      retain ID 7 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Trans";
23151      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23152      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23153      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23154      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23155      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23156      proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23157      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23158      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23159      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23160      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23161      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23162      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23163      proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
23164      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
23165      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23166      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23167      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
23168      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23169      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23170      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23171      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 29 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 29 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23172      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23173      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 5 rows and 5 columns.
 
23174      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23175      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
23176      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: There were 5 observations read from the data set WORK._TEMPX.
NOTE: 5 observations added.
NOTE: The data set EMWS1.SCORE2_FCMP has 59 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23177      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
23178      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23179      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23180      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_Children 8;
MPRINT(EM_DIAGRAM):   label IMP_Children = 'Imputed Children';
MPRINT(EM_DIAGRAM):   IMP_Children = Children;
MPRINT(EM_DIAGRAM):   if missing(Children) then IMP_Children = 1;
MPRINT(EM_DIAGRAM):   length IMP_EducDeg $25;
MPRINT(EM_DIAGRAM):   label IMP_EducDeg = 'Imputed EducDeg';
MPRINT(EM_DIAGRAM):   IMP_EducDeg = EducDeg;
MPRINT(EM_DIAGRAM):   if EducDeg = '' then IMP_EducDeg = '3 - BSc/MSc';
MPRINT(EM_DIAGRAM):   length IMP_GeoLivArea 8;
MPRINT(EM_DIAGRAM):   label IMP_GeoLivArea = 'Imputed GeoLivArea';
MPRINT(EM_DIAGRAM):   IMP_GeoLivArea = GeoLivArea;
MPRINT(EM_DIAGRAM):   if missing(GeoLivArea) then IMP_GeoLivArea = 4;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   label IMP_BirthYear = 'Imputed BirthYear';
MPRINT(EM_DIAGRAM):   length IMP_BirthYear 8;
MPRINT(EM_DIAGRAM):   IMP_BirthYear = BirthYear;
MPRINT(EM_DIAGRAM):   if missing(BirthYear) then IMP_BirthYear = 1968;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
23227      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23228      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23229      quit;
23230      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23231      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23232      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23233      retain ID 8 Node "Impt";
MPRINT(EM_DIAGRAM):   retain ID 8 Node "Impt";
23234      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23235      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
23236      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23237      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23238      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23239      proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
23240      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23241      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23242      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23243      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23244      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23245      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23246      proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
23247      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
23248      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23249      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23251      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23252      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23253      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23254      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 24 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23255      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23256      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.
 
23257      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23258      proc append base=EMWS1.Score2_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_FCMP data=_tempx;
23259      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE2_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE2_FCMP has 69 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23260      %macro varDept(fcmpdata=,id=);
23261      %global nobs&id scoreFlag&id;
23262      %let scoreFlag&id = 0;
23263      %if &id=1 or ^&fcmpStart %then %do;
23264      proc sort data=&fcmpdata out=_temp&id nodupkey;
23265      by NAME;
23266      %if EM_SEGMENT ne %then %do;
23267      where id=&id and (LHS in( %let j=1;
23268      %do %while(%scan(EM_SEGMENT, &j) ne );
23269      %let var = %scan(EM_SEGMENT, &j);
23270      "&var" %let j = %eval(&j+1);
23271      %end;
23272      ) or substr(LHS, 1, 3)='EM_');
23273      %end;
23274      %else %do;
23275      where id=&id and substr(LHS, 1, 3)='EM_';
23276      %end;
23277      run;
23278      %let dsid = %sysfunc(open(_temp&id));
23279      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23280      %let dsid = %sysfunc(close(&dsid));
23281      %if &&nobs&id %then %do;
23282      %let scoreFlag&id = 1;
23283      %let fcmpStart = 1;
23284      %end;
23285      %else %let fcmpStart = 0;
23286      %end;
23287      %else %do;
23288      proc sort data=&fcmpdata out=_tempid;
23289      where id=&id;
23290      by LHS;
23291      run;
23292      %let dsid = %sysfunc(open(_tempid));
23293      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23294      %let dsid = %sysfunc(close(&dsid));
23295      %if ^&&nobs&id %then %do;
23296      proc datasets lib=work nolist;
23297      delete _tempid;
23298      run;
23299      quit;
23300      %end;
23301      %else %do;
23302      data _tempAll;
23303      set %let j=%eval(&id-1);
23304      %do x=1 %to &j;
23305      %if &&nobs&x %then %do;
23306      _temp&x %end;
23307      %end;
23308      ;
23309      run;
23310      proc sql;
23311      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
23312      quit;
23313      data _temp&id;
23314      set _temp&id;
23315      where LHS ne '' and NAME ne '' and Node ne '';
23316      run;
23317      proc datasets lib=work nolist;
23318      delete _tempAll;
23319      run;
23320      %let dsid = %sysfunc(open(_temp&id));
23321      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23322      %let dsid = %sysfunc(close(&dsid));
23323      %if ^&&nobs&id %then %do;
23324      proc datasets lib=work nolist;
23325      delete _temp&id;
23326      run;
23327      quit;
23328      %end;
23329      %else %do;
23330      %let scoreFlag&id = 1;
23331      data _temp&id;
23332      set _temp&id;
23333      where LHS ne NAME and node ne '';
23334      run;
23335      %let dsid = %sysfunc(open(_temp&id));
23336      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23337      %let dsid = %sysfunc(close(&dsid));
23338      %if ^&&nobs&id %then %do;
23339      proc datasets lib=work nolist;
23340      delete _temp&id;
23341      run;
23342      quit;
23343      %end;
23344      %else %do;
23345      proc sort data=_temp&id nodupkey;
23346      by LHS NAME;
23347      run;
23348      %end;
23349      %end;
23350      %end;
23351      %end;
23352      %mend varDept;
23353      %macro optCode(outdata=);
23354      %global fcmpStart;
23355      %let fcmpStart = 0;
23356      %let outputVars = EM_SEGMENT;
23357      %let NumNodes=9;
23358      %do k=1 %to &NumNodes;
23359      %vardept(fcmpdata=&outdata, id=&k);
23360      %end;
23361      %mend optCode;
23362      %optcode(outData=EMWS1.Score2_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_SEGMENT" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE (id=1) and ((LHS='EM_SEGMENT') or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 36 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP2 created, with 4 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 7 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP5 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP5.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP6 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp6;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP6 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP7 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp7;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP7 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: There were 1 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp8 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP8 created, with 2 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP8 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP8 has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp8 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP8.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP8 has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score2_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE2_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
23363      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23364      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23365      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23366      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23367      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23368      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23369      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23370      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23371      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23372      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 2 rows and 3 columns.
 
23373      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23374      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23375      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23376      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23377      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23378      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23379      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23380      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23381      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23382      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23383      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23384      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23385      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23386      create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR5 created, with 1 rows and 3 columns.
 
23387      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23388      data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
23389      set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
23390      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 24DEC2017:10:08:25;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   policy_time = 2016 - IMP_FirstPolYear;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize CustMonVal ;
MPRINT(EM_DIAGRAM):   drop T_CustMonVal ;
MPRINT(EM_DIAGRAM):   if missing( CustMonVal ) then T_CustMonVal = .;
MPRINT(EM_DIAGRAM):   else T_CustMonVal = (CustMonVal - 217.189924021041) * 0.0039155522443;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   drop T_IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   if missing( IMP_MonthSal ) then T_IMP_MonthSal = .;
MPRINT(EM_DIAGRAM):   else T_IMP_MonthSal = (IMP_MonthSal - 2499.16033508669) * 0.00101808692285;
MPRINT(EM_DIAGRAM):   *** Standardize policy_time ;
MPRINT(EM_DIAGRAM):   drop T_policy_time ;
MPRINT(EM_DIAGRAM):   if missing( policy_time ) then T_policy_time = .;
MPRINT(EM_DIAGRAM):   else T_policy_time = (policy_time - 29.9896746541983) * 0.15149321472018;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS5vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS5vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS5vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_CustMonVal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_CustMonVal - -0.39076061394863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_CustMonVal - -0.42165908561841 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_CustMonVal - -0.76744245934745 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_CustMonVal - 1.02915551719338 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_CustMonVal - 1.04707976053683 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_MonthSal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_IMP_MonthSal - 0.90777796399819 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_IMP_MonthSal - 0.80393038224863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_IMP_MonthSal - -0.93835847770537 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_IMP_MonthSal - -0.3347435150201 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_IMP_MonthSal - -0.43430374645756 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_policy_time ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_policy_time - -0.87457841843729 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_policy_time - 0.974252624919 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_policy_time - -0.02723049531797 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_policy_time - -0.88700831268273 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_policy_time - 0.89143361172831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 3 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.0231815394945E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (3 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS5vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus5: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
23580      %let validvarany = 0;
23581      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
23582      set EMWS1.Score2_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score2_EMINPUTVARS;
23583      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
23584      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
23585      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.SCORE2_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23586      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
23587      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23588      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23589      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23590      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
23591      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23592      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
23593      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
23594      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
23595      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
23596      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
23597      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
23598      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
23599      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
23600      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
23601      end;
MPRINT(EM_DIAGRAM):   end;
23602      output;
MPRINT(EM_DIAGRAM):   output;
23603      end;
MPRINT(EM_DIAGRAM):   end;
23604      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 19 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23605      proc sort data=_temp2 out=EMWS1.Score2_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score2_EMINPUTVARS;
23606      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23607      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE2_EMINPUTVARS has 3 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=A2Z_INSU.A2Z_INSURANCE noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7948_DESKTOP-61HCQ9U_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7948_DESKTOP-61HCQ9U_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('A2Z_INSU.A2Z_INSURANCE');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set A2Z_INSU.A2Z_INSURANCE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 24DEC2017:10:08:25;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   policy_time = 2016 - IMP_FirstPolYear;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize CustMonVal ;
MPRINT(EM_DIAGRAM):   drop T_CustMonVal ;
MPRINT(EM_DIAGRAM):   if missing( CustMonVal ) then T_CustMonVal = .;
MPRINT(EM_DIAGRAM):   else T_CustMonVal = (CustMonVal - 217.189924021041) * 0.0039155522443;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   drop T_IMP_MonthSal ;
MPRINT(EM_DIAGRAM):   if missing( IMP_MonthSal ) then T_IMP_MonthSal = .;
MPRINT(EM_DIAGRAM):   else T_IMP_MonthSal = (IMP_MonthSal - 2499.16033508669) * 0.00101808692285;
MPRINT(EM_DIAGRAM):   *** Standardize policy_time ;
MPRINT(EM_DIAGRAM):   drop T_policy_time ;
MPRINT(EM_DIAGRAM):   if missing( policy_time ) then T_policy_time = .;
MPRINT(EM_DIAGRAM):   else T_policy_time = (policy_time - 29.9896746541983) * 0.15149321472018;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS5vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS5vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS5vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_CustMonVal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_CustMonVal - -0.39076061394863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_CustMonVal - -0.42165908561841 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_CustMonVal - -0.76744245934745 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_CustMonVal - 1.02915551719338 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_CustMonVal - 1.04707976053683 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_MonthSal ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_IMP_MonthSal - 0.90777796399819 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_IMP_MonthSal - 0.80393038224863 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_IMP_MonthSal - -0.93835847770537 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_IMP_MonthSal - -0.3347435150201 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_IMP_MonthSal - -0.43430374645756 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_policy_time ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_policy_time - -0.87457841843729 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_policy_time - 0.974252624919 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_policy_time - -0.02723049531797 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_policy_time - -0.88700831268273 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_policy_time - 0.89143361172831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 3 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.0231815394945E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (3 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS5vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus5: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   drop 'BirthYear'n 'Children'n 'ClaimsRate'n 'CustID'n 'CustMonVal'n 'EducDeg'n 'FirstPolYear'n 'GeoLivArea'n 'MonthSal'n 'PremHealth'n 'PremHousehold'n 'PremLife'n 'PremMotor'n 'PremWork'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score2_EMOUTPUTVARS noprint out=EMWS1.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
23847      data EMWS1.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score2_EMOUTPUTVARS;
23848      set EMWS1.Score2_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score2_EMOUTPUTVARS(keep=name type label rename=(type=itype));
23849      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
23850      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
23851      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
23852      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
23853      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
23854      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
23855      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
23856      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
23857      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' /* removed EM_ROI */
23858      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
23859      else do;
MPRINT(EM_DIAGRAM):   else do;
23860      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
23861      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
23862      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
23863      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
23864      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
23865      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
23866      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
23867      end;
MPRINT(EM_DIAGRAM):   end;
23868      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.SCORE2_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE2_EMOUTPUTVARS has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23869      proc sort data=EMWS1.Clus5_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus5_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
23870      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23871      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS5_CMETA_TRAIN.
NOTE: The data set WORK.META has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23872      proc sort data=EMWS1.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score2_EMOUTPUTVARS;
23873      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23874      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.SCORE2_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE2_EMOUTPUTVARS has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23875      data EMWS1.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score2_EMOUTPUTVARS;
23876      merge WORK.META EMWS1.Score2_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score2_EMOUTPUTVARS(in=_a);
23877      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
23878      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23879      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score2";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score2";
23880      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
23881      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.META.
NOTE: There were 7 observations read from the data set EMWS1.SCORE2_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE2_EMOUTPUTVARS has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23882      %let _cn = %sysfunc(getoption(CENTER));
23883      %let _nb = %sysfunc(getoption(NUMBER));
23884      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
23885      title;
MPRINT(EM_DIAGRAM):   title;
23886      proc print data=EMWS1.Score2_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score2_EMINPUTVARS noobs label;
23887      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
23888      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
23889      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
23890      run;
 
NOTE: There were 3 observations read from the data set EMWS1.SCORE2_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23891      title10;
MPRINT(EM_DIAGRAM):   title10;
23892      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
23893      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23894      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23895      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23896      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23897      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23898      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23899      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23900      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23901      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23902      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 2 rows and 3 columns.
 
23903      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
23904      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23905      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23906      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23907      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23908      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23909      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23910      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23911      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23912      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23913      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23914      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23915      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23916      create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR5 created, with 1 rows and 3 columns.
 
23917      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
23918      data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
23919      set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
23920      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23921      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23922      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23923      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23924      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23925      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23926      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23927      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23928      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23929      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23930      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 2 rows and 3 columns.
 
23931      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
23932      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23933      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23934      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 2 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
23935      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23936      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23937      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23938      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
23939      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23940      set EMWS1.Trans3_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans3_EMSCOREVAR;
23941      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23942      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS3_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23943      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23944      create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar5 as select p.lhs, p2.formula, p2.file from _temp5 p, EMWS1.Trans3_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR5 created, with 1 rows and 3 columns.
 
23945      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23946      data _CodeVar5;
MPRINT(EM_DIAGRAM):   data _CodeVar5;
23947      set _all_ _CodeVar5 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar5 _postall_;
23948      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 1 observations read from the data set WORK._CODEVAR5.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR5 has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23949      %let _cn = %sysfunc(getoption(CENTER));
23950      %let _nb = %sysfunc(getoption(NUMBER));
23951      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
23952      title;
MPRINT(EM_DIAGRAM):   title;
23953      proc print data=EMWS1.Score2_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score2_EMOUTPUTVARS noobs label;
23954      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
23955      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
23956         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" LABEL = "Label";
23957      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
23958      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
23959      run;
 
NOTE: There were 7 observations read from the data set EMWS1.SCORE2_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23960      title10;
MPRINT(EM_DIAGRAM):   title10;
23961      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
23962      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23963      * Score2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score2: Computing metadata for TRAIN data;
23964      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.SCORE2_TRAIN.VIEW used (Total process time):
      real time           0.27 seconds
      cpu time            0.28 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score2_TRAIN out=WORK.M3BHNO1T noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BHNO1T;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BHNO1T(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BHNO1T;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BHNO1T;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1AX_V4U NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1CJMIFU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   set WORK.M1AX_V4U;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus5_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus5_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE2_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
24311      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24312      * Score2: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score2: Computing metadata for SCORE data;
24313      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score2_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score2_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Score2_SCORE;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score2_SCORE out=WORK.M2ZPUK7_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZPUK7_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZPUK7_(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2ZPUK7_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2ZPUK7_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M175NG8K NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TVIYG_(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   set WORK.M175NG8K;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids3_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids3_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score2_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "24 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10:08:28 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                24 December 2017
Time:                10:08:28 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0YDKS7W "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0YDKS7W new;
MPRINT(EM_DIAGRAM):   run;
24691      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
24692      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
24693      NAME="_SEGMENT_";
MPRINT(EM_DIAGRAM):   NAME="_SEGMENT_";
24694      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
24695      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
24696      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
24697      output;
MPRINT(EM_DIAGRAM):   output;
24698      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.CLUS5_TRAIN.VIEW used (Total process time):
      real time           0.35 seconds
      cpu time            0.32 seconds
 
24699      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
24700      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
24701      proc freq data = EMWS1.Clus5_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Clus5_TRAIN order=formatted addnames;
24702      table _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table _SEGMENT_ / missing;
24703      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP2_TRAIN.
NOTE: View EMWS1.CLUS5_TRAIN.VIEW used (Total process time):
      real time           0.38 seconds
      cpu time            0.36 seconds
 
NOTE: There were 10266 observations read from the data set EMWS1.FILTER4_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 5 observations and 8 variables.
NOTE: There were 10266 observations read from the data set EMWS1.CLUS5_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.42 seconds
      cpu time            0.42 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24704      quit;
24705      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
24706      data WORK.Score2_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score2_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
24707      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
24708         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
24709      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
24710      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
24711      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
24712      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
24713      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
24714      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
24715      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
24716      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
24717      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
24718      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
24719      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
24720      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
24721      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
24722      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
24723      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
24724      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
24725      output;
MPRINT(EM_DIAGRAM):   output;
24726      end;
MPRINT(EM_DIAGRAM):   end;
24727      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
24728      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE2_BAR has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
24729      proc sort data=WORK.Score2_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score2_BAR NOTHREADS;
24730      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
24731      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SCORE2_BAR.
NOTE: The data set WORK.SCORE2_BAR has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
24732      proc sort data=WORK.M1DADROU;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M1DADROU;
24733      by Name;
MPRINT(EM_DIAGRAM):   by Name;
24734      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M1DADROU.
NOTE: The data set WORK.M1DADROU has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24735      data WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score2_BAR;
24736      merge WORK.Score2_BAR(in=_a) WORK.M1DADROU(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score2_BAR(in=_a) WORK.M1DADROU(keep=Name Role rename=(Name=_Variable_));
24737      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
24738      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
24739      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
24740      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SCORE2_BAR.
NOTE: There were 1 observations read from the data set WORK.M1DADROU.
NOTE: The data set WORK.SCORE2_BAR has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24741      data WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score2_BAR;
24742      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
24743      retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
24744      set WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score2_BAR;
24745      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SCORE2_BAR.
NOTE: The data set WORK.SCORE2_BAR has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24746      proc append base=EMWS1.Score2_BAR data=WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_BAR data=WORK.Score2_BAR;
24747      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE2_BAR to EMWS1.SCORE2_BAR.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 5 observations read from the data set WORK.SCORE2_BAR.
NOTE: The data set EMWS1.SCORE2_BAR has 5 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24748      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
24749      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
24750      NAME="_SEGMENT_";
MPRINT(EM_DIAGRAM):   NAME="_SEGMENT_";
24751      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
24752      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
24753      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
24754      output;
MPRINT(EM_DIAGRAM):   output;
24755      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24756      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
24757      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
24758      proc freq data = EMWS1.Score2_SCORE order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Score2_SCORE order=formatted addnames;
24759      table _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table _SEGMENT_ / missing;
24760      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.TEMPFREQ has 4 observations and 8 variables.
NOTE: There were 30 observations read from the data set EMWS1.SCORE2_SCORE.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24761      quit;
24762      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
24763      data WORK.Score2_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score2_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
24764      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
24765         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
24766      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
24767      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
24768      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
24769      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
24770      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
24771      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
24772      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
24773      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
24774      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
24775      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
24776      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
24777      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
24778      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
24779      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
24780      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
24781      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
24782      output;
MPRINT(EM_DIAGRAM):   output;
24783      end;
MPRINT(EM_DIAGRAM):   end;
24784      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
24785      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE2_BAR has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24786      proc sort data=WORK.Score2_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score2_BAR NOTHREADS;
24787      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
24788      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORE2_BAR.
NOTE: The data set WORK.SCORE2_BAR has 4 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24789      proc sort data=WORK.M2OOLA1A;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M2OOLA1A;
24790      by Name;
MPRINT(EM_DIAGRAM):   by Name;
24791      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M2OOLA1A.
NOTE: The data set WORK.M2OOLA1A has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24792      data WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score2_BAR;
24793      merge WORK.Score2_BAR(in=_a) WORK.M2OOLA1A(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score2_BAR(in=_a) WORK.M2OOLA1A(keep=Name Role rename=(Name=_Variable_));
24794      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
24795      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
24796      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
24797      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORE2_BAR.
NOTE: There were 1 observations read from the data set WORK.M2OOLA1A.
NOTE: The data set WORK.SCORE2_BAR has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24798      data WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score2_BAR;
24799      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
24800      retain DATAROLE "SCORE";
MPRINT(EM_DIAGRAM):   retain DATAROLE "SCORE";
24801      set WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score2_BAR;
24802      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORE2_BAR.
NOTE: The data set WORK.SCORE2_BAR has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24803      proc append base=EMWS1.Score2_BAR data=WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score2_BAR data=WORK.Score2_BAR;
24804      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE2_BAR to EMWS1.SCORE2_BAR.
NOTE: There were 4 observations read from the data set WORK.SCORE2_BAR.
NOTE: 4 observations added.
NOTE: The data set EMWS1.SCORE2_BAR has 9 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24805      data EMWS1.Score2_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
MPRINT(EM_DIAGRAM):    data EMWS1.Score2_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
24806      set EMWS1.Score2_BAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Score2_BAR;
24807      label VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" DATAROLE= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_outputType_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE= "Variable Name" DATAROLE= "Data Role" TYPE = "Output Type";
24808      select(_VARIABLE_);
MPRINT(EM_DIAGRAM):   select(_VARIABLE_);
24809      when("_SEGMENT_") TYPE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   when("_SEGMENT_") TYPE = 'SEGMENT';
24810      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
24811      end;
MPRINT(EM_DIAGRAM):   end;
24812      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VARIABLE is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.SCORE2_BAR.
NOTE: The data set EMWS1.SCORE2_BAR has 9 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24813      proc sort data = EMWS1.Score2_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Score2_BAR NOTHREADS;
24814      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
24815      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.SCORE2_BAR.
NOTE: The data set EMWS1.SCORE2_BAR has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24816      %let _cn = %sysfunc(getoption(CENTER));
24817      %let _nb = %sysfunc(getoption(NUMBER));
24818      options nonumber nocenter;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
24819      title;
MPRINT(EM_DIAGRAM):   title;
24820      proc print data = EMWS1.Score2_BAR noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Score2_BAR noobs label;
24821      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
24822      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24823      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Class Variable Summary Statistics";
MPRINT(EM_DIAGRAM):   run;
24824      run;
 
NOTE: There were 9 observations read from the data set EMWS1.SCORE2_BAR.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24825      title10;
MPRINT(EM_DIAGRAM):   title10;
24826      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
