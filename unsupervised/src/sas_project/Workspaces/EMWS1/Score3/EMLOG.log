*------------------------------------------------------------*
User:                misil
Date:                23 December 2017
Time:                09:43:09 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:00 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                23 December 2017
Time:                09:43:00 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3WKSH3P "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3WKSH3P new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:00 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:01 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22442      proc freq data=EMWS1.Score3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Score3_VariableSet noprint;
22443      table ROLE*LEVEL/out=WORK.Score3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Score3META;
22444      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.SCORE3_VARIABLESET.
NOTE: The data set WORK.SCORE3META has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
22445      proc print data=WORK.Score3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Score3META label noobs;
22446      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22447      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22448      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22449      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22450      run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
 
 
22451      title10;
MPRINT(EM_DIAGRAM):   title10;
22452      %let groupid =;
22453      %let endGroupid =;
22454      %let prescoreid =;
22455      %let idsTable =;
22456      %let hpdmTable =;
22457      %let lasthptm =;
22458      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22459      set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
22460      where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
22461      select(upcase(key));
MPRINT(EM_DIAGRAM):   select(upcase(key));
22462      when('LASTHPTM') call symput('lasthptm', DATA);
MPRINT(EM_DIAGRAM):   when('LASTHPTM') call symput('lasthptm', DATA);
22463      when('IDSTABLE') call symput('idsTable', DATA);
MPRINT(EM_DIAGRAM):   when('IDSTABLE') call symput('idsTable', DATA);
22464      when('HPDMSAMPLE') call symput('hpdmSample', DATA);
MPRINT(EM_DIAGRAM):   when('HPDMSAMPLE') call symput('hpdmSample', DATA);
22465      when('PRESCORECODE') call symput('prescoreId', DATA);
MPRINT(EM_DIAGRAM):   when('PRESCORECODE') call symput('prescoreId', DATA);
22466      when('ENDGROUP') call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   when('ENDGROUP') call symput('endGroupId', DATA);
22467      otherwise call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   otherwise call symput('groupId', DATA);
22468      end;
MPRINT(EM_DIAGRAM):   end;
22469      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_EMINFO.
      WHERE UPCASE(key) in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'HPDMSAMPLE', 'IDSTABLE', 'INDEXINFO', 'LASTHPTM', 'PRESCORECODE', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22470      %let em_rootkey=;
22471      %let em_keytype=;
22472      %let em_keylen=;
22473      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22474      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
22475      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
22476      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
22477      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
22478      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
22479      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data EMWS1.Score3_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_DATA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 23DEC2017:09:43:01;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_Children 8;
MPRINT(EM_DIAGRAM):   label IMP_Children = 'Imputed Children';
MPRINT(EM_DIAGRAM):   IMP_Children = Children;
MPRINT(EM_DIAGRAM):   if missing(Children) then IMP_Children = 1;
MPRINT(EM_DIAGRAM):   length IMP_EducDeg $25;
MPRINT(EM_DIAGRAM):   label IMP_EducDeg = 'Imputed EducDeg';
MPRINT(EM_DIAGRAM):   IMP_EducDeg = EducDeg;
MPRINT(EM_DIAGRAM):   if EducDeg = '' then IMP_EducDeg = '3 - BSc/MSc';
MPRINT(EM_DIAGRAM):   length IMP_GeoLivArea 8;
MPRINT(EM_DIAGRAM):   label IMP_GeoLivArea = 'Imputed GeoLivArea';
MPRINT(EM_DIAGRAM):   IMP_GeoLivArea = GeoLivArea;
MPRINT(EM_DIAGRAM):   if missing(GeoLivArea) then IMP_GeoLivArea = 4;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   label IMP_BirthYear = 'Imputed BirthYear';
MPRINT(EM_DIAGRAM):   length IMP_BirthYear 8;
MPRINT(EM_DIAGRAM):   IMP_BirthYear = BirthYear;
MPRINT(EM_DIAGRAM):   if missing(BirthYear) then IMP_BirthYear = 1968;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth =(IMP_PremHealth < 0) ;
MPRINT(EM_DIAGRAM):   revLife =(IMP_PremLife < 0) ;
MPRINT(EM_DIAGRAM):   revWork =(IMP_PremWork < 0) ;
MPRINT(EM_DIAGRAM):   revHousehold =(PremHousehold < 0) ;
MPRINT(EM_DIAGRAM):   revMotor =(IMP_PremMotor < 0) ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth =IMP_PremHealth * ( NOT revHealth) ;
MPRINT(EM_DIAGRAM):   newPremLife =IMP_PremLife * ( NOT revLife) ;
MPRINT(EM_DIAGRAM):   newPremMotor =IMP_PremMotor * ( NOT revMotor) ;
MPRINT(EM_DIAGRAM):   newPremWork =IMP_PremWork * ( NOT revWork) ;
MPRINT(EM_DIAGRAM):   newPremHousehold =PremHousehold * ( NOT revHousehold) ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   age =2016 - IMP_BirthYear ;
MPRINT(EM_DIAGRAM):   policy_time =2016 - IMP_FirstPolYear ;
MPRINT(EM_DIAGRAM):   reversals =revHealth + revHousehold + revLife + revMotor + revWork ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [2] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 2;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHealth - -0.50872279165006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHealth - 0.60847900418104 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHousehold - -0.51505369245157 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHousehold - 0.61605134078266 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremLife - -0.53587579857008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremLife - 0.64095648480965 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremMotor - 0.7585724788734 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremMotor - -0.90732208998715 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremWork - -0.53010825120418 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremWork - 0.63405797046085 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 2;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:01 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                23 December 2017
Time:                09:43:01 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O133XZS7 "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O133XZS7 new;
MPRINT(EM_DIAGRAM):   run;
22819      filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22820      *------------------------------------------------------------*;
22821      * Score3: Scoring DATA data;
22822      *------------------------------------------------------------*;
22823      data EMWS1.Score3_TRAIN
22824      / view=EMWS1.Score3_TRAIN
22825      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score3_TRAIN / view=EMWS1.Score3_TRAIN ;
22826      set EMWS1.Clus_TRAIN
22827      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TRAIN ;
22828      %inc emflow;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22834      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.SCORE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22835      quit;
22836      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22837      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22838      * Score3: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score3: Creating Publish Score Variables Table;
22839      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22840      proc sort data=EMWS1.Clus_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
22841      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22842      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.CLUS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22843      proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
22844      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22845      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
22846      data EMWS1.Score3_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score3_EMINPUTVARS;
22847      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
22848      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22849      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
22850      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
22851         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE = "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
22852         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = "Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
22853      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
22854      if upcase(NAME) = "CUSTID" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTID" then HIDE = "N";
22855      if upcase(NAME) = "DISTANCE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "DISTANCE" then HIDE = "N";
22856      if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_" then HIDE = "N";
22857      if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_SEGMENT_LABEL_" then HIDE = "N";
22858      if upcase(NAME) = "NEWPREMHEALTH" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMHEALTH" then HIDE = "N";
22859      if upcase(NAME) = "NEWPREMHOUSEHOLD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMHOUSEHOLD" then HIDE = "N";
22860      if upcase(NAME) = "NEWPREMLIFE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMLIFE" then HIDE = "N";
22861      if upcase(NAME) = "NEWPREMMOTOR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMMOTOR" then HIDE = "N";
22862      if upcase(NAME) = "NEWPREMWORK" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NEWPREMWORK" then HIDE = "N";
22863      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE3_EMINPUTVARS has 22 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22864      proc sort data=EMWS1.Score3_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score3_EMINPUTVARS nodupkey;
22865      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22866      where CREATOR='' or (NAME="" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="" and CREATOR='');
22867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.SCORE3_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME=' ') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE3_EMINPUTVARS has 14 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22868      %let em_rootkey=;
22869      %let em_keytype=;
22870      %let em_keylen=;
22871      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22872      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
22873      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
22874      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
22875      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
22876      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
22877      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22878      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMPUBLISHSCORE.sas";
22879      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22880      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22881      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
22887      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
22888      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
22889      quit;
22890      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
22891      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
22892      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
22893      retain ID 1 Node "Score3";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score3";
22894      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
22895      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
22896      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
22897      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22898      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22899      proc sort data=EMWS1.Clus_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
22900      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22901      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.CLUS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22902      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22903      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
22904      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
22905      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22906      proc contents data=EMWS1.Score3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score3_train out=_meta(keep=NAME) noprint;
22907      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
22908      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
22909      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22910      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 41 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22911      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
22912      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
22913      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22914      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 41 observations read from the data set WORK._META.
NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 41 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22915      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
22916      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 1 rows and 5 columns.
 
22917      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22918      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
22919      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE3_FCMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22920      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
22921      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
22922      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
22923      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [2] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 2;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHealth - -0.50872279165006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHealth - 0.60847900418104 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHousehold - -0.51505369245157 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHousehold - 0.61605134078266 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremLife - -0.53587579857008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremLife - 0.64095648480965 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremMotor - 0.7585724788734 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremMotor - -0.90732208998715 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremWork - -0.53010825120418 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremWork - 0.63405797046085 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 2;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
23027      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
23028      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23029      quit;
23030      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23031      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23032      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23033      retain ID 2 Node "Clus";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Clus";
23034      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23035      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 148 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 148 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23036      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23037      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23038      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 148 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 148 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23039      proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23040      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23041      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.FILTER2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23042      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23043      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23044      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23045      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23046      proc contents data=EMWS1.Clus_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus_train out=_meta(keep=NAME) noprint;
23047      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
23048      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23049      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23050      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23051      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23052      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23053      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23054      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 40 observations read from the data set WORK._META.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 40 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23055      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23056      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 56 rows and 5 columns.
 
23057      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23058      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
23059      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: There were 56 observations read from the data set WORK._TEMPX.
NOTE: 56 observations added.
NOTE: The data set EMWS1.SCORE3_FCMP has 57 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23060      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans3\EMPUBLISHSCORE.sas";
23061      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23062      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23063      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   age =2016 - IMP_BirthYear ;
MPRINT(EM_DIAGRAM):   policy_time =2016 - IMP_FirstPolYear ;
MPRINT(EM_DIAGRAM):   reversals =revHealth + revHousehold + revLife + revMotor + revWork ;
23070      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23071      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23072      quit;
23073      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23074      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23075      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23076      retain ID 5 Node "Trans3";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans3";
23077      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23078      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23079      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23080      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23081      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 7 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23082      proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23083      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23084      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23085      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23086      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23087      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23088      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23089      proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans3_train out=_meta(keep=NAME) noprint;
23090      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
23091      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23092      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23093      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 37 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23094      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23095      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23096      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23097      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 37 observations read from the data set WORK._META.
NOTE: There were 24 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23098      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23099      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 7 rows and 5 columns.
 
23100      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23101      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
23102      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: There were 7 observations read from the data set WORK._TEMPX.
NOTE: 7 observations added.
NOTE: The data set EMWS1.SCORE3_FCMP has 64 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23103      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans2\EMPUBLISHSCORE.sas";
23104      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23105      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23106      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth =IMP_PremHealth * ( NOT revHealth) ;
MPRINT(EM_DIAGRAM):   newPremLife =IMP_PremLife * ( NOT revLife) ;
MPRINT(EM_DIAGRAM):   newPremMotor =IMP_PremMotor * ( NOT revMotor) ;
MPRINT(EM_DIAGRAM):   newPremWork =IMP_PremWork * ( NOT revWork) ;
MPRINT(EM_DIAGRAM):   newPremHousehold =PremHousehold * ( NOT revHousehold) ;
23115      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23116      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23117      quit;
23118      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23119      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23120      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23121      retain ID 6 Node "Trans2";
MPRINT(EM_DIAGRAM):   retain ID 6 Node "Trans2";
23122      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23123      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23124      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23125      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23126      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23127      proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23128      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23129      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23130      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23131      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23132      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23133      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23134      proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_train out=_meta(keep=NAME) noprint;
23135      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
23136      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23137      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23138      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 34 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23139      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23140      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23141      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23142      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 34 observations read from the data set WORK._META.
NOTE: There were 19 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 34 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23143      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23144      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.
 
23145      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23146      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
23147      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE3_FCMP has 74 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23148      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
23149      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23150      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23151      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth =(IMP_PremHealth < 0) ;
MPRINT(EM_DIAGRAM):   revLife =(IMP_PremLife < 0) ;
MPRINT(EM_DIAGRAM):   revWork =(IMP_PremWork < 0) ;
MPRINT(EM_DIAGRAM):   revHousehold =(PremHousehold < 0) ;
MPRINT(EM_DIAGRAM):   revMotor =(IMP_PremMotor < 0) ;
23160      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23161      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23162      quit;
23163      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23164      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23165      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23166      retain ID 7 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 7 Node "Trans";
23167      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23168      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23169      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23170      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23171      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23172      proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
23173      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23174      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23175      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23176      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23177      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23178      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23179      proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
23180      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
23181      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23182      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23183      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 29 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
23184      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23185      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23186      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23187      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 29 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 29 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23188      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23189      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 5 rows and 5 columns.
 
23190      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23191      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
23192      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: There were 5 observations read from the data set WORK._TEMPX.
NOTE: 5 observations added.
NOTE: The data set EMWS1.SCORE3_FCMP has 79 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23193      filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
23194      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
23195      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
23196      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_Children 8;
MPRINT(EM_DIAGRAM):   label IMP_Children = 'Imputed Children';
MPRINT(EM_DIAGRAM):   IMP_Children = Children;
MPRINT(EM_DIAGRAM):   if missing(Children) then IMP_Children = 1;
MPRINT(EM_DIAGRAM):   length IMP_EducDeg $25;
MPRINT(EM_DIAGRAM):   label IMP_EducDeg = 'Imputed EducDeg';
MPRINT(EM_DIAGRAM):   IMP_EducDeg = EducDeg;
MPRINT(EM_DIAGRAM):   if EducDeg = '' then IMP_EducDeg = '3 - BSc/MSc';
MPRINT(EM_DIAGRAM):   length IMP_GeoLivArea 8;
MPRINT(EM_DIAGRAM):   label IMP_GeoLivArea = 'Imputed GeoLivArea';
MPRINT(EM_DIAGRAM):   IMP_GeoLivArea = GeoLivArea;
MPRINT(EM_DIAGRAM):   if missing(GeoLivArea) then IMP_GeoLivArea = 4;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   label IMP_BirthYear = 'Imputed BirthYear';
MPRINT(EM_DIAGRAM):   length IMP_BirthYear 8;
MPRINT(EM_DIAGRAM):   IMP_BirthYear = BirthYear;
MPRINT(EM_DIAGRAM):   if missing(BirthYear) then IMP_BirthYear = 1968;
MPRINT(EM_DIAGRAM):   label IMP_FirstPolYear = 'Imputed FirstPolYear';
MPRINT(EM_DIAGRAM):   length IMP_FirstPolYear 8;
MPRINT(EM_DIAGRAM):   IMP_FirstPolYear = FirstPolYear;
MPRINT(EM_DIAGRAM):   if missing(FirstPolYear) then IMP_FirstPolYear = 1986;
MPRINT(EM_DIAGRAM):   label IMP_MonthSal = 'Imputed MonthSal';
MPRINT(EM_DIAGRAM):   length IMP_MonthSal 8;
MPRINT(EM_DIAGRAM):   IMP_MonthSal = MonthSal;
MPRINT(EM_DIAGRAM):   if missing(MonthSal) then IMP_MonthSal = 2501.5;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
23243      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
23244      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
23245      quit;
23246      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
23247      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
23248      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
23249      retain ID 8 Node "Impt";
MPRINT(EM_DIAGRAM):   retain ID 8 Node "Impt";
23250      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
23251      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23252      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
23253      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23254      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 10 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23255      proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp2(keep=NAME CREATOR);
23256      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23257      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23258      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23259      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
23260      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
23261      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23262      proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
23263      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
23264      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
23265      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23266      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 24 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23267      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23268      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
23269      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23270      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 24 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23271      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23272      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.
 
23273      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23274      proc append base=EMWS1.Score3_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_FCMP data=_tempx;
23275      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE3_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE3_FCMP has 89 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23276      %macro varDept(fcmpdata=,id=);
23277      %global nobs&id scoreFlag&id;
23278      %let scoreFlag&id = 0;
23279      %if &id=1 or ^&fcmpStart %then %do;
23280      proc sort data=&fcmpdata out=_temp&id nodupkey;
23281      by NAME;
23282      %if EM_SEGMENT ne %then %do;
23283      where id=&id and (LHS in( %let j=1;
23284      %do %while(%scan(EM_SEGMENT, &j) ne );
23285      %let var = %scan(EM_SEGMENT, &j);
23286      "&var" %let j = %eval(&j+1);
23287      %end;
23288      ) or substr(LHS, 1, 3)='EM_');
23289      %end;
23290      %else %do;
23291      where id=&id and substr(LHS, 1, 3)='EM_';
23292      %end;
23293      run;
23294      %let dsid = %sysfunc(open(_temp&id));
23295      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23296      %let dsid = %sysfunc(close(&dsid));
23297      %if &&nobs&id %then %do;
23298      %let scoreFlag&id = 1;
23299      %let fcmpStart = 1;
23300      %end;
23301      %else %let fcmpStart = 0;
23302      %end;
23303      %else %do;
23304      proc sort data=&fcmpdata out=_tempid;
23305      where id=&id;
23306      by LHS;
23307      run;
23308      %let dsid = %sysfunc(open(_tempid));
23309      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23310      %let dsid = %sysfunc(close(&dsid));
23311      %if ^&&nobs&id %then %do;
23312      proc datasets lib=work nolist;
23313      delete _tempid;
23314      run;
23315      quit;
23316      %end;
23317      %else %do;
23318      data _tempAll;
23319      set %let j=%eval(&id-1);
23320      %do x=1 %to &j;
23321      %if &&nobs&x %then %do;
23322      _temp&x %end;
23323      %end;
23324      ;
23325      run;
23326      proc sql;
23327      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
23328      quit;
23329      data _temp&id;
23330      set _temp&id;
23331      where LHS ne '' and NAME ne '' and Node ne '';
23332      run;
23333      proc datasets lib=work nolist;
23334      delete _tempAll;
23335      run;
23336      %let dsid = %sysfunc(open(_temp&id));
23337      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23338      %let dsid = %sysfunc(close(&dsid));
23339      %if ^&&nobs&id %then %do;
23340      proc datasets lib=work nolist;
23341      delete _temp&id;
23342      run;
23343      quit;
23344      %end;
23345      %else %do;
23346      %let scoreFlag&id = 1;
23347      data _temp&id;
23348      set _temp&id;
23349      where LHS ne NAME and node ne '';
23350      run;
23351      %let dsid = %sysfunc(open(_temp&id));
23352      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
23353      %let dsid = %sysfunc(close(&dsid));
23354      %if ^&&nobs&id %then %do;
23355      proc datasets lib=work nolist;
23356      delete _temp&id;
23357      run;
23358      quit;
23359      %end;
23360      %else %do;
23361      proc sort data=_temp&id nodupkey;
23362      by LHS NAME;
23363      run;
23364      %end;
23365      %end;
23366      %end;
23367      %end;
23368      %mend varDept;
23369      %macro optCode(outdata=);
23370      %global fcmpStart;
23371      %let fcmpStart = 0;
23372      %let outputVars = EM_SEGMENT;
23373      %let NumNodes=9;
23374      %do k=1 %to &NumNodes;
23375      %vardept(fcmpdata=&outdata, id=&k);
23376      %end;
23377      %mend optCode;
23378      %optcode(outData=EMWS1.Score3_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_SEGMENT" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE (id=1) and ((LHS='EM_SEGMENT') or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 56 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP2 created, with 6 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 7 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP5 created, with 0 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp5;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMP5 (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp6 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP6 created, with 10 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp6;
MPRINT(VARDEPT):   set _temp6;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP6.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp6 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP6 has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp6 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: The data set WORK._TEMPALL has 17 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp7 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP7 created, with 5 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp7;
MPRINT(VARDEPT):   set _temp7;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP7.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp7 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP7.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP7 has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp6 _temp7 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP1.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: There were 10 observations read from the data set WORK._TEMP6.
NOTE: There were 5 observations read from the data set WORK._TEMP7.
NOTE: The data set WORK._TEMPALL has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp8 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP8 created, with 8 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP8 has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP8 has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp8 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP8.
NOTE: 4 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP8 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score3_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE3_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
23379      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23380      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23381      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23382      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23383      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23384      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23385      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23386      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23387      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23388      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.
 
23389      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
23390      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23391      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23392      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23393      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23394      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23395      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23396      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23397      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23398      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23399      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23400      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23401      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23402      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.
 
23403      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
23404      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
23405      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
23406      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23407      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23408      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
23409      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23410      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23411      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23412      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
23413      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23414      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23415      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23416      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.
 
23417      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23418      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
23419      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
23420      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 23DEC2017:09:43:05;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth = (IMP_PremHealth < 0);
MPRINT(EM_DIAGRAM):   revHousehold = (PremHousehold < 0);
MPRINT(EM_DIAGRAM):   revLife = (IMP_PremLife < 0);
MPRINT(EM_DIAGRAM):   revMotor = (IMP_PremMotor < 0);
MPRINT(EM_DIAGRAM):   revWork = (IMP_PremWork < 0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth = IMP_PremHealth * ( NOT revHealth);
MPRINT(EM_DIAGRAM):   newPremHousehold = PremHousehold * ( NOT revHousehold);
MPRINT(EM_DIAGRAM):   newPremLife = IMP_PremLife * ( NOT revLife);
MPRINT(EM_DIAGRAM):   newPremMotor = IMP_PremMotor * ( NOT revMotor);
MPRINT(EM_DIAGRAM):   newPremWork = IMP_PremWork * ( NOT revWork);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [2] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 2;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHealth - -0.50872279165006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHealth - 0.60847900418104 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHousehold - -0.51505369245157 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHousehold - 0.61605134078266 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremLife - -0.53587579857008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremLife - 0.64095648480965 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremMotor - 0.7585724788734 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremMotor - -0.90732208998715 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremWork - -0.53010825120418 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremWork - 0.63405797046085 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 2;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
23633      %let validvarany = 0;
23634      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
23635      set EMWS1.Score3_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score3_EMINPUTVARS;
23636      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
23637      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
23638      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.SCORE3_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23639      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
23640      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23641      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23642      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
23643      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
23644      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
23645      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
23646      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
23647      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
23648      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
23649      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
23650      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
23651      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
23652      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
23653      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
23654      end;
MPRINT(EM_DIAGRAM):   end;
23655      output;
MPRINT(EM_DIAGRAM):   output;
23656      end;
MPRINT(EM_DIAGRAM):   end;
23657      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: There were 34 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23658      proc sort data=_temp2 out=EMWS1.Score3_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score3_EMINPUTVARS;
23659      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23660      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE3_EMINPUTVARS has 5 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=A2Z_INSU.A2Z_INSURANCE noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD9220_DESKTOP-61HCQ9U_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD9220_DESKTOP-61HCQ9U_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('A2Z_INSU.A2Z_INSURANCE');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score3_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set A2Z_INSU.A2Z_INSURANCE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\MIS;
MPRINT(EM_DIAGRAM):   * Project Name: DM1_project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Segmentation;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 23DEC2017:09:43:05;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label IMP_PremHealth = 'Imputed PremHealth';
MPRINT(EM_DIAGRAM):   length IMP_PremHealth 8;
MPRINT(EM_DIAGRAM):   IMP_PremHealth = PremHealth;
MPRINT(EM_DIAGRAM):   if missing(PremHealth) then IMP_PremHealth = 162.81;
MPRINT(EM_DIAGRAM):   label IMP_PremLife = 'Imputed PremLife';
MPRINT(EM_DIAGRAM):   length IMP_PremLife 8;
MPRINT(EM_DIAGRAM):   IMP_PremLife = PremLife;
MPRINT(EM_DIAGRAM):   if missing(PremLife) then IMP_PremLife = 25.56;
MPRINT(EM_DIAGRAM):   label IMP_PremMotor = 'Imputed PremMotor';
MPRINT(EM_DIAGRAM):   length IMP_PremMotor 8;
MPRINT(EM_DIAGRAM):   IMP_PremMotor = PremMotor;
MPRINT(EM_DIAGRAM):   if missing(PremMotor) then IMP_PremMotor = 298.61;
MPRINT(EM_DIAGRAM):   label IMP_PremWork = 'Imputed PremWork';
MPRINT(EM_DIAGRAM):   length IMP_PremWork 8;
MPRINT(EM_DIAGRAM):   IMP_PremWork = PremWork;
MPRINT(EM_DIAGRAM):   if missing(PremWork) then IMP_PremWork = 25.67;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   revHealth = (IMP_PremHealth < 0);
MPRINT(EM_DIAGRAM):   revHousehold = (PremHousehold < 0);
MPRINT(EM_DIAGRAM):   revLife = (IMP_PremLife < 0);
MPRINT(EM_DIAGRAM):   revMotor = (IMP_PremMotor < 0);
MPRINT(EM_DIAGRAM):   revWork = (IMP_PremWork < 0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   newPremHealth = IMP_PremHealth * ( NOT revHealth);
MPRINT(EM_DIAGRAM):   newPremHousehold = PremHousehold * ( NOT revHousehold);
MPRINT(EM_DIAGRAM):   newPremLife = IMP_PremLife * ( NOT revLife);
MPRINT(EM_DIAGRAM):   newPremMotor = IMP_PremMotor * ( NOT revMotor);
MPRINT(EM_DIAGRAM):   newPremWork = IMP_PremWork * ( NOT revWork);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Drop Node;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Drop;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHealth ;
MPRINT(EM_DIAGRAM):   drop T_newPremHealth ;
MPRINT(EM_DIAGRAM):   if missing( newPremHealth ) then T_newPremHealth = .;
MPRINT(EM_DIAGRAM):   else T_newPremHealth = (newPremHealth - 169.635180503589) * 0.01346436244109;
MPRINT(EM_DIAGRAM):   *** Standardize newPremHousehold ;
MPRINT(EM_DIAGRAM):   drop T_newPremHousehold ;
MPRINT(EM_DIAGRAM):   if missing( newPremHousehold ) then T_newPremHousehold = .;
MPRINT(EM_DIAGRAM):   else T_newPremHousehold = (newPremHousehold - 197.588431590653) * 0.00470478682718;
MPRINT(EM_DIAGRAM):   *** Standardize newPremLife ;
MPRINT(EM_DIAGRAM):   drop T_newPremLife ;
MPRINT(EM_DIAGRAM):   if missing( newPremLife ) then T_newPremLife = .;
MPRINT(EM_DIAGRAM):   else T_newPremLife = (newPremLife - 37.3322793002349) * 0.02644481356546;
MPRINT(EM_DIAGRAM):   *** Standardize newPremMotor ;
MPRINT(EM_DIAGRAM):   drop T_newPremMotor ;
MPRINT(EM_DIAGRAM):   if missing( newPremMotor ) then T_newPremMotor = .;
MPRINT(EM_DIAGRAM):   else T_newPremMotor = (newPremMotor - 305.97255839822) * 0.00754702532898;
MPRINT(EM_DIAGRAM):   *** Standardize newPremWork ;
MPRINT(EM_DIAGRAM):   drop T_newPremWork ;
MPRINT(EM_DIAGRAM):   if missing( newPremWork ) then T_newPremWork = .;
MPRINT(EM_DIAGRAM):   else T_newPremWork = (newPremWork - 37.4512539184974) * 0.02618215251777;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [2] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 2;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHealth ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHealth - -0.50872279165006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHealth - 0.60847900418104 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremHousehold ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremHousehold - -0.51505369245157 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremHousehold - 0.61605134078266 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremLife ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremLife - -0.53587579857008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremLife - 0.64095648480965 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremMotor ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremMotor - 0.7585724788734 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremMotor - -0.90732208998715 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_newPremWork ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_newPremWork - -0.53010825120418 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_newPremWork - 0.63405797046085 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.8421709430404E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 2;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment Variable';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = _SEGMENT_;
MPRINT(EM_DIAGRAM):   drop 'BirthYear'n 'Children'n 'ClaimsRate'n 'CustID'n 'CustMonVal'n 'EducDeg'n 'FirstPolYear'n 'GeoLivArea'n 'MonthSal'n 'PremHealth'n 'PremHousehold'n 'PremLife'n 'PremMotor'n 'PremWork'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score3_EMOUTPUTVARS noprint out=EMWS1.Score3_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
23923      data EMWS1.Score3_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score3_EMOUTPUTVARS;
23924      set EMWS1.Score3_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score3_EMOUTPUTVARS(keep=name type label rename=(type=itype));
23925      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
23926      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
23927      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
23928      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
23929      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
23930      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
23931      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
23932      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
23933      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' /* removed EM_ROI */
23934      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
23935      else do;
MPRINT(EM_DIAGRAM):   else do;
23936      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
23937      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
23938      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
23939      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
23940      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
23941      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
23942      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
23943      end;
MPRINT(EM_DIAGRAM):   end;
23944      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.SCORE3_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE3_EMOUTPUTVARS has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23945      proc sort data=EMWS1.Clus_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
23946      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23947      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.CLUS_CMETA_TRAIN.
NOTE: The data set WORK.META has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23948      proc sort data=EMWS1.Score3_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score3_EMOUTPUTVARS;
23949      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23950      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.SCORE3_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE3_EMOUTPUTVARS has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23951      data EMWS1.Score3_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score3_EMOUTPUTVARS;
23952      merge WORK.META EMWS1.Score3_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score3_EMOUTPUTVARS(in=_a);
23953      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
23954      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23955      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score3";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score3";
23956      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
23957      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.META.
NOTE: There were 18 observations read from the data set EMWS1.SCORE3_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE3_EMOUTPUTVARS has 18 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23958      %let _cn = %sysfunc(getoption(CENTER));
23959      %let _nb = %sysfunc(getoption(NUMBER));
23960      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
23961      title;
MPRINT(EM_DIAGRAM):   title;
23962      proc print data=EMWS1.Score3_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score3_EMINPUTVARS noobs label;
23963      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
23964      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
23965      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
23966      run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE3_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23967      title10;
MPRINT(EM_DIAGRAM):   title10;
23968      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
23969      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23970      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23971      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23972      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23973      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23974      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
23975      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23976      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23977      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23978      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.
 
23979      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23980      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
23981      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
23982      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23983      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23984      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23985      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
23986      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23987      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
23988      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
23989      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
23990      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23991      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
23992      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.
 
23993      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23994      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
23995      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
23996      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23997      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
23998      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
23999      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24000      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24001      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24002      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24003      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24004      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24005      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24006      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.
 
24007      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24008      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
24009      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
24010      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24011      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24012      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24013      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24014      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24015      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24016      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
24017      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24018      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24019      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24020      create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar2 as select p.lhs, p2.formula, p2.file from _temp8 p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR2 created, with 4 rows and 3 columns.
 
24021      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24022      data _CodeVar2;
MPRINT(EM_DIAGRAM):   data _CodeVar2;
24023      set _all_ _CodeVar2 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar2 _postall_;
24024      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR2.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24025      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24026      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24027      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24028      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24029      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24030      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
24031      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24032      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24033      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24034      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp7 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 5 rows and 3 columns.
 
24035      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24036      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
24037      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
24038      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 5 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24039      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
24040      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24041      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
24042      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24043      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
24044      set EMWS1.Trans2_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans2_EMSCOREVAR;
24045      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
24046      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS2_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24047      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
24048      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp6 p, EMWS1.Trans2_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 10 rows and 3 columns.
 
24049      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24050      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
24051      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
24052      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24053      %let _cn = %sysfunc(getoption(CENTER));
24054      %let _nb = %sysfunc(getoption(NUMBER));
24055      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
24056      title;
MPRINT(EM_DIAGRAM):   title;
24057      proc print data=EMWS1.Score3_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score3_EMOUTPUTVARS noobs label;
24058      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
24059      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
24060         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" LABEL = "Label";
24061      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24062      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
24063      run;
 
NOTE: There were 18 observations read from the data set EMWS1.SCORE3_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24064      title10;
MPRINT(EM_DIAGRAM):   title10;
24065      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
24066      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24067      * Score3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score3: Computing metadata for TRAIN data;
24068      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.SCORE3_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.23 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score3_TRAIN out=WORK.M29677E7 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M29677E7;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M29677E7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M29677E7;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M29677E7;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M101P8FI NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3HQGN1P(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   set WORK.M101P8FI;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score3";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE3_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
24415      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24416      * Score3: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score3: Computing metadata for SCORE data;
24417      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score3_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score3_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Score3_SCORE;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score3_SCORE out=WORK.M2_6OI6Y noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_6OI6Y;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_6OI6Y(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_6OI6Y;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_6OI6Y;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1M4ES9_ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IL5AML(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M4ES9_;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids2_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids2_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score3_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score3";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = '';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "23 December 2017" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09:43:08 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                23 December 2017
Time:                09:43:08 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_B8L3C "C:\Users\misil\Desktop\MIS\DM1_project\Workspaces\EMWS1\Score3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_B8L3C new;
MPRINT(EM_DIAGRAM):   run;
24795      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
24796      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
24797      NAME="_SEGMENT_";
MPRINT(EM_DIAGRAM):   NAME="_SEGMENT_";
24798      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
24799      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
24800      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
24801      output;
MPRINT(EM_DIAGRAM):   output;
24802      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
 
24803      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
24804      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
24805      proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
24806      table _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table _SEGMENT_ / missing;
24807      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10296 observations read from the data set A2Z_INSU.A2Z_INSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS3_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.DROP_TRAIN.
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: There were 9889 observations read from the data set EMWS1.FILTER2_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 2 observations and 8 variables.
NOTE: There were 9889 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24808      quit;
24809      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
24810      data WORK.Score3_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score3_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
24811      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
24812         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
24813      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
24814      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
24815      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
24816      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
24817      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
24818      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
24819      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
24820      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
24821      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
24822      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
24823      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
24824      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
24825      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
24826      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
24827      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
24828      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
24829      output;
MPRINT(EM_DIAGRAM):   output;
24830      end;
MPRINT(EM_DIAGRAM):   end;
24831      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
24832      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
24833      proc sort data=WORK.Score3_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score3_BAR NOTHREADS;
24834      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
24835      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24836      proc sort data=WORK.M0F3I018;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M0F3I018;
24837      by Name;
MPRINT(EM_DIAGRAM):   by Name;
24838      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M0F3I018.
NOTE: The data set WORK.M0F3I018 has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24839      data WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score3_BAR;
24840      merge WORK.Score3_BAR(in=_a) WORK.M0F3I018(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score3_BAR(in=_a) WORK.M0F3I018(keep=Name Role rename=(Name=_Variable_));
24841      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
24842      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
24843      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
24844      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: There were 1 observations read from the data set WORK.M0F3I018.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24845      data WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score3_BAR;
24846      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
24847      retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
24848      set WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score3_BAR;
24849      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24850      proc append base=EMWS1.Score3_BAR data=WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_BAR data=WORK.Score3_BAR;
24851      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE3_BAR to EMWS1.SCORE3_BAR.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: The data set EMWS1.SCORE3_BAR has 2 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24852      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
24853      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
24854      NAME="_SEGMENT_";
MPRINT(EM_DIAGRAM):   NAME="_SEGMENT_";
24855      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
24856      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
24857      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
24858      output;
MPRINT(EM_DIAGRAM):   output;
24859      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24860      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
24861      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
24862      proc freq data = EMWS1.Score3_SCORE order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Score3_SCORE order=formatted addnames;
24863      table _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table _SEGMENT_ / missing;
24864      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.TEMPFREQ has 2 observations and 8 variables.
NOTE: There were 407 observations read from the data set EMWS1.SCORE3_SCORE.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24865      quit;
24866      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
24867      data WORK.Score3_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score3_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
24868      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
24869         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
24870      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
24871      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
24872      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
24873      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
24874      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
24875      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
24876      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
24877      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
24878      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
24879      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
24880      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
24881      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
24882      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
24883      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
24884      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
24885      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
24886      output;
MPRINT(EM_DIAGRAM):   output;
24887      end;
MPRINT(EM_DIAGRAM):   end;
24888      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
24889      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
24890      proc sort data=WORK.Score3_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score3_BAR NOTHREADS;
24891      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
24892      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24893      proc sort data=WORK.M3FH1BPA;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M3FH1BPA;
24894      by Name;
MPRINT(EM_DIAGRAM):   by Name;
24895      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M3FH1BPA.
NOTE: The data set WORK.M3FH1BPA has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24896      data WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score3_BAR;
24897      merge WORK.Score3_BAR(in=_a) WORK.M3FH1BPA(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score3_BAR(in=_a) WORK.M3FH1BPA(keep=Name Role rename=(Name=_Variable_));
24898      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
24899      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
24900      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
24901      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: There were 1 observations read from the data set WORK.M3FH1BPA.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24902      data WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score3_BAR;
24903      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
24904      retain DATAROLE "SCORE";
MPRINT(EM_DIAGRAM):   retain DATAROLE "SCORE";
24905      set WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score3_BAR;
24906      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: The data set WORK.SCORE3_BAR has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24907      proc append base=EMWS1.Score3_BAR data=WORK.Score3_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score3_BAR data=WORK.Score3_BAR;
24908      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE3_BAR to EMWS1.SCORE3_BAR.
NOTE: There were 2 observations read from the data set WORK.SCORE3_BAR.
NOTE: 2 observations added.
NOTE: The data set EMWS1.SCORE3_BAR has 4 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24909      data EMWS1.Score3_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
MPRINT(EM_DIAGRAM):    data EMWS1.Score3_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
24910      set EMWS1.Score3_BAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Score3_BAR;
24911      label VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" DATAROLE= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_outputType_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE= "Variable Name" DATAROLE= "Data Role" TYPE = "Output Type";
24912      select(_VARIABLE_);
MPRINT(EM_DIAGRAM):   select(_VARIABLE_);
24913      when("_SEGMENT_") TYPE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   when("_SEGMENT_") TYPE = 'SEGMENT';
24914      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
24915      end;
MPRINT(EM_DIAGRAM):   end;
24916      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VARIABLE is uninitialized.
NOTE: There were 4 observations read from the data set EMWS1.SCORE3_BAR.
NOTE: The data set EMWS1.SCORE3_BAR has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24917      proc sort data = EMWS1.Score3_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Score3_BAR NOTHREADS;
24918      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
24919      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.SCORE3_BAR.
NOTE: The data set EMWS1.SCORE3_BAR has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24920      %let _cn = %sysfunc(getoption(CENTER));
24921      %let _nb = %sysfunc(getoption(NUMBER));
24922      options nonumber nocenter;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
24923      title;
MPRINT(EM_DIAGRAM):   title;
24924      proc print data = EMWS1.Score3_BAR noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Score3_BAR noobs label;
24925      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
24926      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24927      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Class Variable Summary Statistics";
MPRINT(EM_DIAGRAM):   run;
24928      run;
 
NOTE: There were 4 observations read from the data set EMWS1.SCORE3_BAR.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
24929      title10;
MPRINT(EM_DIAGRAM):   title10;
24930      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
