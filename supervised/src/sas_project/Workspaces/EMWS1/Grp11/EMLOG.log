*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:04:55 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:52 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:04:52 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2GV6OCU "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2GV6OCU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:52 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:52 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3420975    proc freq data=EMWS1.Grp11_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp11_VariableSet noprint;
3420976    table ROLE*LEVEL/out=WORK.Grp11META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp11META;
3420977    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP11_VARIABLESET.
NOTE: The data set WORK.GRP11META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
3420978    proc print data=WORK.Grp11META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp11META label noobs;
3420979    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3420980    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3420981    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3420982    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3420983    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP11META.
NOTE: The PROCEDURE PRINT printed page 2290.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3420984    title10;
MPRINT(EM_DIAGRAM):   title10;
3420985    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp11: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp11: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3421308    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3421309    * Grp11: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp11: Generation of macros and macro variables;
3421310    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3421311    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3421312    %let EMEXCEPTIONSTRING=;
3421313    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3421314    * TRAIN: Grp11;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp11;
3421315    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3421316    %let EM_ACTION = TRAIN;
3421317    %let syscc = 0;
3421318    %macro main;
3421319
3421320       filename temp catalog 'sashelp.emutil.gp_macros.source';
3421321       %include temp;
3421322       filename temp;
3421323
3421324       %SetProperties;
3421325
3421326       %if %upcase(&EM_ACTION) = CREATE %then %do;
3421327
3421328           filename temp catalog 'sashelp.emutil.gp_create.source';
3421329           %include temp;
3421330           filename temp;
3421331
3421332           %create;
3421333       %end;
3421334       %else
3421335       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3421336
3421337           filename temp catalog 'sashelp.emutil.gp_train.source';
3421338           %include temp;
3421339           filename temp;
3421340
3421341           %train;
3421342       %end;
3421343       %else
3421344       %if %upcase(&EM_ACTION) = SCORE %then %do;
3421345
3421346           filename temp catalog 'sashelp.emutil.gp_score.source';
3421347           %include temp;
3421348           filename temp;
3421349
3421350           %score;
3421351       %end;
3421352       %else
3421353       %if %upcase(&EM_ACTION) = REPORT %then %do;
3421354
3421355           filename temp catalog 'sashelp.emutil.gp_report.source';
3421356           %include temp;
3421357           filename temp;
3421358
3421359           %report;
3421360
3421361       %end;
3421362       %else
3421363       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3421364
3421365           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3421366           %include temp;
3421367           filename temp;
3421368
3421369           %postloop;
3421370
3421371       %end;
3421372
3421373       %doendm:
3421374    %mend main;
3421375
3421376    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3421377   +%macro SetProperties;
3421378   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3421379   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3421380   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3421381   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3421382   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3421383   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3421384   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3421385   +%mend SetProperties;
3421386   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3421387   +%macro scoreValidTest(data=, out=);
3421389   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3421390   +       data &out / view = &out;
3421391   +          retain _RESAMP_ 1;
3421392   +          set &data;
3421393   +       run;
3421394   +   %end;
3421396   +%mend scoreValidTest;
3421398   +%macro getVariables;
3421399   +   %if "&emloopnumber" = "1" %then %do;
3421400   +       data _null_;
3421401   +          retain numgoup 0;
3421402   +          set &em_data_variableset end=eof;
3421403   +          %if &em_num_target = 1 %then %do;
3421404   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3421405   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3421406   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3421407   +              %end;
3421408   +              %else
3421409   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3421410   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3421411   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3421412   +              %end;
3421413   +          %end;
3421414   +          %else %do;
3421415   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3421416   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3421417   +              else
3421418   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3421419   +          %end;
3421420   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3421421   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3421422   +             numgroup + 1;
3421423   +          end;
3421424   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3421425   +       run;
3421426   +    %end;
3421427   +    %else %do;
3421428   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3421429   +            data _null_;
3421430   +               retain numgoup 0;
3421431   +               set &em_data_variableset end=eof;
3421432   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3421433   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3421434   +               numgroup + 1;
3421435   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3421436   +            run;
3421437   +          %end;
3421438   +            %else
3421439   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3421440   +            %em_getName(key=BOOSTINFO,   type=DATA);
3421441   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3421442   +                data _null_;
3421443   +                   set &em_user_boostinfo;
3421444   +                   call symput('emboostvar', strip(_TARGET_));
3421445   +                run;
3421446   +            %end;
3421447   +        %end;
3421448   +        %else
3421449   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3421450   +                %em_getName(key=BAGINFO,   type=DATA);
3421451   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3421452   +                    data _null_;
3421453   +                       set &em_user_baginfo;
3421454   +                      call symput('embagvar', strip(_TARGET_));
3421455   +                    run;
3421456   +                %end;
3421457   +            %end;
3421458   +    %end;
3421459   +%mend getVariables;
3421461   +%macro gp_bag(targetname=);
3421462   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3421463   +        %put LOOP MODE:   &emloopmode ;
3421464   +        %put LOOP NUMBER: &emloopnumber;
3421465   +        %put BAGGING TARGET: &targetname;
3421466   +   %end;
3421468   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3421469   +   %include temp;
3421470   +   filename temp;
3421472   +   %em_getName(key=BAGINFO,    type=DATA);
3421473   +   %em_getName(key=EMLOOPINFO, type=DATA);
3421475   +   %if &emloopnumber = 1 %then %do;
3421476   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3421477   +       data _null_;
3421478   +          file gpdelta;
3421479   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3421480   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3421481   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3421482   +          put "end;";
3421483   +       run;
3421484   +       filename gpdelta;
3421486   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3421487   +           proc datasets lib=&em_lib nolist;
3421488   +              delete &em_nodeid._baginfo;
3421489   +           run;
3421490   +       %end;
3421492   +       %if "%em_freq" ne "" %then %do;
3421493   +           proc means data=&em_import_data sum;
3421494   +              var %em_freq;
3421495   +              output out = _tempds sum=sumfreq;
3421496   +           run;
3421497   +           quit;
3421498   +           data _null_;
3421499   +              set _tempDs;
3421500   +              call symput('_sumfreq', put(sumfreq, best12.));
3421501   +           run;
3421502   +       %end;
3421503   +       %else %do;
3421504   +           proc sql noprint;
3421505   +              select count(*) into :_sumfreq
3421506   +              from &em_import_data;
3421507   +           quit;
3421508   +       %end;
3421510   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3421511   +           data _null_;
3421512   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3421513   +           run;
3421514   +       %end;
3421515   +       %else
3421516   +           %let _size = &em_property_sizeobs;
3421518   +       data &em_user_baginfo;
3421519   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3421520   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3421521   +          _TARGET_   ="&targetname";
3421522   +          _SUMFREQ_  =&_sumfreq;
3421523   +           _SIZE_    = &_size;
3421524   +          output;
3421525   +       run;
3421526   +       data &em_user_emloopinfo;
3421527   +          length MODE $8;
3421528   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3421529   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421530   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3421531   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3421532   +           MODE='Bagging';
3421533   +       run;
3421535   +       data &em_data_eminfo;
3421536   +          length TARGET KEY $32  DATA $43;
3421537   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3421538   +       run;
3421539   +   %end;
3421540   +   %else %do;
3421541   +      data _null_;
3421542   +         set &em_user_baginfo;
3421543   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3421544   +         call symput('_size', put(_size_, best12.));
3421545   +      run;
3421546   +   %end;
3421548   +   %let bagsumFreq  = &_sumFreq;
3421549   +   %let bagSize     = &_Size;
3421551   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3421552   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3421554   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3421555   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3421557   +   %doendbg:
3421559   +%mend gp_bag;
3421562   +%macro gp_boost(targetname=);
3421563   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3421564   +       %put LOOP MODE:   &emloopmode ;
3421565   +       %put LOOP NUMBER: &emloopnumber;
3421566   +        %put BAGGING TARGET: &targetname;
3421567   +   %end;
3421569   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3421570   +   %include temp;
3421571   +   filename temp;
3421573   +   %em_getname(key=EMLOOPINFO, type=DATA);
3421574   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3421575   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3421576   +   %em_getName(key=BOOSTINFO,   type=DATA);
3421578   +   %if &emloopnumber = 1 %then %do;
3421579   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3421580   +       data _null_;
3421581   +          file gpdelta;
3421582   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3421583   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3421584   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3421585   +          put "end;";
3421586   +       run;
3421587   +       filename gpdelta;
3421589   +       %let deleteString =;
3421590   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3421591   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3421592   +       %if "&deleteString" ne "" %then %do;
3421593   +           proc datasets lib=&em_lib nolist;
3421594   +              delete &deleteString;
3421595   +           run;
3421596   +       %end;
3421598   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3421600   +       data &em_user_boostinfo;
3421601   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3421602   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3421603   +          _TARGET_          ="&targetname";
3421604   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3421605   +          _SUMFREQ_         =&_sumfreq;
3421606   +       run;
3421607   +       data &em_user_emloopinfo;
3421608   +          length MODE $8;
3421609   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3421610   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421611   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3421612   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3421613   +           MODE='Boosting';
3421614   +       run;
3421616   +       data &em_data_eminfo;
3421617   +          length TARGET KEY $32  DATA $43;
3421618   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3421619   +       run;
3421621   +   %end;
3421622   +   %else %do;
3421623   +       %global _dmboodiv;
3421624   +       %let dmboosf = %upcase(&targetname);
3421625   +       %if %sysfunc(length(&targetname))> 30 %then
3421626   +           %let dmboosf =  %substr(&targetname, 1, 30);
3421628   +       data _null_;
3421629   +          set &em_user_boostinfo;
3421630   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3421631   +       run;
3421633   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3421635   +       data &em_user_boostinfo;
3421636   +          set &em_user_boostinfo;
3421637   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3421638   +       run;
3421640   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3421642   +   %end;
3421644   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3421645   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3421647   +   %doendbst:
3421649   +%mend gp_boost;
3421651   +%macro gp_group(numgroupvar=, groupvar=);
3421652   +   %em_getname(key=GROUPINFO, type=DATA);
3421653   +   %em_getName(key=LOOPINFO,  type=DATA);
3421654   +   %em_getName(key=EMGROUPINFO, type=DATA);
3421656   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3421657   +       ods listing close;
3421658   +       %if &numgroupvar = 1 %then %do;
3421659   +           ods output onewayfreqs=temp;
3421660   +       %end;
3421661   +       %else %do;
3421662   +           ods output crosstabfreqs=temp;
3421663   +       %end;
3421664   +       proc freq data=&em_import_data;
3421665   +          table
3421667   +          %let tableString =;
3421668   +          %let freqString  =;
3421669   +          %do i=1 %to &numgroupvar;
3421670   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3421671   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3421672   +              %let freqString = &freqString.1;
3421673   +          %end;
3421674   +          &tableString / missing;
3421675   +       run;
3421676   +       ods listing;
3421677   +       %if &numgroupvar = 1 %then %do;
3421678   +           data _null_;
3421679   +              retain totalobs 0;
3421680   +              set temp end=eof;
3421681   +              totalobs + frequency;
3421682   +              if eof then
3421683   +                 call symput('_totalObs_', put(totalobs, best.));
3421684   +           run;
3421686   +           proc sort data=temp out=loopinfo nodupkey;
3421687   +              by &groupvar;
3421688   +              where frequency>=&em_property_minimumObs;
3421689   +           run;
3421690   +       %end;
3421691   +       %else %do;
3421692   +           data _null_;
3421693   +              set temp;
3421694   +              where _type_='00';
3421695   +              call symput('_totalObs_', put(frequency, best.));
3421696   +           run;
3421697   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3421698   +              by &groupvar;
3421699   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3421700   +           run;
3421701   +       %end;
3421703   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3421704   +       filename _pregrp "&em_user_precode";
3421706   +       %let dsid = %sysfunc(open(loopinfo));
3421707   +       %do i=1 %to &numgroupvar;
3421708   +           %let varname = %scan(&groupvar, &i, %str( ));
3421709   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3421710   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3421711   +           %if %index(&varfmt, -) %then %do;
3421712   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3421713   +           %end;
3421715   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3421716   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3421717   +           %let fmttype&i = &vartype;
3421718   +           %let fmtlen&i  = &varlen;
3421720   +           %let fmtvar&i =;
3421721   +           %let fmt&i    =;
3421722   +           %if "&varfmt" ne "" %then %do;
3421723   +              %let fmtvar&i  = _FORMAT&i._;
3421724   +              %let fmt&i     = &varfmt;
3421725   +           %end;
3421726   +       %end;
3421727   +       %let dsid = %sysfunc(close(&dsid));
3421729   +       data _null_;
3421730   +          %do i=1 %to &numgroupvar;
3421731   +              %if "&&fmt&i" ne "" %then %do;
3421732   +                  retain len_&i 0;
3421733   +              %end;
3421734   +          %end;
3421736   +          set loopinfo end=eof;
3421737   +          file _pregrp;
3421739   +          %do i=1 %to &numgroupvar;
3421740   +              %let varname = %scan(&groupvar, &i, %str( ));
3421741   +              %if "&&fmt&i" ne "" %then %do;
3421742   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3421743   +                    len_&i = length(put(&varname, &&fmt&i));
3421744   +              %end;
3421745   +          %end;
3421747   +          if eof then do;
3421748   +             %do i=1 %to &numgroupvar;
3421749   +                 %let varname = %scan(&groupvar, &i, %str( ));
3421750   +                 %if "&&fmt&i" ne "" %then %do;
3421751   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3421752   +                     put "drop &&fmtvar&i" len_&i ";";
3421753   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3421754   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3421755   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3421756   +                 %end;
3421757   +              %end;
3421758   +          end;
3421759   +      run;
3421761   +      data loopinfo;
3421762   +         set loopinfo;
3421763   +         %do i=1 %to &numgroupvar;
3421764   +             %let varname = %scan(&groupvar, &i, %str( ));
3421765   +             %if "&&fmt&i" ne "" %then %do;
3421766   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3421767   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3421768   +             %end;
3421769   +         %end;
3421770   +      run;
3421771   +      filename _pregrp;
3421773   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3421774   +          data temp;
3421775   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3421776   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3421777   +      %end;
3421778   +      %else %do;
3421779   +          data &em_user_groupinfo;
3421780   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3421781   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3421782   +             retain _TARGET_ '';
3421783   +      %end;
3421785   +          set loopinfo;
3421786   +          _LOOP_= _N_;
3421787   +          _WHERE_ = '';
3421788   +          _WHEREDESC_  = '';
3421789   +          %do i=1 %to &numgroupvar;
3421790   +              %let varname = %scan(&groupvar, &i, %str( ));
3421791   +              %if "&&fmt&i" eq "" %then %do;
3421792   +                  %if "&&fmtType&i" eq "N" %then %do;
3421793   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3421794   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3421795   +                   %end;
3421796   +                  %else %do;
3421797   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3421798   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3421799   +                  %end;
3421800   +              %end;
3421801   +              %else %do;
3421802   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3421803   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3421804   +              %end;
3421805   +              %if &i < &numgroupvar %then %do;
3421806   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3421807   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3421808   +              %end;
3421809   +          %end;
3421810   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3421811   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3421812   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3421813   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3421814   +          %end;
3421815   +      run;
3421817   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3421818   +          data target;
3421819   +             length _TARGET_ $32;
3421820   +              %do i=1 %to &em_num_target;
3421821   +                  %let varname = %scan(%em_target, &i, %str( ));
3421822   +                  _TARGET_ = "&varname";
3421823   +                  output;
3421824   +              %end;
3421825   +          run;
3421826   +          proc sql;
3421827   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3421828   +          quit;
3421829   +          data &em_user_groupinfo;
3421830   +             set &em_user_groupinfo;
3421831   +             _LOOP_=_N_;
3421832   +          run;
3421833   +      %end;
3421835   +      data &em_data_eminfo;
3421836   +         length TARGET KEY $32  DATA $43;
3421837   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3421838   +      run;
3421840   +      data &em_user_emloopinfo;
3421841   +         set &em_user_groupinfo;
3421842   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3421843   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421844   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3421845   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3421846   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3421847   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3421848   +         %end;
3421849   +         %else %do;
3421850   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421851   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3421852   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3421853   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3421854   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3421855   +         %end;
3421856   +      run;
3421858   +      proc datasets lib=work nolist;
3421859   +          delete temp loopinfo
3421860   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3421861   +              target
3421862   +          %end;
3421863   +          ;
3421864   +      run;
3421866   +   %end;
3421868   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3421869   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3421870   +       data _null_;
3421871   +          length quotedTarget $32;
3421872   +          set &em_user_groupinfo;
3421873   +          file gpdelta;
3421874   +          if _N_ = &emloopnumber then do;
3421875   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3421876   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3421878   +             %do i=1 %to &numgroupvar;
3421879   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3421880   +                 put "if upcase(NAME)= '&gvar' then delete;";
3421881   +             %end;
3421882   +          end;
3421883   +       run;
3421884   +   %end;
3421885   +   %else %do;
3421886   +       data _null_;
3421887   +          set &em_user_groupinfo;
3421888   +          file gpdelta;
3421889   +          if _N_ = &emloopnumber then do;
3421890   +             %do i=1 %to &numgroupvar;
3421891   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3421892   +                 put "if upcase(NAME)= '&gvar' then delete;";
3421893   +             %end;
3421894   +          end;
3421895   +       run;
3421896   +   %end;
3421897   +   filename gpdelta;
3421899   +   %let nobs=0;
3421900   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3421901   +   %if &dsid>0 %then %do;
3421902   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3421903   +       %let dsid = %sysfunc(close(&dsid));
3421904   +   %end;
3421906   +   %if ^&nobs  %then
3421907   +       %let emloopmode =;
3421908   +   %else
3421909   +       %if &nobs< &emloopnumber %then
3421910   +           %let emloopmode = POSTLOOP;
3421911   +        %else
3421912   +        %let emloopmode = LOOP;
3421913   +%mend gp_group;
3421915   +%macro gp_Index;
3421917   +   %em_getName(key=INDEXINFO,  type=DATA);
3421918   +   %em_getName(key=EMLOOPINFO, type=DATA);
3421920   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3421921   +       data &em_user_indexinfo;
3421922   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3421923   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3421924   +          _TARGET_   ="";
3421925   +          _WHERE_    ="";
3421926   +          output;
3421927   +       run;
3421928   +       data &em_data_eminfo;
3421929   +          length TARGET KEY $32  DATA $43;
3421930   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3421931   +       run;
3421933   +       data &em_user_emloopinfo;
3421934   +          length MODE $8;
3421935   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3421936   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421937   +          set &em_user_indexinfo(keep=_LOOP_ );
3421938   +          MODE='Index';
3421939   +       run;
3421940   +   %end;
3421942   +%mend gp_index;
3421944   +%macro gp_Target;
3421945   +   %let TargetName = %scan(%em_target, &emloopnumber);
3421946   +   %if "&targetName" eq "" %then %do;
3421947   +       %goto doendgpt;
3421948   +   %end;
3421950   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3421951   +       %put GP_TARGET;
3421952   +       %put &emLoopnumber &TargetName;
3421953   +   %end;
3421955   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3421956   +   data _null_;
3421957   +      file gpdelta;
3421958   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3421959   +   run;
3421960   +   filename gpdelta;
3421962   +   %if &emloopnumber eq 1 %then %do;
3421963   +       %em_getName(key=TARGETINFO,  type=DATA);
3421964   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3421966   +       data &em_user_targetinfo;
3421967   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3421968   +          retain _LOOP_;
3421969   +          _WHERE_ = '';
3421970   +          %do i=1 %to &em_num_target;
3421971   +              %let varname = %scan(%em_target, &i, ' ');
3421972   +              _TARGET_ = "&varname";
3421973   +              _LOOP_+1;
3421974   +              output;
3421975   +           %end;
3421976   +       run;
3421977   +       data &em_user_emloopinfo;
3421978   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3421979   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3421980   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3421981   +      run;
3421983   +       data &em_data_eminfo;
3421984   +          length TARGET KEY $32  DATA $43;
3421985   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3421986   +       run;
3421987   +   %end;
3421989   +   %doendgpt:
3421990   +%mend gp_target;
3421992   +%macro train;
3421993   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3421994   +       %put LOOP MODE:   &emloopmode ;
3421995   +       %put LOOP NUMBER: &emloopnumber;
3421996   +   %end;
3421998   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3422000   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3422002   +       %let hpdmFlag = 0;
3422003   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3422004   +            data _null_;
3422005   +               set &em_import_DATA_eminfo;
3422006   +               where KEY = "HPDMSAMPLE";
3422007   +               call symput('hpdmFlag', '1');
3422008   +            run;
3422009   +       %end;
3422010   +       %if &hpdmFlag %then %do;
3422011   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3422012   +           %goto doendmain;
3422013   +       %end;
3422014   +   %end;
3422016   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3422017   +   %em_getname(key=GROUPINFO,  type=DATA);
3422018   +   %em_getname(key=BOOSTINFO,  type=DATA);
3422019   +   %em_getname(key=BAGINFO,    type=DATA);
3422020   +   %em_getname(key=TARGETINFO, type=DATA);
3422021   +   %em_getname(key=INDEXINFO,  type=DATA);
3422022   +   %em_getname(key=EMINFO,  type=DATA);
3422024   +   %if "&emloopnumber" = "1" %then %do;
3422025   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3422026   +       filename _pregrp "&em_user_precode";
3422027   +       data _null_;
3422028   +         rc = fdelete('_pregrp');
3422029   +       run;
3422030   +       filename _pregrp;
3422032   +       %let members =;
3422033   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3422034   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3422035   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3422036   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3422037   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3422038   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3422039   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3422041   +       %if "&members" ne "" %then %do;
3422042   +           proc datasets lib=&em_lib nolist;
3422043   +              delete &members;
3422044   +           run;
3422045   +      %end;
3422046   +   %end;
3422048   +   %let emboostvar    =;
3422049   +   %let embagvar      =;
3422050   +   %let emgroupvar    =;
3422051   +   %let emnumgroupvar =;
3422052   +   %getVariables;
3422054   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3422055   +       %if &EM_NUM_TARGET>=1 %then %do;
3422056   +           %gp_target;
3422057   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3422058   +               %let emloopmode= LOOP;
3422059   +           %else
3422060   +              %let emloopmode = POSTLOOP;
3422061   +       %end;
3422062   +       %else %do;
3422063   +           %let emloopmode = ;
3422064   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3422065   +           %goto doendmain;
3422066   +       %end;
3422067   +   %end;
3422068   +   %else
3422069   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3422070   +       %let emloopmode=;
3422071   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3422072   +           proc delete data=&em_data_eminfo;
3422073   +           run;
3422074   +       %end;
3422075   +   %end;
3422076   +   %else
3422077   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3422078   +       %gp_index;
3422079   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3422080   +           %let emloopmode= LOOP;
3422081   +       %else
3422082   +           %let emloopmode= POSTLOOP;
3422083   +   %end;
3422084   +   %else
3422085   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3422086   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3422087   +           %let emloopmode = ;
3422088   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3422089   +           %goto doendmain;
3422090   +       %end;
3422092   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3422093   +   %end;
3422094   +   %else
3422095   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3422096   +       %if "&emboostvar" eq "" %then %do;
3422097   +           %let emloopmode = ;
3422098   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3422099   +           %goto doendmain;
3422100   +       %end;
3422102   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3422103   +           %let emloopmode= LOOP;
3422104   +           %gp_boost(targetname=&emboostvar);
3422106   +       %end;
3422107   +       %else
3422108   +           %let emloopmode= POSTLOOP;
3422109   +   %end;
3422110   +   %else
3422111   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3422112   +       %if "&embagvar" eq "" %then %do;
3422113   +           %let emloopmode = ;
3422114   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3422115   +           %goto doendmain;
3422116   +       %end;
3422118   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3422119   +           %let emloopmode= LOOP;
3422120   +           %gp_bag(targetname=&embagvar);
3422121   +       %end;
3422122   +       %else
3422123   +           %let emloopmode= POSTLOOP;
3422124   +   %end;
3422127   +   %if &emloopmode eq "" %then %do;
3422128   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3422129   +       %let member = %scan(&em_data_eminfo, 2, .);
3422130   +       proc datasets lib=&lib nolist;
3422131   +          delete &member;
3422132   +       run;
3422133   +   %end;
3422135   +   %doendmain:
3422137   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3422138   +       %put NEW LOOP MODE: &emloopmode;
3422139   +   %end;
3422141   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3422142   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3422143   +       %include temp;
3422144   +       filename temp;
3422146   +       %postloop;
3422147   +   %end;
3422149   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp11_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP11_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp11_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp11\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:04:53 o'clock,
      Create Time=02 June 2018 16:26:12 o'clock
 
NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP11_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3422151   +%macro postloop;
3422152   +   %let deleteString =;
3422153   +
3422154   +   %em_getname(key=boostweight, type=DATA);
3422155   +   %em_getname(key=boostscore,  type=DATA);
3422156   +
3422157   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3422158   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3422159   +   %if "&deleteString" ne "" %then %do;
3422160   +       proc datasets lib=&em_lib nolist;
3422161   +          delete &deleteString;
3422162   +       run;
3422163   +   %end;
3422164   +
3422165   +   %em_register(key=EMLOOPINFO,    type=DATA);
3422166   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3422167   +    proc print data=&em_user_emloopinfo noobs label;
3422168   +       title9 'Group Summary';
3422169   +    run;
3422170   +    title9;
3422171   +
3422172   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3422173   +
3422174   +%mend postloop;
3422175   +
3422176   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp11_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp11_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP11_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2291.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.64278704051058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp11;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3422177    *------------------------------------------------------------*;
3422178    * End TRAIN: Grp11;
3422179    *------------------------------------------------------------*;
3422180
 
3422181    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3422182    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3422183    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3422184    ;
MPRINT(EM_DIAGRAM):   ;
3422185    ;
MPRINT(EM_DIAGRAM):   ;
3422186    ;
MPRINT(EM_DIAGRAM):   ;
3422187    ;
MPRINT(EM_DIAGRAM):   ;
3422188    quit;
MPRINT(EM_DIAGRAM):   quit;
3422189    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3422190    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3422191    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3422192    /*; *"; *'; */
3422193    ;
MPRINT(EM_DIAGRAM):   ;
3422194    run;
MPRINT(EM_DIAGRAM):   run;
3422195    quit;
MPRINT(EM_DIAGRAM):   quit;
3422196    /* Reset EM Options */
3422197    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3422198    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3422199    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3422200    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3422201    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3422202    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
