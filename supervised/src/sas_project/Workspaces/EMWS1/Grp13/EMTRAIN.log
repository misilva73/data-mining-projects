MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:42 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:04:42 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O13GMOYR "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O13GMOYR new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:42 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:42 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3406719    proc freq data=EMWS1.Grp13_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp13_VariableSet noprint;
3406720    table ROLE*LEVEL/out=WORK.Grp13META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp13META;
3406721    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.GRP13_VARIABLESET.
NOTE: The data set WORK.GRP13META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

3406722    proc print data=WORK.Grp13META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp13META label noobs;
3406723    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3406724    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3406725    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3406726    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3406727    run;

NOTE: There were 4 observations read from the data set WORK.GRP13META.
NOTE: The PROCEDURE PRINT printed page 2286.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3406728    title10;
MPRINT(EM_DIAGRAM):   title10;
3406729    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp13: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp13: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407052    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3407053    * Grp13: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp13: Generation of macros and macro variables;
3407054    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3407055    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

3407056    %let EMEXCEPTIONSTRING=;
3407057    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3407058    * TRAIN: Grp13;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp13;
3407059    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407060    %let EM_ACTION = TRAIN;
3407061    %let syscc = 0;
3407062    %macro main;
3407063    
3407064       filename temp catalog 'sashelp.emutil.gp_macros.source';
3407065       %include temp;
3407066       filename temp;
3407067    
3407068       %SetProperties;
3407069    
3407070       %if %upcase(&EM_ACTION) = CREATE %then %do;
3407071    
3407072           filename temp catalog 'sashelp.emutil.gp_create.source';
3407073           %include temp;
3407074           filename temp;
3407075    
3407076           %create;
3407077       %end;
3407078       %else
3407079       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3407080    
3407081           filename temp catalog 'sashelp.emutil.gp_train.source';
3407082           %include temp;
3407083           filename temp;
3407084    
3407085           %train;
3407086       %end;
3407087       %else
3407088       %if %upcase(&EM_ACTION) = SCORE %then %do;
3407089    
3407090           filename temp catalog 'sashelp.emutil.gp_score.source';
3407091           %include temp;
3407092           filename temp;
3407093    
3407094           %score;
3407095       %end;
3407096       %else
3407097       %if %upcase(&EM_ACTION) = REPORT %then %do;
3407098    
3407099           filename temp catalog 'sashelp.emutil.gp_report.source';
3407100           %include temp;
3407101           filename temp;
3407102    
3407103           %report;
3407104    
3407105       %end;
3407106       %else
3407107       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3407108    
3407109           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3407110           %include temp;
3407111           filename temp;
3407112    
3407113           %postloop;
3407114    
3407115       %end;
3407116    
3407117       %doendm:
3407118    %mend main;
3407119    
3407120    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3407121   +%macro SetProperties;
3407122   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3407123   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3407124   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3407125   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3407126   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3407127   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3407128   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3407129   +%mend SetProperties;
3407130   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3407131   +%macro scoreValidTest(data=, out=);
3407133   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3407134   +       data &out / view = &out;
3407135   +          retain _RESAMP_ 1;
3407136   +          set &data;
3407137   +       run;
3407138   +   %end;
3407140   +%mend scoreValidTest;
3407142   +%macro getVariables;
3407143   +   %if "&emloopnumber" = "1" %then %do;
3407144   +       data _null_;
3407145   +          retain numgoup 0;
3407146   +          set &em_data_variableset end=eof;
3407147   +          %if &em_num_target = 1 %then %do;
3407148   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3407149   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3407150   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3407151   +              %end;
3407152   +              %else
3407153   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3407154   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3407155   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3407156   +              %end;
3407157   +          %end;
3407158   +          %else %do;
3407159   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3407160   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3407161   +              else
3407162   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3407163   +          %end;
3407164   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3407165   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3407166   +             numgroup + 1;
3407167   +          end;
3407168   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3407169   +       run;
3407170   +    %end;
3407171   +    %else %do;
3407172   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3407173   +            data _null_;
3407174   +               retain numgoup 0;
3407175   +               set &em_data_variableset end=eof;
3407176   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3407177   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3407178   +               numgroup + 1;
3407179   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3407180   +            run;
3407181   +          %end;
3407182   +            %else
3407183   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3407184   +            %em_getName(key=BOOSTINFO,   type=DATA);
3407185   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3407186   +                data _null_;
3407187   +                   set &em_user_boostinfo;
3407188   +                   call symput('emboostvar', strip(_TARGET_));
3407189   +                run;
3407190   +            %end;
3407191   +        %end;
3407192   +        %else
3407193   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3407194   +                %em_getName(key=BAGINFO,   type=DATA);
3407195   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3407196   +                    data _null_;
3407197   +                       set &em_user_baginfo;
3407198   +                      call symput('embagvar', strip(_TARGET_));
3407199   +                    run;
3407200   +                %end;
3407201   +            %end;
3407202   +    %end;
3407203   +%mend getVariables;
3407205   +%macro gp_bag(targetname=);
3407206   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3407207   +        %put LOOP MODE:   &emloopmode ;
3407208   +        %put LOOP NUMBER: &emloopnumber;
3407209   +        %put BAGGING TARGET: &targetname;
3407210   +   %end;
3407212   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3407213   +   %include temp;
3407214   +   filename temp;
3407216   +   %em_getName(key=BAGINFO,    type=DATA);
3407217   +   %em_getName(key=EMLOOPINFO, type=DATA);
3407219   +   %if &emloopnumber = 1 %then %do;
3407220   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3407221   +       data _null_;
3407222   +          file gpdelta;
3407223   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3407224   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3407225   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3407226   +          put "end;";
3407227   +       run;
3407228   +       filename gpdelta;
3407230   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3407231   +           proc datasets lib=&em_lib nolist;
3407232   +              delete &em_nodeid._baginfo;
3407233   +           run;
3407234   +       %end;
3407236   +       %if "%em_freq" ne "" %then %do;
3407237   +           proc means data=&em_import_data sum;
3407238   +              var %em_freq;
3407239   +              output out = _tempds sum=sumfreq;
3407240   +           run;
3407241   +           quit;
3407242   +           data _null_;
3407243   +              set _tempDs;
3407244   +              call symput('_sumfreq', put(sumfreq, best12.));
3407245   +           run;
3407246   +       %end;
3407247   +       %else %do;
3407248   +           proc sql noprint;
3407249   +              select count(*) into :_sumfreq
3407250   +              from &em_import_data;
3407251   +           quit;
3407252   +       %end;
3407254   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3407255   +           data _null_;
3407256   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3407257   +           run;
3407258   +       %end;
3407259   +       %else
3407260   +           %let _size = &em_property_sizeobs;
3407262   +       data &em_user_baginfo;
3407263   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3407264   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3407265   +          _TARGET_   ="&targetname";
3407266   +          _SUMFREQ_  =&_sumfreq;
3407267   +           _SIZE_    = &_size;
3407268   +          output;
3407269   +       run;
3407270   +       data &em_user_emloopinfo;
3407271   +          length MODE $8;
3407272   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3407273   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407274   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3407275   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3407276   +           MODE='Bagging';
3407277   +       run;
3407279   +       data &em_data_eminfo;
3407280   +          length TARGET KEY $32  DATA $43;
3407281   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3407282   +       run;
3407283   +   %end;
3407284   +   %else %do;
3407285   +      data _null_;
3407286   +         set &em_user_baginfo;
3407287   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3407288   +         call symput('_size', put(_size_, best12.));
3407289   +      run;
3407290   +   %end;
3407292   +   %let bagsumFreq  = &_sumFreq;
3407293   +   %let bagSize     = &_Size;
3407295   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3407296   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3407298   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3407299   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3407301   +   %doendbg:
3407303   +%mend gp_bag;
3407306   +%macro gp_boost(targetname=);
3407307   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3407308   +       %put LOOP MODE:   &emloopmode ;
3407309   +       %put LOOP NUMBER: &emloopnumber;
3407310   +        %put BAGGING TARGET: &targetname;
3407311   +   %end;
3407313   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3407314   +   %include temp;
3407315   +   filename temp;
3407317   +   %em_getname(key=EMLOOPINFO, type=DATA);
3407318   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3407319   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3407320   +   %em_getName(key=BOOSTINFO,   type=DATA);
3407322   +   %if &emloopnumber = 1 %then %do;
3407323   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3407324   +       data _null_;
3407325   +          file gpdelta;
3407326   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3407327   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3407328   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3407329   +          put "end;";
3407330   +       run;
3407331   +       filename gpdelta;
3407333   +       %let deleteString =;
3407334   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3407335   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3407336   +       %if "&deleteString" ne "" %then %do;
3407337   +           proc datasets lib=&em_lib nolist;
3407338   +              delete &deleteString;
3407339   +           run;
3407340   +       %end;
3407342   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3407344   +       data &em_user_boostinfo;
3407345   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3407346   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3407347   +          _TARGET_          ="&targetname";
3407348   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3407349   +          _SUMFREQ_         =&_sumfreq;
3407350   +       run;
3407351   +       data &em_user_emloopinfo;
3407352   +          length MODE $8;
3407353   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3407354   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407355   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3407356   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3407357   +           MODE='Boosting';
3407358   +       run;
3407360   +       data &em_data_eminfo;
3407361   +          length TARGET KEY $32  DATA $43;
3407362   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3407363   +       run;
3407365   +   %end;
3407366   +   %else %do;
3407367   +       %global _dmboodiv;
3407368   +       %let dmboosf = %upcase(&targetname);
3407369   +       %if %sysfunc(length(&targetname))> 30 %then
3407370   +           %let dmboosf =  %substr(&targetname, 1, 30);
3407372   +       data _null_;
3407373   +          set &em_user_boostinfo;
3407374   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3407375   +       run;
3407377   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3407379   +       data &em_user_boostinfo;
3407380   +          set &em_user_boostinfo;
3407381   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3407382   +       run;
3407384   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3407386   +   %end;
3407388   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3407389   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3407391   +   %doendbst:
3407393   +%mend gp_boost;
3407395   +%macro gp_group(numgroupvar=, groupvar=);
3407396   +   %em_getname(key=GROUPINFO, type=DATA);
3407397   +   %em_getName(key=LOOPINFO,  type=DATA);
3407398   +   %em_getName(key=EMGROUPINFO, type=DATA);
3407400   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3407401   +       ods listing close;
3407402   +       %if &numgroupvar = 1 %then %do;
3407403   +           ods output onewayfreqs=temp;
3407404   +       %end;
3407405   +       %else %do;
3407406   +           ods output crosstabfreqs=temp;
3407407   +       %end;
3407408   +       proc freq data=&em_import_data;
3407409   +          table
3407411   +          %let tableString =;
3407412   +          %let freqString  =;
3407413   +          %do i=1 %to &numgroupvar;
3407414   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3407415   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3407416   +              %let freqString = &freqString.1;
3407417   +          %end;
3407418   +          &tableString / missing;
3407419   +       run;
3407420   +       ods listing;
3407421   +       %if &numgroupvar = 1 %then %do;
3407422   +           data _null_;
3407423   +              retain totalobs 0;
3407424   +              set temp end=eof;
3407425   +              totalobs + frequency;
3407426   +              if eof then
3407427   +                 call symput('_totalObs_', put(totalobs, best.));
3407428   +           run;
3407430   +           proc sort data=temp out=loopinfo nodupkey;
3407431   +              by &groupvar;
3407432   +              where frequency>=&em_property_minimumObs;
3407433   +           run;
3407434   +       %end;
3407435   +       %else %do;
3407436   +           data _null_;
3407437   +              set temp;
3407438   +              where _type_='00';
3407439   +              call symput('_totalObs_', put(frequency, best.));
3407440   +           run;
3407441   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3407442   +              by &groupvar;
3407443   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3407444   +           run;
3407445   +       %end;
3407447   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3407448   +       filename _pregrp "&em_user_precode";
3407450   +       %let dsid = %sysfunc(open(loopinfo));
3407451   +       %do i=1 %to &numgroupvar;
3407452   +           %let varname = %scan(&groupvar, &i, %str( ));
3407453   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3407454   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3407455   +           %if %index(&varfmt, -) %then %do;
3407456   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3407457   +           %end;
3407459   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3407460   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3407461   +           %let fmttype&i = &vartype;
3407462   +           %let fmtlen&i  = &varlen;
3407464   +           %let fmtvar&i =;
3407465   +           %let fmt&i    =;
3407466   +           %if "&varfmt" ne "" %then %do;
3407467   +              %let fmtvar&i  = _FORMAT&i._;
3407468   +              %let fmt&i     = &varfmt;
3407469   +           %end;
3407470   +       %end;
3407471   +       %let dsid = %sysfunc(close(&dsid));
3407473   +       data _null_;
3407474   +          %do i=1 %to &numgroupvar;
3407475   +              %if "&&fmt&i" ne "" %then %do;
3407476   +                  retain len_&i 0;
3407477   +              %end;
3407478   +          %end;
3407480   +          set loopinfo end=eof;
3407481   +          file _pregrp;
3407483   +          %do i=1 %to &numgroupvar;
3407484   +              %let varname = %scan(&groupvar, &i, %str( ));
3407485   +              %if "&&fmt&i" ne "" %then %do;
3407486   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3407487   +                    len_&i = length(put(&varname, &&fmt&i));
3407488   +              %end;
3407489   +          %end;
3407491   +          if eof then do;
3407492   +             %do i=1 %to &numgroupvar;
3407493   +                 %let varname = %scan(&groupvar, &i, %str( ));
3407494   +                 %if "&&fmt&i" ne "" %then %do;
3407495   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3407496   +                     put "drop &&fmtvar&i" len_&i ";";
3407497   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3407498   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3407499   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3407500   +                 %end;
3407501   +              %end;
3407502   +          end;
3407503   +      run;
3407505   +      data loopinfo;
3407506   +         set loopinfo;
3407507   +         %do i=1 %to &numgroupvar;
3407508   +             %let varname = %scan(&groupvar, &i, %str( ));
3407509   +             %if "&&fmt&i" ne "" %then %do;
3407510   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3407511   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3407512   +             %end;
3407513   +         %end;
3407514   +      run;
3407515   +      filename _pregrp;
3407517   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3407518   +          data temp;
3407519   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3407520   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3407521   +      %end;
3407522   +      %else %do;
3407523   +          data &em_user_groupinfo;
3407524   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3407525   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3407526   +             retain _TARGET_ '';
3407527   +      %end;
3407529   +          set loopinfo;
3407530   +          _LOOP_= _N_;
3407531   +          _WHERE_ = '';
3407532   +          _WHEREDESC_  = '';
3407533   +          %do i=1 %to &numgroupvar;
3407534   +              %let varname = %scan(&groupvar, &i, %str( ));
3407535   +              %if "&&fmt&i" eq "" %then %do;
3407536   +                  %if "&&fmtType&i" eq "N" %then %do;
3407537   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3407538   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3407539   +                   %end;
3407540   +                  %else %do;
3407541   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3407542   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3407543   +                  %end;
3407544   +              %end;
3407545   +              %else %do;
3407546   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3407547   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3407548   +              %end;
3407549   +              %if &i < &numgroupvar %then %do;
3407550   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3407551   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3407552   +              %end;
3407553   +          %end;
3407554   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3407555   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3407556   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3407557   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3407558   +          %end;
3407559   +      run;
3407561   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3407562   +          data target;
3407563   +             length _TARGET_ $32;
3407564   +              %do i=1 %to &em_num_target;
3407565   +                  %let varname = %scan(%em_target, &i, %str( ));
3407566   +                  _TARGET_ = "&varname";
3407567   +                  output;
3407568   +              %end;
3407569   +          run;
3407570   +          proc sql;
3407571   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3407572   +          quit;
3407573   +          data &em_user_groupinfo;
3407574   +             set &em_user_groupinfo;
3407575   +             _LOOP_=_N_;
3407576   +          run;
3407577   +      %end;
3407579   +      data &em_data_eminfo;
3407580   +         length TARGET KEY $32  DATA $43;
3407581   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3407582   +      run;
3407584   +      data &em_user_emloopinfo;
3407585   +         set &em_user_groupinfo;
3407586   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3407587   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407588   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3407589   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3407590   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3407591   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3407592   +         %end;
3407593   +         %else %do;
3407594   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407595   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3407596   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3407597   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3407598   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3407599   +         %end;
3407600   +      run;
3407602   +      proc datasets lib=work nolist;
3407603   +          delete temp loopinfo
3407604   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3407605   +              target
3407606   +          %end;
3407607   +          ;
3407608   +      run;
3407610   +   %end;
3407612   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3407613   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3407614   +       data _null_;
3407615   +          length quotedTarget $32;
3407616   +          set &em_user_groupinfo;
3407617   +          file gpdelta;
3407618   +          if _N_ = &emloopnumber then do;
3407619   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3407620   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3407622   +             %do i=1 %to &numgroupvar;
3407623   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3407624   +                 put "if upcase(NAME)= '&gvar' then delete;";
3407625   +             %end;
3407626   +          end;
3407627   +       run;
3407628   +   %end;
3407629   +   %else %do;
3407630   +       data _null_;
3407631   +          set &em_user_groupinfo;
3407632   +          file gpdelta;
3407633   +          if _N_ = &emloopnumber then do;
3407634   +             %do i=1 %to &numgroupvar;
3407635   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3407636   +                 put "if upcase(NAME)= '&gvar' then delete;";
3407637   +             %end;
3407638   +          end;
3407639   +       run;
3407640   +   %end;
3407641   +   filename gpdelta;
3407643   +   %let nobs=0;
3407644   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3407645   +   %if &dsid>0 %then %do;
3407646   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3407647   +       %let dsid = %sysfunc(close(&dsid));
3407648   +   %end;
3407650   +   %if ^&nobs  %then
3407651   +       %let emloopmode =;
3407652   +   %else
3407653   +       %if &nobs< &emloopnumber %then
3407654   +           %let emloopmode = POSTLOOP;
3407655   +        %else
3407656   +        %let emloopmode = LOOP;
3407657   +%mend gp_group;
3407659   +%macro gp_Index;
3407661   +   %em_getName(key=INDEXINFO,  type=DATA);
3407662   +   %em_getName(key=EMLOOPINFO, type=DATA);
3407664   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3407665   +       data &em_user_indexinfo;
3407666   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3407667   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3407668   +          _TARGET_   ="";
3407669   +          _WHERE_    ="";
3407670   +          output;
3407671   +       run;
3407672   +       data &em_data_eminfo;
3407673   +          length TARGET KEY $32  DATA $43;
3407674   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3407675   +       run;
3407677   +       data &em_user_emloopinfo;
3407678   +          length MODE $8;
3407679   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3407680   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407681   +          set &em_user_indexinfo(keep=_LOOP_ );
3407682   +          MODE='Index';
3407683   +       run;
3407684   +   %end;
3407686   +%mend gp_index;
3407688   +%macro gp_Target;
3407689   +   %let TargetName = %scan(%em_target, &emloopnumber);
3407690   +   %if "&targetName" eq "" %then %do;
3407691   +       %goto doendgpt;
3407692   +   %end;
3407694   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3407695   +       %put GP_TARGET;
3407696   +       %put &emLoopnumber &TargetName;
3407697   +   %end;
3407699   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3407700   +   data _null_;
3407701   +      file gpdelta;
3407702   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3407703   +   run;
3407704   +   filename gpdelta;
3407706   +   %if &emloopnumber eq 1 %then %do;
3407707   +       %em_getName(key=TARGETINFO,  type=DATA);
3407708   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3407710   +       data &em_user_targetinfo;
3407711   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3407712   +          retain _LOOP_;
3407713   +          _WHERE_ = '';
3407714   +          %do i=1 %to &em_num_target;
3407715   +              %let varname = %scan(%em_target, &i, ' ');
3407716   +              _TARGET_ = "&varname";
3407717   +              _LOOP_+1;
3407718   +              output;
3407719   +           %end;
3407720   +       run;
3407721   +       data &em_user_emloopinfo;
3407722   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3407723   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3407724   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3407725   +      run;
3407727   +       data &em_data_eminfo;
3407728   +          length TARGET KEY $32  DATA $43;
3407729   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3407730   +       run;
3407731   +   %end;
3407733   +   %doendgpt:
3407734   +%mend gp_target;
3407736   +%macro train;
3407737   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3407738   +       %put LOOP MODE:   &emloopmode ;
3407739   +       %put LOOP NUMBER: &emloopnumber;
3407740   +   %end;
3407742   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3407744   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3407746   +       %let hpdmFlag = 0;
3407747   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3407748   +            data _null_;
3407749   +               set &em_import_DATA_eminfo;
3407750   +               where KEY = "HPDMSAMPLE";
3407751   +               call symput('hpdmFlag', '1');
3407752   +            run;
3407753   +       %end;
3407754   +       %if &hpdmFlag %then %do;
3407755   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3407756   +           %goto doendmain;
3407757   +       %end;
3407758   +   %end;
3407760   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3407761   +   %em_getname(key=GROUPINFO,  type=DATA);
3407762   +   %em_getname(key=BOOSTINFO,  type=DATA);
3407763   +   %em_getname(key=BAGINFO,    type=DATA);
3407764   +   %em_getname(key=TARGETINFO, type=DATA);
3407765   +   %em_getname(key=INDEXINFO,  type=DATA);
3407766   +   %em_getname(key=EMINFO,  type=DATA);
3407768   +   %if "&emloopnumber" = "1" %then %do;
3407769   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3407770   +       filename _pregrp "&em_user_precode";
3407771   +       data _null_;
3407772   +         rc = fdelete('_pregrp');
3407773   +       run;
3407774   +       filename _pregrp;
3407776   +       %let members =;
3407777   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3407778   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3407779   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3407780   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3407781   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3407782   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3407783   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3407785   +       %if "&members" ne "" %then %do;
3407786   +           proc datasets lib=&em_lib nolist;
3407787   +              delete &members;
3407788   +           run;
3407789   +      %end;
3407790   +   %end;
3407792   +   %let emboostvar    =;
3407793   +   %let embagvar      =;
3407794   +   %let emgroupvar    =;
3407795   +   %let emnumgroupvar =;
3407796   +   %getVariables;
3407798   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3407799   +       %if &EM_NUM_TARGET>=1 %then %do;
3407800   +           %gp_target;
3407801   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3407802   +               %let emloopmode= LOOP;
3407803   +           %else
3407804   +              %let emloopmode = POSTLOOP;
3407805   +       %end;
3407806   +       %else %do;
3407807   +           %let emloopmode = ;
3407808   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3407809   +           %goto doendmain;
3407810   +       %end;
3407811   +   %end;
3407812   +   %else
3407813   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3407814   +       %let emloopmode=;
3407815   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3407816   +           proc delete data=&em_data_eminfo;
3407817   +           run;
3407818   +       %end;
3407819   +   %end;
3407820   +   %else
3407821   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3407822   +       %gp_index;
3407823   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3407824   +           %let emloopmode= LOOP;
3407825   +       %else
3407826   +           %let emloopmode= POSTLOOP;
3407827   +   %end;
3407828   +   %else
3407829   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3407830   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3407831   +           %let emloopmode = ;
3407832   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3407833   +           %goto doendmain;
3407834   +       %end;
3407836   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3407837   +   %end;
3407838   +   %else
3407839   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3407840   +       %if "&emboostvar" eq "" %then %do;
3407841   +           %let emloopmode = ;
3407842   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3407843   +           %goto doendmain;
3407844   +       %end;
3407846   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3407847   +           %let emloopmode= LOOP;
3407848   +           %gp_boost(targetname=&emboostvar);
3407850   +       %end;
3407851   +       %else
3407852   +           %let emloopmode= POSTLOOP;
3407853   +   %end;
3407854   +   %else
3407855   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3407856   +       %if "&embagvar" eq "" %then %do;
3407857   +           %let emloopmode = ;
3407858   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3407859   +           %goto doendmain;
3407860   +       %end;
3407862   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3407863   +           %let emloopmode= LOOP;
3407864   +           %gp_bag(targetname=&embagvar);
3407865   +       %end;
3407866   +       %else
3407867   +           %let emloopmode= POSTLOOP;
3407868   +   %end;
3407871   +   %if &emloopmode eq "" %then %do;
3407872   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3407873   +       %let member = %scan(&em_data_eminfo, 2, .);
3407874   +       proc datasets lib=&lib nolist;
3407875   +          delete &member;
3407876   +       run;
3407877   +   %end;
3407879   +   %doendmain:
3407881   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3407882   +       %put NEW LOOP MODE: &emloopmode;
3407883   +   %end;
3407885   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3407886   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3407887   +       %include temp;
3407888   +       filename temp;
3407890   +       %postloop;
3407891   +   %end;
3407893   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp13_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;

NOTE: There were 1 observations read from the data set EMWS1.GRP13_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp13_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;

NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp13\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:04:44 o'clock,
      Create Time=02 June 2018 16:26:04 o'clock

NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP13_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3407895   +%macro postloop;
3407896   +   %let deleteString =;
3407897   +
3407898   +   %em_getname(key=boostweight, type=DATA);
3407899   +   %em_getname(key=boostscore,  type=DATA);
3407900   +
3407901   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3407902   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3407903   +   %if "&deleteString" ne "" %then %do;
3407904   +       proc datasets lib=&em_lib nolist;
3407905   +          delete &deleteString;
3407906   +       run;
3407907   +   %end;
3407908   +
3407909   +   %em_register(key=EMLOOPINFO,    type=DATA);
3407910   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3407911   +    proc print data=&em_user_emloopinfo noobs label;
3407912   +       title9 'Group Summary';
3407913   +    run;
3407914   +    title9;
3407915   +
3407916   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3407917   +
3407918   +%mend postloop;
3407919   +
3407920   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp13_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp13_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP13_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2287.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11088831495069;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp13;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407921    *------------------------------------------------------------*;
3407922    * End TRAIN: Grp13;
3407923    *------------------------------------------------------------*;
3407924    

3407925    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3407926    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3407927    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407928    ;
MPRINT(EM_DIAGRAM):   ;
3407929    ;
MPRINT(EM_DIAGRAM):   ;
3407930    ;
MPRINT(EM_DIAGRAM):   ;
3407931    ;
MPRINT(EM_DIAGRAM):   ;
3407932    quit;
MPRINT(EM_DIAGRAM):   quit;
3407933    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407934    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3407935    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3407936    /*; *"; *'; */
3407937    ;
MPRINT(EM_DIAGRAM):   ;
3407938    run;
MPRINT(EM_DIAGRAM):   run;
3407939    quit;
MPRINT(EM_DIAGRAM):   quit;
3407940    /* Reset EM Options */
3407941    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3407942    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3407943    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3407944    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3407945    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3407946    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
