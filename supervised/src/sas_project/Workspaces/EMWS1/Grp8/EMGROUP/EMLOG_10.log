*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:00:49 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:00:46 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:00:46 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O241S3AH "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O241S3AH new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMGROUP\EMLOG_10.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:00:46 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMGROUP\EMOUTPUT_10.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:00:46 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3109488    proc freq data=EMWS1.Grp8_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp8_VariableSet noprint;
3109489    table ROLE*LEVEL/out=WORK.Grp8META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp8META;
3109490    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP8_VARIABLESET.
NOTE: The data set WORK.GRP8META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
3109491    proc print data=WORK.Grp8META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp8META label noobs;
3109492    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3109493    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3109494    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3109495    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3109496    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP8META.
NOTE: The PROCEDURE PRINT printed page 2062.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3109497    title10;
MPRINT(EM_DIAGRAM):   title10;
3109498    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp8: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp8: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3109821    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3109822    * Grp8: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp8: Generation of macros and macro variables;
3109823    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3109824    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3109825    %let EMEXCEPTIONSTRING=;
3109826    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3109827    * TRAIN: Grp8;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp8;
3109828    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3109829    %let EM_ACTION = TRAIN;
3109830    %let syscc = 0;
3109831    %macro main;
3109832
3109833       filename temp catalog 'sashelp.emutil.gp_macros.source';
3109834       %include temp;
3109835       filename temp;
3109836
3109837       %SetProperties;
3109838
3109839       %if %upcase(&EM_ACTION) = CREATE %then %do;
3109840
3109841           filename temp catalog 'sashelp.emutil.gp_create.source';
3109842           %include temp;
3109843           filename temp;
3109844
3109845           %create;
3109846       %end;
3109847       %else
3109848       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3109849
3109850           filename temp catalog 'sashelp.emutil.gp_train.source';
3109851           %include temp;
3109852           filename temp;
3109853
3109854           %train;
3109855       %end;
3109856       %else
3109857       %if %upcase(&EM_ACTION) = SCORE %then %do;
3109858
3109859           filename temp catalog 'sashelp.emutil.gp_score.source';
3109860           %include temp;
3109861           filename temp;
3109862
3109863           %score;
3109864       %end;
3109865       %else
3109866       %if %upcase(&EM_ACTION) = REPORT %then %do;
3109867
3109868           filename temp catalog 'sashelp.emutil.gp_report.source';
3109869           %include temp;
3109870           filename temp;
3109871
3109872           %report;
3109873
3109874       %end;
3109875       %else
3109876       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3109877
3109878           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3109879           %include temp;
3109880           filename temp;
3109881
3109882           %postloop;
3109883
3109884       %end;
3109885
3109886       %doendm:
3109887    %mend main;
3109888
3109889    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3109890   +%macro SetProperties;
3109891   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3109892   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3109893   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3109894   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3109895   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3109896   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3109897   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3109898   +%mend SetProperties;
3109899   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3109900   +%macro scoreValidTest(data=, out=);
3109902   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3109903   +       data &out / view = &out;
3109904   +          retain _RESAMP_ 1;
3109905   +          set &data;
3109906   +       run;
3109907   +   %end;
3109909   +%mend scoreValidTest;
3109911   +%macro getVariables;
3109912   +   %if "&emloopnumber" = "1" %then %do;
3109913   +       data _null_;
3109914   +          retain numgoup 0;
3109915   +          set &em_data_variableset end=eof;
3109916   +          %if &em_num_target = 1 %then %do;
3109917   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3109918   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3109919   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3109920   +              %end;
3109921   +              %else
3109922   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3109923   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3109924   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3109925   +              %end;
3109926   +          %end;
3109927   +          %else %do;
3109928   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3109929   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3109930   +              else
3109931   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3109932   +          %end;
3109933   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3109934   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3109935   +             numgroup + 1;
3109936   +          end;
3109937   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3109938   +       run;
3109939   +    %end;
3109940   +    %else %do;
3109941   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3109942   +            data _null_;
3109943   +               retain numgoup 0;
3109944   +               set &em_data_variableset end=eof;
3109945   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3109946   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3109947   +               numgroup + 1;
3109948   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3109949   +            run;
3109950   +          %end;
3109951   +            %else
3109952   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3109953   +            %em_getName(key=BOOSTINFO,   type=DATA);
3109954   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3109955   +                data _null_;
3109956   +                   set &em_user_boostinfo;
3109957   +                   call symput('emboostvar', strip(_TARGET_));
3109958   +                run;
3109959   +            %end;
3109960   +        %end;
3109961   +        %else
3109962   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3109963   +                %em_getName(key=BAGINFO,   type=DATA);
3109964   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3109965   +                    data _null_;
3109966   +                       set &em_user_baginfo;
3109967   +                      call symput('embagvar', strip(_TARGET_));
3109968   +                    run;
3109969   +                %end;
3109970   +            %end;
3109971   +    %end;
3109972   +%mend getVariables;
3109974   +%macro gp_bag(targetname=);
3109975   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3109976   +        %put LOOP MODE:   &emloopmode ;
3109977   +        %put LOOP NUMBER: &emloopnumber;
3109978   +        %put BAGGING TARGET: &targetname;
3109979   +   %end;
3109981   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3109982   +   %include temp;
3109983   +   filename temp;
3109985   +   %em_getName(key=BAGINFO,    type=DATA);
3109986   +   %em_getName(key=EMLOOPINFO, type=DATA);
3109988   +   %if &emloopnumber = 1 %then %do;
3109989   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3109990   +       data _null_;
3109991   +          file gpdelta;
3109992   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3109993   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3109994   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3109995   +          put "end;";
3109996   +       run;
3109997   +       filename gpdelta;
3109999   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3110000   +           proc datasets lib=&em_lib nolist;
3110001   +              delete &em_nodeid._baginfo;
3110002   +           run;
3110003   +       %end;
3110005   +       %if "%em_freq" ne "" %then %do;
3110006   +           proc means data=&em_import_data sum;
3110007   +              var %em_freq;
3110008   +              output out = _tempds sum=sumfreq;
3110009   +           run;
3110010   +           quit;
3110011   +           data _null_;
3110012   +              set _tempDs;
3110013   +              call symput('_sumfreq', put(sumfreq, best12.));
3110014   +           run;
3110015   +       %end;
3110016   +       %else %do;
3110017   +           proc sql noprint;
3110018   +              select count(*) into :_sumfreq
3110019   +              from &em_import_data;
3110020   +           quit;
3110021   +       %end;
3110023   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3110024   +           data _null_;
3110025   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3110026   +           run;
3110027   +       %end;
3110028   +       %else
3110029   +           %let _size = &em_property_sizeobs;
3110031   +       data &em_user_baginfo;
3110032   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3110033   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3110034   +          _TARGET_   ="&targetname";
3110035   +          _SUMFREQ_  =&_sumfreq;
3110036   +           _SIZE_    = &_size;
3110037   +          output;
3110038   +       run;
3110039   +       data &em_user_emloopinfo;
3110040   +          length MODE $8;
3110041   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3110042   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110043   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3110044   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3110045   +           MODE='Bagging';
3110046   +       run;
3110048   +       data &em_data_eminfo;
3110049   +          length TARGET KEY $32  DATA $43;
3110050   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3110051   +       run;
3110052   +   %end;
3110053   +   %else %do;
3110054   +      data _null_;
3110055   +         set &em_user_baginfo;
3110056   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3110057   +         call symput('_size', put(_size_, best12.));
3110058   +      run;
3110059   +   %end;
3110061   +   %let bagsumFreq  = &_sumFreq;
3110062   +   %let bagSize     = &_Size;
3110064   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3110065   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3110067   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3110068   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3110070   +   %doendbg:
3110072   +%mend gp_bag;
3110075   +%macro gp_boost(targetname=);
3110076   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3110077   +       %put LOOP MODE:   &emloopmode ;
3110078   +       %put LOOP NUMBER: &emloopnumber;
3110079   +        %put BAGGING TARGET: &targetname;
3110080   +   %end;
3110082   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3110083   +   %include temp;
3110084   +   filename temp;
3110086   +   %em_getname(key=EMLOOPINFO, type=DATA);
3110087   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3110088   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3110089   +   %em_getName(key=BOOSTINFO,   type=DATA);
3110091   +   %if &emloopnumber = 1 %then %do;
3110092   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3110093   +       data _null_;
3110094   +          file gpdelta;
3110095   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3110096   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3110097   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3110098   +          put "end;";
3110099   +       run;
3110100   +       filename gpdelta;
3110102   +       %let deleteString =;
3110103   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3110104   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3110105   +       %if "&deleteString" ne "" %then %do;
3110106   +           proc datasets lib=&em_lib nolist;
3110107   +              delete &deleteString;
3110108   +           run;
3110109   +       %end;
3110111   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3110113   +       data &em_user_boostinfo;
3110114   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3110115   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3110116   +          _TARGET_          ="&targetname";
3110117   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3110118   +          _SUMFREQ_         =&_sumfreq;
3110119   +       run;
3110120   +       data &em_user_emloopinfo;
3110121   +          length MODE $8;
3110122   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3110123   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110124   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3110125   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3110126   +           MODE='Boosting';
3110127   +       run;
3110129   +       data &em_data_eminfo;
3110130   +          length TARGET KEY $32  DATA $43;
3110131   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3110132   +       run;
3110134   +   %end;
3110135   +   %else %do;
3110136   +       %global _dmboodiv;
3110137   +       %let dmboosf = %upcase(&targetname);
3110138   +       %if %sysfunc(length(&targetname))> 30 %then
3110139   +           %let dmboosf =  %substr(&targetname, 1, 30);
3110141   +       data _null_;
3110142   +          set &em_user_boostinfo;
3110143   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3110144   +       run;
3110146   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3110148   +       data &em_user_boostinfo;
3110149   +          set &em_user_boostinfo;
3110150   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3110151   +       run;
3110153   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3110155   +   %end;
3110157   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3110158   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3110160   +   %doendbst:
3110162   +%mend gp_boost;
3110164   +%macro gp_group(numgroupvar=, groupvar=);
3110165   +   %em_getname(key=GROUPINFO, type=DATA);
3110166   +   %em_getName(key=LOOPINFO,  type=DATA);
3110167   +   %em_getName(key=EMGROUPINFO, type=DATA);
3110169   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3110170   +       ods listing close;
3110171   +       %if &numgroupvar = 1 %then %do;
3110172   +           ods output onewayfreqs=temp;
3110173   +       %end;
3110174   +       %else %do;
3110175   +           ods output crosstabfreqs=temp;
3110176   +       %end;
3110177   +       proc freq data=&em_import_data;
3110178   +          table
3110180   +          %let tableString =;
3110181   +          %let freqString  =;
3110182   +          %do i=1 %to &numgroupvar;
3110183   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3110184   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3110185   +              %let freqString = &freqString.1;
3110186   +          %end;
3110187   +          &tableString / missing;
3110188   +       run;
3110189   +       ods listing;
3110190   +       %if &numgroupvar = 1 %then %do;
3110191   +           data _null_;
3110192   +              retain totalobs 0;
3110193   +              set temp end=eof;
3110194   +              totalobs + frequency;
3110195   +              if eof then
3110196   +                 call symput('_totalObs_', put(totalobs, best.));
3110197   +           run;
3110199   +           proc sort data=temp out=loopinfo nodupkey;
3110200   +              by &groupvar;
3110201   +              where frequency>=&em_property_minimumObs;
3110202   +           run;
3110203   +       %end;
3110204   +       %else %do;
3110205   +           data _null_;
3110206   +              set temp;
3110207   +              where _type_='00';
3110208   +              call symput('_totalObs_', put(frequency, best.));
3110209   +           run;
3110210   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3110211   +              by &groupvar;
3110212   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3110213   +           run;
3110214   +       %end;
3110216   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3110217   +       filename _pregrp "&em_user_precode";
3110219   +       %let dsid = %sysfunc(open(loopinfo));
3110220   +       %do i=1 %to &numgroupvar;
3110221   +           %let varname = %scan(&groupvar, &i, %str( ));
3110222   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3110223   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3110224   +           %if %index(&varfmt, -) %then %do;
3110225   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3110226   +           %end;
3110228   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3110229   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3110230   +           %let fmttype&i = &vartype;
3110231   +           %let fmtlen&i  = &varlen;
3110233   +           %let fmtvar&i =;
3110234   +           %let fmt&i    =;
3110235   +           %if "&varfmt" ne "" %then %do;
3110236   +              %let fmtvar&i  = _FORMAT&i._;
3110237   +              %let fmt&i     = &varfmt;
3110238   +           %end;
3110239   +       %end;
3110240   +       %let dsid = %sysfunc(close(&dsid));
3110242   +       data _null_;
3110243   +          %do i=1 %to &numgroupvar;
3110244   +              %if "&&fmt&i" ne "" %then %do;
3110245   +                  retain len_&i 0;
3110246   +              %end;
3110247   +          %end;
3110249   +          set loopinfo end=eof;
3110250   +          file _pregrp;
3110252   +          %do i=1 %to &numgroupvar;
3110253   +              %let varname = %scan(&groupvar, &i, %str( ));
3110254   +              %if "&&fmt&i" ne "" %then %do;
3110255   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3110256   +                    len_&i = length(put(&varname, &&fmt&i));
3110257   +              %end;
3110258   +          %end;
3110260   +          if eof then do;
3110261   +             %do i=1 %to &numgroupvar;
3110262   +                 %let varname = %scan(&groupvar, &i, %str( ));
3110263   +                 %if "&&fmt&i" ne "" %then %do;
3110264   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3110265   +                     put "drop &&fmtvar&i" len_&i ";";
3110266   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3110267   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3110268   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3110269   +                 %end;
3110270   +              %end;
3110271   +          end;
3110272   +      run;
3110274   +      data loopinfo;
3110275   +         set loopinfo;
3110276   +         %do i=1 %to &numgroupvar;
3110277   +             %let varname = %scan(&groupvar, &i, %str( ));
3110278   +             %if "&&fmt&i" ne "" %then %do;
3110279   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3110280   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3110281   +             %end;
3110282   +         %end;
3110283   +      run;
3110284   +      filename _pregrp;
3110286   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3110287   +          data temp;
3110288   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3110289   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3110290   +      %end;
3110291   +      %else %do;
3110292   +          data &em_user_groupinfo;
3110293   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3110294   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3110295   +             retain _TARGET_ '';
3110296   +      %end;
3110298   +          set loopinfo;
3110299   +          _LOOP_= _N_;
3110300   +          _WHERE_ = '';
3110301   +          _WHEREDESC_  = '';
3110302   +          %do i=1 %to &numgroupvar;
3110303   +              %let varname = %scan(&groupvar, &i, %str( ));
3110304   +              %if "&&fmt&i" eq "" %then %do;
3110305   +                  %if "&&fmtType&i" eq "N" %then %do;
3110306   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3110307   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3110308   +                   %end;
3110309   +                  %else %do;
3110310   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3110311   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3110312   +                  %end;
3110313   +              %end;
3110314   +              %else %do;
3110315   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3110316   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3110317   +              %end;
3110318   +              %if &i < &numgroupvar %then %do;
3110319   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3110320   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3110321   +              %end;
3110322   +          %end;
3110323   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3110324   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3110325   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3110326   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3110327   +          %end;
3110328   +      run;
3110330   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3110331   +          data target;
3110332   +             length _TARGET_ $32;
3110333   +              %do i=1 %to &em_num_target;
3110334   +                  %let varname = %scan(%em_target, &i, %str( ));
3110335   +                  _TARGET_ = "&varname";
3110336   +                  output;
3110337   +              %end;
3110338   +          run;
3110339   +          proc sql;
3110340   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3110341   +          quit;
3110342   +          data &em_user_groupinfo;
3110343   +             set &em_user_groupinfo;
3110344   +             _LOOP_=_N_;
3110345   +          run;
3110346   +      %end;
3110348   +      data &em_data_eminfo;
3110349   +         length TARGET KEY $32  DATA $43;
3110350   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3110351   +      run;
3110353   +      data &em_user_emloopinfo;
3110354   +         set &em_user_groupinfo;
3110355   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3110356   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110357   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3110358   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3110359   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3110360   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3110361   +         %end;
3110362   +         %else %do;
3110363   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110364   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3110365   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3110366   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3110367   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3110368   +         %end;
3110369   +      run;
3110371   +      proc datasets lib=work nolist;
3110372   +          delete temp loopinfo
3110373   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3110374   +              target
3110375   +          %end;
3110376   +          ;
3110377   +      run;
3110379   +   %end;
3110381   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3110382   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3110383   +       data _null_;
3110384   +          length quotedTarget $32;
3110385   +          set &em_user_groupinfo;
3110386   +          file gpdelta;
3110387   +          if _N_ = &emloopnumber then do;
3110388   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3110389   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3110391   +             %do i=1 %to &numgroupvar;
3110392   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3110393   +                 put "if upcase(NAME)= '&gvar' then delete;";
3110394   +             %end;
3110395   +          end;
3110396   +       run;
3110397   +   %end;
3110398   +   %else %do;
3110399   +       data _null_;
3110400   +          set &em_user_groupinfo;
3110401   +          file gpdelta;
3110402   +          if _N_ = &emloopnumber then do;
3110403   +             %do i=1 %to &numgroupvar;
3110404   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3110405   +                 put "if upcase(NAME)= '&gvar' then delete;";
3110406   +             %end;
3110407   +          end;
3110408   +       run;
3110409   +   %end;
3110410   +   filename gpdelta;
3110412   +   %let nobs=0;
3110413   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3110414   +   %if &dsid>0 %then %do;
3110415   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3110416   +       %let dsid = %sysfunc(close(&dsid));
3110417   +   %end;
3110419   +   %if ^&nobs  %then
3110420   +       %let emloopmode =;
3110421   +   %else
3110422   +       %if &nobs< &emloopnumber %then
3110423   +           %let emloopmode = POSTLOOP;
3110424   +        %else
3110425   +        %let emloopmode = LOOP;
3110426   +%mend gp_group;
3110428   +%macro gp_Index;
3110430   +   %em_getName(key=INDEXINFO,  type=DATA);
3110431   +   %em_getName(key=EMLOOPINFO, type=DATA);
3110433   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3110434   +       data &em_user_indexinfo;
3110435   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3110436   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3110437   +          _TARGET_   ="";
3110438   +          _WHERE_    ="";
3110439   +          output;
3110440   +       run;
3110441   +       data &em_data_eminfo;
3110442   +          length TARGET KEY $32  DATA $43;
3110443   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3110444   +       run;
3110446   +       data &em_user_emloopinfo;
3110447   +          length MODE $8;
3110448   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3110449   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110450   +          set &em_user_indexinfo(keep=_LOOP_ );
3110451   +          MODE='Index';
3110452   +       run;
3110453   +   %end;
3110455   +%mend gp_index;
3110457   +%macro gp_Target;
3110458   +   %let TargetName = %scan(%em_target, &emloopnumber);
3110459   +   %if "&targetName" eq "" %then %do;
3110460   +       %goto doendgpt;
3110461   +   %end;
3110463   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3110464   +       %put GP_TARGET;
3110465   +       %put &emLoopnumber &TargetName;
3110466   +   %end;
3110468   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3110469   +   data _null_;
3110470   +      file gpdelta;
3110471   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3110472   +   run;
3110473   +   filename gpdelta;
3110475   +   %if &emloopnumber eq 1 %then %do;
3110476   +       %em_getName(key=TARGETINFO,  type=DATA);
3110477   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3110479   +       data &em_user_targetinfo;
3110480   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3110481   +          retain _LOOP_;
3110482   +          _WHERE_ = '';
3110483   +          %do i=1 %to &em_num_target;
3110484   +              %let varname = %scan(%em_target, &i, ' ');
3110485   +              _TARGET_ = "&varname";
3110486   +              _LOOP_+1;
3110487   +              output;
3110488   +           %end;
3110489   +       run;
3110490   +       data &em_user_emloopinfo;
3110491   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3110492   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3110493   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3110494   +      run;
3110496   +       data &em_data_eminfo;
3110497   +          length TARGET KEY $32  DATA $43;
3110498   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3110499   +       run;
3110500   +   %end;
3110502   +   %doendgpt:
3110503   +%mend gp_target;
3110505   +%macro train;
3110506   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3110507   +       %put LOOP MODE:   &emloopmode ;
3110508   +       %put LOOP NUMBER: &emloopnumber;
3110509   +   %end;
3110511   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3110513   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3110515   +       %let hpdmFlag = 0;
3110516   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3110517   +            data _null_;
3110518   +               set &em_import_DATA_eminfo;
3110519   +               where KEY = "HPDMSAMPLE";
3110520   +               call symput('hpdmFlag', '1');
3110521   +            run;
3110522   +       %end;
3110523   +       %if &hpdmFlag %then %do;
3110524   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3110525   +           %goto doendmain;
3110526   +       %end;
3110527   +   %end;
3110529   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3110530   +   %em_getname(key=GROUPINFO,  type=DATA);
3110531   +   %em_getname(key=BOOSTINFO,  type=DATA);
3110532   +   %em_getname(key=BAGINFO,    type=DATA);
3110533   +   %em_getname(key=TARGETINFO, type=DATA);
3110534   +   %em_getname(key=INDEXINFO,  type=DATA);
3110535   +   %em_getname(key=EMINFO,  type=DATA);
3110537   +   %if "&emloopnumber" = "1" %then %do;
3110538   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3110539   +       filename _pregrp "&em_user_precode";
3110540   +       data _null_;
3110541   +         rc = fdelete('_pregrp');
3110542   +       run;
3110543   +       filename _pregrp;
3110545   +       %let members =;
3110546   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3110547   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3110548   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3110549   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3110550   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3110551   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3110552   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3110554   +       %if "&members" ne "" %then %do;
3110555   +           proc datasets lib=&em_lib nolist;
3110556   +              delete &members;
3110557   +           run;
3110558   +      %end;
3110559   +   %end;
3110561   +   %let emboostvar    =;
3110562   +   %let embagvar      =;
3110563   +   %let emgroupvar    =;
3110564   +   %let emnumgroupvar =;
3110565   +   %getVariables;
3110567   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3110568   +       %if &EM_NUM_TARGET>=1 %then %do;
3110569   +           %gp_target;
3110570   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3110571   +               %let emloopmode= LOOP;
3110572   +           %else
3110573   +              %let emloopmode = POSTLOOP;
3110574   +       %end;
3110575   +       %else %do;
3110576   +           %let emloopmode = ;
3110577   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3110578   +           %goto doendmain;
3110579   +       %end;
3110580   +   %end;
3110581   +   %else
3110582   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3110583   +       %let emloopmode=;
3110584   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3110585   +           proc delete data=&em_data_eminfo;
3110586   +           run;
3110587   +       %end;
3110588   +   %end;
3110589   +   %else
3110590   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3110591   +       %gp_index;
3110592   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3110593   +           %let emloopmode= LOOP;
3110594   +       %else
3110595   +           %let emloopmode= POSTLOOP;
3110596   +   %end;
3110597   +   %else
3110598   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3110599   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3110600   +           %let emloopmode = ;
3110601   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3110602   +           %goto doendmain;
3110603   +       %end;
3110605   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3110606   +   %end;
3110607   +   %else
3110608   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3110609   +       %if "&emboostvar" eq "" %then %do;
3110610   +           %let emloopmode = ;
3110611   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3110612   +           %goto doendmain;
3110613   +       %end;
3110615   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3110616   +           %let emloopmode= LOOP;
3110617   +           %gp_boost(targetname=&emboostvar);
3110619   +       %end;
3110620   +       %else
3110621   +           %let emloopmode= POSTLOOP;
3110622   +   %end;
3110623   +   %else
3110624   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3110625   +       %if "&embagvar" eq "" %then %do;
3110626   +           %let emloopmode = ;
3110627   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3110628   +           %goto doendmain;
3110629   +       %end;
3110631   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
The SAS System
 
3110632   +           %let emloopmode= LOOP;
3110633   +           %gp_bag(targetname=&embagvar);
3110634   +       %end;
3110635   +       %else
3110636   +           %let emloopmode= POSTLOOP;
3110637   +   %end;
3110640   +   %if &emloopmode eq "" %then %do;
3110641   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3110642   +       %let member = %scan(&em_data_eminfo, 2, .);
3110643   +       proc datasets lib=&lib nolist;
3110644   +          delete &member;
3110645   +       run;
3110646   +   %end;
3110648   +   %doendmain:
3110650   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3110651   +       %put NEW LOOP MODE: &emloopmode;
3110652   +   %end;
3110654   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3110655   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3110656   +       %include temp;
3110657   +       filename temp;
3110659   +       %postloop;
3110660   +   %end;
3110662   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp8_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP8_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp8_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 10 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=02 June 2018 16:26:24 o'clock
 
NOTE: 1 record was written to the file GPDELTA.
      The minimum record length was 38.
      The maximum record length was 38.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3110664    *------------------------------------------------------------*;
3110665    * End TRAIN: Grp8;
3110666    *------------------------------------------------------------*;
3110667
 
3110668    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3110669    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3110670    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3110671    ;
MPRINT(EM_DIAGRAM):   ;
3110672    ;
MPRINT(EM_DIAGRAM):   ;
3110673    ;
MPRINT(EM_DIAGRAM):   ;
3110674    ;
MPRINT(EM_DIAGRAM):   ;
3110675    quit;
MPRINT(EM_DIAGRAM):   quit;
3110676    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3110677    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3110678    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3110679    /*; *"; *'; */
3110680    ;
MPRINT(EM_DIAGRAM):   ;
3110681    run;
MPRINT(EM_DIAGRAM):   run;
3110682    quit;
MPRINT(EM_DIAGRAM):   quit;
3110683    /* Reset EM Options */
3110684    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3110685    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3110686    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:00:48 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                17:00:48 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2P2C67J "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2P2C67J new;
MPRINT(EM_DIAGRAM):   run;
3110788    %let EMEXCEPTIONSTRING=;
3110789    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3110790    * SCORE: Grp8;
MPRINT(EM_DIAGRAM):   * SCORE: Grp8;
3110791    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3110792    %let EM_ACTION = SCORE;
3110793    %let syscc = 0;
3110794    %macro main;
3110795
3110796       filename temp catalog 'sashelp.emutil.gp_macros.source';
3110797       %include temp;
3110798       filename temp;
3110799
3110800       %SetProperties;
3110801
3110802       %if %upcase(&EM_ACTION) = CREATE %then %do;
3110803
3110804           filename temp catalog 'sashelp.emutil.gp_create.source';
3110805           %include temp;
3110806           filename temp;
3110807
3110808           %create;
3110809       %end;
3110810       %else
3110811       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3110812
3110813           filename temp catalog 'sashelp.emutil.gp_train.source';
3110814           %include temp;
3110815           filename temp;
3110816
3110817           %train;
3110818       %end;
3110819       %else
3110820       %if %upcase(&EM_ACTION) = SCORE %then %do;
3110821
3110822           filename temp catalog 'sashelp.emutil.gp_score.source';
3110823           %include temp;
3110824           filename temp;
3110825
3110826           %score;
3110827       %end;
3110828       %else
3110829       %if %upcase(&EM_ACTION) = REPORT %then %do;
3110830
3110831           filename temp catalog 'sashelp.emutil.gp_report.source';
3110832           %include temp;
3110833           filename temp;
3110834
3110835           %report;
3110836
3110837       %end;
3110838       %else
3110839       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3110840
3110841           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3110842           %include temp;
3110843           filename temp;
3110844
3110845           %postloop;
3110846
3110847       %end;
3110848
3110849       %doendm:
3110850    %mend main;
3110851
3110852    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3110853   +%macro SetProperties;
3110854   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3110855   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3110856   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3110857   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3110858   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3110859   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3110860   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3110861   +%mend SetProperties;
3110862   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_SCORE.SOURCE.
3110863   +%macro scoreTables(data=, out=, scoreref=, prefref=, keepnum=0);
3110864   +
3110865   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
3110866   +       data &out;
3110867   +          set &data
3110868   +          %if &keepNum %then %do;
3110869   +              (keep=%emGrpKeep %emGrpRej)
3110870   +          %end;
3110871   +          ;
3110872   +          %if %sysfunc(fexist(&prefref)) %then %do;
3110873   +              %inc &prefref;
3110874   +          %end;
3110875   +          %inc &scoreref;
3110876   +       run;
3110877   +   %end;
3110878   +
3110879   +%mend scoretables;
3110880   +
3110881   +%macro makeExportCode;
3110882   +   %em_getname(key=EXPORTCODE, type=FILE, extension=sas);
3110883   +   %em_getName(key=GROUPINFO,  type=DATA);
3110884   +
3110885   +   filename x "&EM_USER_EXPORTCODE";
3110886   +
3110887   +   data _null_;
3110888   +      file x;
3110889   +       set &em_user_groupinfo;
3110890   +       if _LOOP_ = &emloopnumber and _where_ ne '' then
3110891   +          put 'if ' _where_ ' then output;';
3110892   +   run;
3110893   +
3110894   +   %em_getname(key=PRECODE, type=FILE, extension=sas);
3110895   +   filename _pregrp "&em_user_precode";
3110896   +
3110897   +   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
3110898   +   %inc _grpdrp;
3110899   +   filename _grpdrp;
3110900   +   %em_varMacro(name=emGrpKeep, metadata=&EM_IMPORT_DATA_CMETA, where=%nrbquote(ROLE ne 'REJECTED'), key=NAME, nummacro=GrpKeep);
3110901   +
3110902   +    %em_varMacro(name=emGrpRej, metadata=&EM_DATA_VARIABLESET, where=%nrbquote(ROLE eq 'REJECTED' and GROUPROLE='GROUP'), key=NAME, nummacro=GrpRej);
3110903   +
3110904   +   %scoreTables(data=&em_import_data,        out=&em_export_train,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
3110905   +   %scoreTables(data=&em_import_validate,    out=&em_export_validate,    scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
3110906   +   %scoreTables(data=&em_import_test,        out=&em_export_test,        scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
3110907   +   %scoreTables(data=&em_import_score,       out=&em_export_score,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
3110908   +   %scoreTables(data=&em_import_transaction, out=&em_export_transaction, scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
3110909   +
3110910   +   filename x;
3110911   +   filename _pregrp;
3110912   +
3110913   +%mend makeExportCode;
3110914   +
3110915   +%macro makeCode;
3110916   +
3110917   +   %if &emloopmode = LOOP %then %do;
3110918   +       %em_getname(key=HPDMSCORE, type=FILE, extension=sas);
3110919   +       filename x "&em_user_HPDMSCORE";
3110920   +
3110921   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3110922   +       filename _pregrp "&em_user_precode";
3110923   +       %em_copyfile(infref=_pregrp, outfref=x);
3110924   +       filename _pregrp;
3110925   +
3110926   +       data _null_;
3110927   +          file x mod;
3110928   +          set &em_user_groupinfo;
3110929   +          if _LOOP_ = &emloopnumber and _where_ ne '' then
3110930   +             put 'if ^(' _where_ ') then return;';
3110931   +       run;
3110932   +       filename x;
3110933   +
3110934   +       filename x "&EM_FILE_EMFLOWSCORECODE";
3110935   +
3110936   +       %if "&emloopnumber" = "1" %then %do;
3110937   +           %em_getname(key=PRECODE, type=FILE, extension=sas);
3110938   +           filename _pregrp "&em_user_precode";
3110939   +           %em_copyfile(infref=_pregrp, outfref=x);
3110940   +           filename _pregrp;
3110941   +       %end;
3110942   +
3110943   +       data _null_;
3110944   +          file x
3110945   +          %if &emloopnumber = 1 %then %do;
3110946   +              mod
3110947   +          %end;
3110948   +          ;
3110949   +          set &em_user_groupinfo;
3110950   +          if _LOOP_ = &emloopnumber and _where_ ne '' then
3110951   +             put 'if ' _where_ ' then do;';
3110952   +       run;
3110953   +
3110954   +       filename y "&EM_FILE_EMPUBLISHSCORECODE";
3110955   +       %if "&EM_PROPERTY_MODE" ne "CROSSVALIDATION"  %then %do;
3110956   +           %em_copyfile(infref=x, outfref=y);
3110957   +       %end;
3110958   +       %else %do;
3110959   +           %if "&emloopnumber" = "1" %then %do;
3110960   +               %em_getname(key=PRECODE, type=FILE, extension=sas);
3110961   +                filename _pregrp "&em_user_precode";
3110962   +                %em_copyfile(infref=_pregrp, outfref=y);
3110963   +               filename _pregrp;
3110964   +           %end;
3110965   +           data _null_;
3110966   +             file y
3110967   +             %if &emloopnumber = 1 %then %do;
3110968   +                 mod
3110969   +             %end;
3110970   +             ;
3110971   +             set &em_user_groupinfo;
3110972   +             if _LOOP_ = &emloopnumber and _where_ ne '' then do;
3110973   +                _where_ = tranwrd(_where_, '^(', '(');
3110974   +                put 'if ' _where_ ' then do;';
3110975   +                put '_XVAL_=' "&emloopnumber" ';' ;
3110976   +             end;
3110977   +           run;
3110978   +       %end;
3110979   +       filename Y ;
3110980   +       filename x ;
3110981   +   %end;
3110982   +%mend makeCode;
3110983   +
3110984   +%macro score;
3110985   +
3110986   +   %if "&emloopmode" eq "LOOP" %then %do;
3110987   +
3110988   +       %em_getName(key=groupinfo,   type=DATA);
3110989   +
3110990   +       %if %sysfunc(exist(&em_user_groupinfo)) %then %do;
3110991   +           %makeCode;
3110992   +           %makeExportCode;
3110993   +       %end;
3110994   +   %end;
3110995   +   %else
3110996   +   %if "&emLoopmode" eq "POSTLOOP" %then %do;
3110997   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3110998   +       data _null_;
3110999   +          rc = fdelete('gpdelta');
3111000   +          run;
3111001   +       filename gpdelta;
3111002   +   %end;
3111003   +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\HPDMSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\HPDMSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=27 May 2018 00:30:13 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod;
MPRINT(MAKECODE):   set EMWS1.Grp8_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 10 and _where_ ne '' then put 'if ^(' _where_ ') then return;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\HPDMSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=27 May 2018 00:30:13 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 33.
      The maximum record length was 33.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMFLOWSCORE.sas";
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x ;
MPRINT(MAKECODE):   set EMWS1.Grp8_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 10 and _where_ ne '' then put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=02 June 2018 16:26:25 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 26.
      The maximum record length was 26.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename y "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMPUBLISHSCORE.sas";
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file y ;
MPRINT(MAKECODE):   set EMWS1.Grp8_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 10 and _where_ ne '' then do;
MPRINT(MAKECODE):   _where_ = tranwrd(_where_, '^(', '(');
MPRINT(MAKECODE):   put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   put '_XVAL_=' "10" ';' ;
MPRINT(MAKECODE):   end;
MPRINT(MAKECODE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=02 June 2018 16:26:25 o'clock
 
NOTE: 2 records were written to the file Y.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename Y ;
NOTE: Fileref Y has been deassigned.
MPRINT(MAKECODE):   filename x ;
NOTE: Fileref X has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EXPORTCODE.sas";
MPRINT(MAKEEXPORTCODE):   data _null_;
MPRINT(MAKEEXPORTCODE):   file x;
MPRINT(MAKEEXPORTCODE):   set EMWS1.Grp8_GROUPINFO;
MPRINT(MAKEEXPORTCODE):   if _LOOP_ = 10 and _where_ ne '' then put 'if ' _where_ ' then output;';
MPRINT(MAKEEXPORTCODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EXPORTCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:00:47 o'clock,
      Create Time=27 May 2018 00:30:13 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 30.
      The maximum record length was 30.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\PRECODE.sas";
MPRINT(MAKEEXPORTCODE):   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file _GRPDRP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
3111005   +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
3111007   +   filename macFile catalog 'work.emutil.macro.source';
3111008   +   %let _METAOBS = 0;
3111009   +   %let _maxvar = &maxvar;
3111010   +   %if "&_maxvar" eq "" %then %let maxvar = -1;
3111012   +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
3111013   +                   or (&metadata eq ) %then %do;
3111014   +       %put * No metadata data set defined;
3111015   +       %goto doend;
3111016   +   %end;
3111018   +   data _null_;
3111019   +      length _STRING_ $80;
3111020   +      retain _STRING_ '' maxvar 0;
3111021   +      set &metadata end=eof;
3111022   +      file macFile;
3111023   +      %if %nrbquote(&where) ne %then %do;
3111024   +          %let whereClause = where (%nrbquote(&where));
3111025   +          %unquote(&whereClause);
3111026   +      %end;
3111027   +      if _N_=1 then do;
3111028   +         string = "%"!!"macro &name;";
3111029   +         put string;
3111030   +      end;
3111031   +      maxvar +1;
3111032   +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
3111033   +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
3111034   +         if eof
3111035   +            %if  %sysevalf(&_maxvar > 0) %then %do;
3111036   +                or maxvar >= &maxvar
3111037   +            %end;
3111038   +            then do;
3111039   +            put _STRING_;
3111040   +            string = "%"!!"mend &name;";
3111041   +            put string;
3111042   +            string = strip(put(_N_, best.));
3111043   +            call symput('_METAOBS', string);
3111044   +            %if (&nummacro ne ) %then %do;
3111045   +                put "%" "global &nummacro;";
3111046   +                put "%" "let &nummacro = " string ";";
3111047   +            %end;
3111048   +            stop;
3111049   +         end;
3111050   +      end;
3111051   +      else do;
3111052   +         put _STRING_;
3111053   +         _string_ = TRIM(&key);
3111054   +         if eof
3111055   +            %if  %sysevalf(&_maxvar > 0) %then %do;
3111056   +              or maxvar >= &maxvar
3111057   +           %end;
3111058   +            then do;
3111059   +            put _STRING_;
3111060   +            string = "%"!!"mend &name;";
3111061   +            put string;
3111062   +        end;
3111063   +      end;
3111064   +      if eof
3111065   +         %if  %sysevalf(&_maxvar > 0) %then %do;
3111066   +             or maxvar >= &maxvar
3111067   +         %end;
3111068   +         then do;
3111069   +         string = strip(put(_N_, best.));
3111070   +         call symput('_METAOBS', string);
3111071   +         %if (&nummacro ne ) %then %do;
3111072   +             put "%" "global &nummacro;";
3111073   +             put "%" "let &nummacro = " string ";";
3111074   +         %end;
3111075   +         stop;
3111076   +      end;
3111077   +   run;
3111079   +   %doend:
3111080   +   %if ^&_METAOBS %then %do;
3111081   +       data _null_;
3111082   +          file macFile;
3111083   +          put "%" "macro &name;";
3111084   +          put "%" "mend &name;";
3111085   +          %if (&nummacro ne ) %then %do;
3111086   +              put "%" "global &nummacro;";
3111087   +              put "%" "let &nummacro = 0;";
3111088   +          %end;
3111089   +      run;
3111090   +   %end;
3111091   +   %inc macFile;
3111092   +   filename macFile;
3111093   +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAKEEXPORTCODE):   filename _grpdrp;
NOTE: Fileref _GRPDRP has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Trans2_CMeta_TRAIN end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE ne 'REJECTED');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 17:00:44,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 7 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 14 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
      WHERE ROLE not = 'REJECTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
3111094   +%macro emGrpKeep;
3111095   +Custid DepVar Marital_Status MntCard_Games MntMagazines
3111096   +NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq
3111097   +RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var
3111098   +%mend emGrpKeep;
3111099   +%global GrpKeep;
3111100   +%let GrpKeep = 14 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Grp8_VariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE eq 'REJECTED' and GROUPROLE='GROUP');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 17:00:48,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set EMWS1.GRP8_VARIABLESET.
      WHERE (ROLE='REJECTED') and (GROUPROLE='GROUP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "mend emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = 0;";
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 17:00:48,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 4 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
3111101   +%macro emGrpRej;
3111102   +%mend emGrpRej;
3111103   +%global GrpRej;
3111104   +%let GrpRej = 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(SCORETABLES):   data EMWS1.Grp8_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN (keep
MPRINT(SCORETABLES):  =Custid DepVar Marital_Status MntCard_Games MntMagazines NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var) ;
NOTE: %INCLUDE (level 1) file _PREGRP is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\PRECODE.sas.
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file X is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EXPORTCODE.sas.
3111105   +if ^(cv_var =10)  then output;
MPRINT(SCORETABLES):   if ^(cv_var =10) then output;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: The data set EMWS1.GRP8_TRAIN has 2224 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEEXPORTCODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Grp8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3111106    *------------------------------------------------------------*;
3111107    * End SCORE: Grp8;
3111108    *------------------------------------------------------------*;
3111109
 
3111111    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):     filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMFLOWSCORE.sas";
3111112    filename lpflow catalog "EMWS1.Grp8_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_DIAGRAM):   filename lpflow catalog "EMWS1.Grp8_LOOP.EMFLOWCODE_10.source";
3111113    %em_copyfile(infref=emflow, outfref=lpflow);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lpflow lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("emflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPFLOW is:
      Catalog Name=EMWS1.GRP8_LOOP.EMFLOWCODE_10.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=24,
      Created=Saturday,  2 June 2018 16:26:26,
      Last Modified=Saturday,  2 June 2018 16:56:37,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp8_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            93KB,
      File Size (bytes)=95232
 
NOTE: 1 record was written to the file LPFLOW.
      The minimum record length was 26.
      The maximum record length was 26.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
3111114    filename lpflow;
MPRINT(EM_DIAGRAM):   filename lpflow;
NOTE: Fileref LPFLOW has been deassigned.
3111115    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
3111116    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMPUBLISHSCORE.sas";
3111117    filename lppub catalog "EMWS1.Grp8_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_DIAGRAM):   filename lppub catalog "EMWS1.Grp8_LOOP.EMPUBLISHCODE_10.source";
3111118    %em_copyfile(infref=empub, outfref=lppub);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lppub lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("empub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPPUB is:
      Catalog Name=EMWS1.GRP8_LOOP.EMPUBLISHCODE_10.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=25,
      Created=Saturday,  2 June 2018 16:26:26,
      Last Modified=Saturday,  2 June 2018 17:00:48,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp8_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            97KB,
      File Size (bytes)=99328
 
NOTE: 2 records were written to the file LPPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
3111119    filename lppub;
MPRINT(EM_DIAGRAM):   filename lppub;
NOTE: Fileref LPPUB has been deassigned.
3111120    filename empub;
MPRINT(EM_DIAGRAM):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
3111121    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3111122    * Grp8: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Grp8: Computing metadata for TRAIN data;
3111123    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Grp8_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Grp8_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Grp8_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Grp8_TRAIN out=WORK.M22U6186 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M22U6186;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M22U6186(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M22U6186;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M22U6186;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0ZV3304 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3DBU_9C(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZV3304;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Grp8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Grp8";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp8: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)= 'CV_VAR' then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:00:49 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                17:00:49 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1YXEZTY "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1YXEZTY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
