MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:05 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:05:05 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0KS7RI4 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0KS7RI4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:05 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:06 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3442359    proc freq data=EMWS1.Grp8_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp8_VariableSet noprint;
3442360    table ROLE*LEVEL/out=WORK.Grp8META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp8META;
3442361    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.GRP8_VARIABLESET.
NOTE: The data set WORK.GRP8META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

3442362    proc print data=WORK.Grp8META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp8META label noobs;
3442363    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3442364    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3442365    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3442366    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3442367    run;

NOTE: There were 4 observations read from the data set WORK.GRP8META.
NOTE: The PROCEDURE PRINT printed page 2296.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3442368    title10;
MPRINT(EM_DIAGRAM):   title10;
3442369    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp8: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp8: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3442692    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3442693    * Grp8: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp8: Generation of macros and macro variables;
3442694    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3442695    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

3442696    %let EMEXCEPTIONSTRING=;
3442697    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3442698    * TRAIN: Grp8;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp8;
3442699    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3442700    %let EM_ACTION = TRAIN;
3442701    %let syscc = 0;
3442702    %macro main;
3442703    
3442704       filename temp catalog 'sashelp.emutil.gp_macros.source';
3442705       %include temp;
3442706       filename temp;
3442707    
3442708       %SetProperties;
3442709    
3442710       %if %upcase(&EM_ACTION) = CREATE %then %do;
3442711    
3442712           filename temp catalog 'sashelp.emutil.gp_create.source';
3442713           %include temp;
3442714           filename temp;
3442715    
3442716           %create;
3442717       %end;
3442718       %else
3442719       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3442720    
3442721           filename temp catalog 'sashelp.emutil.gp_train.source';
3442722           %include temp;
3442723           filename temp;
3442724    
3442725           %train;
3442726       %end;
3442727       %else
3442728       %if %upcase(&EM_ACTION) = SCORE %then %do;
3442729    
3442730           filename temp catalog 'sashelp.emutil.gp_score.source';
3442731           %include temp;
3442732           filename temp;
3442733    
3442734           %score;
3442735       %end;
3442736       %else
3442737       %if %upcase(&EM_ACTION) = REPORT %then %do;
3442738    
3442739           filename temp catalog 'sashelp.emutil.gp_report.source';
3442740           %include temp;
3442741           filename temp;
3442742    
3442743           %report;
3442744    
3442745       %end;
3442746       %else
3442747       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3442748    
3442749           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3442750           %include temp;
3442751           filename temp;
3442752    
3442753           %postloop;
3442754    
3442755       %end;
3442756    
3442757       %doendm:
3442758    %mend main;
3442759    
3442760    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3442761   +%macro SetProperties;
3442762   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3442763   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3442764   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3442765   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3442766   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3442767   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3442768   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3442769   +%mend SetProperties;
3442770   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3442771   +%macro scoreValidTest(data=, out=);
3442773   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3442774   +       data &out / view = &out;
3442775   +          retain _RESAMP_ 1;
3442776   +          set &data;
3442777   +       run;
3442778   +   %end;
3442780   +%mend scoreValidTest;
3442782   +%macro getVariables;
3442783   +   %if "&emloopnumber" = "1" %then %do;
3442784   +       data _null_;
3442785   +          retain numgoup 0;
3442786   +          set &em_data_variableset end=eof;
3442787   +          %if &em_num_target = 1 %then %do;
3442788   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3442789   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3442790   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3442791   +              %end;
3442792   +              %else
3442793   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3442794   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3442795   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3442796   +              %end;
3442797   +          %end;
3442798   +          %else %do;
3442799   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3442800   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3442801   +              else
3442802   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3442803   +          %end;
3442804   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3442805   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3442806   +             numgroup + 1;
3442807   +          end;
3442808   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3442809   +       run;
3442810   +    %end;
3442811   +    %else %do;
3442812   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3442813   +            data _null_;
3442814   +               retain numgoup 0;
3442815   +               set &em_data_variableset end=eof;
3442816   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3442817   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3442818   +               numgroup + 1;
3442819   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3442820   +            run;
3442821   +          %end;
3442822   +            %else
3442823   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3442824   +            %em_getName(key=BOOSTINFO,   type=DATA);
3442825   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3442826   +                data _null_;
3442827   +                   set &em_user_boostinfo;
3442828   +                   call symput('emboostvar', strip(_TARGET_));
3442829   +                run;
3442830   +            %end;
3442831   +        %end;
3442832   +        %else
3442833   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3442834   +                %em_getName(key=BAGINFO,   type=DATA);
3442835   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3442836   +                    data _null_;
3442837   +                       set &em_user_baginfo;
3442838   +                      call symput('embagvar', strip(_TARGET_));
3442839   +                    run;
3442840   +                %end;
3442841   +            %end;
3442842   +    %end;
3442843   +%mend getVariables;
3442845   +%macro gp_bag(targetname=);
3442846   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3442847   +        %put LOOP MODE:   &emloopmode ;
3442848   +        %put LOOP NUMBER: &emloopnumber;
3442849   +        %put BAGGING TARGET: &targetname;
3442850   +   %end;
3442852   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3442853   +   %include temp;
3442854   +   filename temp;
3442856   +   %em_getName(key=BAGINFO,    type=DATA);
3442857   +   %em_getName(key=EMLOOPINFO, type=DATA);
3442859   +   %if &emloopnumber = 1 %then %do;
3442860   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3442861   +       data _null_;
3442862   +          file gpdelta;
3442863   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3442864   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3442865   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3442866   +          put "end;";
3442867   +       run;
3442868   +       filename gpdelta;
3442870   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3442871   +           proc datasets lib=&em_lib nolist;
3442872   +              delete &em_nodeid._baginfo;
3442873   +           run;
3442874   +       %end;
3442876   +       %if "%em_freq" ne "" %then %do;
3442877   +           proc means data=&em_import_data sum;
3442878   +              var %em_freq;
3442879   +              output out = _tempds sum=sumfreq;
3442880   +           run;
3442881   +           quit;
3442882   +           data _null_;
3442883   +              set _tempDs;
3442884   +              call symput('_sumfreq', put(sumfreq, best12.));
3442885   +           run;
3442886   +       %end;
3442887   +       %else %do;
3442888   +           proc sql noprint;
3442889   +              select count(*) into :_sumfreq
3442890   +              from &em_import_data;
3442891   +           quit;
3442892   +       %end;
3442894   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3442895   +           data _null_;
3442896   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3442897   +           run;
3442898   +       %end;
3442899   +       %else
3442900   +           %let _size = &em_property_sizeobs;
3442902   +       data &em_user_baginfo;
3442903   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3442904   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3442905   +          _TARGET_   ="&targetname";
3442906   +          _SUMFREQ_  =&_sumfreq;
3442907   +           _SIZE_    = &_size;
3442908   +          output;
3442909   +       run;
3442910   +       data &em_user_emloopinfo;
3442911   +          length MODE $8;
3442912   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3442913   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3442914   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3442915   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3442916   +           MODE='Bagging';
3442917   +       run;
3442919   +       data &em_data_eminfo;
3442920   +          length TARGET KEY $32  DATA $43;
3442921   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3442922   +       run;
3442923   +   %end;
3442924   +   %else %do;
3442925   +      data _null_;
3442926   +         set &em_user_baginfo;
3442927   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3442928   +         call symput('_size', put(_size_, best12.));
3442929   +      run;
3442930   +   %end;
3442932   +   %let bagsumFreq  = &_sumFreq;
3442933   +   %let bagSize     = &_Size;
3442935   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3442936   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3442938   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3442939   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3442941   +   %doendbg:
3442943   +%mend gp_bag;
3442946   +%macro gp_boost(targetname=);
3442947   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3442948   +       %put LOOP MODE:   &emloopmode ;
3442949   +       %put LOOP NUMBER: &emloopnumber;
3442950   +        %put BAGGING TARGET: &targetname;
3442951   +   %end;
3442953   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3442954   +   %include temp;
3442955   +   filename temp;
3442957   +   %em_getname(key=EMLOOPINFO, type=DATA);
3442958   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3442959   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3442960   +   %em_getName(key=BOOSTINFO,   type=DATA);
3442962   +   %if &emloopnumber = 1 %then %do;
3442963   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3442964   +       data _null_;
3442965   +          file gpdelta;
3442966   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3442967   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3442968   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3442969   +          put "end;";
3442970   +       run;
3442971   +       filename gpdelta;
3442973   +       %let deleteString =;
3442974   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3442975   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3442976   +       %if "&deleteString" ne "" %then %do;
3442977   +           proc datasets lib=&em_lib nolist;
3442978   +              delete &deleteString;
3442979   +           run;
3442980   +       %end;
3442982   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3442984   +       data &em_user_boostinfo;
3442985   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3442986   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3442987   +          _TARGET_          ="&targetname";
3442988   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3442989   +          _SUMFREQ_         =&_sumfreq;
3442990   +       run;
3442991   +       data &em_user_emloopinfo;
3442992   +          length MODE $8;
3442993   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3442994   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3442995   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3442996   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3442997   +           MODE='Boosting';
3442998   +       run;
3443000   +       data &em_data_eminfo;
3443001   +          length TARGET KEY $32  DATA $43;
3443002   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3443003   +       run;
3443005   +   %end;
3443006   +   %else %do;
3443007   +       %global _dmboodiv;
3443008   +       %let dmboosf = %upcase(&targetname);
3443009   +       %if %sysfunc(length(&targetname))> 30 %then
3443010   +           %let dmboosf =  %substr(&targetname, 1, 30);
3443012   +       data _null_;
3443013   +          set &em_user_boostinfo;
3443014   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3443015   +       run;
3443017   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3443019   +       data &em_user_boostinfo;
3443020   +          set &em_user_boostinfo;
3443021   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3443022   +       run;
3443024   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3443026   +   %end;
3443028   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3443029   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3443031   +   %doendbst:
3443033   +%mend gp_boost;
3443035   +%macro gp_group(numgroupvar=, groupvar=);
3443036   +   %em_getname(key=GROUPINFO, type=DATA);
3443037   +   %em_getName(key=LOOPINFO,  type=DATA);
3443038   +   %em_getName(key=EMGROUPINFO, type=DATA);
3443040   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3443041   +       ods listing close;
3443042   +       %if &numgroupvar = 1 %then %do;
3443043   +           ods output onewayfreqs=temp;
3443044   +       %end;
3443045   +       %else %do;
3443046   +           ods output crosstabfreqs=temp;
3443047   +       %end;
3443048   +       proc freq data=&em_import_data;
3443049   +          table
3443051   +          %let tableString =;
3443052   +          %let freqString  =;
3443053   +          %do i=1 %to &numgroupvar;
3443054   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3443055   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3443056   +              %let freqString = &freqString.1;
3443057   +          %end;
3443058   +          &tableString / missing;
3443059   +       run;
3443060   +       ods listing;
3443061   +       %if &numgroupvar = 1 %then %do;
3443062   +           data _null_;
3443063   +              retain totalobs 0;
3443064   +              set temp end=eof;
3443065   +              totalobs + frequency;
3443066   +              if eof then
3443067   +                 call symput('_totalObs_', put(totalobs, best.));
3443068   +           run;
3443070   +           proc sort data=temp out=loopinfo nodupkey;
3443071   +              by &groupvar;
3443072   +              where frequency>=&em_property_minimumObs;
3443073   +           run;
3443074   +       %end;
3443075   +       %else %do;
3443076   +           data _null_;
3443077   +              set temp;
3443078   +              where _type_='00';
3443079   +              call symput('_totalObs_', put(frequency, best.));
3443080   +           run;
3443081   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3443082   +              by &groupvar;
3443083   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3443084   +           run;
3443085   +       %end;
3443087   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3443088   +       filename _pregrp "&em_user_precode";
3443090   +       %let dsid = %sysfunc(open(loopinfo));
3443091   +       %do i=1 %to &numgroupvar;
3443092   +           %let varname = %scan(&groupvar, &i, %str( ));
3443093   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3443094   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3443095   +           %if %index(&varfmt, -) %then %do;
3443096   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3443097   +           %end;
3443099   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3443100   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3443101   +           %let fmttype&i = &vartype;
3443102   +           %let fmtlen&i  = &varlen;
3443104   +           %let fmtvar&i =;
3443105   +           %let fmt&i    =;
3443106   +           %if "&varfmt" ne "" %then %do;
3443107   +              %let fmtvar&i  = _FORMAT&i._;
3443108   +              %let fmt&i     = &varfmt;
3443109   +           %end;
3443110   +       %end;
3443111   +       %let dsid = %sysfunc(close(&dsid));
3443113   +       data _null_;
3443114   +          %do i=1 %to &numgroupvar;
3443115   +              %if "&&fmt&i" ne "" %then %do;
3443116   +                  retain len_&i 0;
3443117   +              %end;
3443118   +          %end;
3443120   +          set loopinfo end=eof;
3443121   +          file _pregrp;
3443123   +          %do i=1 %to &numgroupvar;
3443124   +              %let varname = %scan(&groupvar, &i, %str( ));
3443125   +              %if "&&fmt&i" ne "" %then %do;
3443126   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3443127   +                    len_&i = length(put(&varname, &&fmt&i));
3443128   +              %end;
3443129   +          %end;
3443131   +          if eof then do;
3443132   +             %do i=1 %to &numgroupvar;
3443133   +                 %let varname = %scan(&groupvar, &i, %str( ));
3443134   +                 %if "&&fmt&i" ne "" %then %do;
3443135   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3443136   +                     put "drop &&fmtvar&i" len_&i ";";
3443137   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3443138   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3443139   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3443140   +                 %end;
3443141   +              %end;
3443142   +          end;
3443143   +      run;
3443145   +      data loopinfo;
3443146   +         set loopinfo;
3443147   +         %do i=1 %to &numgroupvar;
3443148   +             %let varname = %scan(&groupvar, &i, %str( ));
3443149   +             %if "&&fmt&i" ne "" %then %do;
3443150   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3443151   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3443152   +             %end;
3443153   +         %end;
3443154   +      run;
3443155   +      filename _pregrp;
3443157   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3443158   +          data temp;
3443159   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3443160   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3443161   +      %end;
3443162   +      %else %do;
3443163   +          data &em_user_groupinfo;
3443164   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3443165   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3443166   +             retain _TARGET_ '';
3443167   +      %end;
3443169   +          set loopinfo;
3443170   +          _LOOP_= _N_;
3443171   +          _WHERE_ = '';
3443172   +          _WHEREDESC_  = '';
3443173   +          %do i=1 %to &numgroupvar;
3443174   +              %let varname = %scan(&groupvar, &i, %str( ));
3443175   +              %if "&&fmt&i" eq "" %then %do;
3443176   +                  %if "&&fmtType&i" eq "N" %then %do;
3443177   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3443178   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3443179   +                   %end;
3443180   +                  %else %do;
3443181   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3443182   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3443183   +                  %end;
3443184   +              %end;
3443185   +              %else %do;
3443186   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3443187   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3443188   +              %end;
3443189   +              %if &i < &numgroupvar %then %do;
3443190   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3443191   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3443192   +              %end;
3443193   +          %end;
3443194   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3443195   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3443196   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3443197   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3443198   +          %end;
3443199   +      run;
3443201   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3443202   +          data target;
3443203   +             length _TARGET_ $32;
3443204   +              %do i=1 %to &em_num_target;
3443205   +                  %let varname = %scan(%em_target, &i, %str( ));
3443206   +                  _TARGET_ = "&varname";
3443207   +                  output;
3443208   +              %end;
3443209   +          run;
3443210   +          proc sql;
3443211   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3443212   +          quit;
3443213   +          data &em_user_groupinfo;
3443214   +             set &em_user_groupinfo;
3443215   +             _LOOP_=_N_;
3443216   +          run;
3443217   +      %end;
3443219   +      data &em_data_eminfo;
3443220   +         length TARGET KEY $32  DATA $43;
3443221   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3443222   +      run;
3443224   +      data &em_user_emloopinfo;
3443225   +         set &em_user_groupinfo;
3443226   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3443227   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3443228   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3443229   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3443230   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3443231   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3443232   +         %end;
3443233   +         %else %do;
3443234   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3443235   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3443236   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3443237   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3443238   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3443239   +         %end;
3443240   +      run;
3443242   +      proc datasets lib=work nolist;
3443243   +          delete temp loopinfo
3443244   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3443245   +              target
3443246   +          %end;
3443247   +          ;
3443248   +      run;
3443250   +   %end;
3443252   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3443253   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3443254   +       data _null_;
3443255   +          length quotedTarget $32;
3443256   +          set &em_user_groupinfo;
3443257   +          file gpdelta;
3443258   +          if _N_ = &emloopnumber then do;
3443259   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3443260   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3443262   +             %do i=1 %to &numgroupvar;
3443263   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3443264   +                 put "if upcase(NAME)= '&gvar' then delete;";
3443265   +             %end;
3443266   +          end;
3443267   +       run;
3443268   +   %end;
3443269   +   %else %do;
3443270   +       data _null_;
3443271   +          set &em_user_groupinfo;
3443272   +          file gpdelta;
3443273   +          if _N_ = &emloopnumber then do;
3443274   +             %do i=1 %to &numgroupvar;
3443275   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3443276   +                 put "if upcase(NAME)= '&gvar' then delete;";
3443277   +             %end;
3443278   +          end;
3443279   +       run;
3443280   +   %end;
3443281   +   filename gpdelta;
3443283   +   %let nobs=0;
3443284   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3443285   +   %if &dsid>0 %then %do;
3443286   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3443287   +       %let dsid = %sysfunc(close(&dsid));
3443288   +   %end;
3443290   +   %if ^&nobs  %then
3443291   +       %let emloopmode =;
3443292   +   %else
3443293   +       %if &nobs< &emloopnumber %then
3443294   +           %let emloopmode = POSTLOOP;
3443295   +        %else
3443296   +        %let emloopmode = LOOP;
3443297   +%mend gp_group;
3443299   +%macro gp_Index;
3443301   +   %em_getName(key=INDEXINFO,  type=DATA);
3443302   +   %em_getName(key=EMLOOPINFO, type=DATA);
3443304   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3443305   +       data &em_user_indexinfo;
3443306   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3443307   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3443308   +          _TARGET_   ="";
3443309   +          _WHERE_    ="";
3443310   +          output;
3443311   +       run;
3443312   +       data &em_data_eminfo;
3443313   +          length TARGET KEY $32  DATA $43;
3443314   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3443315   +       run;
3443317   +       data &em_user_emloopinfo;
3443318   +          length MODE $8;
3443319   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3443320   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3443321   +          set &em_user_indexinfo(keep=_LOOP_ );
3443322   +          MODE='Index';
3443323   +       run;
3443324   +   %end;
3443326   +%mend gp_index;
3443328   +%macro gp_Target;
3443329   +   %let TargetName = %scan(%em_target, &emloopnumber);
3443330   +   %if "&targetName" eq "" %then %do;
3443331   +       %goto doendgpt;
3443332   +   %end;
3443334   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3443335   +       %put GP_TARGET;
3443336   +       %put &emLoopnumber &TargetName;
3443337   +   %end;
3443339   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3443340   +   data _null_;
3443341   +      file gpdelta;
3443342   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3443343   +   run;
3443344   +   filename gpdelta;
3443346   +   %if &emloopnumber eq 1 %then %do;
3443347   +       %em_getName(key=TARGETINFO,  type=DATA);
3443348   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3443350   +       data &em_user_targetinfo;
3443351   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3443352   +          retain _LOOP_;
3443353   +          _WHERE_ = '';
3443354   +          %do i=1 %to &em_num_target;
3443355   +              %let varname = %scan(%em_target, &i, ' ');
3443356   +              _TARGET_ = "&varname";
3443357   +              _LOOP_+1;
3443358   +              output;
3443359   +           %end;
3443360   +       run;
3443361   +       data &em_user_emloopinfo;
3443362   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3443363   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3443364   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3443365   +      run;
3443367   +       data &em_data_eminfo;
3443368   +          length TARGET KEY $32  DATA $43;
3443369   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3443370   +       run;
3443371   +   %end;
3443373   +   %doendgpt:
3443374   +%mend gp_target;
3443376   +%macro train;
3443377   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3443378   +       %put LOOP MODE:   &emloopmode ;
3443379   +       %put LOOP NUMBER: &emloopnumber;
3443380   +   %end;
3443382   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3443384   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3443386   +       %let hpdmFlag = 0;
3443387   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3443388   +            data _null_;
3443389   +               set &em_import_DATA_eminfo;
3443390   +               where KEY = "HPDMSAMPLE";
3443391   +               call symput('hpdmFlag', '1');
3443392   +            run;
3443393   +       %end;
3443394   +       %if &hpdmFlag %then %do;
3443395   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3443396   +           %goto doendmain;
3443397   +       %end;
3443398   +   %end;
3443400   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3443401   +   %em_getname(key=GROUPINFO,  type=DATA);
3443402   +   %em_getname(key=BOOSTINFO,  type=DATA);
3443403   +   %em_getname(key=BAGINFO,    type=DATA);
3443404   +   %em_getname(key=TARGETINFO, type=DATA);
3443405   +   %em_getname(key=INDEXINFO,  type=DATA);
3443406   +   %em_getname(key=EMINFO,  type=DATA);
3443408   +   %if "&emloopnumber" = "1" %then %do;
3443409   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3443410   +       filename _pregrp "&em_user_precode";
3443411   +       data _null_;
3443412   +         rc = fdelete('_pregrp');
3443413   +       run;
3443414   +       filename _pregrp;
3443416   +       %let members =;
3443417   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3443418   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3443419   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3443420   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3443421   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3443422   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3443423   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3443425   +       %if "&members" ne "" %then %do;
3443426   +           proc datasets lib=&em_lib nolist;
3443427   +              delete &members;
3443428   +           run;
3443429   +      %end;
3443430   +   %end;
3443432   +   %let emboostvar    =;
3443433   +   %let embagvar      =;
3443434   +   %let emgroupvar    =;
3443435   +   %let emnumgroupvar =;
3443436   +   %getVariables;
3443438   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3443439   +       %if &EM_NUM_TARGET>=1 %then %do;
3443440   +           %gp_target;
3443441   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3443442   +               %let emloopmode= LOOP;
3443443   +           %else
3443444   +              %let emloopmode = POSTLOOP;
3443445   +       %end;
3443446   +       %else %do;
3443447   +           %let emloopmode = ;
3443448   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3443449   +           %goto doendmain;
3443450   +       %end;
3443451   +   %end;
3443452   +   %else
3443453   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3443454   +       %let emloopmode=;
3443455   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3443456   +           proc delete data=&em_data_eminfo;
3443457   +           run;
3443458   +       %end;
3443459   +   %end;
3443460   +   %else
3443461   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3443462   +       %gp_index;
3443463   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3443464   +           %let emloopmode= LOOP;
3443465   +       %else
3443466   +           %let emloopmode= POSTLOOP;
3443467   +   %end;
3443468   +   %else
3443469   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3443470   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3443471   +           %let emloopmode = ;
3443472   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3443473   +           %goto doendmain;
3443474   +       %end;
3443476   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3443477   +   %end;
3443478   +   %else
3443479   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3443480   +       %if "&emboostvar" eq "" %then %do;
3443481   +           %let emloopmode = ;
3443482   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3443483   +           %goto doendmain;
3443484   +       %end;
3443486   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3443487   +           %let emloopmode= LOOP;
3443488   +           %gp_boost(targetname=&emboostvar);
3443490   +       %end;
3443491   +       %else
3443492   +           %let emloopmode= POSTLOOP;
3443493   +   %end;
3443494   +   %else
3443495   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3443496   +       %if "&embagvar" eq "" %then %do;
3443497   +           %let emloopmode = ;
3443498   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3443499   +           %goto doendmain;
3443500   +       %end;
3443502   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3443503   +           %let emloopmode= LOOP;
3443504   +           %gp_bag(targetname=&embagvar);
3443505   +       %end;
3443506   +       %else
3443507   +           %let emloopmode= POSTLOOP;
3443508   +   %end;
3443511   +   %if &emloopmode eq "" %then %do;
3443512   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3443513   +       %let member = %scan(&em_data_eminfo, 2, .);
3443514   +       proc datasets lib=&lib nolist;
3443515   +          delete &member;
3443516   +       run;
3443517   +   %end;
3443519   +   %doendmain:
3443521   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3443522   +       %put NEW LOOP MODE: &emloopmode;
3443523   +   %end;
3443525   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3443526   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3443527   +       %include temp;
3443528   +       filename temp;
3443530   +       %postloop;
3443531   +   %end;
3443533   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp8_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;

NOTE: There were 1 observations read from the data set EMWS1.GRP8_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp8_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;

NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp8\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:05:07 o'clock,
      Create Time=02 June 2018 16:26:24 o'clock

NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP8_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3443535   +%macro postloop;
3443536   +   %let deleteString =;
3443537   +
3443538   +   %em_getname(key=boostweight, type=DATA);
3443539   +   %em_getname(key=boostscore,  type=DATA);
3443540   +
3443541   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3443542   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3443543   +   %if "&deleteString" ne "" %then %do;
3443544   +       proc datasets lib=&em_lib nolist;
3443545   +          delete &deleteString;
3443546   +       run;
3443547   +   %end;
3443548   +
3443549   +   %em_register(key=EMLOOPINFO,    type=DATA);
3443550   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3443551   +    proc print data=&em_user_emloopinfo noobs label;
3443552   +       title9 'Group Summary';
3443553   +    run;
3443554   +    title9;
3443555   +
3443556   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3443557   +
3443558   +%mend postloop;
3443559   +
3443560   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp8_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp8_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP8_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2297.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.77817276575517;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3443561    *------------------------------------------------------------*;
3443562    * End TRAIN: Grp8;
3443563    *------------------------------------------------------------*;
3443564    

3443565    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3443566    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3443567    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3443568    ;
MPRINT(EM_DIAGRAM):   ;
3443569    ;
MPRINT(EM_DIAGRAM):   ;
3443570    ;
MPRINT(EM_DIAGRAM):   ;
3443571    ;
MPRINT(EM_DIAGRAM):   ;
3443572    quit;
MPRINT(EM_DIAGRAM):   quit;
3443573    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3443574    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3443575    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3443576    /*; *"; *'; */
3443577    ;
MPRINT(EM_DIAGRAM):   ;
3443578    run;
MPRINT(EM_DIAGRAM):   run;
3443579    quit;
MPRINT(EM_DIAGRAM):   quit;
3443580    /* Reset EM Options */
3443581    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3443582    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3443583    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3443584    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3443585    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3443586    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
