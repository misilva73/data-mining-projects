MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:24 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:05:24 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0X3_Q7X "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0X3_Q7X new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:24 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:24 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3470872    proc freq data=EMWS1.Grp_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp_VariableSet noprint;
3470873    table ROLE*LEVEL/out=WORK.GrpMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrpMETA;
3470874    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.GRP_VARIABLESET.
NOTE: The data set WORK.GRPMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

3470875    proc print data=WORK.GrpMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrpMETA label noobs;
3470876    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3470877    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3470878    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3470879    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3470880    run;

NOTE: There were 4 observations read from the data set WORK.GRPMETA.
NOTE: The PROCEDURE PRINT printed page 2304.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3470881    title10;
MPRINT(EM_DIAGRAM):   title10;
3470882    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3471206    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3471207    * Grp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp: Generation of macros and macro variables;
3471208    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3471209    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

3471210    %let EMEXCEPTIONSTRING=;
3471211    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3471212    * TRAIN: Grp;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp;
3471213    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3471214    %let EM_ACTION = TRAIN;
3471215    %let syscc = 0;
3471216    %macro main;
3471217    
3471218       filename temp catalog 'sashelp.emutil.gp_macros.source';
3471219       %include temp;
3471220       filename temp;
3471221    
3471222       %SetProperties;
3471223    
3471224       %if %upcase(&EM_ACTION) = CREATE %then %do;
3471225    
3471226           filename temp catalog 'sashelp.emutil.gp_create.source';
3471227           %include temp;
3471228           filename temp;
3471229    
3471230           %create;
3471231       %end;
3471232       %else
3471233       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3471234    
3471235           filename temp catalog 'sashelp.emutil.gp_train.source';
3471236           %include temp;
3471237           filename temp;
3471238    
3471239           %train;
3471240       %end;
3471241       %else
3471242       %if %upcase(&EM_ACTION) = SCORE %then %do;
3471243    
3471244           filename temp catalog 'sashelp.emutil.gp_score.source';
3471245           %include temp;
3471246           filename temp;
3471247    
3471248           %score;
3471249       %end;
3471250       %else
3471251       %if %upcase(&EM_ACTION) = REPORT %then %do;
3471252    
3471253           filename temp catalog 'sashelp.emutil.gp_report.source';
3471254           %include temp;
3471255           filename temp;
3471256    
3471257           %report;
3471258    
3471259       %end;
3471260       %else
3471261       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3471262    
3471263           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3471264           %include temp;
3471265           filename temp;
3471266    
3471267           %postloop;
3471268    
3471269       %end;
3471270    
3471271       %doendm:
3471272    %mend main;
3471273    
3471274    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3471275   +%macro SetProperties;
3471276   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3471277   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3471278   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3471279   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3471280   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3471281   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3471282   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3471283   +%mend SetProperties;
3471284   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3471285   +%macro scoreValidTest(data=, out=);
3471287   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3471288   +       data &out / view = &out;
3471289   +          retain _RESAMP_ 1;
3471290   +          set &data;
3471291   +       run;
3471292   +   %end;
3471294   +%mend scoreValidTest;
3471296   +%macro getVariables;
3471297   +   %if "&emloopnumber" = "1" %then %do;
3471298   +       data _null_;
3471299   +          retain numgoup 0;
3471300   +          set &em_data_variableset end=eof;
3471301   +          %if &em_num_target = 1 %then %do;
3471302   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3471303   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3471304   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3471305   +              %end;
3471306   +              %else
3471307   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3471308   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3471309   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3471310   +              %end;
3471311   +          %end;
3471312   +          %else %do;
3471313   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3471314   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3471315   +              else
3471316   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3471317   +          %end;
3471318   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3471319   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3471320   +             numgroup + 1;
3471321   +          end;
3471322   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3471323   +       run;
3471324   +    %end;
3471325   +    %else %do;
3471326   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3471327   +            data _null_;
3471328   +               retain numgoup 0;
3471329   +               set &em_data_variableset end=eof;
3471330   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3471331   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3471332   +               numgroup + 1;
3471333   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3471334   +            run;
3471335   +          %end;
3471336   +            %else
3471337   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3471338   +            %em_getName(key=BOOSTINFO,   type=DATA);
3471339   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3471340   +                data _null_;
3471341   +                   set &em_user_boostinfo;
3471342   +                   call symput('emboostvar', strip(_TARGET_));
3471343   +                run;
3471344   +            %end;
3471345   +        %end;
3471346   +        %else
3471347   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3471348   +                %em_getName(key=BAGINFO,   type=DATA);
3471349   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3471350   +                    data _null_;
3471351   +                       set &em_user_baginfo;
3471352   +                      call symput('embagvar', strip(_TARGET_));
3471353   +                    run;
3471354   +                %end;
3471355   +            %end;
3471356   +    %end;
3471357   +%mend getVariables;
3471359   +%macro gp_bag(targetname=);
3471360   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3471361   +        %put LOOP MODE:   &emloopmode ;
3471362   +        %put LOOP NUMBER: &emloopnumber;
3471363   +        %put BAGGING TARGET: &targetname;
3471364   +   %end;
3471366   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3471367   +   %include temp;
3471368   +   filename temp;
3471370   +   %em_getName(key=BAGINFO,    type=DATA);
3471371   +   %em_getName(key=EMLOOPINFO, type=DATA);
3471373   +   %if &emloopnumber = 1 %then %do;
3471374   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3471375   +       data _null_;
3471376   +          file gpdelta;
3471377   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3471378   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3471379   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3471380   +          put "end;";
3471381   +       run;
3471382   +       filename gpdelta;
3471384   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3471385   +           proc datasets lib=&em_lib nolist;
3471386   +              delete &em_nodeid._baginfo;
3471387   +           run;
3471388   +       %end;
3471390   +       %if "%em_freq" ne "" %then %do;
3471391   +           proc means data=&em_import_data sum;
3471392   +              var %em_freq;
3471393   +              output out = _tempds sum=sumfreq;
3471394   +           run;
3471395   +           quit;
3471396   +           data _null_;
3471397   +              set _tempDs;
3471398   +              call symput('_sumfreq', put(sumfreq, best12.));
3471399   +           run;
3471400   +       %end;
3471401   +       %else %do;
3471402   +           proc sql noprint;
3471403   +              select count(*) into :_sumfreq
3471404   +              from &em_import_data;
3471405   +           quit;
3471406   +       %end;
3471408   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3471409   +           data _null_;
3471410   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3471411   +           run;
3471412   +       %end;
3471413   +       %else
3471414   +           %let _size = &em_property_sizeobs;
3471416   +       data &em_user_baginfo;
3471417   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3471418   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3471419   +          _TARGET_   ="&targetname";
3471420   +          _SUMFREQ_  =&_sumfreq;
3471421   +           _SIZE_    = &_size;
3471422   +          output;
3471423   +       run;
3471424   +       data &em_user_emloopinfo;
3471425   +          length MODE $8;
3471426   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3471427   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471428   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3471429   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3471430   +           MODE='Bagging';
3471431   +       run;
3471433   +       data &em_data_eminfo;
3471434   +          length TARGET KEY $32  DATA $43;
3471435   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3471436   +       run;
3471437   +   %end;
3471438   +   %else %do;
3471439   +      data _null_;
3471440   +         set &em_user_baginfo;
3471441   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3471442   +         call symput('_size', put(_size_, best12.));
3471443   +      run;
3471444   +   %end;
3471446   +   %let bagsumFreq  = &_sumFreq;
3471447   +   %let bagSize     = &_Size;
3471449   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3471450   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3471452   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3471453   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3471455   +   %doendbg:
3471457   +%mend gp_bag;
3471460   +%macro gp_boost(targetname=);
3471461   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3471462   +       %put LOOP MODE:   &emloopmode ;
3471463   +       %put LOOP NUMBER: &emloopnumber;
3471464   +        %put BAGGING TARGET: &targetname;
3471465   +   %end;
3471467   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3471468   +   %include temp;
3471469   +   filename temp;
3471471   +   %em_getname(key=EMLOOPINFO, type=DATA);
3471472   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3471473   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3471474   +   %em_getName(key=BOOSTINFO,   type=DATA);
3471476   +   %if &emloopnumber = 1 %then %do;
3471477   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3471478   +       data _null_;
3471479   +          file gpdelta;
3471480   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3471481   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3471482   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3471483   +          put "end;";
3471484   +       run;
3471485   +       filename gpdelta;
3471487   +       %let deleteString =;
3471488   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3471489   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3471490   +       %if "&deleteString" ne "" %then %do;
3471491   +           proc datasets lib=&em_lib nolist;
3471492   +              delete &deleteString;
3471493   +           run;
3471494   +       %end;
3471496   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3471498   +       data &em_user_boostinfo;
3471499   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3471500   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3471501   +          _TARGET_          ="&targetname";
3471502   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3471503   +          _SUMFREQ_         =&_sumfreq;
3471504   +       run;
3471505   +       data &em_user_emloopinfo;
3471506   +          length MODE $8;
3471507   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3471508   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471509   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3471510   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3471511   +           MODE='Boosting';
3471512   +       run;
3471514   +       data &em_data_eminfo;
3471515   +          length TARGET KEY $32  DATA $43;
3471516   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3471517   +       run;
3471519   +   %end;
3471520   +   %else %do;
3471521   +       %global _dmboodiv;
3471522   +       %let dmboosf = %upcase(&targetname);
3471523   +       %if %sysfunc(length(&targetname))> 30 %then
3471524   +           %let dmboosf =  %substr(&targetname, 1, 30);
3471526   +       data _null_;
3471527   +          set &em_user_boostinfo;
3471528   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3471529   +       run;
3471531   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3471533   +       data &em_user_boostinfo;
3471534   +          set &em_user_boostinfo;
3471535   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3471536   +       run;
3471538   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3471540   +   %end;
3471542   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3471543   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3471545   +   %doendbst:
3471547   +%mend gp_boost;
3471549   +%macro gp_group(numgroupvar=, groupvar=);
3471550   +   %em_getname(key=GROUPINFO, type=DATA);
3471551   +   %em_getName(key=LOOPINFO,  type=DATA);
3471552   +   %em_getName(key=EMGROUPINFO, type=DATA);
3471554   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3471555   +       ods listing close;
3471556   +       %if &numgroupvar = 1 %then %do;
3471557   +           ods output onewayfreqs=temp;
3471558   +       %end;
3471559   +       %else %do;
3471560   +           ods output crosstabfreqs=temp;
3471561   +       %end;
3471562   +       proc freq data=&em_import_data;
3471563   +          table
3471565   +          %let tableString =;
3471566   +          %let freqString  =;
3471567   +          %do i=1 %to &numgroupvar;
3471568   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3471569   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3471570   +              %let freqString = &freqString.1;
3471571   +          %end;
3471572   +          &tableString / missing;
3471573   +       run;
3471574   +       ods listing;
3471575   +       %if &numgroupvar = 1 %then %do;
3471576   +           data _null_;
3471577   +              retain totalobs 0;
3471578   +              set temp end=eof;
3471579   +              totalobs + frequency;
3471580   +              if eof then
3471581   +                 call symput('_totalObs_', put(totalobs, best.));
3471582   +           run;
3471584   +           proc sort data=temp out=loopinfo nodupkey;
3471585   +              by &groupvar;
3471586   +              where frequency>=&em_property_minimumObs;
3471587   +           run;
3471588   +       %end;
3471589   +       %else %do;
3471590   +           data _null_;
3471591   +              set temp;
3471592   +              where _type_='00';
3471593   +              call symput('_totalObs_', put(frequency, best.));
3471594   +           run;
3471595   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3471596   +              by &groupvar;
3471597   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3471598   +           run;
3471599   +       %end;
3471601   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3471602   +       filename _pregrp "&em_user_precode";
3471604   +       %let dsid = %sysfunc(open(loopinfo));
3471605   +       %do i=1 %to &numgroupvar;
3471606   +           %let varname = %scan(&groupvar, &i, %str( ));
3471607   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3471608   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3471609   +           %if %index(&varfmt, -) %then %do;
3471610   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3471611   +           %end;
3471613   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3471614   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3471615   +           %let fmttype&i = &vartype;
3471616   +           %let fmtlen&i  = &varlen;
3471618   +           %let fmtvar&i =;
3471619   +           %let fmt&i    =;
3471620   +           %if "&varfmt" ne "" %then %do;
3471621   +              %let fmtvar&i  = _FORMAT&i._;
3471622   +              %let fmt&i     = &varfmt;
3471623   +           %end;
3471624   +       %end;
3471625   +       %let dsid = %sysfunc(close(&dsid));
3471627   +       data _null_;
3471628   +          %do i=1 %to &numgroupvar;
3471629   +              %if "&&fmt&i" ne "" %then %do;
3471630   +                  retain len_&i 0;
3471631   +              %end;
3471632   +          %end;
3471634   +          set loopinfo end=eof;
3471635   +          file _pregrp;
3471637   +          %do i=1 %to &numgroupvar;
3471638   +              %let varname = %scan(&groupvar, &i, %str( ));
3471639   +              %if "&&fmt&i" ne "" %then %do;
3471640   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3471641   +                    len_&i = length(put(&varname, &&fmt&i));
3471642   +              %end;
3471643   +          %end;
3471645   +          if eof then do;
3471646   +             %do i=1 %to &numgroupvar;
3471647   +                 %let varname = %scan(&groupvar, &i, %str( ));
3471648   +                 %if "&&fmt&i" ne "" %then %do;
3471649   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3471650   +                     put "drop &&fmtvar&i" len_&i ";";
3471651   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3471652   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3471653   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3471654   +                 %end;
3471655   +              %end;
3471656   +          end;
3471657   +      run;
3471659   +      data loopinfo;
3471660   +         set loopinfo;
3471661   +         %do i=1 %to &numgroupvar;
3471662   +             %let varname = %scan(&groupvar, &i, %str( ));
3471663   +             %if "&&fmt&i" ne "" %then %do;
3471664   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3471665   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3471666   +             %end;
3471667   +         %end;
3471668   +      run;
3471669   +      filename _pregrp;
3471671   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3471672   +          data temp;
3471673   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3471674   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3471675   +      %end;
3471676   +      %else %do;
3471677   +          data &em_user_groupinfo;
3471678   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3471679   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3471680   +             retain _TARGET_ '';
3471681   +      %end;
3471683   +          set loopinfo;
3471684   +          _LOOP_= _N_;
3471685   +          _WHERE_ = '';
3471686   +          _WHEREDESC_  = '';
3471687   +          %do i=1 %to &numgroupvar;
3471688   +              %let varname = %scan(&groupvar, &i, %str( ));
3471689   +              %if "&&fmt&i" eq "" %then %do;
3471690   +                  %if "&&fmtType&i" eq "N" %then %do;
3471691   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3471692   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3471693   +                   %end;
3471694   +                  %else %do;
3471695   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3471696   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3471697   +                  %end;
3471698   +              %end;
3471699   +              %else %do;
3471700   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3471701   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3471702   +              %end;
3471703   +              %if &i < &numgroupvar %then %do;
3471704   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3471705   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3471706   +              %end;
3471707   +          %end;
3471708   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3471709   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3471710   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3471711   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3471712   +          %end;
3471713   +      run;
3471715   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3471716   +          data target;
3471717   +             length _TARGET_ $32;
3471718   +              %do i=1 %to &em_num_target;
3471719   +                  %let varname = %scan(%em_target, &i, %str( ));
3471720   +                  _TARGET_ = "&varname";
3471721   +                  output;
3471722   +              %end;
3471723   +          run;
3471724   +          proc sql;
3471725   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3471726   +          quit;
3471727   +          data &em_user_groupinfo;
3471728   +             set &em_user_groupinfo;
3471729   +             _LOOP_=_N_;
3471730   +          run;
3471731   +      %end;
3471733   +      data &em_data_eminfo;
3471734   +         length TARGET KEY $32  DATA $43;
3471735   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3471736   +      run;
3471738   +      data &em_user_emloopinfo;
3471739   +         set &em_user_groupinfo;
3471740   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3471741   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471742   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3471743   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3471744   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3471745   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3471746   +         %end;
3471747   +         %else %do;
3471748   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471749   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3471750   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3471751   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3471752   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3471753   +         %end;
3471754   +      run;
3471756   +      proc datasets lib=work nolist;
3471757   +          delete temp loopinfo
3471758   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3471759   +              target
3471760   +          %end;
3471761   +          ;
3471762   +      run;
3471764   +   %end;
3471766   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3471767   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3471768   +       data _null_;
3471769   +          length quotedTarget $32;
3471770   +          set &em_user_groupinfo;
3471771   +          file gpdelta;
3471772   +          if _N_ = &emloopnumber then do;
3471773   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3471774   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3471776   +             %do i=1 %to &numgroupvar;
3471777   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3471778   +                 put "if upcase(NAME)= '&gvar' then delete;";
3471779   +             %end;
3471780   +          end;
3471781   +       run;
3471782   +   %end;
3471783   +   %else %do;
3471784   +       data _null_;
3471785   +          set &em_user_groupinfo;
3471786   +          file gpdelta;
3471787   +          if _N_ = &emloopnumber then do;
3471788   +             %do i=1 %to &numgroupvar;
3471789   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3471790   +                 put "if upcase(NAME)= '&gvar' then delete;";
3471791   +             %end;
3471792   +          end;
3471793   +       run;
3471794   +   %end;
3471795   +   filename gpdelta;
3471797   +   %let nobs=0;
3471798   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3471799   +   %if &dsid>0 %then %do;
3471800   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3471801   +       %let dsid = %sysfunc(close(&dsid));
3471802   +   %end;
3471804   +   %if ^&nobs  %then
3471805   +       %let emloopmode =;
3471806   +   %else
3471807   +       %if &nobs< &emloopnumber %then
3471808   +           %let emloopmode = POSTLOOP;
3471809   +        %else
3471810   +        %let emloopmode = LOOP;
3471811   +%mend gp_group;
3471813   +%macro gp_Index;
3471815   +   %em_getName(key=INDEXINFO,  type=DATA);
3471816   +   %em_getName(key=EMLOOPINFO, type=DATA);
3471818   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3471819   +       data &em_user_indexinfo;
3471820   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3471821   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3471822   +          _TARGET_   ="";
3471823   +          _WHERE_    ="";
3471824   +          output;
3471825   +       run;
3471826   +       data &em_data_eminfo;
3471827   +          length TARGET KEY $32  DATA $43;
3471828   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3471829   +       run;
3471831   +       data &em_user_emloopinfo;
3471832   +          length MODE $8;
3471833   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3471834   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471835   +          set &em_user_indexinfo(keep=_LOOP_ );
3471836   +          MODE='Index';
3471837   +       run;
3471838   +   %end;
3471840   +%mend gp_index;
3471842   +%macro gp_Target;
3471843   +   %let TargetName = %scan(%em_target, &emloopnumber);
3471844   +   %if "&targetName" eq "" %then %do;
3471845   +       %goto doendgpt;
3471846   +   %end;
3471848   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3471849   +       %put GP_TARGET;
3471850   +       %put &emLoopnumber &TargetName;
3471851   +   %end;
3471853   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3471854   +   data _null_;
3471855   +      file gpdelta;
3471856   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3471857   +   run;
3471858   +   filename gpdelta;
3471860   +   %if &emloopnumber eq 1 %then %do;
3471861   +       %em_getName(key=TARGETINFO,  type=DATA);
3471862   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3471864   +       data &em_user_targetinfo;
3471865   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3471866   +          retain _LOOP_;
3471867   +          _WHERE_ = '';
3471868   +          %do i=1 %to &em_num_target;
3471869   +              %let varname = %scan(%em_target, &i, ' ');
3471870   +              _TARGET_ = "&varname";
3471871   +              _LOOP_+1;
3471872   +              output;
3471873   +           %end;
3471874   +       run;
3471875   +       data &em_user_emloopinfo;
3471876   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3471877   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3471878   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3471879   +      run;
3471881   +       data &em_data_eminfo;
3471882   +          length TARGET KEY $32  DATA $43;
3471883   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3471884   +       run;
3471885   +   %end;
3471887   +   %doendgpt:
3471888   +%mend gp_target;
3471890   +%macro train;
3471891   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3471892   +       %put LOOP MODE:   &emloopmode ;
3471893   +       %put LOOP NUMBER: &emloopnumber;
3471894   +   %end;
3471896   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3471898   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3471900   +       %let hpdmFlag = 0;
3471901   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3471902   +            data _null_;
3471903   +               set &em_import_DATA_eminfo;
3471904   +               where KEY = "HPDMSAMPLE";
3471905   +               call symput('hpdmFlag', '1');
3471906   +            run;
3471907   +       %end;
3471908   +       %if &hpdmFlag %then %do;
3471909   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3471910   +           %goto doendmain;
3471911   +       %end;
3471912   +   %end;
3471914   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3471915   +   %em_getname(key=GROUPINFO,  type=DATA);
3471916   +   %em_getname(key=BOOSTINFO,  type=DATA);
3471917   +   %em_getname(key=BAGINFO,    type=DATA);
3471918   +   %em_getname(key=TARGETINFO, type=DATA);
3471919   +   %em_getname(key=INDEXINFO,  type=DATA);
3471920   +   %em_getname(key=EMINFO,  type=DATA);
3471922   +   %if "&emloopnumber" = "1" %then %do;
3471923   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3471924   +       filename _pregrp "&em_user_precode";
3471925   +       data _null_;
3471926   +         rc = fdelete('_pregrp');
3471927   +       run;
3471928   +       filename _pregrp;
3471930   +       %let members =;
3471931   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3471932   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3471933   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3471934   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3471935   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3471936   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3471937   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3471939   +       %if "&members" ne "" %then %do;
3471940   +           proc datasets lib=&em_lib nolist;
3471941   +              delete &members;
3471942   +           run;
3471943   +      %end;
3471944   +   %end;
3471946   +   %let emboostvar    =;
3471947   +   %let embagvar      =;
3471948   +   %let emgroupvar    =;
3471949   +   %let emnumgroupvar =;
3471950   +   %getVariables;
3471952   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3471953   +       %if &EM_NUM_TARGET>=1 %then %do;
3471954   +           %gp_target;
3471955   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3471956   +               %let emloopmode= LOOP;
3471957   +           %else
3471958   +              %let emloopmode = POSTLOOP;
3471959   +       %end;
3471960   +       %else %do;
3471961   +           %let emloopmode = ;
3471962   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3471963   +           %goto doendmain;
3471964   +       %end;
3471965   +   %end;
3471966   +   %else
3471967   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3471968   +       %let emloopmode=;
3471969   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3471970   +           proc delete data=&em_data_eminfo;
3471971   +           run;
3471972   +       %end;
3471973   +   %end;
3471974   +   %else
3471975   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3471976   +       %gp_index;
3471977   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3471978   +           %let emloopmode= LOOP;
3471979   +       %else
3471980   +           %let emloopmode= POSTLOOP;
3471981   +   %end;
3471982   +   %else
3471983   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3471984   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3471985   +           %let emloopmode = ;
3471986   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3471987   +           %goto doendmain;
3471988   +       %end;
3471990   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3471991   +   %end;
3471992   +   %else
3471993   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3471994   +       %if "&emboostvar" eq "" %then %do;
3471995   +           %let emloopmode = ;
3471996   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3471997   +           %goto doendmain;
3471998   +       %end;
3472000   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3472001   +           %let emloopmode= LOOP;
3472002   +           %gp_boost(targetname=&emboostvar);
3472004   +       %end;
3472005   +       %else
3472006   +           %let emloopmode= POSTLOOP;
3472007   +   %end;
3472008   +   %else
3472009   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3472010   +       %if "&embagvar" eq "" %then %do;
3472011   +           %let emloopmode = ;
3472012   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3472013   +           %goto doendmain;
3472014   +       %end;
3472016   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3472017   +           %let emloopmode= LOOP;
3472018   +           %gp_bag(targetname=&embagvar);
3472019   +       %end;
3472020   +       %else
3472021   +           %let emloopmode= POSTLOOP;
3472022   +   %end;
3472025   +   %if &emloopmode eq "" %then %do;
3472026   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3472027   +       %let member = %scan(&em_data_eminfo, 2, .);
3472028   +       proc datasets lib=&lib nolist;
3472029   +          delete &member;
3472030   +       run;
3472031   +   %end;
3472033   +   %doendmain:
3472035   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3472036   +       %put NEW LOOP MODE: &emloopmode;
3472037   +   %end;
3472039   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3472040   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3472041   +       %include temp;
3472042   +       filename temp;
3472044   +       %postloop;
3472045   +   %end;
3472047   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;

NOTE: There were 1 observations read from the data set EMWS1.GRP_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;

NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:05:25 o'clock,
      Create Time=02 June 2018 16:26:41 o'clock

NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3472049   +%macro postloop;
3472050   +   %let deleteString =;
3472051   +
3472052   +   %em_getname(key=boostweight, type=DATA);
3472053   +   %em_getname(key=boostscore,  type=DATA);
3472054   +
3472055   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3472056   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3472057   +   %if "&deleteString" ne "" %then %do;
3472058   +       proc datasets lib=&em_lib nolist;
3472059   +          delete &deleteString;
3472060   +       run;
3472061   +   %end;
3472062   +
3472063   +   %em_register(key=EMLOOPINFO,    type=DATA);
3472064   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3472065   +    proc print data=&em_user_emloopinfo noobs label;
3472066   +       title9 'Group Summary';
3472067   +    run;
3472068   +    title9;
3472069   +
3472070   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3472071   +
3472072   +%mend postloop;
3472073   +
3472074   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2305.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.43727852424479;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3472075    *------------------------------------------------------------*;
3472076    * End TRAIN: Grp;
3472077    *------------------------------------------------------------*;
3472078    

3472079    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3472080    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3472081    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3472082    ;
MPRINT(EM_DIAGRAM):   ;
3472083    ;
MPRINT(EM_DIAGRAM):   ;
3472084    ;
MPRINT(EM_DIAGRAM):   ;
3472085    ;
MPRINT(EM_DIAGRAM):   ;
3472086    quit;
MPRINT(EM_DIAGRAM):   quit;
3472087    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3472088    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3472089    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3472090    /*; *"; *'; */
3472091    ;
MPRINT(EM_DIAGRAM):   ;
3472092    run;
MPRINT(EM_DIAGRAM):   run;
3472093    quit;
MPRINT(EM_DIAGRAM):   quit;
3472094    /* Reset EM Options */
3472095    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3472096    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3472097    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3472098    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3472099    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3472100    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
