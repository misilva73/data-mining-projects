*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:42:42 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:34 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:42:34 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O36CFERC "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O36CFERC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMGROUP\EMLOG_5.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:34 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMGROUP\EMOUTPUT_5.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:34 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
1562811    proc freq data=EMWS1.Tree3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree3_VariableSet noprint;
1562812    table ROLE*LEVEL/out=WORK.Tree3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree3META;
1562813    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
1562814    proc print data=WORK.Tree3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree3META label noobs;
1562815    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1562816    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
1562816  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
1562816  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
1562817    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1562818    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1562819    run;
 
NOTE: There were 5 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1052.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1562820    title10;
MPRINT(EM_DIAGRAM):   title10;
1562821    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Grp3_TRAIN EMWS1.Grp3_TRAIN
EMWS1.Grp3_TRAIN EMWS1.Grp3_TRAIN EMWS1 Grp3_TRAIN
EMWS1.Grp3_TRAIN EMWS1.Grp3_TRAIN
EMWS1.Grp3_TRAIN EMWS1.Grp3_TRAIN EMWS1 Grp3_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Grp3_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree3_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS1.Tree3_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree3_DepVar_DD
out=EMWS1.Tree3_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
1562868    data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1562869    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1562870    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
1562870  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
1562870  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1562871       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
1562871  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
1562871  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1562872    set EMWS1.TREE3_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.TREE3_DEPVAR_DM( where=(_TYPE_="TARGET"));
1562873    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1562874    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1562875    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1562876    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1562877    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1562878    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1562879    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1562880    end;
MPRINT(EM_DIAGRAM):   end;
1562881    output;
MPRINT(EM_DIAGRAM):   output;
1562882    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1562883    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1562884    proc print data=WORK.Tree3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree3_EVENT noobs label;
1562885    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1562886    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1562887    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1562888    run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 1053.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1562889    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1562890    proc print data = EMWS1.Tree3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Tree3_DepVar_DM noobs label;
1562891    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1562892    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
1562893    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
1562893  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
1562893  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1562894    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1562895    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1562896    run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1054.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1562897    title10;
MPRINT(EM_DIAGRAM):   title10;
1562898    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=301;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13700500682749;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=1896;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.8629949931725;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree3_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree3_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1563457    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1563458    * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
1563459    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
1563460    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
1563461    %let EMEXCEPTIONSTRING=;
1563462    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1563463    * TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree3;
1563464    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1563465    %let EM_ACTION = TRAIN;
1563466    %let syscc = 0;
1563467    %macro main;
1563468
1563469      %if %upcase(&EM_ACTION) = CREATE %then %do;
1563470        filename temp catalog 'sashelp.emmodl.tree_create.source';
1563471        %include temp;
1563472        filename temp;
1563473
1563474        %em_tree_create;
1563475      %end;
1563476
1563477       %else
1563478       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1563479
1563480           filename temp catalog 'sashelp.emmodl.tree_train.source';
1563481           %include temp;
1563482           filename temp;
1563483           %em_tree_train;
1563484       %end;
1563485
1563486      %else
1563487      %if %upcase(&EM_ACTION) = SCORE %then %do;
1563488        filename temp catalog 'sashelp.emmodl.tree_score.source';
1563489        %include temp;
1563490        filename temp;
1563491
1563492        %em_tree_score;
1563493
1563494      %end;
1563495
1563496      %else
1563497      %if %upcase(&EM_ACTION) = REPORT %then %do;
1563498
1563499           filename temp catalog 'sashelp.emmodl.tree_report.source';
1563500           %include temp;
1563501           filename temp;
1563502
1563503           %em_tree_report;
1563504       %end;
1563505
1563506      %else
1563507      %if %upcase(&EM_ACTION) = OPENINT %then %do;
1563508
1563509           filename temp catalog 'sashelp.emmodl.tree_actions.source';
1563510           %include temp;
1563511           filename temp;
1563512           %EM_TREE_OPENTREEVIEWER;
1563513
1563514       %end;
1563515
1563516      %else
1563517      %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
1563518
1563519           filename temp catalog 'sashelp.emmodl.tree_actions.source';
1563520           %include temp;
1563521           filename temp;
1563522           %EM_TREE_CLOSETREEVIEWER;
1563523
1563524       %end;
1563525
1563526
1563527       %doendm:
1563528    %mend main;
1563529
1563530    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
1563532   +%macro em_tree_train;
1563534   +   %if &EM_IMPORT_DATA eq %then %do;
1563535   +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
1563536   +       %put &em_codebar;
1563537   +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
1563537  !+NOQUOTE));
1563538   +       %put &errormsg;
1563539   +       %put &em_codebar;
1563540   +       %goto doendm;
1563541   +   %end;
1563542   +   %else
1563543   +       %let EMEXCEPTIONSTRING =;
1563545   +   %if  &EM_NUM_TARGET lt 1 %then %do;
1563546   +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
1563547   +        %put &em_codebar;
1563548   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
1563548  !+NOQUOTE));
1563549   +        %put &errormsg;
1563550   +        %put &em_codebar;
1563551   +        %goto doendm;
1563552   +   %end;
1563554   +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
1563554  !+(&EM_NUM_ORDINAL_INPUT < 1)
1563555   +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
1563555  !+(&EM_NUM_BINARY_REJECTED <1)
1563556   +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
1563556  !+%do;
1563557   +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
1563558   +        %put &em_codebar;
1563559   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
1563559  !+;
1563560   +        %put &errormsg;
1563561   +        %put &em_codebar;
1563562   +        %goto doendm;
1563563   +   %end;
1563565   +   /* Initialize property macro variables */
1563566   +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
1563567   +   %include temp;
1563568   +   filename temp;
1563570   +   %EM_SetProperties;
1563572   +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
1563573   +   %EM_GETNAME(key=EMTREE, type=DATA);
1563574   +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
1563575   +     /* if import eq Y and no importtable defined, throw an exception */
1563576   +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
1563577   +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
1563578   +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR ,
1563578  !+NOQUOTE));
1563579   +         %put &em_codebar;
1563580   +         %put &errmsg;
1563581   +         %put &em_codebar;
1563582   +         %goto doendm;
1563583   +      %end;
1563584   +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
1563585   +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
1563586   +         %put &em_codebar;
1563587   +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
1563587  !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
1563588   +         %put &errormsg;
1563589   +         %put &em_codebar;
1563590   +         %goto doendm;
1563591   +      %end;
1563592   +      %else %do;
1563593   +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
1563594   +         %let varnumID = %sysfunc(varnum(&dsid,ID));
1563595   +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
1563596   +         %let varnumX = %sysfunc(varnum(&dsid,X));
1563597   +         %let varnumY = %sysfunc(varnum(&dsid,Y));
1563598   +         %let dsid = %sysfunc(close(&dsid));
1563599   +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
1563600   +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET
1563600  !+;
1563601   +            %put &em_codebar;
1563602   +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
1563602  !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
1563603   +            %put &errormsg;
1563604   +            %put &em_codebar;
1563605   +            %goto doendm;
1563606   +         %end;
1563607   +      %end;
1563608   +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and
1563608  !+(%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then
1563608  !+%do;
1563609   +         proc delete data=&EM_USER_EMTREE;
1563610   +         run;
1563611   +      %end;
1563612   +   %end;
1563613   +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or
1563613  !+%sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
1563614   +      proc delete data=&EM_USER_EMTREE;
1563615   +      run;
1563616   +   %end;
1563618   +   /* load tree macros */
1563619   +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
1563620   +   %include temp;
1563621   +   filename temp;
1563623   +   /* data sets */
1563624   +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
1563625   +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
1563626   +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
1563628   +   /* files */
1563629   +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
1563631   +   /* check actual num of target levels */
1563632   +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
1563633   +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
1563634   +                              nLevel=_nTargetLevel );
1563635   +      %if &_nTargetLevel  > 2 %then %do;
1563636   +        %let EMEXCEPTIONSTRING =
1563636  !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
1563637   +        %put &em_codebar;
1563638   +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
1563638  !+NOQUOTE));
1563639   +        %put &errormsg;
1563640   +        %put &em_codebar;
1563641   +        %goto doendm;
1563642   +      %end;
1563643   +   %end;
1563645   +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
1563646   +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
1563647   +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
1563648   +        %let costflag=0;
1563649   +        data _null_;
1563650   +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
1563650  !+^missing(COST) )) end=eof;
1563651   +          if eof then call symput("costflag", _N_);
1563652   +        run;
1563653   +        %if &costflag gt 0 %then %do;
1563654   +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
1563655   +          %put &em_codebar;
1563656   +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
1563656  !+costnotvalidwithusedecisions_note_err, NOQUOTE));
1563657   +          %put &errormsg;
1563658   +          %put &em_codebar;
1563659   +          %goto doendm;
1563660   +       %end;
1563661   +     %end;
1563662   +   %end;
1563664   +   /* determine if multiple targets will be processed */
1563665   +   %let em_tree_multipleTargets=N;
1563666   +   %let em_tree_numTarget = 1;
1563667   +   %let em_tree_targetVars=;
1563669   +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
1563670   +      /* determine if there are any ordinal target variables - if so, multiple
1563670  !+targets are not supported */
1563671   +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
1563672   +         %let em_tree_multipleTargets=N;
1563673   +      %end;
1563674   +      %else %do;
1563675   +         /* create macro array of targets  */
1563676   +         data _null_;
1563677   +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
1563677  !+end=eof;
1563678   +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
1563679   +           if eof then
1563680   +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
1563681   +        run;
1563683   +        %if &em_tree_numTarget gt 1 %then %do;
1563684   +           %let em_tree_multipleTargets=Y;
1563685   +        %end;
1563686   +      %end;
1563687   +   %end;
1563689   +   /* create view of only necessary variable for performance reasons */
1563690   +   %let tempData = &EM_LIB..em_&EM_NODEID;
1563691   +   data &tempData / view=&tempData;
1563692   +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
1563693   +     %if "&em_tree_multipleTargets" eq "N" %then %do;
1563694   +       %EM_TARGET
1563695   +     %end;
1563696   +     %else %do;
1563697   +       %if &em_tree_numTarget ne 0 %then %do;
1563698   +         %do i=1 %to &em_tree_numTarget;
1563699   +            &&em_tree_targetVars&i
1563700   +         %end;
1563701   +       %end;
1563702   +     %end;
1563703   +     );
1563704   +   run;
1563706   +   /* run Tree procedure */
1563707   +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
1563707  !+;
1563709   +   /* Check return code and throw exception if error is detected */
1563710   +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
1563711   +   %if &syserr %then %do;
1563712   +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
1563713   +     %goto doendm;
1563714   +   %end;
1563716   +   /* add decision score code if multiple targets are processed */
1563717   +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
1563718   +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
1563718  !+;
1563719   +   %end;
1563721   +   /* create outfit dataset if multiple score statements have been executed */
1563722   +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
1563724   +   /* create English Rules */
1563725   +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
1563726   +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
1563727   +       %em_tree_makeEnglishRules;
1563729   +       /* English Rules */
1563730   +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
1563730  !+description=ENGLISHRULES, autodisplay=N);
1563732   +     %end;
1563733   +   filename x;
1563735   +   %doendm:
1563736   +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
1563737   +%macro EM_SetProperties;
1563739   +   /* train properties */
1563740   +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
1563741   +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
1563742   +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
1563743   +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
1563744   +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
1563744  !+global=Y);
1563745   +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
1563746   +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
1563747   +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
1563748   +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
1563749   +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
1563750   +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
1563751   +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
1563752   +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
1563753   +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
1563754   +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
1563755   +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
1563756   +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
1563756  !+global=Y);
1563757   +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
1563758   +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
1563758  !+global=Y);
1563759   +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
1563760   +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
1563760  !+global=Y);
1563761   +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
1563762   +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
1563763   +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
1563764   +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
1563765   +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
1563766   +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
1563767   +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
1563768   +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
1563769   +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
1563770   +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
1563771   +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
1563772   +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
1563773   +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
1563774   +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
1563775   +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
1563776   +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
1563777   +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
1563778   +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
1563779   +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
1563780   +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
1563782   +   /* properties for interactive sample */
1563783   +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
1563784   +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
1563785   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
1563786   +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
1563788   +   /* report properties */
1563789   +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
1563790   +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
1563791   +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
1563791  !+global=Y);
1563792   +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
1563793   +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
1563794   +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
1563795   +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
1563796   +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
1563797   +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
1563798   +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
1563799   +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
1563800   +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
1563801   +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
1563803   +   /* score properties */
1563804   +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
1563805   +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
1563807   +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree3_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: Deleting EMWS1.TREE3_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
1563809   +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
1563810   +  %global &nLevel;
1563811   +  proc dmdb batch data=&indata
1563812   +    classout=_tmp_dmdbout;
1563813   +    class &target;
1563814   +  run;
1563815   +  data _tmp_dmdbout;
1563816   +    set _tmp_dmdbout;
1563817   +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
1563818   +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
1563819   +  run;
1563820   +  data _null_;
1563821   +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
1563822   +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
1563823   +    %let dsid = %sysfunc(close(&dsid));
1563824   +     call symput("&nLevel", put(&_obs, Best12.));
1563825   +  run;
1563827   +  proc datasets lib=work nolist;
1563828   +     delete _tmp_dmdbout;
1563829   +  run;
1563830   +  quit;
1563831   +%Mend EM_CheckBinaryTargetLevel;
1563834   +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
1563836   +  /* determine the number of obs in training data */
1563837   +  proc sql;
1563838   +    reset noprint;
1563839   +    select count(*) into :em_nobs from &indata;
1563840   +  quit;
1563842   +  /* determine the number of input variables */
1563843   +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
1563843  !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
1563844   +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
1563844  !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
1563846   +  /* retrieve targetEvent from decmeta */
1563847   +  %let targetEvent=;
1563848   +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
1563849   +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
1563850   +      data _null_;
1563851   +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
1563852   +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
1563853   +      run;
1563854   +    %end;
1563855   +  %end;
1563857   +  /* create targetTable if multipleTar eq Y */
1563858   +  data temptarget;
1563859   +    set &EM_DATA_VARIABLESET;
1563860   +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
1563861   +  run;
1563863   + /* data sets */
1563864   + %EM_GETNAME(key=OUTSTATS,      type=DATA);
1563865   + %EM_GETNAME(key=EMTREE,        type=DATA);
1563866   + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
1563867   + %EM_GETNAME(key=OUTSEQ,        type=DATA);
1563868   + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
1563869   + %EM_GETNAME(key=OUTNODES,      type=DATA);
1563870   + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
1563871   + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
1563872   + %EM_GETNAME(key=OUTPATH,       type=DATA);
1563873   + %EM_GETNAME(key=OUTRULES,      type=DATA);
1563875   + /* files */
1563876   + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
1563877   + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
1563879   + /* turn on pmml if requested */
1563880   + %let nnpmml=0;
1563881   + %if %symexist(EM_PMML) %then %do;
1563882   +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
1563883   +       %let nnpmml=1;
1563885   +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
1563886   +   %end;
1563887   +%end;
1563889   +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
1563889  !+&EM_NUM_ORDINAL_TARGET);
1563891   +%if &nnpmml or &numClassTarget %then %do;
1563893   +    /* create dmdb needed for pmml generation */
1563894   +    %let tree_maxlevel = 512;
1563895   +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
1563896   +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
1563897   +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
1563898   +      %end;
1563899   +    %end;
1563900   +    %if &tree_maxlevel gt 0 %then %do;
1563901   +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
1563902   +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
1563903   +    %end;
1563905   +    %let targetOrderString =;
1563906   +    %let targetString = ;
1563907   +    data _null_;
1563908   +       length orderString nameString $10000;
1563909   +       retain orderString nameString;
1563910   +       set &em_data_variableset end=eof;
1563911   +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then
1563911  !+ %do;
1563912   +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
1563913   +       %end;
1563914   +       %else %do;
1563915   +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE
1563915  !+='Y';
1563916   +       %end;          select(order);
1563917   +         when('')        order ='DESC';
1563918   +         when('FMTASC')  order='ASCFMT';
1563919   +         when('FMTDESC') order='DESFMT';
1563920   +         otherwise;
1563921   +       end;
1563922   +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
1563923   +       nameString = trim(nameString)!!' '!!trim(NAME);
1563925   +       if eof then do;
1563926   +          call symput('targetOrderString', trim(orderString));
1563927   +          call symput('targetString', trim(nameString));
1563928   +       end;
1563929   +    run;
1563931   +    %let arborkluge= "work._treeDMDB";
1563933   +    proc dmdb batch data=&indata
1563934   +    %if &nnpmml %then %do;
1563935   +        PMML
1563936   +    %end;
1563937   +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
1563939   +      %if &nnpmml %then %do;
1563940   +           %if "%EM_ID" ne "" %then %do;
1563941   +             id %EM_ID;
1563942   +           %end;
1563943   +           %if &EM_NUM_CLASS gt 0 %then %do;
1563944   +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
1563945   +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
1563946   +                  &targetOrderString;
1563947   +           %end;
1563948   +           %if &EM_NUM_INTERVAL gt 0 %then %do;
1563949   +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
1563950   +           %end;
1563951   +           target &targetString %EM_INTERVAL_TARGET;
1563952   +           %if "%EM_FREQ" ne "" %then %do;
1563953   +             freq %EM_FREQ;
1563954   +           %end;
1563955   +      %end;
1563956   +      %else %do;
1563957   +         class  &targetOrderString;
1563958   +         target &targetString %EM_INTERVAL_TARGET;
1563959   +      %end;
1563960   +    run;
1563961   +    quit;
1563963   +    proc datasets lib=work nolist;
1563964   +       delete classout varout;
1563965   +    run;
1563966   +    quit;
1563968   + %end;
1563971   + /* run Arbor procedure */
1563972   + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
1563973   +  proc arbor data=&INDATA
1563975   +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
1563976   +    Leafsize = &EM_PROPERTY_LEAFSIZE
1563977   +  %end;
1563979   +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
1563979  !+%then %do;
1563980   +    Splitsize = &EM_PROPERTY_SPLITSIZE
1563981   +  %end;
1563983   +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
1563984   +    MinCatSize = &EM_PROPERTY_MINCATSIZE
1563985   +  %end;
1563987   +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
1563988   +    MaxBranch = &EM_PROPERTY_MAXBRANCH
1563989   +  %end;
1563991   +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
1563992   +    MaxDepth = &EM_PROPERTY_MAXDEPTH
1563993   +  %end;
1563995   +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
1563995  !+%do;
1563996   +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
1563997   +  %end;
1563998   +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
1563999   +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
1564000   +  %end;
1564001   +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
1564002   +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
1564003   +  %end;
1564005   +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
1564006   +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
1564007   +      alpha = &EM_PROPERTY_SIGLEVEL
1564008   +    %end;
1564009   +  %end;
1564011   +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
1564011  !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
1564012   +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
1564012  !+ eq "DEFAULT")) %then %do;
1564013   +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
1564014   +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
1564015   +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
1564017   +        padjust =
1564018   +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
1564019   +          &chaid
1564020   +        %end;
1564021   +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
1564022   +          DEPTH
1564023   +        %end;
1564024   +      %end;
1564025   +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
1564026   +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
1564027   +         pvars = &num_inputs
1564028   +      %end;
1564029   +    %end;
1564030   +  %end;
1564031   +  %else %do;
1564032   +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR
1564032  !+("&Criterion" eq "DEFAULT")) %then %do;
1564033   +         padjust = NONE
1564034   +      %end;
1564035   +  %end;
1564037   +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
1564038   +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
1564039   +    Maxrules = &num_nrules
1564040   +  %end;
1564042   +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
1564043   +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
1564044   +    Maxsurrs = &num_nsurrs
1564045   +  %end;
1564047   +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
1564048   +     Missing=&EM_PROPERTY_MISSINGVALUE
1564049   +  %end;
1564051   +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
1564052   +     USEVARONCE
1564053   +  %end;
1564055   +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
1564056   +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
1564057   +  %end;
1564060   +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
1564061   +    event = "&targetEvent"
1564062   +  %end;
1564064   +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
1564065   +     DECSEARCH
1564066   +  %end;
1564068   +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
1564069   +     PRIORSSEARCH
1564070   +  %end;
1564072   +  %if &arbor_1 ne %then %do;
1564073   +    &arbor_1
1564074   +  %end;
1564076   +  %if &em_arbor ne %then %do;
1564077   +     &em_arbor
1564078   +  %end;
1564079   +  ;
1564080   + %end;
1564081   + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
1564082   +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
1564083   +       Performance &EM_PROPERTY_PERFORMANCE
1564084   +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
1564085   +         nodesize=&EM_PROPERTY_NODESAMPLE
1564086   +       %end;
1564087   +       ;
1564088   +       interact;
1564089   + %end;
1564090   + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
1564091   +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
1564092   +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
1564093   +    %put &em_codebar;
1564094   +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
1564094  !+NOQUOTE));
1564095   +    %put &errormsg;
1564096   +    %put &em_codebar;
1564097   +    %goto doendm;
1564098   +   %end;
1564099   +   %else %do;
1564100   +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
1564101   +       Performance &EM_PROPERTY_PERFORMANCE
1564102   +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
1564103   +         nodesize=&EM_PROPERTY_NODESAMPLE
1564104   +       %end;
1564105   +       ;
1564106   +       interact;
1564107   +   %end;
1564108   + %end;
1564110   + %else %do;
1564111   +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
1564112   +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
1564113   +    %put &em_codebar;
1564114   +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
1564114  !+NOQUOTE));
1564115   +    %put &errormsg;
1564116   +    %put &em_codebar;
1564117   +    %goto doendm;
1564118   +   %end;
1564119   +   %else %do;
1564120   +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
1564121   +       Performance &EM_PROPERTY_PERFORMANCE
1564122   +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
1564123   +         nodesize=&EM_PROPERTY_NODESAMPLE
1564124   +       %end;
1564125   +       ;
1564126   +        interact;
1564127   +   %end;
1564128   + %end;
1564130   + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
1564131   +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
1564132   +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
1564133   +    %end;
1564135   +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
1564136   +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
1564137   +    %end;
1564139   +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
1564140   +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
1564141   +    %end;
1564143   +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
1564144   +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
1564145   +    %end;
1564147   +    %if "%EM_FREQ" ne "" %then %do;
1564148   +       freq %EM_FREQ;
1564149   +    %end;
1564151   +    %if "&multipleTar" eq "Y" %then %do;
1564152   +       /* cycle through all target vars in variableset */
1564153   +       %let tdsid = %sysfunc(open(temptarget));
1564154   +       %if &tdsid %then %do;
1564155   +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
1564156   +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
1564157   +          %do %while(^ %sysfunc(fetch(&tdsid)));
1564158   +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
1564159   +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
1564160   +             target &var / level = &lvl
1564161   +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
1564162   +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
1564163   +             %end;
1564164   +             %else %if "&lvl" eq "INTERVAL" %then %do;
1564165   +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
1564166   +             %end;
1564167   +             %else %if "&lvl" eq "ORDINAL" %then %do;
1564168   +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
1564169   +             %end;
1564170   +          %end;
1564171   +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
1564172   +       %end;
1564173   +       useTarget variable = %EM_TARGET;
1564174   +    %end;
1564175   +    %else %do;
1564176   +      target %EM_TARGET / level = %EM_TARGET_LEVEL
1564177   +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
1564177  !+%then %do;
1564178   +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
1564179   +      %end;
1564180   +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
1564181   +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
1564182   +      %end;
1564183   +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
1564184   +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
1564185   +      %end;
1564186   +    %end;
1564188   +    %if "&multipleTar" eq "N" %then %do;
1564189   +      &EM_DEC_STATEMENT;
1564190   +    %end;
1564192   +    Performance &EM_PROPERTY_PERFORMANCE
1564193   +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
1564194   +      nodesize=&EM_PROPERTY_NODESAMPLE
1564195   +    %end;
1564196   +    ;
1564198   +    %if "&intFlag" eq "Y" %then %do;
1564199   +       INTERACT Largest;
1564200   +       Train maxnewdepth=0;
1564201   +    %end;
1564203   +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
1564204   +         Assess
1564205   +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
1564205  !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
1564205  !+)) %then %do;
1564206   +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
1564207   +              %put &em_codebar;
1564208   +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
1564208  !+novalidationwithcv_note, NOQUOTE));
1564209   +              %put &errormsg;
1564210   +              %put &em_codebar;
1564211   +            %end;
1564212   +            %else %do;
1564213   +               Validata=&EM_IMPORT_VALIDATE
1564214   +            %end;
1564215   +         %end;
1564216   +         %else %do;
1564217   +           NoValidata
1564218   +         %end;
1564219   +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
1564220   +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
1564221   +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
1564222   +               %if &dsid %then %do;
1564223   +                 %let usenum = %sysfunc(varnum(&dsid, USE));
1564224   +                 %do %while(^ %sysfunc(fetch(&dsid)));
1564225   +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
1564226   +                   %if "&use" eq "Y" %then %let measure=PROFIT;
1564227   +                   %else %do;
1564228   +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
1564229   +                      %else %let measure= MISC;
1564230   +                   %end;
1564231   +                 %end;
1564232   +               %end;
1564233   +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
1564234   +            %end;
1564235   +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
1564236   +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
1564237   +                 %let measure=ASE;
1564238   +              %end;
1564239   +              %else %do;
1564240   +                 %let measure=MISC;
1564241   +              %end;
1564242   +            %end;
1564243   +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
1564244   +              %let measure=ASE;
1564245   +            %end;
1564246   +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
1564247   +               %let measure = LIFT;
1564248   +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
1564249   +               %if &dsid %then %do;
1564250   +                 %let usenum = %sysfunc(varnum(&dsid, USE));
1564251   +                 %do %while(^ %sysfunc(fetch(&dsid)));
1564252   +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
1564253   +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
1564254   +                 %end;
1564255   +               %end;
1564256   +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
1564257   +            %end;
1564258   +            measure=&measure
1564259   +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
1564259  !+%then %do;
1564260   +               event = "&targetEvent"
1564261   +            %end;
1564262   +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
1564263   +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
1564264   +            %end;
1564265   +         %end;
1564266   +         %if "&multipleTar" eq "N" %then %do;
1564267   +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
1564268   +               CV
1564269   +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
1564270   +                 CVNITer = &EM_PROPERTY_CVNITER
1564271   +               %end;
1564272   +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
1564273   +                 CVRepeat = &EM_PROPERTY_CVREPEAT
1564274   +               %end;
1564275   +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
1564276   +                 CVSeed = &EM_PROPERTY_CVSEED
1564277   +               %end;
1564278   +            %end;
1564279   +         %end;
1564280   +       %end;
1564281   +      ;
1564283   +      %if "&intFlag" ne "Y" %then %do;
1564284   +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
1564285   +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
1564286   +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
1564287   +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
1564289   +          SUBTREE &subtree
1564290   +          %if "&subtree" eq "NLEAVES" %then %do;
1564291   +            =&EM_PROPERTY_NSUBTREE
1564292   +          %end;
1564293   +          ;
1564294   +        %end;
1564296   +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
1564296  !+ %do;
1564297   +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
1564298   +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
1564298  !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
1564299   +          %end;
1564300   +       %end;
1564301   +      %end;
1564302   + %end;
1564305   + MakeMacro nleaves = nleaves;
1564306   + save
1564307   + %if "&EM_USER_EMTREE" ne "" %then %do;
1564308   +   MODEL=&EM_USER_EMTREE
1564309   + %end;
1564310   + %if "&EM_USER_OUTSEQ" ne "" %then %do;
1564311   +   SEQUENCE=&EM_USER_OUTSEQ
1564312   + %end;
1564313   + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
1564314   +   IMPORTANCE=&EM_USER_OUTIMPORT
1564315   + %end;
1564316   + %if "&EM_USER_OUTNODES" ne "" %then %do;
1564317   +   NODESTAT=&EM_USER_OUTNODES
1564318   + %end;
1564319   + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
1564320   +   SUMMARY=&EM_USER_OUTSUMMARY
1564321   + %end;
1564322   + %if "&EM_USER_OUTSTATS" ne "" %then %do;
1564323   +   STATSBYNODE=&EM_USER_OUTSTATS
1564324   + %end;
1564325   + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
1564326   +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
1564327   + %end;
1564328   + %if "&EM_USER_OUTPATH" ne "" %then %do;
1564329   +   Pathlistnonmissing=&EM_USER_OUTPATH
1564330   + %end;
1564331   + %if "&EM_USER_OUTRULES" ne "" %then %do;
1564332   +   RULES = &EM_USER_OUTRULES
1564333   + %end;
1564334   + ;
1564336   + %if "&intFlag" ne "Y" %then %do;
1564338   +   %let lookupString = ;
1564339   +   %if ^%symexist(EM_OPTION) %then
1564340   +      %let EM_OPTION=;
1564342   +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
1564342  !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
1564343   +      %let lookupString = LOOKUP=SELECT;
1564344   +   %end;
1564346   +   %let codetext=;
1564347   +   %let norescodetxt=;
1564349   +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
1564350   +     %let codetext=&codetext DUMMY;
1564351   +     %let norescodetxt=&norescodetxt DUMMY;
1564352   +   %end;
1564353   +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
1564354   +     %let codetext=&codetext NOLEAFID;
1564355   +     %let norescodetxt=&norescodetxt NOLEAFID;
1564356   +   %end;
1564357   +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
1564358   +     %let norescodetxt=&norescodetxt NOPRED;
1564359   +   %end;
1564361   +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
1564362   +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
1564362  !+&lookupString;
1564364   +   %if &nnpmml %then %do;
1564365   +     code pmml;
1564366   +   %end;
1564368   +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
1564369   +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
1564370   +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
1564371   +   %end;
1564372   +   %if "&EM_IMPORT_TEST" ne "" %then %do;
1564373   +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
1564374   +   %end;
1564375   + %end;
1564377   + run;
1564378   + quit;
1564380   + /*%em_checkerror(); */
1564381   +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
1564382   +   /* Delete DMDB catalog */
1564383   +   proc datasets lib=work nolist;
1564384   +       delete _treeDMDB / mt=cat;
1564385   +  run;
1564386   +  %end;
1564388   + %if &nnpmml %then %do;
1564389   +    ods pmml close;
1564390   + %end;
1564392   +  %doendm:
1564394   +%mend em_tree_runTreeProcedure;
1564396   +%macro em_tree_createFitStats( multipleTar= );
1564399   +  /* create targetTable is multipleTar eq Y */
1564400   +  data temptarget;
1564401   +    set &EM_DATA_VARIABLESET;
1564402   +    where ROLE="TARGET";
1564403   +  run;
1564405   +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
1564406   +   data &EM_USER_EMOUTFIT;
1564407   +     length target $32;
1564408   +     merge work.fit_train
1564409   +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
1564410   +       work.fit_valid
1564411   +     %end;
1564412   +     %if "&EM_IMPORT_TEST" ne "" %then %do;
1564413   +       work.fit_test
1564414   +     %end;
1564415   +     ;
1564416   +     %if "&multipleTar" eq "N" %then %do;
1564417   +       target="%EM_TARGET";
1564418   +     %end;
1564419   +     %else %do;
1564420   +       target = _TARGET_;
1564421   +     %end;
1564422   +     drop _NW_ _SUMW_
1564423   +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
1564424   +        _VSUMW_
1564425   +     %end;
1564426   +     ;
1564427   +   run;
1564429   +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
1564430   +     proc datasets library=work nolist;
1564431   +       delete fit_valid;
1564432   +     run;
1564433   +   %end;
1564434   +   %if "&EM_IMPORT_TEST" ne "" %then %do;
1564435   +     proc datasets library=work nolist;
1564436   +       delete fit_test;
1564437   +     run;
1564438   +   %end;
1564440   +%mend em_tree_createFitStats;
1564443   +%macro em_tree_makeEnglishRules;
1564445   +  %EM_GETNAME(key=OUTNODES, type=DATA);
1564446   +  %EM_GETNAME(key=OUTPATH, type=DATA);
1564448   +  /* verify that necessary tables exist and if not, skip processing */
1564449   +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
1564450   +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
1564451   +    %goto doendm;
1564452   +  %end;
1564453   +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
1564454   +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
1564455   +    %goto doendm;
1564456   +  %end;
1564458   +  /* determine length of variable in outpath dataset */
1564459   +  %let vlength= ;
1564460   +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
1564461   +  %if &dsid ne %then %do;
1564462   +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
1564463   +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
1564464   +  %end;
1564465   +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
1564467   +  data tempoutpath;
1564468   +    length varname $&vlength;
1564469   +    retain varname;
1564470   +    set &EM_USER_OUTPATH;
1564472   +    if ^missing(variable) then varname=variable;
1564473   +    else if ^missing(var_name) then varname=var_name;
1564474   +    output;
1564475   +  run;
1564477   +  /* create an array of generated predicted variable names */
1564478   +  %let tree_pred_vars = ;
1564479   +  %let tree_pred_label = ;
1564480   +  %let numpred= 0;
1564481   +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
1564483   +    data _null_;
1564484   +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
1564485   +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
1564486   +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
1564486  !+strip(tranwrd(LABEL,'"','""')));
1564487   +     if eof then
1564488   +       call symput('numpred', strip(put(_N_, BEST.)));
1564489   +    run;
1564490   +  %end;
1564492   +  /* determine if NPRIORS exists in outnodes  */
1564493   +  %local nprior_flag;
1564494   +  data _null_;
1564495   +    set &EM_USER_OUTNODES(obs=2) end=eof;
1564496   +    if eof then do;
1564497   +      call symput('nprior_flag', strip(put(npriors, best.)));
1564498   +    end;
1564499   +  run;
1564501   +  proc sort data=tempoutpath; by node; run;
1564502   +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
1564504   +  data tempoutpath;
1564505   +    merge tempoutpath(in=_a) outnodes(keep= node
1564506   +    %if "&nprior_flag" ne "." %then %do;
1564507   +      NPRIORS
1564508   +    %end;
1564509   +    %else %do;
1564510   +      N
1564511   +    %end;
1564512   +    %if &numpred gt 0 %then %do;
1564513   +      %do i=1 %to &numpred;
1564514   +        &&tree_pred_vars&i
1564515   +      %end;
1564516   +    %end;
1564517   +    );
1564518   +    by node;
1564519   +    if _a;
1564520   +  run;
1564522   +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
1564522  !+run;
1564524   +  data _null_;
1564525   +    file x;
1564526   +    set tempoutpath;
1564527   +    by node descending varname;
1564528   +    retain origvar oldnode string;
1564529   +    length origvar $32 oldnode 8 string $200;
1564531   +    if _N_ = 1 then do;
1564532   +      origvar = varname;
1564533   +      oldnode = node;
1564534   +    end;
1564536   +    if first.node then do;
1564537   +       put "&EM_CODEBAR";
1564538   +       put " Node = " node;
1564539   +       put "&EM_CODEBAR";
1564540   +    end;
1564542   +      if first.varname then do;
1564543   +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
1564544   +            if MISSING(CHARACTER_VALUE) then do;
1564545   +             if NUMERIC_VALUE ne .  then do;
1564546   +              if ^first.node then do;
1564547   +                string= "AND "|| strip(varname)||" "||strip(relation)||"
1564547  !+"||strip(numeric_value);
1564548   +              end;
1564549   +              else do;
1564550   +                string= "if "|| strip(varname)||" "||strip(relation)||"
1564550  !+"||strip(numeric_value);
1564551   +              end;
1564552   +             end;
1564553   +            end;
1564554   +            else do;
1564555   +              if ^first.node then do;
1564556   +                string= "AND "|| strip(varname)||" "||strip(relation)||"
1564556  !+"||strip(character_value);
1564557   +              end;
1564558   +              else do;
1564559   +                string= "if "|| strip(varname)||" "||strip(relation)||"
1564559  !+"||strip(character_value);
1564560   +              end;
1564561   +             end;
1564562   +         end;
1564563   +         else if RELATION in ("=") then do;
1564564   +            if ^first.node then do;
1564565   +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
1564566   +            end;
1564567   +            else do;
1564568   +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
1564569   +            end;
1564570   +         end;
1564571   +         else if RELATION in ("ISMISSING") then do;
1564572   +            if ^first.node then do;
1564573   +              string = " AND "|| strip(varname) || " equals Missing";
1564574   +            end;
1564575   +            else do;
1564576   +              string = "if "|| strip(varname) ||" equals Missing";
1564577   +            end;
1564578   +         end;
1564579   +         else if RELATION in ("ISNOTMISSING") then do;
1564580   +            if ^first.node then do;
1564581   +              string = " AND "|| strip(varname) || " equals All Values";
1564582   +            end;
1564583   +            else do;
1564584   +              string = "if "|| strip(varname) ||" equals All Values";
1564585   +            end;
1564586   +         end;
1564587   +         if ^missing(varname) then origvar = varname;
1564588   +         oldnode=node;
1564590   +      end;
1564591   +      else do;
1564592   +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
1564593   +          if MISSING(CHARACTER_VALUE) then do;
1564594   +           if  NUMERIC_VALUE ne .  then do;
1564595   +            if ^MISSING(string) then
1564596   +              string= strip(string)||" AND "|| strip(varname)||"
1564596  !+"||strip(relation)||" "||strip(numeric_value);
1564597   +            else
1564598   +              string= " if "|| strip(varname)||" "||strip(relation)||"
1564598  !+"||strip(numeric_value);
1564599   +           end;
1564600   +          end;
1564601   +          else do;
1564602   +            if ^MISSING(string) then
1564603   +              string= strip(string)||" AND "|| strip(varname)||"
1564603  !+"||strip(relation)||" "||strip(character_value);
1564604   +            else
1564605   +              string= " if "|| strip(varname)||" "||strip(relation)||"
1564605  !+"||strip(character_value);
1564606   +          end;
1564608   +         end;
1564609   +         else if RELATION in ("=") then do;
1564610   +           string = strip(string)||", "||strip(character_value);
1564611   +         end;
1564612   +         else if RELATION in ("ISMISSING") then do;
1564614   +         end;
1564615   +         if ^missing(varname) then origvar = varname;
1564616   +         oldnode=node;
1564617   +      end;
1564618   +      if last.varname then do;
1564619   +         if RELATION in ("ISMISSING") then do;
1564620   +           if ^first.varname then do;
1564621   +             string = strip(string) || " or MISSING";
1564622   +           end;
1564623   +         end;
1564624   +         put string;
1564625   +         if ^missing(varname) then origvar = varname;
1564626   +         oldnode=node;
1564627   +      end;
1564629   +      if last.node then do;
1564630   +         put "then ";
1564631   +         put " Tree Node Identifier   = " node;
1564633   +         %if "&nprior_flag" ne "." %then %do;
1564634   +           put " Number of Observations = " NPRIORS;
1564635   +         %end;
1564636   +         %else %do;
1564637   +           put " Number of Observations = " N;
1564638   +         %end;
1564640   +         %if &numpred gt 0 %then %do;
1564641   +           %do i=1 %to &numpred;
1564642   +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
1564643   +           %end;
1564644   +         %end;
1564646   +         put " ";
1564647   +         if ^missing(varname) then origvar = varname;
1564648   +         oldnode=node;
1564649   +      end;
1564651   +  run;
1564653   +  proc datasets lib=work nolist;
1564654   +    delete tempoutpath outnodes;
1564655   +  run;
1564657   +  %doendm:
1564658   +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1
property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.Grp3_TRAIN
classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class DepVar;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 2197   Memory used = 511K.
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree3 / view=EMWS1.em_Tree3;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Grp3_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Marital_Status MntCard_Games MntMagazines NumCatalogPurchases
NumDealsPurchases NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase
RANGE_campaign_acceptance DepVar DepVar );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree3;
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree3_DepVar_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree3_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree3_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL",
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!'
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree3 dmdbcat=_treeDMDB
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class DepVar(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target DepVar
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 2197   Memory used = 511K.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
NOTE: There were 2197 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree3 Leafsize = 5 MinCatSize = 5
MaxBranch = 5 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5
Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   MntCard_Games MntMagazines NumCatalogPurchases NumDealsPurchases
NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Marital_Status
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   DepVar
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess NoValidata
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1452434 kilobytes of physical memory.
NOTE: Will use 2197 out of 2197 training cases.
NOTE: Using memory pool with 97799168 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 626000 bytes of work memory.
NOTE: The subtree sequence contains 42 subtrees. The largest has 76 nodes and 45 leaves.
NOTE: Using subtree with 57 nodes and 34 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 57 nodes and 34 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 34.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree3_EMTREE SEQUENCE=EMWS1.Tree3_OUTSEQ
IMPORTANCE=EMWS1.Tree3_OUTIMPORT NODESTAT=EMWS1.Tree3_OUTNODES SUMMARY=EMWS1.Tree3_OUTSUMMARY
STATSBYNODE=EMWS1.Tree3_OUTSTATS TOPOLOGY=EMWS1.Tree3_OUTTOPOLOGY
Pathlistnonmissing=EMWS1.Tree3_OUTPATH RULES = EMWS1.Tree3_OUTRULES ;
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 10 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 1934 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 57 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 294 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 479 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 42 observations and 11 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 228 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 12 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 57 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEFLOW.sas" res group=Tree3_5 ;
NOTE: External file C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas" nores group=Tree3_5 ;
NOTE: External file C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree3 out=_NULL_ outfit=work.fit_train
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.44 seconds
      cpu time            0.34 seconds
 
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
NOTE: There were 2197 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.46 seconds
      cpu time            0.34 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree3_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "DepVar";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt" encoding='utf-8'
NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $31;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree3_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 294 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 294 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree3_DepVar_DM(where=(_TYPE_="PREDICTED"))
end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)),
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree3_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 294 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 294 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree3_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 57 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 57 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS
P_DepVar1 P_DepVar0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 294 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 57 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 294 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 294 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 294 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: DepVar=1 = " P_DepVar1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: DepVar=0 = " P_DepVar0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=02 June 2018 16:42:37 o'clock,
      Create Time=02 June 2018 16:27:59 o'clock
 
NOTE: 429 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 88.
NOTE: There were 294 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.07440603760741;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1564660
1564661    *------------------------------------------------------------*;
1564662    * End TRAIN: Tree3;
1564663    *------------------------------------------------------------*;
 
1564664    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1564665    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1564666    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1564667    ;
MPRINT(EM_DIAGRAM):   ;
1564668    ;
MPRINT(EM_DIAGRAM):   ;
1564669    ;
MPRINT(EM_DIAGRAM):   ;
1564670    ;
MPRINT(EM_DIAGRAM):   ;
1564671    quit;
MPRINT(EM_DIAGRAM):   quit;
1564672    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1564673    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1564674    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1564675    /*; *"; *'; */
1564676    ;
MPRINT(EM_DIAGRAM):   ;
1564677    run;
MPRINT(EM_DIAGRAM):   run;
1564678    quit;
MPRINT(EM_DIAGRAM):   quit;
1564679    /* Reset EM Options */
1564680    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1564681    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1564682    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
1564683    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
1564684    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
1564685    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:38 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:42:38 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3HAU6P8 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3HAU6P8 new;
MPRINT(EM_DIAGRAM):   run;
1564787    %let EMEXCEPTIONSTRING=;
1564788    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1564789    * SCORE: Tree3;
MPRINT(EM_DIAGRAM):   * SCORE: Tree3;
1564790    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1564791    %let EM_ACTION = SCORE;
1564792    %let syscc = 0;
1564793    %macro main;
1564794
1564795      %if %upcase(&EM_ACTION) = CREATE %then %do;
1564796        filename temp catalog 'sashelp.emmodl.tree_create.source';
1564797        %include temp;
1564798        filename temp;
1564799
1564800        %em_tree_create;
1564801      %end;
1564802
1564803       %else
1564804       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1564805
1564806           filename temp catalog 'sashelp.emmodl.tree_train.source';
1564807           %include temp;
1564808           filename temp;
1564809           %em_tree_train;
1564810       %end;
1564811
1564812      %else
1564813      %if %upcase(&EM_ACTION) = SCORE %then %do;
1564814        filename temp catalog 'sashelp.emmodl.tree_score.source';
1564815        %include temp;
1564816        filename temp;
1564817
1564818        %em_tree_score;
1564819
1564820      %end;
1564821
1564822      %else
1564823      %if %upcase(&EM_ACTION) = REPORT %then %do;
1564824
1564825           filename temp catalog 'sashelp.emmodl.tree_report.source';
1564826           %include temp;
1564827           filename temp;
1564828
1564829           %em_tree_report;
1564830       %end;
1564831
1564832      %else
1564833      %if %upcase(&EM_ACTION) = OPENINT %then %do;
1564834
1564835           filename temp catalog 'sashelp.emmodl.tree_actions.source';
1564836           %include temp;
1564837           filename temp;
1564838           %EM_TREE_OPENTREEVIEWER;
1564839
1564840       %end;
1564841
1564842      %else
1564843      %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
1564844
1564845           filename temp catalog 'sashelp.emmodl.tree_actions.source';
1564846           %include temp;
1564847           filename temp;
1564848           %EM_TREE_CLOSETREEVIEWER;
1564849
1564850       %end;
1564851
1564852
1564853       %doendm:
1564854    %mend main;
1564855
1564856    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
1564858   +%macro em_tree_score;
1564860   +   /* determine if multiple targets will be processed */
1564861   +   %let em_tree_multipleTargets=N;
1564862   +   %let em_tree_numTarget=1;
1564863   +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
1564864   +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
1564865   +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
1564866   +         %let em_tree_multipleTargets=N;
1564867   +      %end;
1564868   +      %else %do;
1564869   +         /* create macro array of targets  */
1564870   +         data _null_;
1564871   +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
1564872   +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
1564873   +           if eof then
1564874   +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
1564875   +        run;
1564877   +        %if &em_tree_numTarget gt 1 %then %do;
1564878   +           %let em_tree_multipleTargets=Y;
1564879   +        %end;
1564880   +      %end;
1564881   +   %end;
1564883   +   /* build flow and publish scoring code */
1564884   +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
1564885   +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
1564887   +   filename treeflow "&EM_USER_TREEFLOW";
1564888   +   filename treepub "&EM_USER_TREEPUBLISH";
1564890   +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
1564891   +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
1564893   +   %em_copyfile(infref=treeflow, outfref=flowref);
1564894   +   %em_copyfile(infref=treepub, outfref=pubref);
1564896   +   filename treeflow;
1564897   +   filename treepub;
1564899   +   /* if priors are used, add code to generate unadjusted residuals in export */
1564900   +   %let useAdjPriors = N;
1564901   +   data _null_;
1564902   +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
1564903   +     if USE="Y" then call symput('useAdjPriors', 'Y');
1564904   +   run;
1564905   +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
1564906   +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
1564907   +      %include temp;
1564908   +      filename temp;
1564910   +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
1564911   +      filename adjref "&EM_USER_adjResidualCode";
1564912   +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
1564914   +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
1564916   +      filename adjref;
1564917   +   %end;
1564919   +   /* LEAF */
1564920   +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
1564921   +      data _null_;
1564922   +        file flowref mod;
1564923   +        put 'drop _LEAF_;';
1564924   +      run;
1564926   +      data _null_;
1564927   +        file pubref mod;
1564928   +        put 'drop _LEAF_;';
1564929   +      run;
1564931   +   %end;
1564933   +   filename flowref;
1564934   +   filename pubref;
1564936   +   /* em_metachange code */
1564937   +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
1564938   +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
1564939   +   %end;
1564941   +   /* variable selection based on importance stat    */
1564942   +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
1564943   +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
1564944   +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
1564945   +     %let varnum = %sysfunc(varnum(&dsid, NAME));
1564946   +     %let obs = %sysfunc(fetch(&dsid));
1564947   +     %do %while(&obs=0);
1564948   +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
1564949   +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
1564950   +       %EM_METACHANGE(name=&varname, role=REJECTED);
1564951   +       %let obs = %sysfunc(fetch(&dsid));
1564952   +     %end;
1564953   +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
1564954   +   %end;
1564956   +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
1564957   +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
1564958   +    %let tree_pred_vars = ;
1564959   +    %let tree_pred_lvl =;
1564960   +    %let numpred= 0;
1564962   +    data _null_;
1564963   +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
1564964   +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
1564965   +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
1564966   +     if eof then
1564967   +       call symput('numpred', strip(put(_N_, BEST.)));
1564968   +    run;
1564969   +   %end;
1564971   +   %if &numpred ne 0 %then %do;
1564972   +    %do i=1 %to &numpred;
1564973   +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
1564974   +      %EM_METACHANGE(name=&qpred, role=ASSESS);
1564975   +    %end;
1564976   +   %end;
1564978   +   /* determine if multiple targets will be processed */
1564979   +   %let em_tree_multipleTargets=N;
1564980   +   %let em_tree_numTarget=1;
1564981   +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
1564982   +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
1564983   +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
1564984   +         %let em_tree_multipleTargets=N;
1564985   +      %end;
1564986   +      %else %do;
1564987   +        data _null_;
1564988   +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
1564989   +          if eof then
1564990   +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
1564991   +        run;
1564993   +        %if &em_tree_numTarget gt 1 %then %do;
1564994   +           %let em_tree_multipleTargets=Y;
1564995   +        %end;
1564996   +     %end;
1564997   +   %end;
1564999   +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
1565000   +   %if "&em_tree_multipleTargets" eq "N" %then %do;
1565002   +      /* variable importance */
1565003   +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
1565004   +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
1565006   +         %let validexist=0;
1565007   +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
1565008   +           %let validexist=1;
1565009   +         %end;
1565011   +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
1565012   +         /* and the columns may not be generated                                                                                 */
1565013   +         %let em_tree_cvexists=;
1565014   +         %let em_tree_surrexists=.;
1565015   +         data _null_;
1565016   +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
1565017   +            if eof then do ;
1565018   +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
1565019   +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
1565020   +            end;
1565021   +         run;
1565023   +         data &EM_USER_OUTIMPORT;
1565024   +            set &EM_USER_OUTIMPORT;
1565026   +            /* format columns based on Precison value specified */
1565027   +            format importance 15.&EM_PROPERTY_PRECISION
1565028   +                 %if &validexist %then %do;
1565029   +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
1565030   +                 %end;
1565031   +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
1565032   +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
1565033   +                 %end;
1565034   +            ;
1565035   +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
1565036   +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
1565037   +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
1565038   +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
1565039   +                 %if "&em_tree_surrexists" ne "" %then %do;
1565040   +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
1565041   +                 %end;
1565042   +                 %if &validexist %then %do;
1565043   +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
1565044   +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
1565045   +                 %end;
1565046   +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
1565047   +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
1565048   +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
1565049   +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
1565050   +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
1565051   +                 %end;
1565052   +            ;
1565053   +         run;
1565055   +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
1565056   +      %end;
1565057   +   %end;
1565059   +   %doendm:
1565060   +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:42:37 o'clock,
      Create Time=24 May 2018 22:19:08 o'clock
 
NOTE: 483 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:42:37 o'clock,
      Create Time=24 May 2018 22:19:08 o'clock
 
NOTE: 461 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree3_DepVar_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=17872,
      Last Modified=02 June 2018 16:42:37 o'clock,
      Create Time=24 May 2018 22:19:08 o'clock
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=17267,
      Last Modified=02 June 2018 16:42:37 o'clock,
      Create Time=24 May 2018 22:19:08 o'clock
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MntMagazines                    ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("NumWebPurchases                 ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("RANGE_average_purchase          ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree3_DepVar_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_DepVar1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_DepVar0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree3_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS1.Tree3_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree3_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance"
CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75598491949773;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1565061
1565062    *------------------------------------------------------------*;
1565063    * End SCORE: Tree3;
1565064    *------------------------------------------------------------*;
 
1565065    proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
1565066    by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
1565067    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1565068    filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
1565069    data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
1565070    file x;
MPRINT(EM_DIAGRAM):   file x;
1565071    put 'if upcase(NAME) = "MNTMAGAZINES" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MNTMAGAZINES" then do;';
1565072    put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
1565073    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565074    put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
1565075    put 'if upcase(NAME) = "NUMWEBPURCHASES" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "NUMWEBPURCHASES" then do;';
1565076    put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
1565077    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565078    put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
1565079    put 'if upcase(NAME) = "Q_DEPVAR0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_DEPVAR0" then do;';
1565080    put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
1565081    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565082    put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
1565083    put 'if upcase(NAME) = "Q_DEPVAR1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_DEPVAR1" then do;';
1565084    put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
1565085    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565086    put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
1565087    put 'if upcase(NAME) = "RANGE_AVERAGE_PURCHASE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RANGE_AVERAGE_PURCHASE" then do;';
1565088    put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
1565089    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565090    put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
1565091    put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
1565092    put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
1565093    put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
1565094    put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
1565095    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:42:38 o'clock,
      Create Time=22 May 2018 21:50:25 o'clock
 
NOTE: 24 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1565096    filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
1565097    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1565098    *------------------------------------------------------------*;
1565099    * Tree3: Scoring DATA data;
1565100    *------------------------------------------------------------*;
1565101    data EMWS1.Tree3_TRAIN
1565102    / view=EMWS1.Tree3_TRAIN
1565103    ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_TRAIN / view=EMWS1.Tree3_TRAIN ;
1565104    set EMWS1.Grp3_TRAIN
1565105    ;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp3_TRAIN ;
1565106    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
1565107   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1565108   +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
1565109   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1565110   +
1565111   +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
1565112   +LENGTH F_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_DepVar $ 12;
1565113   +LENGTH I_DepVar  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_DepVar $ 12;
1565114   +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
1565115   +
1565116   +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
1565117   +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
1565118   +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
1565119   +label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1565120   +label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1565121   +label Q_DepVar0 = 'Unadjusted P: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label Q_DepVar0 = 'Unadjusted P: DepVar=0' ;
1565122   +label Q_DepVar1 = 'Unadjusted P: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label Q_DepVar1 = 'Unadjusted P: DepVar=1' ;
1565123   +label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1565124   +label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1565125   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1565126   +label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1565127   +label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1565128   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
1565129   +
1565130   +
1565131   +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
1565132   +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
1565133   +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
1565134   +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_8 $ 8;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_8;
1565135   +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_8 = ' ';
1565136   +
1565137   +
1565138   +_ARBFMT_12 = PUT( DepVar , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DepVar , BEST.);
1565139   + %DMNORMCP( _ARBFMT_12, F_DepVar );
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
1565140   +
1565141   +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
1565142   +IF  NOT MISSING(RANGE_campaign_acceptance ) AND
1565143   +                 0.125 <= RANGE_campaign_acceptance  AND
1565144   +  RANGE_campaign_acceptance  <                0.375 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_campaign_acceptance ) AND 0.125 <= RANGE_campaign_acceptance AND RANGE_campaign_acceptance < 0.375 THEN DO;
1565145   +  IF  NOT MISSING(RANGE_Recency ) AND
1565146   +    RANGE_Recency  <     0.38888888888888 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND RANGE_Recency < 0.38888888888888 THEN DO;
1565147   +    IF  NOT MISSING(MntCard_Games ) AND
1565148   +          0.37104462156395 <= MntCard_Games  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 0.37104462156395 <= MntCard_Games THEN DO;
1565149   +      _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
1565150   +      _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
1565151   +      P_DepVar0  =      0.1076923076923;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.1076923076923;
1565152   +      P_DepVar1  =     0.89230769230769;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.89230769230769;
1565153   +      Q_DepVar0  =      0.1076923076923;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.1076923076923;
1565154   +      Q_DepVar1  =     0.89230769230769;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.89230769230769;
1565155   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565156   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565157   +      END;
MPRINT(EM_DIAGRAM):   END;
1565158   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565159   +      IF  NOT MISSING(NumDealsPurchases ) AND
1565160   +            0.12132352941176 <= NumDealsPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND 0.12132352941176 <= NumDealsPurchases THEN DO;
1565161   +        IF  NOT MISSING(NumCatalogPurchases ) AND
1565162   +          NumCatalogPurchases  <     0.18614718614718 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND NumCatalogPurchases < 0.18614718614718 THEN DO;
1565163   +          _NODE_  =                   71;
MPRINT(EM_DIAGRAM):   _NODE_ = 71;
1565164   +          _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
1565165   +          P_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.9090909090909;
1565166   +          P_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.09090909090909;
1565167   +          Q_DepVar0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.9090909090909;
1565168   +          Q_DepVar1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.09090909090909;
1565169   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565170   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565171   +          END;
MPRINT(EM_DIAGRAM):   END;
1565172   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565173   +          IF  NOT MISSING(RANGE_Frq ) AND
1565174   +            RANGE_Frq  <     0.11666666666666 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Frq ) AND RANGE_Frq < 0.11666666666666 THEN DO;
1565175   +            _NODE_  =                   75;
MPRINT(EM_DIAGRAM):   _NODE_ = 75;
1565176   +            _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
1565177   +            P_DepVar0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.6;
1565178   +            P_DepVar1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.4;
1565179   +            Q_DepVar0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.6;
1565180   +            Q_DepVar1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.4;
1565181   +            I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565182   +            U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565183   +            END;
MPRINT(EM_DIAGRAM):   END;
1565184   +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565185   +            _NODE_  =                   76;
MPRINT(EM_DIAGRAM):   _NODE_ = 76;
1565186   +            _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
1565187   +            P_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1565188   +            P_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1;
1565189   +            Q_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0;
1565190   +            Q_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 1;
1565191   +            I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565192   +            U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565193   +            END;
MPRINT(EM_DIAGRAM):   END;
1565194   +          END;
MPRINT(EM_DIAGRAM):   END;
1565195   +        END;
MPRINT(EM_DIAGRAM):   END;
1565196   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565197   +        IF  NOT MISSING(NumCatalogPurchases ) AND
1565198   +              0.27951388888888 <= NumCatalogPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 0.27951388888888 <= NumCatalogPurchases THEN DO;
1565199   +          _NODE_  =                   70;
MPRINT(EM_DIAGRAM):   _NODE_ = 70;
1565200   +          _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
1565201   +          P_DepVar0  =     0.46666666666666;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.46666666666666;
1565202   +          P_DepVar1  =     0.53333333333333;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.53333333333333;
1565203   +          Q_DepVar0  =     0.46666666666666;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.46666666666666;
1565204   +          Q_DepVar1  =     0.53333333333333;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.53333333333333;
1565205   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565206   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565207   +          END;
MPRINT(EM_DIAGRAM):   END;
1565208   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565209   +          _NODE_  =                   69;
MPRINT(EM_DIAGRAM):   _NODE_ = 69;
1565210   +          _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
1565211   +          P_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1;
1565212   +          P_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1565213   +          Q_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 1;
1565214   +          Q_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0;
1565215   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565216   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565217   +          END;
MPRINT(EM_DIAGRAM):   END;
1565218   +        END;
MPRINT(EM_DIAGRAM):   END;
1565219   +      END;
MPRINT(EM_DIAGRAM):   END;
1565220   +    END;
MPRINT(EM_DIAGRAM):   END;
1565221   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565222   +    IF  NOT MISSING(NumDealsPurchases ) AND
1565223   +          0.31009615384615 <= NumDealsPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND 0.31009615384615 <= NumDealsPurchases THEN DO;
1565224   +      IF  NOT MISSING(MntCard_Games ) AND
1565225   +        MntCard_Games  <     0.29635777126099 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND MntCard_Games < 0.29635777126099 THEN DO;
1565226   +        _NODE_  =                   63;
MPRINT(EM_DIAGRAM):   _NODE_ = 63;
1565227   +        _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
1565228   +        P_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.875;
1565229   +        P_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.125;
1565230   +        Q_DepVar0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.875;
1565231   +        Q_DepVar1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.125;
1565232   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565233   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565234   +        END;
MPRINT(EM_DIAGRAM):   END;
1565235   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565236   +        _NODE_  =                   64;
MPRINT(EM_DIAGRAM):   _NODE_ = 64;
1565237   +        _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
1565238   +        P_DepVar0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.2;
1565239   +        P_DepVar1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.8;
1565240   +        Q_DepVar0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.2;
1565241   +        Q_DepVar1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.8;
1565242   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565243   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565244   +        END;
MPRINT(EM_DIAGRAM):   END;
1565245   +      END;
MPRINT(EM_DIAGRAM):   END;
1565246   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565247   +      IF  NOT MISSING(MntCard_Games ) AND
1565248   +            0.42433538343271 <= MntCard_Games  AND
1565249   +        MntCard_Games  <     0.57331821617535 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 0.42433538343271 <= MntCard_Games AND MntCard_Games < 0.57331821617535 THEN DO;
1565250   +        IF  NOT MISSING(RANGE_Recency ) AND
1565251   +          RANGE_Recency  <     0.48484848484848 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND RANGE_Recency < 0.48484848484848 THEN DO;
1565252   +          _NODE_  =                   73;
MPRINT(EM_DIAGRAM):   _NODE_ = 73;
1565253   +          _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
1565254   +          P_DepVar0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.4;
1565255   +          P_DepVar1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.6;
1565256   +          Q_DepVar0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.4;
1565257   +          Q_DepVar1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.6;
1565258   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565259   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565260   +          END;
MPRINT(EM_DIAGRAM):   END;
1565261   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565262   +          _NODE_  =                   74;
MPRINT(EM_DIAGRAM):   _NODE_ = 74;
1565263   +          _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
1565264   +          P_DepVar0  =     0.95454545454545;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.95454545454545;
1565265   +          P_DepVar1  =     0.04545454545454;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.04545454545454;
1565266   +          Q_DepVar0  =     0.95454545454545;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.95454545454545;
1565267   +          Q_DepVar1  =     0.04545454545454;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.04545454545454;
1565268   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565269   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565270   +          END;
MPRINT(EM_DIAGRAM):   END;
1565271   +        END;
MPRINT(EM_DIAGRAM):   END;
1565272   +      ELSE IF  NOT MISSING(MntCard_Games ) AND
1565273   +            0.57331821617535 <= MntCard_Games  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(MntCard_Games ) AND 0.57331821617535 <= MntCard_Games THEN DO;
1565274   +        _NODE_  =                   62;
MPRINT(EM_DIAGRAM):   _NODE_ = 62;
1565275   +        _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
1565276   +        P_DepVar0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.57142857142857;
1565277   +        P_DepVar1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.42857142857142;
1565278   +        Q_DepVar0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.57142857142857;
1565279   +        Q_DepVar1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.42857142857142;
1565280   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565281   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565282   +        END;
MPRINT(EM_DIAGRAM):   END;
1565283   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565284   +        _NODE_  =                   60;
MPRINT(EM_DIAGRAM):   _NODE_ = 60;
1565285   +        _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
1565286   +        P_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1;
1565287   +        P_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1565288   +        Q_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 1;
1565289   +        Q_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0;
1565290   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565291   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565292   +        END;
MPRINT(EM_DIAGRAM):   END;
1565293   +      END;
MPRINT(EM_DIAGRAM):   END;
1565294   +    END;
MPRINT(EM_DIAGRAM):   END;
1565295   +  END;
MPRINT(EM_DIAGRAM):   END;
1565296   +ELSE IF  NOT MISSING(RANGE_campaign_acceptance ) AND
1565297   +                 0.375 <= RANGE_campaign_acceptance  AND
1565298   +  RANGE_campaign_acceptance  <                0.625 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_campaign_acceptance ) AND 0.375 <= RANGE_campaign_acceptance AND RANGE_campaign_acceptance < 0.625 THEN DO;
1565299   +  IF  NOT MISSING(RANGE_Recency ) AND
1565300   +    RANGE_Recency  <     0.38888888888888 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND RANGE_Recency < 0.38888888888888 THEN DO;
1565301   +    _NODE_  =                   12;
MPRINT(EM_DIAGRAM):   _NODE_ = 12;
1565302   +    _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
1565303   +    P_DepVar0  =     0.17142857142857;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.17142857142857;
1565304   +    P_DepVar1  =     0.82857142857142;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.82857142857142;
1565305   +    Q_DepVar0  =     0.17142857142857;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.17142857142857;
1565306   +    Q_DepVar1  =     0.82857142857142;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.82857142857142;
1565307   +    I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565308   +    U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565309   +    END;
MPRINT(EM_DIAGRAM):   END;
1565310   +  ELSE IF  NOT MISSING(RANGE_Recency ) AND
1565311   +        0.69191919191919 <= RANGE_Recency  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Recency ) AND 0.69191919191919 <= RANGE_Recency THEN DO;
1565312   +    _NODE_  =                   14;
MPRINT(EM_DIAGRAM):   _NODE_ = 14;
1565313   +    _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
1565314   +    P_DepVar0  =     0.91176470588235;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.91176470588235;
1565315   +    P_DepVar1  =     0.08823529411764;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.08823529411764;
1565316   +    Q_DepVar0  =     0.91176470588235;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.91176470588235;
1565317   +    Q_DepVar1  =     0.08823529411764;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.08823529411764;
1565318   +    I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565319   +    U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565320   +    END;
MPRINT(EM_DIAGRAM):   END;
1565321   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565322   +    IF  NOT MISSING(MntCard_Games ) AND
1565323   +           0.5226185334485 <= MntCard_Games  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 0.5226185334485 <= MntCard_Games THEN DO;
1565324   +      _NODE_  =                   34;
MPRINT(EM_DIAGRAM):   _NODE_ = 34;
1565325   +      _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
1565326   +      P_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1565327   +      P_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1;
1565328   +      Q_DepVar0  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0;
1565329   +      Q_DepVar1  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 1;
1565330   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565331   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565332   +      END;
MPRINT(EM_DIAGRAM):   END;
1565333   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565334   +      _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
1565335   +      _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
1565336   +      P_DepVar0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.75;
1565337   +      P_DepVar1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.25;
1565338   +      Q_DepVar0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.75;
1565339   +      Q_DepVar1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.25;
1565340   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565341   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565342   +      END;
MPRINT(EM_DIAGRAM):   END;
1565343   +    END;
MPRINT(EM_DIAGRAM):   END;
1565344   +  END;
MPRINT(EM_DIAGRAM):   END;
1565345   +ELSE IF  NOT MISSING(RANGE_campaign_acceptance ) AND
1565346   +                 0.625 <= RANGE_campaign_acceptance  AND
1565347   +  RANGE_campaign_acceptance  <                0.875 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_campaign_acceptance ) AND 0.625 <= RANGE_campaign_acceptance AND RANGE_campaign_acceptance < 0.875 THEN DO;
1565348   +  IF  NOT MISSING(RANGE_Recency ) AND
1565349   +        0.66161616161616 <= RANGE_Recency  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND 0.66161616161616 <= RANGE_Recency THEN DO;
1565350   +    _ARBFMT_8 = PUT( Marital_Status , $8.);
MPRINT(EM_DIAGRAM):   _ARBFMT_8 = PUT( Marital_Status , $8.);
1565351   +     %DMNORMIP( _ARBFMT_8);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
1565352   +    IF _ARBFMT_8 IN ('MARRIED' ,'TOGETHER' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_8 IN ('MARRIED' ,'TOGETHER' ) THEN DO;
1565353   +      _NODE_  =                   37;
MPRINT(EM_DIAGRAM):   _NODE_ = 37;
1565354   +      _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
1565355   +      P_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1;
1565356   +      P_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1565357   +      Q_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 1;
1565358   +      Q_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0;
1565359   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565360   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565361   +      END;
MPRINT(EM_DIAGRAM):   END;
1565362   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565363   +      _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
1565364   +      _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
1565365   +      P_DepVar0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.2;
1565366   +      P_DepVar1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.8;
1565367   +      Q_DepVar0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.2;
1565368   +      Q_DepVar1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.8;
1565369   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565370   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565371   +      END;
MPRINT(EM_DIAGRAM):   END;
1565372   +    END;
MPRINT(EM_DIAGRAM):   END;
1565373   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565374   +    _NODE_  =                   15;
MPRINT(EM_DIAGRAM):   _NODE_ = 15;
1565375   +    _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
1565376   +    P_DepVar0  =                 0.08;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.08;
1565377   +    P_DepVar1  =                 0.92;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.92;
1565378   +    Q_DepVar0  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.08;
1565379   +    Q_DepVar1  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.92;
1565380   +    I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565381   +    U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565382   +    END;
MPRINT(EM_DIAGRAM):   END;
1565383   +  END;
MPRINT(EM_DIAGRAM):   END;
1565384   +ELSE IF  NOT MISSING(RANGE_campaign_acceptance ) AND
1565385   +                 0.875 <= RANGE_campaign_acceptance  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_campaign_acceptance ) AND 0.875 <= RANGE_campaign_acceptance THEN DO;
1565386   +  _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
1565387   +  _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
1565388   +  P_DepVar0  =                0.125;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.125;
1565389   +  P_DepVar1  =                0.875;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.875;
1565390   +  Q_DepVar0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.125;
1565391   +  Q_DepVar1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.875;
1565392   +  I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565393   +  U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565394   +  END;
MPRINT(EM_DIAGRAM):   END;
1565395   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565396   +  IF  NOT MISSING(RANGE_Recency ) AND
1565397   +    RANGE_Recency  <     0.13636363636363 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND RANGE_Recency < 0.13636363636363 THEN DO;
1565398   +    IF  NOT MISSING(MntCard_Games ) AND
1565399   +          0.40792761279268 <= MntCard_Games  AND
1565400   +      MntCard_Games  <     0.42497454122243 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 0.40792761279268 <= MntCard_Games AND MntCard_Games < 0.42497454122243 THEN DO;
1565401   +      _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
1565402   +      _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
1565403   +      P_DepVar0  =     0.38461538461538;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.38461538461538;
1565404   +      P_DepVar1  =     0.61538461538461;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.61538461538461;
1565405   +      Q_DepVar0  =     0.38461538461538;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.38461538461538;
1565406   +      Q_DepVar1  =     0.61538461538461;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.61538461538461;
1565407   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565408   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565409   +      END;
MPRINT(EM_DIAGRAM):   END;
1565410   +    ELSE IF  NOT MISSING(MntCard_Games ) AND
1565411   +          0.42497454122243 <= MntCard_Games  AND
1565412   +      MntCard_Games  <     0.48360752021895 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(MntCard_Games ) AND 0.42497454122243 <= MntCard_Games AND MntCard_Games < 0.48360752021895 THEN DO;
1565413   +      _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
1565414   +      _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
1565415   +      P_DepVar0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.85714285714285;
1565416   +      P_DepVar1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.14285714285714;
1565417   +      Q_DepVar0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.85714285714285;
1565418   +      Q_DepVar1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.14285714285714;
1565419   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565420   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565421   +      END;
MPRINT(EM_DIAGRAM):   END;
1565422   +    ELSE IF  NOT MISSING(MntCard_Games ) AND
1565423   +          0.48360752021895 <= MntCard_Games  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(MntCard_Games ) AND 0.48360752021895 <= MntCard_Games THEN DO;
1565424   +      _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
1565425   +      _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
1565426   +      P_DepVar0  =     0.31914893617021;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.31914893617021;
1565427   +      P_DepVar1  =     0.68085106382978;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.68085106382978;
1565428   +      Q_DepVar0  =     0.31914893617021;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.31914893617021;
1565429   +      Q_DepVar1  =     0.68085106382978;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.68085106382978;
1565430   +      I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565431   +      U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565432   +      END;
MPRINT(EM_DIAGRAM):   END;
1565433   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565434   +      IF  NOT MISSING(NumDealsPurchases ) AND
1565435   +            0.32575757575757 <= NumDealsPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND 0.32575757575757 <= NumDealsPurchases THEN DO;
1565436   +        _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
1565437   +        _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
1565438   +        P_DepVar0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.11111111111111;
1565439   +        P_DepVar1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.88888888888888;
1565440   +        Q_DepVar0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.11111111111111;
1565441   +        Q_DepVar1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.88888888888888;
1565442   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565443   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565444   +        END;
MPRINT(EM_DIAGRAM):   END;
1565445   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565446   +        _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
1565447   +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
1565448   +        P_DepVar0  =     0.93567251461988;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.93567251461988;
1565449   +        P_DepVar1  =     0.06432748538011;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.06432748538011;
1565450   +        Q_DepVar0  =     0.93567251461988;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.93567251461988;
1565451   +        Q_DepVar1  =     0.06432748538011;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.06432748538011;
1565452   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565453   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565454   +        END;
MPRINT(EM_DIAGRAM):   END;
1565455   +      END;
MPRINT(EM_DIAGRAM):   END;
1565456   +    END;
MPRINT(EM_DIAGRAM):   END;
1565457   +  ELSE IF  NOT MISSING(RANGE_Recency ) AND
1565458   +        0.13636363636363 <= RANGE_Recency  AND
1565459   +    RANGE_Recency  <     0.36868686868686 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Recency ) AND 0.13636363636363 <= RANGE_Recency AND RANGE_Recency < 0.36868686868686 THEN DO;
1565460   +    IF  NOT MISSING(NumDealsPurchases ) AND
1565461   +      NumDealsPurchases  <     0.04653679653679 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND NumDealsPurchases < 0.04653679653679 THEN DO;
1565462   +      _ARBFMT_8 = PUT( Marital_Status , $8.);
MPRINT(EM_DIAGRAM):   _ARBFMT_8 = PUT( Marital_Status , $8.);
1565463   +       %DMNORMIP( _ARBFMT_8);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
1565464   +      IF _ARBFMT_8 IN ('DIVORCED' ,'SINGLE' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_8 IN ('DIVORCED' ,'SINGLE' ) THEN DO;
1565465   +        _NODE_  =                   42;
MPRINT(EM_DIAGRAM):   _NODE_ = 42;
1565466   +        _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
1565467   +        P_DepVar0  =                 0.35;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.35;
1565468   +        P_DepVar1  =                 0.65;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.65;
1565469   +        Q_DepVar0  =                 0.35;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.35;
1565470   +        Q_DepVar1  =                 0.65;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.65;
1565471   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565472   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565473   +        END;
MPRINT(EM_DIAGRAM):   END;
1565474   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565475   +        _NODE_  =                   41;
MPRINT(EM_DIAGRAM):   _NODE_ = 41;
1565476   +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
1565477   +        P_DepVar0  =     0.92682926829268;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92682926829268;
1565478   +        P_DepVar1  =     0.07317073170731;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.07317073170731;
1565479   +        Q_DepVar0  =     0.92682926829268;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92682926829268;
1565480   +        Q_DepVar1  =     0.07317073170731;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.07317073170731;
1565481   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565482   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565483   +        END;
MPRINT(EM_DIAGRAM):   END;
1565484   +      END;
MPRINT(EM_DIAGRAM):   END;
1565485   +    ELSE IF  NOT MISSING(NumDealsPurchases ) AND
1565486   +          0.17752100840336 <= NumDealsPurchases  AND
1565487   +      NumDealsPurchases  <     0.25657894736842 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(NumDealsPurchases ) AND 0.17752100840336 <= NumDealsPurchases AND NumDealsPurchases < 0.25657894736842 THEN DO;
1565488   +      _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
1565489   +      _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
1565490   +      P_DepVar0  =             0.828125;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.828125;
1565491   +      P_DepVar1  =             0.171875;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.171875;
1565492   +      Q_DepVar0  =             0.828125;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.828125;
1565493   +      Q_DepVar1  =             0.171875;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.171875;
1565494   +      I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565495   +      U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565496   +      END;
MPRINT(EM_DIAGRAM):   END;
1565497   +    ELSE IF  NOT MISSING(NumDealsPurchases ) AND
1565498   +          0.25657894736842 <= NumDealsPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(NumDealsPurchases ) AND 0.25657894736842 <= NumDealsPurchases THEN DO;
1565499   +      IF  NOT MISSING(RANGE_Recency ) AND
1565500   +            0.26767676767676 <= RANGE_Recency  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Recency ) AND 0.26767676767676 <= RANGE_Recency THEN DO;
1565501   +        _NODE_  =                   48;
MPRINT(EM_DIAGRAM):   _NODE_ = 48;
1565502   +        _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
1565503   +        P_DepVar0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.92307692307692;
1565504   +        P_DepVar1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.07692307692307;
1565505   +        Q_DepVar0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.92307692307692;
1565506   +        Q_DepVar1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.07692307692307;
1565507   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565508   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565509   +        END;
MPRINT(EM_DIAGRAM):   END;
1565510   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565511   +        _NODE_  =                   47;
MPRINT(EM_DIAGRAM):   _NODE_ = 47;
1565512   +        _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
1565513   +        P_DepVar0  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.15384615384615;
1565514   +        P_DepVar1  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.84615384615384;
1565515   +        Q_DepVar0  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.15384615384615;
1565516   +        Q_DepVar1  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.84615384615384;
1565517   +        I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565518   +        U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565519   +        END;
MPRINT(EM_DIAGRAM):   END;
1565520   +      END;
MPRINT(EM_DIAGRAM):   END;
1565521   +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565522   +      IF  NOT MISSING(NumCatalogPurchases ) AND
1565523   +            0.28348214285714 <= NumCatalogPurchases  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 0.28348214285714 <= NumCatalogPurchases THEN DO;
1565524   +        _ARBFMT_8 = PUT( Marital_Status , $8.);
MPRINT(EM_DIAGRAM):   _ARBFMT_8 = PUT( Marital_Status , $8.);
1565525   +         %DMNORMIP( _ARBFMT_8);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
1565526   +        IF _ARBFMT_8 IN ('MARRIED' ,'TOGETHER' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_8 IN ('MARRIED' ,'TOGETHER' ) THEN DO;
1565527   +          _NODE_  =                   65;
MPRINT(EM_DIAGRAM):   _NODE_ = 65;
1565528   +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
1565529   +          P_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1;
1565530   +          P_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1565531   +          Q_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 1;
1565532   +          Q_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0;
1565533   +          I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565534   +          U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565535   +          END;
MPRINT(EM_DIAGRAM):   END;
1565536   +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565537   +          _NODE_  =                   66;
MPRINT(EM_DIAGRAM):   _NODE_ = 66;
1565538   +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
1565539   +          P_DepVar0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.4;
1565540   +          P_DepVar1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.6;
1565541   +          Q_DepVar0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.4;
1565542   +          Q_DepVar1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.6;
1565543   +          I_DepVar  = '1' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '1' ;
1565544   +          U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1565545   +          END;
MPRINT(EM_DIAGRAM):   END;
1565546   +        END;
MPRINT(EM_DIAGRAM):   END;
1565547   +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565548   +        _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
1565549   +        _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
1565550   +        P_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1;
1565551   +        P_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0;
1565552   +        Q_DepVar0  =                    1;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 1;
1565553   +        Q_DepVar1  =                    0;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0;
1565554   +        I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565555   +        U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565556   +        END;
MPRINT(EM_DIAGRAM):   END;
1565557   +      END;
MPRINT(EM_DIAGRAM):   END;
1565558   +    END;
MPRINT(EM_DIAGRAM):   END;
1565559   +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565560   +    _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
1565561   +    _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
1565562   +    P_DepVar0  =     0.99231508165225;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.99231508165225;
1565563   +    P_DepVar1  =     0.00768491834774;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.00768491834774;
1565564   +    Q_DepVar0  =     0.99231508165225;
MPRINT(EM_DIAGRAM):   Q_DepVar0 = 0.99231508165225;
1565565   +    Q_DepVar1  =     0.00768491834774;
MPRINT(EM_DIAGRAM):   Q_DepVar1 = 0.00768491834774;
1565566   +    I_DepVar  = '0' ;
MPRINT(EM_DIAGRAM):   I_DepVar = '0' ;
1565567   +    U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1565568   +    END;
MPRINT(EM_DIAGRAM):   END;
1565569   +  END;
MPRINT(EM_DIAGRAM):   END;
1565570   +
1565571   +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
1565572   +IF  F_DepVar  NE '0'
1565573   +AND F_DepVar  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_DepVar NE '0' AND F_DepVar NE '1' THEN DO;
1565574   +        R_DepVar0  = .;
MPRINT(EM_DIAGRAM):   R_DepVar0 = .;
1565575   +        R_DepVar1  = .;
MPRINT(EM_DIAGRAM):   R_DepVar1 = .;
1565576   + END;
MPRINT(EM_DIAGRAM):   END;
1565577   + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1565578   +       R_DepVar0  =  -P_DepVar0 ;
MPRINT(EM_DIAGRAM):   R_DepVar0 = -P_DepVar0 ;
1565579   +       R_DepVar1  =  -P_DepVar1 ;
MPRINT(EM_DIAGRAM):   R_DepVar1 = -P_DepVar1 ;
1565580   +       SELECT( F_DepVar  );
MPRINT(EM_DIAGRAM):   SELECT( F_DepVar );
1565581   +          WHEN( '0'  ) R_DepVar0  = R_DepVar0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_DepVar0 = R_DepVar0 +1;
1565582   +          WHEN( '1'  ) R_DepVar1  = R_DepVar1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_DepVar1 = R_DepVar1 +1;
1565583   +       END;
MPRINT(EM_DIAGRAM):   END;
1565584   + END;
MPRINT(EM_DIAGRAM):   END;
1565585   +
1565586   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1565587   +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
1565588   +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
1565589   +
1565590   +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1565591    run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1565592    quit;
1565593    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
1565595    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
1565596    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
1565597    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1565598    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
1565599    filename lpflow catalog "EMWS1.Tree3_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_DIAGRAM):   filename lpflow catalog "EMWS1.Tree3_LOOP.EMFLOWCODE_5.source";
1565600    %em_copyfile(infref=emflow, outfref=lpflow);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lpflow lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("emflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPFLOW is:
      Catalog Name=EMWS1.TREE3_LOOP.EMFLOWCODE_5.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=41,
      Created=Saturday,  2 June 2018 16:28:01,
      Last Modified=Saturday,  2 June 2018 16:38:53,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\tree3_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=           161KB,
      File Size (bytes)=164864
 
NOTE: 484 records were written to the file LPFLOW.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
1565601    filename lpflow;
MPRINT(EM_DIAGRAM):   filename lpflow;
NOTE: Fileref LPFLOW has been deassigned.
1565602    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1565603    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas";
1565604    filename lppub catalog "EMWS1.Tree3_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_DIAGRAM):   filename lppub catalog "EMWS1.Tree3_LOOP.EMPUBLISHCODE_5.source";
1565605    %em_copyfile(infref=empub, outfref=lppub);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lppub lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("empub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPPUB is:
      Catalog Name=EMWS1.TREE3_LOOP.EMPUBLISHCODE_5.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=46,
      Created=Saturday,  2 June 2018 16:28:01,
      Last Modified=Saturday,  2 June 2018 16:42:38,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\tree3_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=           181KB,
      File Size (bytes)=185344
 
NOTE: 462 records were written to the file LPPUB.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
1565606    filename lppub;
MPRINT(EM_DIAGRAM):   filename lppub;
NOTE: Fileref LPPUB has been deassigned.
1565607    filename empub;
MPRINT(EM_DIAGRAM):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
1565608    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1565609    * Tree3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree3: Computing metadata for TRAIN data;
1565610    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree3_TRAIN out=WORK.M0VYV42O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VYV42O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0VYV42O(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VYV42O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0VYV42O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3GZ1OT5 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FCETEC(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GZ1OT5;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Grp3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Grp3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree3";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Tree3";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "MNTMAGAZINES" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "NUMWEBPURCHASES" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_DEPVAR0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_DEPVAR1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RANGE_AVERAGE_PURCHASE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1565982    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1565983    set EMWS1.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMINFO;
1565984    where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
1565985    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_EMINFO.
      WHERE (DATA='Tree3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1565986    data EMWS1.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMINFO;
1565987    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1565988    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1565989    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1565993    run;
1565994    data EMWS1.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_EMINFO;
1565995    set EMWS1.Tree3_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMINFO WORK.MODELTEMP_INFO;
1565996    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1565997    proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
1565998    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
The SAS System
 
1565999    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1566000    proc sort data = EMWS1.Grp3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Grp3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1566001    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1566002    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1566003    proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1566004    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1566005    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1566006    data EMWS1.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_EMINFO;
1566007    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1566008    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1566009    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1566010    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1566011    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1566012    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1566013    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:42:39 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:42:39 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2L481XH "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Tree3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2L481XH new;
MPRINT(EM_DIAGRAM):   run;
1566037    data EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMOUTFIT;
1566038    set EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMOUTFIT;
1566039    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1566040    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1566041    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1566042    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1566043    proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
1566044    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1566045    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1566046    %let _EMwarndup = 0;
1566047    %let _EMtargetdup =;
1566048    %let _EMASEtargetdup =;
1566049    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1566050    set EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMOUTFIT;
1566051    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1566052    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1566053    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1566054    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1566055    end;
MPRINT(EM_DIAGRAM):   end;
1566056    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1566057    proc sort data=EMWS1.Grp3_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Grp3_CMeta_TRAIN out=WORK.SUBSETINMETA;
1566058    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1566059    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.GRP3_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 13 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1566060    proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
1566061    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1566062    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1566063    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1566064    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1566065    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1566066    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 13 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1566067    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1566068    set EMWS1.Tree3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_CMeta_TRAIN;
1566069    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
1566070    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1566071    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1566072    set EMWS1.Tree3_TRAIN(keep=
1566073    F_DepVar
1566074    I_DepVar
1566075    P_DepVar0
1566076    P_DepVar1
1566077    Q_DepVar0
1566078    Q_DepVar1
1566079    R_DepVar0
1566080    R_DepVar1
1566081    U_DepVar
1566082    _WARN_
1566083    DepVar
1566084    );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 Q_DepVar0 Q_DepVar1 R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1566085    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2197 observations read from the data set EMWS1.GRP3_TRAIN.
NOTE: There were 2197 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2197 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Tree3_0_6IATH nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree3_0_6IATH;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree3_0_6IATH(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree3_0_6IATH;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree3_0_6IATH;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370050068 _NEVENTS 301 _NNONEVENTS 1896 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2197));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2197 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2197/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2197)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2197/20) ) / ( AVGNUMRESP / (2197/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2197 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2197 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2197/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2197/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2197;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
1570372    %let _cn = %sysfunc(getoption(CENTER));
1570373    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1570374    proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
1570375    var STAT LABEL TRAIN
1570376    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
1570377    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1570378    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1570379    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1570380    run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 1055.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1570381    title10;
MPRINT(EM_DIAGRAM):   title10;
1570382    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1570383    proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
1570384    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1570385    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION has 4 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570386    %let _cn = %sysfunc(getoption(CENTER));
1570387    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1570388    proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
1570389    var from into pct_row pct_col count percent
1570390    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1570391    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1570392    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1570393    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1570394    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1570395    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1570396    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1570397    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1570398    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1570399    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1570400    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1570401    run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 1056.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
1570402    title9;
MPRINT(EM_DIAGRAM):   title9;
1570403    title10;
MPRINT(EM_DIAGRAM):   title10;
1570404    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1570405    %let _cn = %sysfunc(getoption(CENTER));
1570406    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1570407    data EMWS1.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree3_EMEVENTREPORT;
1570408    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
1570408  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
1570409    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1570409  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
1570409  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
1570409  ! FALSEEVENT
1570410    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
1570410  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
1570410  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
1570411       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
1570412    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
1570413    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
1570414    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
1570415    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
1570416    set EMWS1.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMEVENTREPORT;
1570417    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
1570418    proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
1570419    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1570420    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
1570421    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
1570422    run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 1057.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1570423    title10;
MPRINT(EM_DIAGRAM):   title10;
1570424    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1570425    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1570426    modify Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1570427    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1570428    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1570428  ! ;
MPRINT(EM_DIAGRAM):   run;
1570429    run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
1570430    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
1570431    %let _cn = %sysfunc(getoption(CENTER));
1570432    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1570433    proc print data=EMWS1.Tree3_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree3_EMRANK label noobs;
1570434    var
1570435    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1570436    by
1570437    notsorted DATAROLE
1570438    notsorted TARGET
1570439    notsorted TARGETLABEL
1570440    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1570441    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1570442    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1570443    run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 1058.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1570444    title10;
MPRINT(EM_DIAGRAM):   title10;
1570445    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1570446    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1570447    modify Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1570448    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
1570448  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1570449    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
1570449  ! ;
MPRINT(EM_DIAGRAM):   run;
1570450    run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
1570451    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
1570452    %let _cn = %sysfunc(getoption(CENTER));
1570453    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1570454    proc print data=EMWS1.Tree3_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree3_EMSCOREDIST label noobs;
1570455    var
1570456    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
1570457    by
1570458    notsorted DATAROLE
1570459    notsorted TARGET
1570460    notsorted TARGETLABEL
1570461    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1570462    where TARGET in(
1570463    "DepVar"
1570464    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
1570465    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1570466    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
1570467    run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE3_EMSCOREDIST.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 1059.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1570468    title10;
MPRINT(EM_DIAGRAM):   title10;
1570469    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1570470    data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
1570471    set EMWS1.Grp3_GROUPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp3_GROUPINFO;
1570472    where _LOOP_=5;
MPRINT(EM_DIAGRAM):   where _LOOP_=5;
1570473    call symput('LOOP_WHERE', strip(_wheredesc_));
MPRINT(EM_DIAGRAM):   call symput('LOOP_WHERE', strip(_wheredesc_));
1570474    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP3_GROUPINFO.
      WHERE _LOOP_=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1570475    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570476    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570477    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570478    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570478  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570479    set EMWS1.Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMRANK;
1570480    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570481    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570482    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The data set WORK.TEMP has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570483    data EMWS1.Tree3_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMRANK_LOOP;
1570484    set EMWS1.Tree3_EMRANK_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMRANK_LOOP temp;
1570485    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 80 observations read from the data set EMWS1.TREE3_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMRANK_LOOP has 100 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1570486    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570487    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570488    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570489    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570489  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570490    set EMWS1.Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMSCOREDIST;
1570491    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570492    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570493    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE3_EMSCOREDIST.
NOTE: The data set WORK.TEMP has 16 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570494    data EMWS1.Tree3_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMSCOREDIST_LOOP;
1570495    set EMWS1.Tree3_EMSCOREDIST_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMSCOREDIST_LOOP temp;
1570496    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 51 observations read from the data set EMWS1.TREE3_EMSCOREDIST_LOOP.
NOTE: There were 16 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMSCOREDIST_LOOP has 67 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1570497    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570498    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570499    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570500    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570500  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570501    set EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMOUTFIT;
1570502    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570503    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570504    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set WORK.TEMP has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570505    data EMWS1.Tree3_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMOUTFIT_LOOP;
1570506    set EMWS1.Tree3_EMOUTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMOUTFIT_LOOP temp;
1570507    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMOUTFIT_LOOP has 5 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570508    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570509    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570510    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570511    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570511  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570512    set EMWS1.Tree3_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMREPORTFIT;
1570513    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570514    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570515    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set WORK.TEMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570516    data EMWS1.Tree3_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMREPORTFIT_LOOP;
1570517    set EMWS1.Tree3_EMREPORTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMREPORTFIT_LOOP temp;
1570518    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.TREE3_EMREPORTFIT_LOOP.
NOTE: There were 8 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT_LOOP has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1570519    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570520    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570521    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570522    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570522  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570523    set EMWS1.Tree3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMCLASSIFICATION;
1570524    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570525    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570526    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set WORK.TEMP has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570527    data EMWS1.Tree3_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMCLASSIFICATION_LOOP;
1570528    set EMWS1.Tree3_EMCLASSIFICATION_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMCLASSIFICATION_LOOP temp;
1570529    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION_LOOP has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1570530    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570531    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570532    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570533    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570533  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570534    set EMWS1.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMEVENTREPORT;
1570535    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570536    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570537    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set WORK.TEMP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570538    data EMWS1.Tree3_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_EMEVENTREPORT_LOOP;
1570539    set EMWS1.Tree3_EMEVENTREPORT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_EMEVENTREPORT_LOOP temp;
1570540    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE3_EMEVENTREPORT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT_LOOP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1570541    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1570542    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1570543    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1570544    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
1570544  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1570545    set EMWS1.Tree3_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_OUTIMPORT;
1570546    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1570547    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1570548    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set WORK.TEMP has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1570549    data EMWS1.Tree3_OUTIMPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree3_OUTIMPORT_LOOP;
1570550    set EMWS1.Tree3_OUTIMPORT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree3_OUTIMPORT_LOOP temp;
1570551    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_OUTIMPORT_LOOP.
NOTE: There were 10 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.TREE3_OUTIMPORT_LOOP has 50 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
