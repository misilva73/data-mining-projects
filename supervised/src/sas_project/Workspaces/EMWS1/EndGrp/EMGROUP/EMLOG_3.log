*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:36:51 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:46 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:36:46 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O056Q5NB "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O056Q5NB new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMGROUP\EMLOG_3.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:46 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMGROUP\EMOUTPUT_3.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:46 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1050772    proc freq data=EMWS1.EndGrp_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EndGrp_VariableSet noprint;
1050773    table ROLE*LEVEL/out=WORK.EndGrpMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EndGrpMETA;
1050774    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.ENDGRP_VARIABLESET.
NOTE: The data set WORK.ENDGRPMETA has 11 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
1050775    proc print data=WORK.EndGrpMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrpMETA label noobs;
1050776    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1050777    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
1050778    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1050779    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1050780    run;
 
NOTE: There were 11 observations read from the data set WORK.ENDGRPMETA.
NOTE: The PROCEDURE PRINT printed page 688.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1050781    title10;
MPRINT(EM_DIAGRAM):   title10;
1050782    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Tree_TRAIN EMWS1.Tree_TRAIN
EMWS1.Tree_TRAIN EMWS1.Tree_TRAIN EMWS1 Tree_TRAIN
EMWS1.Tree_TRAIN EMWS1.Tree_TRAIN
EMWS1.Tree_TRAIN EMWS1.Tree_TRAIN EMWS1 Tree_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Tree_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
1050811    data WORK.EndGrp_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1050812    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1050813    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1050814       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1050815    set EMWS1.TREE_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.TREE_DEPVAR_DM( where=(_TYPE_="TARGET"));
1050816    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1050817    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1050818    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1050819    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1050820    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1050821    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1050822    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1050823    end;
MPRINT(EM_DIAGRAM):   end;
1050824    output;
MPRINT(EM_DIAGRAM):   output;
1050825    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
1050826    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1050827    proc print data=WORK.EndGrp_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp_EVENT noobs label;
1050828    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1050829    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1050830    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1050831    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP_EVENT.
NOTE: The PROCEDURE PRINT printed page 689.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1050832    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1050833    proc print data = EMWS1.Tree_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Tree_DepVar_DM noobs label;
1050834    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1050835    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
1050836    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1050837    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1050838    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1050839    run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 690.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1050840    title10;
MPRINT(EM_DIAGRAM):   title10;
1050841    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=300;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13717421124828;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=1887;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86282578875171;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1051314    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1051315    * EndGrp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EndGrp: Generation of macros and macro variables;
1051316    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
1051317    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
1051318    %let EMEXCEPTIONSTRING=;
1051319    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1051320    * TRAIN: EndGrp;
MPRINT(EM_DIAGRAM):   * TRAIN: EndGrp;
1051321    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051322    %let EM_ACTION = TRAIN;
1051323    %let syscc = 0;
1051324    %macro main;
1051325       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1051326
1051327           filename temp catalog 'sashelp.emutil.endgp_train.source';
1051328           %include temp;
1051329           filename temp;
1051330
1051331           %train;
1051332
1051333       %end;
1051334       %else
1051335          %if %upcase(&EM_ACTION) = SCORE %then %do;
1051336
1051337           filename temp catalog 'sashelp.emutil.endgp_score.source';
1051338           %include temp;
1051339           filename temp;
1051340
1051341           %score;
1051342       %end;
1051343       %else
1051344       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1051345
1051346           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1051347           %include temp;
1051348           filename temp;
1051349
1051350           %postloop;
1051351
1051352       %end;
1051353
1051354       %doendm:
1051355    %mend main;
1051356
1051357    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_TRAIN.SOURCE.
1051358   +%macro copyModelDs(model=, key=);
1051359   +   %let modelDs  = &em_lib..&model._&key;
1051360   +   %let reportDs = &em_lib..&em_nodeid._&key;
1051361   +   %if %sysfunc(exist(&modelDs)) %then %do;
1051362   +       data &reportDs;
1051363   +          length ModelId $16;
1051364   +          retain ModelId "&model";
1051365   +          set &modelDs;
1051366   +       run;
1051367   +   %end;
1051368   +%mend copyModelDs;
1051369   +
1051370   +%macro traintarget(groupid=);
1051371   +   %em_getname(key=emoutfit, type=DATA);
1051372   +   %let targetname=;
1051373   +   data _null_;
1051374   +     set &em_lib..&groupid._&looptype;
1051375   +     where _LOOP_ = &EMLOOPNUMBER;
1051376   +     call symput('targetname', strip(_TARGET_));
1051377   +   run;
1051378   +   %let modelId =;
1051379   +   data _null_;
1051380   +      set &em_import_data_eminfo;
1051381   +      where key = 'MODEL' and TARGET = "&targetname";
1051382   +      call symput('modelId',   strip(data));
1051383   +   run;
1051384   +   %if "&modelId" ne "" %then %do;
1051385   +       %copyModelDs(model=&modelid, key=EMRANK);
1051386   +       %copyModelDs(model=&modelid, key=EMSCOREDIST);
1051387   +       %copyModelDs(model=&modelid, key=EMOUTFIT);
1051388   +       %copyModelDs(model=&modelid, key=EMCLASSIFICATION);
1051389   +       %copyModelDs(model=&modelid, key=EMEVENREPORT);
1051390   +       %copyModelDs(model=&modelid, key=EMRESIDUALS);
1051391   +       %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1051392   +   %end;
1051393   +
1051394   +   %doendtgp:
1051395   +%mend;
1051396   +
1051397   +%macro trainboost(groupid=);
1051398   +
1051399   +   %let boostinfoDs  = &em_lib..%sysfunc(strip(&groupid))_boostinfo;
1051400   +   %let boostscoreDs = &em_lib..%sysfunc(strip(&groupid))_boostscore;
1051401   +
1051402   +   data _null_;
1051403   +      retain index 0;
1051404   +      set &boostinfoDs;
1051405   +      call symput('targetname', strip(_target_));
1051406   +   run;
1051407   +
1051408   +   %if "&em_import_data_eminfo" ne "" and %sysfunc(exist(&em_import_data_eminfo)) %then %do;
1051409   +       %let decmeta = ;
1051410   +       data _null_;
1051411   +          set &em_import_data_eminfo;
1051412   +          where (key='DECMETA' and TARGET="&targetname");
1051413   +          call symput('DECMETA', strip(data));
1051414   +       run;
1051415   +       %if "&decmeta" eq "" %then %do;
1051416   +           %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1051417   +           %goto doendtb;
1051418   +       %end;
1051419   +
1051420   +       %let predictedVars=;
1051421   +       data _null_;
1051422   +          set &decmeta;
1051423   +          if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1051424   +          else
1051425   +          if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1051426   +          else
1051427   +          if _TYPE_ = 'PREDICTED' then call symput('predictedvars', strip(symget('predictedVars'))!!' '!!strip(variable));
1051428   +       run;
1051429   +       %if %index(&EM_DEBUG, _ALL_) %then %do;
1051430   +           %put GROUPID: &GROUPID DECMETA: &DECMETA FROMVAR: &FROMVAR INTO: &INTOVAR PREDICTED: &PREDICTEDVARS;
1051431   +       %end;
1051432   +   %end;
1051433   +
1051434   +   * ;
1051435   +   * ENDGROUP &NODEID : Boosting scoring ;
1051436   +   * ;
1051437   +   data &em_lib..&groupid._boostscore;
1051438   +      set &em_import_data;
1051439   +      keep _WARN_ &targetname &fromvar &intovar &predictedvars;
1051440   +      %if "%em_freq" ne "" %then %do ;
1051441   +          keep %em_freq ;
1051442   +      %end ;
1051443   +   run;
1051444   +   %em_model(TARGET=&targetname , ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1051445   +
1051446   +   %doendtb:
1051447   +
1051448   +%mend trainboost;
1051449   +
1051450   +%macro trainbag(groupid=);
1051451   +   %let baginfoDs  = &em_lib..%sysfunc(strip(&groupid))_baginfo;
1051452   +   data _null_;
1051453   +      retain index 0;
1051454   +      set &baginfoDs;
1051455   +      call symput('targetname', strip(_target_));
1051456   +   run;
1051457   +
1051458   +   %let decmeta = ;
1051459   +   data _null_;
1051460   +       set &em_import_data_eminfo;
1051461   +       where (key='DECMETA' and TARGET="&targetname");
1051462   +       call symput('DECMETA', strip(data));
1051463   +   run;
1051464   +   %if "&decmeta" eq "" %then %do;
1051465   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1051466   +       %goto doendtg;
1051467   +   %end;
1051468   +
1051469   +   %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1051470   +
1051471   +   %doendtg:
1051472   +%mend trainbag;
1051473   +
1051474   +%macro traingroup(groupid=);
1051475   +   %let targetNum = 0;
1051476   +
1051477   +   data _temp1;
1051478   +      set &em_lib..&groupid._eminfo;
1051479   +      where key='MODEL';
1051480   +   run;
1051481   +   data _temp2;
1051482   +      set &em_import_data_eminfo;
1051483   +      where key='MODEL';
1051484   +   run;
1051485   +   proc sort data=_temp1; by TARGET DATA;
1051486   +   proc sort data=_temp2; by TARGET DATA;
1051487   +   data _temp2;
1051488   +      merge _temp1(in=_a) _temp2(in=_b);
1051489   +      by TARGET DATA;
1051490   +      if ^_a and _b then output;
1051491   +   run;
1051492   +   data _null_;
1051493   +      retain index 0;
1051494   +      set _temp2 end=eof;
1051495   +      index +1;
1051496   +      where key ='MODEL';
1051497   +      call symput('MODELID'!!strip(put(index, best.)), strip(data));
1051498   +      call symput('TARGET'!!strip(put(index, best.)), strip(target));
1051499   +      if eof then
1051500   +         call symput('targetnum', strip(put(index, best.)));
1051501   +   run;
1051502   +   proc datasets lib=work nolist;
1051503   +      delete _temp1 _temp2;
1051504   +   run;
1051505   +   %if "&targetNum" eq "0" %then %goto doendtgp;
1051506   +
1051507   +   %let modelString =;
1051508   +   %do i=1 %to &targetnum;
1051509   +        %if ^%sysfunc(indexw(&modelString, &&modelid&i)) %then %do;
1051510   +            %copyModelDs(model=&&modelid&i, key=EMRANK);
1051511   +            %copyModelDs(model=&&modelid&i, key=EMSCOREDIST);
1051512   +            %copyModelDs(model=&&modelid&i, key=EMOUTFIT);
1051513   +            %copyModelDs(model=&&modelid&i, key=EMCLASSIFICATION);
1051514   +            %copyModelDs(model=&&modelid&i, key=EMEVENREPORT);
1051515   +            %copyModelDs(model=&&modelid&i, key=EMRESIDUALS);
1051516   +            %let modelString = &modelString &&modelid&i;
1051517   +       %end;
1051518   +       %em_model(TARGET=&&target&i, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1051519   +   %end;
1051520   +
1051521   +   %doendtgp:
1051522   +
1051523   +%mend traingroup;
1051524   +
1051525   +%macro getSize(data=, nobsvar=);
1051526   +
1051527   +   %if %sysfunc(exist(&data, DATA)) %then %do;
1051528   +       %let dsid = %sysfunc(open(&data));
1051529   +       %if &dsid %then %do;
1051530   +           %let &&nobsvar = %sysfunc(attrn(&dsid, NLOBS));
1051531   +           %let dsid = %sysfunc(close(&dsid));
1051532   +       %end;
1051533   +   %end;
1051534   +    %if %sysfunc(exist(&data, VIEW)) %then %do;
1051535   +        proc sql;
1051536   +           reset noprint;
1051537   +           select count(*) into :&nobsvar from &data;
1051538   +        quit;
1051539   +   %end;
1051540   +
1051541   +%mend getsize;
1051542   +
1051543   +%macro train;
1051544   +
1051545   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %do;
1051546   +      %let EM_TOOLTYPE=UTILITY;
1051547   +      %if %sysfunc(exist(&em_data_eminfo)) %then %do;
1051548   +          proc delete data=&em_data_eminfo;
1051549   +          run;
1051550   +      %end;
1051551   +      %goto doendtr;
1051552   +   %end;
1051553   +
1051554   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1051555   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1051556   +       %goto doendtr;
1051557   +   %end;
1051558   +
1051559   +   %let xgroupid = ;
1051560   +   data _null_;
1051561   +      set &em_import_data_eminfo;
1051562   +      where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1051563   +      call symput('XGROUPID',  strip(data));
1051564   +      call symput('LOOPTYPE', strip(key));
1051565   +   run;
1051566   +
1051567   +   %if "&looptype" eq "BOOSTINFO" %then %do;
1051568   +       %let nDataObs=0;
1051569   +       %getSize(data=&em_import_data, nobsvar=nDataObs);
1051570   +
1051571   +       %let nStartObs=0;
1051572   +       %getsize(data=&em_lib..&xgroupid._train, nobsvar=nStartObs);
1051573   +
1051574   +       %if &nDataObs ne &nStartObs %then %do;
1051575   +           %let emexceptionstring = EMTOOL.BOOSTERRORNOBSCHANGED;
1051576   +           %goto doendtr;
1051577   +       %end;
1051578   +
1051579   +       %trainboost(groupid=&xgroupid);
1051580   +   %end;
1051581   +   %else
1051582   +   %if "&looptype" eq "BAGINFO" %then %do;
1051583   +       %trainbag(groupid=&xgroupid);
1051584   +   %end;
1051585   +   %else
1051586   +   %if "&looptype" eq "GROUPINFO" %then %do;
1051587   +       %traingroup(groupid=&xgroupid);
1051588   +   %end;
1051589   +   %else
1051590   +   %if "&looptype" eq "TARGETINFO" %then %do;
1051591   +       %traintarget(groupid=&xgroupid);
1051592   +   %end;
1051593   +
1051594   +   data &em_data_eminfo;
1051595   +      length TARGET KEY $32  DATA $43;
1051596   +      TARGET=''; KEY='ENDGROUP'; DATA="&em_nodeid"; output;
1051597   +   run;
1051598   +
1051599   +   %let EM_TOOLTYPE=MODEL;
1051600   +
1051601   +   %doendtr:
1051602   +
1051603   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.Tree_EMINFO;
MPRINT(TRAIN):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(TRAIN):   call symput('XGROUPID', strip(data));
MPRINT(TRAIN):   call symput('LOOPTYPE', strip(key));
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp1;
MPRINT(TRAINGROUP):   set EMWS1.Grp_eminfo;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRP_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   set EMWS1.Tree_EMINFO;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp1;
MPRINT(TRAINGROUP):   by TARGET DATA;
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp2;
MPRINT(TRAINGROUP):   by TARGET DATA;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   merge _temp1(in=_a) _temp2(in=_b);
MPRINT(TRAINGROUP):   by TARGET DATA;
MPRINT(TRAINGROUP):   if ^_a and _b then output;
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP1.
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _null_;
MPRINT(TRAINGROUP):   retain index 0;
MPRINT(TRAINGROUP):   set _temp2 end=eof;
MPRINT(TRAINGROUP):   index +1;
MPRINT(TRAINGROUP):   where key ='MODEL';
MPRINT(TRAINGROUP):   call symput('MODELID'!!strip(put(index, best.)), strip(data));
MPRINT(TRAINGROUP):   call symput('TARGET'!!strip(put(index, best.)), strip(target));
MPRINT(TRAINGROUP):   if eof then call symput('targetnum', strip(put(index, best.)));
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc datasets lib=work nolist;
MPRINT(TRAINGROUP):   delete _temp1 _temp2;
MPRINT(TRAINGROUP):   run;
 
NOTE: Deleting WORK._TEMP1 (memtype=DATA).
NOTE: Deleting WORK._TEMP2 (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(COPYMODELDS):   data EMWS1.EndGrp_EMRANK;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Tree";
MPRINT(COPYMODELDS):   set EMWS1.Tree_EMRANK;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The data set EMWS1.ENDGRP_EMRANK has 20 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp_EMSCOREDIST;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Tree";
MPRINT(COPYMODELDS):   set EMWS1.Tree_EMSCOREDIST;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP_EMSCOREDIST has 7 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp_EMOUTFIT;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Tree";
MPRINT(COPYMODELDS):   set EMWS1.Tree_EMOUTFIT;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Tree";
MPRINT(COPYMODELDS):   set EMWS1.Tree_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.EndGrp_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET='';
MPRINT(TRAIN):   KEY='ENDGROUP';
MPRINT(TRAIN):   DATA="EndGrp";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS1.ENDGRP_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EndGrp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051604    *------------------------------------------------------------*;
1051605    * End TRAIN: EndGrp;
1051606    *------------------------------------------------------------*;
1051607
 
1051608    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1051609    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1051610    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051611    ;
MPRINT(EM_DIAGRAM):   ;
1051612    ;
MPRINT(EM_DIAGRAM):   ;
1051613    ;
MPRINT(EM_DIAGRAM):   ;
1051614    ;
MPRINT(EM_DIAGRAM):   ;
1051615    quit;
MPRINT(EM_DIAGRAM):   quit;
1051616    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051617    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1051618    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051619    /*; *"; *'; */
1051620    ;
MPRINT(EM_DIAGRAM):   ;
1051621    run;
MPRINT(EM_DIAGRAM):   run;
1051622    quit;
MPRINT(EM_DIAGRAM):   quit;
1051623    /* Reset EM Options */
1051624    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1051625    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1051626    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:49 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:36:49 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O17Y2RIF "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O17Y2RIF new;
MPRINT(EM_DIAGRAM):   run;
1051728    %let EMEXCEPTIONSTRING=;
1051729    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1051730    * SCORE: EndGrp;
MPRINT(EM_DIAGRAM):   * SCORE: EndGrp;
1051731    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1051732    %let EM_ACTION = SCORE;
1051733    %let syscc = 0;
1051734    %macro main;
1051735       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1051736
1051737           filename temp catalog 'sashelp.emutil.endgp_train.source';
1051738           %include temp;
1051739           filename temp;
1051740
1051741           %train;
1051742
1051743       %end;
1051744       %else
1051745          %if %upcase(&EM_ACTION) = SCORE %then %do;
1051746
1051747           filename temp catalog 'sashelp.emutil.endgp_score.source';
1051748           %include temp;
1051749           filename temp;
1051750
1051751           %score;
1051752       %end;
1051753       %else
1051754       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1051755
1051756           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1051757           %include temp;
1051758           filename temp;
1051759
1051760           %postloop;
1051761
1051762       %end;
1051763
1051764       %doendm:
1051765    %mend main;
1051766
1051767    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_SCORE.SOURCE.
1051768   +%macro scoreTables(data=, out=, scoreref=, prescore=);
1051770   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
1051771   +       data &out / view=&out;
1051772   +          set &data
1051774   +          %if "&prescore" = "Y" %then %do;
1051775   +              (obs=1)
1051776   +          %end;
1051778   +          ;
1051780   +          %inc &scoreref;
1051782   +          %if "&prescore" eq "Y" %then %do;
1051783   +              drop I_: R_:;
1051784   +          %end;
1051786   +       run;
1051787   +   %end;
1051789   +%mend scoretables;
1051791   +%macro boostbagcode(groupid=, type=, EnsembleIndex=);
1051792   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
1051793   +   data _null_;
1051794   +      retain index 0;
1051795   +      set &infoDs;
1051796   +      call symput('targetname', strip(_target_));
1051797   +      call symput('endloopnum', strip(_loop_));
1051798   +   run;
1051800   +   %let endgrp_decmeta=;
1051801   +   %let endgrp_decdata=;
1051803   +   data _null_;
1051804   +      set &em_import_data_eminfo;
1051805   +      where key in('MODEL', 'DECMETA', 'DECDATA') and TARGET="&targetname";
1051806   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
1051807   +      else
1051808   +      if key='DECDATA' then call symput('ENDGRP_DECDATA', strip(data));
1051809   +      else call symput('MODELID', strip(data));
1051810   +   run;
1051812   +   %let headerString= Boosting;
1051813   +   %let prefixString= _BoostVar;
1051815   +   %if "&type" = "BAGINFO" %then %do;
1051816   +        %let headerString = Bagging;
1051817   +        %let prefixString= _BagVar;
1051818   +   %end;
1051820   +   %let targetType=;
1051821   +   %let predictedVars=;
1051822   +   data _null_;
1051823   +      retain index;
1051824   +      set &endgrp_decmeta end=eof;
1051825   +      length tempvar $200;
1051826   +      if _TYPE_='TARGET' then call symput('TARGETTYPE', strip(level));
1051827   +      else
1051828   +      if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1051829   +      else
1051830   +      if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1051831   +      else
1051832   +      if _TYPE_ = 'PREDICTED' then do;
1051833   +         index+1;
1051834   +         call symput('predvars'!!strip(put(index, best.)), strip(variable));
1051835   +         tempvar = strip("&em_nodeid")!!'_'!!strip(variable);
1051836   +         if length(tempvar)<=32 then call symput('tempvars'!!strip(put(index, best.)), strip(tempvar));
1051837   +         else call symput('tempvars'!!strip(put(index, best.)), strip("&prefixString")!!strip(put(index, best.)));
1051838   +      end;
1051839   +      if eof then
1051840   +         call symput('prednum', strip(put(index, best.)));
1051841   +   run;
1051843   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
1051844   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
1051846   +   filename loopflow "&em_user_loopflowcode";
1051847   +   filename looppub "&em_user_looppubcode";
1051849   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
1051850   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
1051852   +   %if "&emloopnumber" = "1" %then %do;
1051853   +       data _null_;
1051854   +          rc = fdelete('loopflow');
1051855   +          rc = fdelete('looppub');
1051856   +       run;
1051857   +       data _null_;
1051858   +          file loopflow;
1051859   +          put "&em_codebar;";
1051860   +          put "* &em_nodeid: ;" ;
1051861   +          put "* User: &sysuserid;";
1051862   +          put "* Date: &sysdate: &systime;";
1051863   +          put "&em_codebar ;";
1051864   +          put "* Ensemble Code;";
1051865   +          put "&em_codebar ;";
1051866   +          put "* &headerString: Loop=1;";
1051867   +          put "* Temporary Variables;";
1051868   +          %do i= 1 %to &prednum;
1051869   +              put "drop &&tempvars&i;";
1051870   +              put "&&tempvars&i = 0;";
1051871   +          %end;
1051872   +       run;
1051873   +       %em_copyfile(infref=loopflow, outfref=looppub);
1051874   +   %end;
1051876   +   %let j=&emloopnumber;
1051877   +   %do i = 1 %to &loopcodenum;
1051878   +       %let fsourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
1051879   +       %let psourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
1051881   +       %if (&&loopnode&i eq &em_nodeid ) or
1051882   +           ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex )) %then %do;
1051883   +           data _null_;
1051884   +              file loopflow mod;
1051885   +              put "&em_codebar;";
1051886   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1051887   +              put "* User: &sysuserid;";
1051888   +              put "* Date: &sysdate: &systime;";
1051889   +              put "* &headerString: Loop=&j;";
1051890   +              put "&em_codebar;";
1051891   +           run;
1051892   +           data _null_;
1051893   +              file looppub mod;
1051894   +              put "&em_codebar;";
1051895   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1051896   +              put "* User: &sysuserid;";
1051897   +              put "* Date: &sysdate: &systime;";
1051898   +              put "* &headerString: Loop=&j;";
1051899   +              put "&em_codebar;";
1051900   +           run;
1051901   +       %end;
1051903   +       %if &&loopnode&i ne &em_nodeid %then %do;
1051904   +           %if (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex ) %then %do;
1051905   +               filename x catalog "&fsourceEntry";
1051906   +               %em_copyfile(infref=x, outfref=loopflow, append=Y);
1051907   +               filename x;
1051909   +               filename y catalog "&psourceEntry";
1051910   +               %em_copyfile(infref=y, outfref=looppub, append=Y);
1051911   +               filename y;
1051912   +           %end;
1051913   +       %end;
1051914   +       %else %do;
1051915   +           %if "&j" ne "1" %then %do;
1051916   +               %let weight = %eval(&j-1);
1051917   +               data _null_;
1051918   +                  file loopflow mod;
1051919   +                  put "&em_codebar;";
1051920   +                  %if "&j" ne "&endloopnum" %then %do;
1051921   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1051922   +                  %end;
1051923   +                  %else %do;
1051924   +                      put "* &headerString: accumulate final probabilities;";
1051925   +                  %end;
1051926   +                  put "&em_codebar;";
1051927   +                  %do k=1 %to &prednum;
1051928   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1051929   +                  %end;
1051930   +               run;
1051931   +               data _null_;
1051932   +                  file looppub mod;
1051933   +                  put "&em_codebar;";
1051934   +                  %if "&j" ne "&endloopnum" %then %do;
1051935   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1051936   +                  %end;
1051937   +                  %else %do;
1051938   +                      put "* &headerString: accumulate final probabilities;";
1051939   +                  %end;
1051940   +                  %do k=1 %to &prednum;
1051941   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1051942   +                  %end;
1051943   +               run;
1051944   +           %end;
1051945   +           %if "&j" ne "&endloopnum" %then %do;
1051946   +               data _null_;
1051947   +                  file loopflow mod;
1051948   +                  put "&em_codebar;";
1051949   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1051950   +                  put "&em_codebar;";
1051951   +               %do k=1 %to &prednum;
1051952   +                  put "&&tempvars&k = &&predvars&k;";
1051953   +               %end;
1051954   +               run;
1051955   +               data _null_;
1051956   +                  file looppub mod;
1051957   +                  put "&em_codebar;";
1051958   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1051959   +                  put "&em_codebar;";
1051960   +               %do k=1 %to &prednum;
1051961   +                   put "&&tempvars&k = &&predvars&k;";
1051962   +               %end;
1051963   +               run;
1051964   +           %end;
1051966   +       %end;
1051967   +   %end;
1051969   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
1051970   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
1051972   +   filename loopflow;
1051973   +   filename looppub;
1051974   +   filename empub;
1051976   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
1051977   +   %let gpTrain=;
1051978   +   %let gpValidate=;
1051979   +   %let gpTest=;
1051981   +   data _null_;
1051982   +      set &groupImportDs;
1051983   +      select(upcase(port));
1051984   +          when('DATA')     call symput('gpTrain',    strip(dataset));
1051985   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
1051986   +          when('TEST')     call symput('gpTest',     strip(dataset));
1051987   +       otherwise;
1051988   +      end;
1051989   +   run;
1051991   +   %if "&gpTrain" ne "" %then %do;
1051993   +       %scoreTables(data=&em_lib..&gpTrain,     out=&em_export_train,    scoreref=emflow, prescore=Y);
1051995   +       %if &targetType ne INTERVAL %then %do;
1051996   +           %makeClassificationVars(target=&targetname, data=&em_export_train, decmeta=&endgrp_decmeta, publish=N, fref=emflow);
1051997   +       %end;
1051999   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
1052001   +       %let decflow = %sysfunc(Pathname(WORK))&em_dsep._decflow.sas;
1052003   +       %em_decidecode(data=&em_export_train , decdata=&ENDGRP_DECDATA , decmeta=&ENDGRP_DECMETA ,
1052004   +                                                           noresfile=, resfile=%nrbquote(&decflow));
1052006   +       filename _decflow "&decflow";
1052007   +       %em_copyfile(infref=_decflow, outfref=emflow, append=Y);
1052008   +       filename _decflow;
1052010   +   %end;
1052012   +   %if "&gpTrain" ne "" %then
1052013   +        %scoreTables(data=&em_lib..%sysfunc(strip(&gpTrain)),     out=&em_export_train,    scoreref=emflow);
1052014   +   %if "&gpValidate" ne "" %then
1052015   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),  out=&em_export_validate, scoreref=emflow);
1052016   +   %if "&gpTest" ne "" %then
1052017   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),      out=&em_export_test,     scoreref=emflow);
1052019   +   filename emflow;
1052021   +%mend boostbagcode;
1052023   +%macro score;
1052025   +   filename _dec catalog "sashelp.emutil.em_decidecode.source";
1052026   +   %inc _dec;
1052027   +   filename _dec;
1052029   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %goto doendpl;
1052031   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1052032   +       %let emexceptionstring = nomodeltarget;
1052033   +       %goto doendpl;
1052034   +   %end;
1052036   +   %LET GROUPID=;
1052037   +   %let LOOPTYPE=;
1052038   +   data _null_;
1052039   +      set &em_import_data_eminfo;
1052040   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1052041   +      call symput('GROUPID',   strip(data));
1052042   +      call symput('LOOPTYPE', strip(key));
1052043   +   run;
1052045   +   %em_getname(key=PATH, type=DATA);
1052047   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
1052048   +   %include temp;
1052049   +   filename temp;
1052051   +   %em_gettrainpath(NODEID=&em_nodeid, OUTPATH= score_path);
1052053   +   %if &emloopnumber = 1 and %sysfunc(exist(&em_user_path)) %then %do;
1052054   +       %let deleteString = &em_nodeid._path;
1052055   +       proc datasets lib=&em_lib nolist;
1052056   +          delete &deleteString;
1052057   +       run;
1052058   +       quit;
1052059   +   %end;
1052061   +   %if ^%sysfunc(exist(WORK.score_path)) %then %goto doendpl;
1052063   +   data score_path;
1052064   +      retain LOOPID &emloopnumber;
1052065   +      set score_path;
1052066   +   run;
1052068   +   proc append base=&em_user_path  data=score_path;
1052069   +   run;
1052071   +   %let EnsembleIndex=0;
1052072   +   data _null_;
1052073   +      retain index 0 ensembleIndex 0;
1052074   +      set score_Path end=eof;
1052075   +      if nodelabel = "&groupid" or index then do;
1052076   +         index + 1;
1052077   +         call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
1052078   +         call symput('loopdesc'!!strip(put(index, best.)), strip(component));
1052079   +      end;
1052080   +      if component='Ensemble' then ensembleIndex = index;
1052081   +      if eof then do;
1052082   +         call symput('loopcodenum', strip(put(index, best.)));
1052083   +         call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
1052084   +      end;
1052085   +   run;
1052087   +   proc datasets lib=work nolist;
1052088   +      delete score_Path;
1052089   +   run;
1052090   +   quit;
1052092   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
1052093   +       %boostbagcode(groupid=&groupid, type=&looptype, EnsembleIndex=&EnsembleIndex);
1052095   +   %doendpl:
1052097   +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename _dec catalog "sashelp.emutil.em_decidecode.source";
NOTE: %INCLUDE (level 1) file _DEC is file SASHELP.EMUTIL.EM_DECIDECODE.SOURCE.
1052098   +/*
1052099   +       MACRO: EM_DECIDECODE
1052100   +
1052101   +       PURPOSE: Generate EM Decide Score Code for non-interval target.
1052102   +       SUPPORT: Taiyeong Lee
1052103   +
1052104   +       HISTORY: 01OCT04 Initial code
1052105   +       NOTE:    All parameters are optional, call %EM_DECIDECODE()
1052106   +                to add the corresponding decision code
1052107   +
1052108   +*/
1052109   +
1052110   +
1052111   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
1052112   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
1052113   +
1052114   +    %do;
1052115   +    %let m_data      = &data;
1052116   +    %let m_decdata   = &decdata;
1052117   +    %let m_decmeta   = &decmeta;
1052118   +    %let m_noresfile = &noresfile;
1052119   +    %let m_resfile   = &resfile;
1052120   +    dm "afa c=sashelp.emutil.decidecode.scl";
1052121   +  %end;
1052122   +%mend EM_DECIDECODE;
1052123   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename _dec;
NOTE: Fileref _DEC has been deassigned.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Tree_EMINFO;
MPRINT(SCORE):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(SCORE):   call symput('GROUPID', strip(data));
MPRINT(SCORE):   call symput('LOOPTYPE', strip(key));
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
1052124   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
1052125   +   proc display c=sashelp.emcore.pathscorecode.scl;
1052126   +   run;
1052127   +%mend EM_GETTRAINPATH;
1052128   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
1052129    data score_path;
MPRINT(EM_GETTRAINPATH):   data score_path;
1052130    length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
1052131    nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
1052132    parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
1052133    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1052134    component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
1052135    tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
1052136    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052137    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052138    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052139    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052140    output;
MPRINT(EM_GETTRAINPATH):   output;
1052141    nodelabel="Filter";
MPRINT(EM_GETTRAINPATH):   nodelabel="Filter";
1052142    parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
1052143    description="Filtering";
MPRINT(EM_GETTRAINPATH):   description="Filtering";
1052144    component="Filter";
MPRINT(EM_GETTRAINPATH):   component="Filter";
1052145    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1052146    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052147    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052148    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052149    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052150    output;
MPRINT(EM_GETTRAINPATH):   output;
1052151    nodelabel="Impt";
MPRINT(EM_GETTRAINPATH):   nodelabel="Impt";
1052152    parent="Filter";
MPRINT(EM_GETTRAINPATH):   parent="Filter";
1052153    description="Imputation";
MPRINT(EM_GETTRAINPATH):   description="Imputation";
1052154    component="Impute";
MPRINT(EM_GETTRAINPATH):   component="Impute";
1052155    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1052156    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052157    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052158    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052159    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052160    output;
MPRINT(EM_GETTRAINPATH):   output;
1052161    nodelabel="EMCODE2";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE2";
1052162    parent="Impt";
MPRINT(EM_GETTRAINPATH):   parent="Impt";
1052163    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1052164    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1052165    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1052166    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052167    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052168    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052169    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052170    output;
MPRINT(EM_GETTRAINPATH):   output;
1052171    nodelabel="Meta2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta2";
1052172    parent="EMCODE2";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE2";
1052173    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1052174    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1052175    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1052176    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052177    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052178    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052179    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052180    output;
MPRINT(EM_GETTRAINPATH):   output;
1052181    nodelabel="EMCODE3";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE3";
1052182    parent="Meta2";
MPRINT(EM_GETTRAINPATH):   parent="Meta2";
1052183    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1052184    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1052185    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1052186    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052187    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052188    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052189    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052190    output;
MPRINT(EM_GETTRAINPATH):   output;
1052191    nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
1052192    parent="EMCODE3";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE3";
1052193    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1052194    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1052195    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1052196    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052197    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052198    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052199    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052200    output;
MPRINT(EM_GETTRAINPATH):   output;
1052201    nodelabel="Meta";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta";
1052202    parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
1052203    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1052204    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1052205    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1052206    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052207    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052208    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052209    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052210    output;
MPRINT(EM_GETTRAINPATH):   output;
1052211    nodelabel="Trans2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans2";
1052212    parent="Meta";
MPRINT(EM_GETTRAINPATH):   parent="Meta";
1052213    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1052214    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1052215    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1052216    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052217    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052218    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052219    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052220    output;
MPRINT(EM_GETTRAINPATH):   output;
1052221    nodelabel="Grp";
MPRINT(EM_GETTRAINPATH):   nodelabel="Grp";
1052222    parent="Trans2";
MPRINT(EM_GETTRAINPATH):   parent="Trans2";
1052223    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1052224    component="StartGroup";
MPRINT(EM_GETTRAINPATH):   component="StartGroup";
1052225    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1052226    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052227    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052228    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052229    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052230    output;
MPRINT(EM_GETTRAINPATH):   output;
1052231    nodelabel="Tree";
MPRINT(EM_GETTRAINPATH):   nodelabel="Tree";
1052232    parent="Grp";
MPRINT(EM_GETTRAINPATH):   parent="Grp";
1052233    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1052234    component="DecisionTree";
MPRINT(EM_GETTRAINPATH):   component="DecisionTree";
1052235    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1052236    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052237    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052238    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052239    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052240    output;
MPRINT(EM_GETTRAINPATH):   output;
1052241    nodelabel="EndGrp";
MPRINT(EM_GETTRAINPATH):   nodelabel="EndGrp";
1052242    parent="Tree";
MPRINT(EM_GETTRAINPATH):   parent="Tree";
1052243    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1052244    component="EndGroup";
MPRINT(EM_GETTRAINPATH):   component="EndGroup";
1052245    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1052246    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1052247    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1052248    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1052249    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1052250    output;
MPRINT(EM_GETTRAINPATH):   output;
1052251    run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK.SCORE_PATH has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(SCORE):  ;
MPRINT(SCORE):   data score_path;
MPRINT(SCORE):   retain LOOPID 3;
MPRINT(SCORE):   set score_path;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: The data set WORK.SCORE_PATH has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc append base=EMWS1.EndGrp_PATH data=score_path;
MPRINT(SCORE):   run;
 
NOTE: Appending WORK.SCORE_PATH to EMWS1.ENDGRP_PATH.
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: 12 observations added.
NOTE: The data set EMWS1.ENDGRP_PATH has 36 observations and 10 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   retain index 0 ensembleIndex 0;
MPRINT(SCORE):   set score_Path end=eof;
MPRINT(SCORE):   if nodelabel = "Grp" or index then do;
MPRINT(SCORE):   index + 1;
MPRINT(SCORE):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(SCORE):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(SCORE):   end;
MPRINT(SCORE):   if component='Ensemble' then ensembleIndex = index;
MPRINT(SCORE):   if eof then do;
MPRINT(SCORE):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(SCORE):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete score_Path;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.SCORE_PATH (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: EndGrp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1052252    *------------------------------------------------------------*;
1052253    * End SCORE: EndGrp;
1052254    *------------------------------------------------------------*;
1052255
 
1052256    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1052257    * EndGrp: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * EndGrp: Scoring DATA data;
1052258    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1052259    data EMWS1.EndGrp_TRAIN
1052260    / view=EMWS1.EndGrp_TRAIN
1052261    ;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp_TRAIN / view=EMWS1.EndGrp_TRAIN ;
1052262    set EMWS1.Tree_TRAIN
1052263    ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN ;
1052264    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1052265    quit;
 
1052267    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
1052268    * EndGrp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp: Computing metadata for TRAIN data;
1052269    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp_TRAIN out=WORK.M1JPPATC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JPPATC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JPPATC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JPPATC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1JPPATC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3F9EI79 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0HB1SMK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   set WORK.M3F9EI79;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Tree_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1052615    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1052616    set EMWS1.EndGrp_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMINFO;
1052617    where DATA='EndGrp' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
1052618    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP_EMINFO.
      WHERE (DATA='EndGrp') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1052619    data EMWS1.EndGrp_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMINFO;
1052620    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1052621    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1052622    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1052626    run;
1052627    data EMWS1.EndGrp_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp_EMINFO;
1052628    set EMWS1.EndGrp_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMINFO WORK.MODELTEMP_INFO;
1052629    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1052630    proc sort data = EMWS1.EndGrp_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp_EMINFO NOTHREADS;
1052631    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1052632    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP_EMINFO.
NOTE: The data set EMWS1.ENDGRP_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1052633    proc sort data = EMWS1.Tree_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1052634    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1052635    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1052636    proc sort data = EMWS1.EndGrp_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1052637    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1052638    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1052639    data EMWS1.EndGrp_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp_EMINFO;
1052640    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1052641    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1052642    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1052643    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1052644    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1052645    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1052646    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.ENDGRP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:50 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:36:50 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0H3ONKG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0H3ONKG new;
MPRINT(EM_DIAGRAM):   run;
1052670    data EMWS1.EndGrp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMOUTFIT;
1052671    set EMWS1.EndGrp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMOUTFIT;
1052672    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1052673    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1052674    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1052675    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1052676    proc sort data=EMWS1.EndGrp_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp_EMREPORTFIT nothreads;
1052677    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1052678    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1052679    %let _EMwarndup = 0;
1052680    %let _EMtargetdup =;
1052681    %let _EMASEtargetdup =;
1052682    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1052683    set EMWS1.EndGrp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMOUTFIT;
1052684    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1052685    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1052686    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1052687    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1052688    end;
MPRINT(EM_DIAGRAM):   end;
1052689    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1052690    proc sort data=EMWS1.Tree_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_CMeta_TRAIN out=WORK.SUBSETINMETA;
1052691    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1052692    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 23 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1052693    proc sort data=EMWS1.EndGrp_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
1052694    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1052695    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.ENDGRP_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
1052696    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1052697    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1052698    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1052699    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 23 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 23 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1052700    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1052701    set EMWS1.EndGrp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_CMeta_TRAIN;
1052702    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
1052703    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1052704    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1052705    set EMWS1.EndGrp_TRAIN(keep=
1052706    F_DepVar
1052707    I_DepVar
1052708    P_DepVar0
1052709    P_DepVar1
1052710    Q_DepVar0
1052711    Q_DepVar1
1052712    R_DepVar0
1052713    R_DepVar1
1052714    U_DepVar
1052715    _WARN_
1052716    DepVar
1052717    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 Q_DepVar0 Q_DepVar1 R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1052718    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2187 observations read from the data set EMWS1.GRP_TRAIN.
NOTE: View EMWS1.ENDGRP_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2187 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: There were 2187 observations read from the data set EMWS1.ENDGRP_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2187 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
1056905    %let _cn = %sysfunc(getoption(CENTER));
1056906    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1056907    proc print data=EMWS1.EndGrp_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp_EMREPORTFIT noobs label;
1056908    var STAT LABEL TRAIN
1056909    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
1056910    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1056911    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1056912    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1056913    run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 691.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1056914    title10;
MPRINT(EM_DIAGRAM):   title10;
1056915    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1056916    proc sort data=EMWS1.EndGrp_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp_EMCLASSIFICATION nothreads;
1056917    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1056918    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1056919    %let _cn = %sysfunc(getoption(CENTER));
1056920    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1056921    proc print data=EMWS1.EndGrp_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp_EMCLASSIFICATION noobs label;
1056922    var from into pct_row pct_col count percent
1056923    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1056924    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1056925    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1056926    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1056927    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1056928    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1056929    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1056930    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1056931    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1056932    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1056933    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1056934    run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 692.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1056935    title9;
MPRINT(EM_DIAGRAM):   title9;
1056936    title10;
MPRINT(EM_DIAGRAM):   title10;
1056937    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1056938    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1056939    modify EndGrp_EMRANK;
MPRINT(EM_DIAGRAM):   modify EndGrp_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1056940    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1056941    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1056942    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP_EMRANK.DATA.
1056943    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
1056944    %let _cn = %sysfunc(getoption(CENTER));
1056945    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1056946    proc print data=EMWS1.EndGrp_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp_EMRANK label noobs;
1056947    var
1056948    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1056949    by
1056950    notsorted DATAROLE
1056951    notsorted TARGET
1056952    notsorted TARGETLABEL
1056953    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1056954    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1056955    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1056956    run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP_EMRANK.
NOTE: The PROCEDURE PRINT printed page 693.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1056957    title10;
MPRINT(EM_DIAGRAM):   title10;
1056958    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1056959    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1056960    modify EndGrp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify EndGrp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1056961    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1056962    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1056963    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP_EMSCOREDIST.DATA.
1056964    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
1056965    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1056966    set EMWS1.Grp_GROUPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp_GROUPINFO;
1056967    where _LOOP_=3;
MPRINT(EM_DIAGRAM):   where _LOOP_=3;
1056968    call symput('LOOP_WHERE', strip(_wheredesc_));
MPRINT(EM_DIAGRAM):   call symput('LOOP_WHERE', strip(_wheredesc_));
1056969    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP_GROUPINFO.
      WHERE _LOOP_=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1056970    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1056971    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1056972    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1056973    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1056974    set EMWS1.EndGrp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMRANK;
1056975    _LOOP_ =3;
MPRINT(EM_DIAGRAM):   _LOOP_ =3;
1056976    _WHERE_ ="^(cv_var =3)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =3)";
1056977    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP_EMRANK.
NOTE: The data set WORK.TEMP has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1056978    data EMWS1.EndGrp_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMRANK_LOOP;
1056979    set EMWS1.EndGrp_EMRANK_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMRANK_LOOP temp;
1056980    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.ENDGRP_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP_EMRANK_LOOP has 60 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1056981    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1056982    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1056983    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1056984    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1056985    set EMWS1.EndGrp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMSCOREDIST;
1056986    _LOOP_ =3;
MPRINT(EM_DIAGRAM):   _LOOP_ =3;
1056987    _WHERE_ ="^(cv_var =3)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =3)";
1056988    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.ENDGRP_EMSCOREDIST.
NOTE: The data set WORK.TEMP has 7 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1056989    data EMWS1.EndGrp_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMSCOREDIST_LOOP;
1056990    set EMWS1.EndGrp_EMSCOREDIST_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMSCOREDIST_LOOP temp;
1056991    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP_EMSCOREDIST_LOOP.
NOTE: There were 7 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP_EMSCOREDIST_LOOP has 19 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1056992    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1056993    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1056994    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1056995    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1056996    set EMWS1.EndGrp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMOUTFIT;
1056997    _LOOP_ =3;
MPRINT(EM_DIAGRAM):   _LOOP_ =3;
1056998    _WHERE_ ="^(cv_var =3)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =3)";
1056999    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP_EMOUTFIT.
NOTE: The data set WORK.TEMP has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1057000    data EMWS1.EndGrp_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMOUTFIT_LOOP;
1057001    set EMWS1.EndGrp_EMOUTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMOUTFIT_LOOP temp;
1057002    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.ENDGRP_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP_EMOUTFIT_LOOP has 3 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1057003    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1057004    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1057005    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1057006    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1057007    set EMWS1.EndGrp_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMREPORTFIT;
1057008    _LOOP_ =3;
MPRINT(EM_DIAGRAM):   _LOOP_ =3;
1057009    _WHERE_ ="^(cv_var =3)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =3)";
1057010    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP_EMREPORTFIT.
NOTE: The data set WORK.TEMP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1057011    data EMWS1.EndGrp_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMREPORTFIT_LOOP;
1057012    set EMWS1.EndGrp_EMREPORTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMREPORTFIT_LOOP temp;
1057013    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.ENDGRP_EMREPORTFIT_LOOP.
NOTE: There were 8 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP_EMREPORTFIT_LOOP has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1057014    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1057015    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1057016    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1057017    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1057018    set EMWS1.EndGrp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMCLASSIFICATION;
1057019    _LOOP_ =3;
MPRINT(EM_DIAGRAM):   _LOOP_ =3;
1057020    _WHERE_ ="^(cv_var =3)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =3)";
1057021    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP_EMCLASSIFICATION.
NOTE: The data set WORK.TEMP has 4 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1057022    data EMWS1.EndGrp_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp_EMCLASSIFICATION_LOOP;
1057023    set EMWS1.EndGrp_EMCLASSIFICATION_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMCLASSIFICATION_LOOP temp;
1057024    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP_EMCLASSIFICATION_LOOP has 12 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
