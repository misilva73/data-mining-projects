*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:26:30 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:28 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:26:28 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3F3Y2_2 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3F3Y2_2 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMGROUP\EMLOG_1.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:28 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMGROUP\EMOUTPUT_1.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:28 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
111576     proc freq data=EMWS1.Grp5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp5_VariableSet noprint;
111577     table ROLE*LEVEL/out=WORK.Grp5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp5META;
111578     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP5_VARIABLESET.
NOTE: The data set WORK.GRP5META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
111579     proc print data=WORK.Grp5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp5META label noobs;
111580     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
111581     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
111582     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
111583     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
111584     run;
 
NOTE: There were 4 observations read from the data set WORK.GRP5META.
NOTE: The PROCEDURE PRINT printed page 21.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
111585     title10;
MPRINT(EM_DIAGRAM):   title10;
111586     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp5: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111909     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
111910     * Grp5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp5: Generation of macros and macro variables;
111911     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
111912     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
111913     %let EMEXCEPTIONSTRING=;
111914     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
111915     * TRAIN: Grp5;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp5;
111916     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111917     %let EM_ACTION = TRAIN;
111918     %let syscc = 0;
111919     %macro main;
111920
111921        filename temp catalog 'sashelp.emutil.gp_macros.source';
111922        %include temp;
111923        filename temp;
111924
111925        %SetProperties;
111926
111927        %if %upcase(&EM_ACTION) = CREATE %then %do;
111928
111929            filename temp catalog 'sashelp.emutil.gp_create.source';
111930            %include temp;
111931            filename temp;
111932
111933            %create;
111934        %end;
111935        %else
111936        %if %upcase(&EM_ACTION) = TRAIN %then %do;
111937
111938            filename temp catalog 'sashelp.emutil.gp_train.source';
111939            %include temp;
111940            filename temp;
111941
111942            %train;
111943        %end;
111944        %else
111945        %if %upcase(&EM_ACTION) = SCORE %then %do;
111946
111947            filename temp catalog 'sashelp.emutil.gp_score.source';
111948            %include temp;
111949            filename temp;
111950
111951            %score;
111952        %end;
111953        %else
111954        %if %upcase(&EM_ACTION) = REPORT %then %do;
111955
111956            filename temp catalog 'sashelp.emutil.gp_report.source';
111957            %include temp;
111958            filename temp;
111959
111960            %report;
111961
111962        %end;
111963        %else
111964        %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
111965
111966            filename temp catalog 'sashelp.emutil.gp_postloop.source';
111967            %include temp;
111968            filename temp;
111969
111970            %postloop;
111971
111972        %end;
111973
111974        %doendm:
111975     %mend main;
111976
111977     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
111978    +%macro SetProperties;
111979    +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
111980    +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
111981    +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
111982    +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
111983    +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
111984    +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
111985    +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
111986    +%mend SetProperties;
111987    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
111988    +%macro scoreValidTest(data=, out=);
111990    +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
111991    +       data &out / view = &out;
111992    +          retain _RESAMP_ 1;
111993    +          set &data;
111994    +       run;
111995    +   %end;
111997    +%mend scoreValidTest;
111999    +%macro getVariables;
112000    +   %if "&emloopnumber" = "1" %then %do;
112001    +       data _null_;
112002    +          retain numgoup 0;
112003    +          set &em_data_variableset end=eof;
112004    +          %if &em_num_target = 1 %then %do;
112005    +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
112006    +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
112007    +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
112008    +              %end;
112009    +              %else
112010    +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
112011    +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
112012    +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
112013    +              %end;
112014    +          %end;
112015    +          %else %do;
112016    +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
112017    +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
112018    +              else
112019    +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
112020    +          %end;
112021    +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
112022    +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
112023    +             numgroup + 1;
112024    +          end;
112025    +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
112026    +       run;
112027    +    %end;
112028    +    %else %do;
112029    +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
112030    +            data _null_;
112031    +               retain numgoup 0;
112032    +               set &em_data_variableset end=eof;
112033    +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
112034    +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
112035    +               numgroup + 1;
112036    +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
112037    +            run;
112038    +          %end;
112039    +            %else
112040    +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
112041    +            %em_getName(key=BOOSTINFO,   type=DATA);
112042    +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
112043    +                data _null_;
112044    +                   set &em_user_boostinfo;
112045    +                   call symput('emboostvar', strip(_TARGET_));
112046    +                run;
112047    +            %end;
112048    +        %end;
112049    +        %else
112050    +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
112051    +                %em_getName(key=BAGINFO,   type=DATA);
112052    +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
112053    +                    data _null_;
112054    +                       set &em_user_baginfo;
112055    +                      call symput('embagvar', strip(_TARGET_));
112056    +                    run;
112057    +                %end;
112058    +            %end;
112059    +    %end;
112060    +%mend getVariables;
112062    +%macro gp_bag(targetname=);
112063    +   %if %index(&EM_DEBUG, _ALL_) %then %do;
112064    +        %put LOOP MODE:   &emloopmode ;
112065    +        %put LOOP NUMBER: &emloopnumber;
112066    +        %put BAGGING TARGET: &targetname;
112067    +   %end;
112069    +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
112070    +   %include temp;
112071    +   filename temp;
112073    +   %em_getName(key=BAGINFO,    type=DATA);
112074    +   %em_getName(key=EMLOOPINFO, type=DATA);
112076    +   %if &emloopnumber = 1 %then %do;
112077    +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
112078    +       data _null_;
112079    +          file gpdelta;
112080    +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
112081    +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
112082    +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
112083    +          put "end;";
112084    +       run;
112085    +       filename gpdelta;
112087    +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
112088    +           proc datasets lib=&em_lib nolist;
112089    +              delete &em_nodeid._baginfo;
112090    +           run;
112091    +       %end;
112093    +       %if "%em_freq" ne "" %then %do;
112094    +           proc means data=&em_import_data sum;
112095    +              var %em_freq;
112096    +              output out = _tempds sum=sumfreq;
112097    +           run;
112098    +           quit;
112099    +           data _null_;
112100    +              set _tempDs;
112101    +              call symput('_sumfreq', put(sumfreq, best12.));
112102    +           run;
112103    +       %end;
112104    +       %else %do;
112105    +           proc sql noprint;
112106    +              select count(*) into :_sumfreq
112107    +              from &em_import_data;
112108    +           quit;
112109    +       %end;
112111    +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
112112    +           data _null_;
112113    +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
112114    +           run;
112115    +       %end;
112116    +       %else
112117    +           %let _size = &em_property_sizeobs;
112119    +       data &em_user_baginfo;
112120    +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
112121    +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
112122    +          _TARGET_   ="&targetname";
112123    +          _SUMFREQ_  =&_sumfreq;
112124    +           _SIZE_    = &_size;
112125    +          output;
112126    +       run;
112127    +       data &em_user_emloopinfo;
112128    +          length MODE $8;
112129    +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
112130    +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112131    +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
112132    +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
112133    +           MODE='Bagging';
112134    +       run;
112136    +       data &em_data_eminfo;
112137    +          length TARGET KEY $32  DATA $43;
112138    +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
112139    +       run;
112140    +   %end;
112141    +   %else %do;
112142    +      data _null_;
112143    +         set &em_user_baginfo;
112144    +         call symput('_sumfreq', put(_sumfreq_, best12.));
112145    +         call symput('_size', put(_size_, best12.));
112146    +      run;
112147    +   %end;
112149    +   %let bagsumFreq  = &_sumFreq;
112150    +   %let bagSize     = &_Size;
112152    +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
112153    +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
112155    +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
112156    +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
112158    +   %doendbg:
112160    +%mend gp_bag;
112163    +%macro gp_boost(targetname=);
112164    +   %if %index(&EM_DEBUG, _ALL_) %then %do;
112165    +       %put LOOP MODE:   &emloopmode ;
112166    +       %put LOOP NUMBER: &emloopnumber;
112167    +        %put BAGGING TARGET: &targetname;
112168    +   %end;
112170    +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
112171    +   %include temp;
112172    +   filename temp;
112174    +   %em_getname(key=EMLOOPINFO, type=DATA);
112175    +   %em_getname(key=BOOSTWEIGHT, type=DATA);
112176    +   %em_getname(key=BOOSTSCORE,  type=DATA);
112177    +   %em_getName(key=BOOSTINFO,   type=DATA);
112179    +   %if &emloopnumber = 1 %then %do;
112180    +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
112181    +       data _null_;
112182    +          file gpdelta;
112183    +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
112184    +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
112185    +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
112186    +          put "end;";
112187    +       run;
112188    +       filename gpdelta;
112190    +       %let deleteString =;
112191    +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
112192    +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
112193    +       %if "&deleteString" ne "" %then %do;
112194    +           proc datasets lib=&em_lib nolist;
112195    +              delete &deleteString;
112196    +           run;
112197    +       %end;
112199    +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
112201    +       data &em_user_boostinfo;
112202    +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
112203    +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
112204    +          _TARGET_          ="&targetname";
112205    +          _DMBOOST_DIVISOR_ =&_dmboodiv;
112206    +          _SUMFREQ_         =&_sumfreq;
112207    +       run;
112208    +       data &em_user_emloopinfo;
112209    +          length MODE $8;
112210    +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
112211    +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112212    +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
112213    +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
112214    +           MODE='Boosting';
112215    +       run;
112217    +       data &em_data_eminfo;
112218    +          length TARGET KEY $32  DATA $43;
112219    +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
112220    +       run;
112222    +   %end;
112223    +   %else %do;
112224    +       %global _dmboodiv;
112225    +       %let dmboosf = %upcase(&targetname);
112226    +       %if %sysfunc(length(&targetname))> 30 %then
112227    +           %let dmboosf =  %substr(&targetname, 1, 30);
112229    +       data _null_;
112230    +          set &em_user_boostinfo;
112231    +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
112232    +       run;
112234    +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
112236    +       data &em_user_boostinfo;
112237    +          set &em_user_boostinfo;
112238    +          _DMBOOST_DIVISOR_ =&_dmboodiv;
112239    +       run;
112241    +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
112243    +   %end;
112245    +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
112246    +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
112248    +   %doendbst:
112250    +%mend gp_boost;
112252    +%macro gp_group(numgroupvar=, groupvar=);
112253    +   %em_getname(key=GROUPINFO, type=DATA);
112254    +   %em_getName(key=LOOPINFO,  type=DATA);
112255    +   %em_getName(key=EMGROUPINFO, type=DATA);
112257    +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
112258    +       ods listing close;
112259    +       %if &numgroupvar = 1 %then %do;
112260    +           ods output onewayfreqs=temp;
112261    +       %end;
112262    +       %else %do;
112263    +           ods output crosstabfreqs=temp;
112264    +       %end;
112265    +       proc freq data=&em_import_data;
112266    +          table
112268    +          %let tableString =;
112269    +          %let freqString  =;
112270    +          %do i=1 %to &numgroupvar;
112271    +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
112272    +              %if &i<&numgroupvar %then %let tableString = &tableString *;
112273    +              %let freqString = &freqString.1;
112274    +          %end;
112275    +          &tableString / missing;
112276    +       run;
112277    +       ods listing;
112278    +       %if &numgroupvar = 1 %then %do;
112279    +           data _null_;
112280    +              retain totalobs 0;
112281    +              set temp end=eof;
112282    +              totalobs + frequency;
112283    +              if eof then
112284    +                 call symput('_totalObs_', put(totalobs, best.));
112285    +           run;
112287    +           proc sort data=temp out=loopinfo nodupkey;
112288    +              by &groupvar;
112289    +              where frequency>=&em_property_minimumObs;
112290    +           run;
112291    +       %end;
112292    +       %else %do;
112293    +           data _null_;
112294    +              set temp;
112295    +              where _type_='00';
112296    +              call symput('_totalObs_', put(frequency, best.));
112297    +           run;
112298    +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
112299    +              by &groupvar;
112300    +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
112301    +           run;
112302    +       %end;
112304    +       %em_getname(key=PRECODE, type=FILE, extension=sas);
112305    +       filename _pregrp "&em_user_precode";
112307    +       %let dsid = %sysfunc(open(loopinfo));
112308    +       %do i=1 %to &numgroupvar;
112309    +           %let varname = %scan(&groupvar, &i, %str( ));
112310    +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
112311    +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
112312    +           %if %index(&varfmt, -) %then %do;
112313    +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
112314    +           %end;
112316    +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
112317    +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
112318    +           %let fmttype&i = &vartype;
112319    +           %let fmtlen&i  = &varlen;
112321    +           %let fmtvar&i =;
112322    +           %let fmt&i    =;
112323    +           %if "&varfmt" ne "" %then %do;
112324    +              %let fmtvar&i  = _FORMAT&i._;
112325    +              %let fmt&i     = &varfmt;
112326    +           %end;
112327    +       %end;
112328    +       %let dsid = %sysfunc(close(&dsid));
112330    +       data _null_;
112331    +          %do i=1 %to &numgroupvar;
112332    +              %if "&&fmt&i" ne "" %then %do;
112333    +                  retain len_&i 0;
112334    +              %end;
112335    +          %end;
112337    +          set loopinfo end=eof;
112338    +          file _pregrp;
112340    +          %do i=1 %to &numgroupvar;
112341    +              %let varname = %scan(&groupvar, &i, %str( ));
112342    +              %if "&&fmt&i" ne "" %then %do;
112343    +                 if length(put(&varname, &&fmt&i)) > len_&i then
112344    +                    len_&i = length(put(&varname, &&fmt&i));
112345    +              %end;
112346    +          %end;
112348    +          if eof then do;
112349    +             %do i=1 %to &numgroupvar;
112350    +                 %let varname = %scan(&groupvar, &i, %str( ));
112351    +                 %if "&&fmt&i" ne "" %then %do;
112352    +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
112353    +                     put "drop &&fmtvar&i" len_&i ";";
112354    +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
112355    +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
112356    +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
112357    +                 %end;
112358    +              %end;
112359    +          end;
112360    +      run;
112362    +      data loopinfo;
112363    +         set loopinfo;
112364    +         %do i=1 %to &numgroupvar;
112365    +             %let varname = %scan(&groupvar, &i, %str( ));
112366    +             %if "&&fmt&i" ne "" %then %do;
112367    +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
112368    +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
112369    +             %end;
112370    +         %end;
112371    +      run;
112372    +      filename _pregrp;
112374    +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
112375    +          data temp;
112376    +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
112377    +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
112378    +      %end;
112379    +      %else %do;
112380    +          data &em_user_groupinfo;
112381    +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
112382    +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
112383    +             retain _TARGET_ '';
112384    +      %end;
112386    +          set loopinfo;
112387    +          _LOOP_= _N_;
112388    +          _WHERE_ = '';
112389    +          _WHEREDESC_  = '';
112390    +          %do i=1 %to &numgroupvar;
112391    +              %let varname = %scan(&groupvar, &i, %str( ));
112392    +              %if "&&fmt&i" eq "" %then %do;
112393    +                  %if "&&fmtType&i" eq "N" %then %do;
112394    +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
112395    +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
112396    +                   %end;
112397    +                  %else %do;
112398    +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
112399    +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
112400    +                  %end;
112401    +              %end;
112402    +              %else %do;
112403    +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
112404    +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
112405    +              %end;
112406    +              %if &i < &numgroupvar %then %do;
112407    +                  _WHERE_ = strip(_WHERE_)!!' and ';
112408    +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
112409    +              %end;
112410    +          %end;
112411    +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
112412    +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
112413    +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
112414    +              FREQUENCY = &_totalobs_ - FREQUENCY;
112415    +          %end;
112416    +      run;
112418    +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
112419    +          data target;
112420    +             length _TARGET_ $32;
112421    +              %do i=1 %to &em_num_target;
112422    +                  %let varname = %scan(%em_target, &i, %str( ));
112423    +                  _TARGET_ = "&varname";
112424    +                  output;
112425    +              %end;
112426    +          run;
112427    +          proc sql;
112428    +             create table &em_user_groupinfo as select * from  work.temp, work.target;
112429    +          quit;
112430    +          data &em_user_groupinfo;
112431    +             set &em_user_groupinfo;
112432    +             _LOOP_=_N_;
112433    +          run;
112434    +      %end;
112436    +      data &em_data_eminfo;
112437    +         length TARGET KEY $32  DATA $43;
112438    +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
112439    +      run;
112441    +      data &em_user_emloopinfo;
112442    +         set &em_user_groupinfo;
112443    +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
112444    +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112445    +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
112446    +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
112447    +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
112448    +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
112449    +         %end;
112450    +         %else %do;
112451    +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112452    +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
112453    +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
112454    +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
112455    +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
112456    +         %end;
112457    +      run;
112459    +      proc datasets lib=work nolist;
112460    +          delete temp loopinfo
112461    +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
112462    +              target
112463    +          %end;
112464    +          ;
112465    +      run;
112467    +   %end;
112469    +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
112470    +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
112471    +       data _null_;
112472    +          length quotedTarget $32;
112473    +          set &em_user_groupinfo;
112474    +          file gpdelta;
112475    +          if _N_ = &emloopnumber then do;
112476    +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
112477    +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
112479    +             %do i=1 %to &numgroupvar;
112480    +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
112481    +                 put "if upcase(NAME)= '&gvar' then delete;";
112482    +             %end;
112483    +          end;
112484    +       run;
112485    +   %end;
112486    +   %else %do;
112487    +       data _null_;
112488    +          set &em_user_groupinfo;
112489    +          file gpdelta;
112490    +          if _N_ = &emloopnumber then do;
112491    +             %do i=1 %to &numgroupvar;
112492    +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
112493    +                 put "if upcase(NAME)= '&gvar' then delete;";
112494    +             %end;
112495    +          end;
112496    +       run;
112497    +   %end;
112498    +   filename gpdelta;
112500    +   %let nobs=0;
112501    +   %let dsid = %sysfunc(open(&em_user_groupinfo));
112502    +   %if &dsid>0 %then %do;
112503    +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
112504    +       %let dsid = %sysfunc(close(&dsid));
112505    +   %end;
112507    +   %if ^&nobs  %then
112508    +       %let emloopmode =;
112509    +   %else
112510    +       %if &nobs< &emloopnumber %then
112511    +           %let emloopmode = POSTLOOP;
112512    +        %else
112513    +        %let emloopmode = LOOP;
112514    +%mend gp_group;
112516    +%macro gp_Index;
112518    +   %em_getName(key=INDEXINFO,  type=DATA);
112519    +   %em_getName(key=EMLOOPINFO, type=DATA);
112521    +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
112522    +       data &em_user_indexinfo;
112523    +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
112524    +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
112525    +          _TARGET_   ="";
112526    +          _WHERE_    ="";
112527    +          output;
112528    +       run;
112529    +       data &em_data_eminfo;
112530    +          length TARGET KEY $32  DATA $43;
112531    +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
112532    +       run;
112534    +       data &em_user_emloopinfo;
112535    +          length MODE $8;
112536    +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
112537    +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112538    +          set &em_user_indexinfo(keep=_LOOP_ );
112539    +          MODE='Index';
112540    +       run;
112541    +   %end;
112543    +%mend gp_index;
112545    +%macro gp_Target;
112546    +   %let TargetName = %scan(%em_target, &emloopnumber);
112547    +   %if "&targetName" eq "" %then %do;
112548    +       %goto doendgpt;
112549    +   %end;
112551    +   %if %index(&EM_DEBUG, _ALL_) %then %do;
112552    +       %put GP_TARGET;
112553    +       %put &emLoopnumber &TargetName;
112554    +   %end;
112556    +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
112557    +   data _null_;
112558    +      file gpdelta;
112559    +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
112560    +   run;
112561    +   filename gpdelta;
112563    +   %if &emloopnumber eq 1 %then %do;
112564    +       %em_getName(key=TARGETINFO,  type=DATA);
112565    +       %em_getName(key=EMLOOPINFO,  type=DATA);
112567    +       data &em_user_targetinfo;
112568    +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
112569    +          retain _LOOP_;
112570    +          _WHERE_ = '';
112571    +          %do i=1 %to &em_num_target;
112572    +              %let varname = %scan(%em_target, &i, ' ');
112573    +              _TARGET_ = "&varname";
112574    +              _LOOP_+1;
112575    +              output;
112576    +           %end;
112577    +       run;
112578    +       data &em_user_emloopinfo;
112579    +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
112580    +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
112581    +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
112582    +      run;
112584    +       data &em_data_eminfo;
112585    +          length TARGET KEY $32  DATA $43;
112586    +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
112587    +       run;
112588    +   %end;
112590    +   %doendgpt:
112591    +%mend gp_target;
112593    +%macro train;
112594    +   %if %index(&EM_DEBUG, _ALL_) %then %do;
112595    +       %put LOOP MODE:   &emloopmode ;
112596    +       %put LOOP NUMBER: &emloopnumber;
112597    +   %end;
112599    +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
112601    +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
112603    +       %let hpdmFlag = 0;
112604    +       %if %symexist(em_import_DATA_eminfo) %then %do;
112605    +            data _null_;
112606    +               set &em_import_DATA_eminfo;
112607    +               where KEY = "HPDMSAMPLE";
112608    +               call symput('hpdmFlag', '1');
112609    +            run;
112610    +       %end;
112611    +       %if &hpdmFlag %then %do;
112612    +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
112613    +           %goto doendmain;
112614    +       %end;
112615    +   %end;
112617    +   %em_getname(key=EMLOOPINFO,  type=DATA);
112618    +   %em_getname(key=GROUPINFO,  type=DATA);
112619    +   %em_getname(key=BOOSTINFO,  type=DATA);
112620    +   %em_getname(key=BAGINFO,    type=DATA);
112621    +   %em_getname(key=TARGETINFO, type=DATA);
112622    +   %em_getname(key=INDEXINFO,  type=DATA);
112623    +   %em_getname(key=EMINFO,  type=DATA);
112625    +   %if "&emloopnumber" = "1" %then %do;
112626    +       %em_getname(key=PRECODE, type=FILE, extension=sas);
112627    +       filename _pregrp "&em_user_precode";
112628    +       data _null_;
112629    +         rc = fdelete('_pregrp');
112630    +       run;
112631    +       filename _pregrp;
112633    +       %let members =;
112634    +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
112635    +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
112636    +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
112637    +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
112638    +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
112639    +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
112640    +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
112642    +       %if "&members" ne "" %then %do;
112643    +           proc datasets lib=&em_lib nolist;
112644    +              delete &members;
112645    +           run;
112646    +      %end;
112647    +   %end;
112649    +   %let emboostvar    =;
112650    +   %let embagvar      =;
112651    +   %let emgroupvar    =;
112652    +   %let emnumgroupvar =;
112653    +   %getVariables;
112655    +   %if &EM_PROPERTY_MODE = TARGET %then %do;
112656    +       %if &EM_NUM_TARGET>=1 %then %do;
112657    +           %gp_target;
112658    +           %if &emLoopNumber <= &EM_NUM_TARGET %then
112659    +               %let emloopmode= LOOP;
112660    +           %else
112661    +              %let emloopmode = POSTLOOP;
112662    +       %end;
112663    +       %else %do;
112664    +           %let emloopmode = ;
112665    +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
112666    +           %goto doendmain;
112667    +       %end;
112668    +   %end;
112669    +   %else
112670    +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
112671    +       %let emloopmode=;
112672    +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
112673    +           proc delete data=&em_data_eminfo;
112674    +           run;
112675    +       %end;
112676    +   %end;
112677    +   %else
112678    +   %if &EM_PROPERTY_MODE = INDEX %then %do;
112679    +       %gp_index;
112680    +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
112681    +           %let emloopmode= LOOP;
112682    +       %else
112683    +           %let emloopmode= POSTLOOP;
112684    +   %end;
112685    +   %else
112686    +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
112687    +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
112688    +           %let emloopmode = ;
112689    +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
112690    +           %goto doendmain;
112691    +       %end;
112693    +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
112694    +   %end;
112695    +   %else
112696    +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
112697    +       %if "&emboostvar" eq "" %then %do;
112698    +           %let emloopmode = ;
112699    +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
112700    +           %goto doendmain;
112701    +       %end;
112703    +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
112704    +           %let emloopmode= LOOP;
112705    +           %gp_boost(targetname=&emboostvar);
112707    +       %end;
112708    +       %else
112709    +           %let emloopmode= POSTLOOP;
112710    +   %end;
112711    +   %else
112712    +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
112713    +       %if "&embagvar" eq "" %then %do;
112714    +           %let emloopmode = ;
112715    +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
112716    +           %goto doendmain;
112717    +       %end;
112719    +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
112720    +           %let emloopmode= LOOP;
112721    +           %gp_bag(targetname=&embagvar);
112722    +       %end;
112723    +       %else
112724    +           %let emloopmode= POSTLOOP;
112725    +   %end;
112728    +   %if &emloopmode eq "" %then %do;
112729    +       %let lib    = %scan(&em_data_eminfo, 1, .);
112730    +       %let member = %scan(&em_data_eminfo, 2, .);
112731    +       proc datasets lib=&lib nolist;
112732    +          delete &member;
112733    +       run;
112734    +   %end;
112736    +   %doendmain:
112738    +   %if %index(&EM_DEBUG, _ALL_) %then %do;
112739    +       %put NEW LOOP MODE: &emloopmode;
112740    +   %end;
112742    +   %if "&emloopmode" eq "POSTLOOP" %then %do;
112743    +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
112744    +       %include temp;
112745    +       filename temp;
112747    +       %postloop;
112748    +   %end;
112750    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   rc = fdelete('_pregrp');
MPRINT(TRAIN):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete Grp5_GROUPINFO Grp5_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: Deleting EMWS1.GRP5_GROUPINFO (memtype=DATA).
NOTE: Deleting EMWS1.GRP5_EMINFO (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp5_VariableSet end=eof;
MPRINT(GETVARIABLES):   if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   end;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP5_VARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   ods listing close;
MPRINT(GP_GROUP):   ods output onewayfreqs=temp;
MPRINT(GP_GROUP):   proc freq data=EMWS1.Trans2_TRAIN;
MPRINT(GP_GROUP):   table cv_var / missing;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: The data set WORK.TEMP has 10 observations and 7 variables.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
 
MPRINT(GP_GROUP):   ods listing;
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   retain totalobs 0;
MPRINT(GP_GROUP):   set temp end=eof;
MPRINT(GP_GROUP):   totalobs + frequency;
MPRINT(GP_GROUP):   if eof then call symput('_totalObs_', put(totalobs, best.));
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   proc sort data=temp out=loopinfo nodupkey;
MPRINT(GP_GROUP):   by cv_var;
MPRINT(GP_GROUP):   where frequency>=10;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.TEMP.
      WHERE frequency>=10;
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.LOOPINFO has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set loopinfo end=eof;
MPRINT(GP_GROUP):   file _pregrp;
MPRINT(GP_GROUP):   if eof then do;
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file _PREGRP is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:28 o'clock,
      Create Time=27 May 2018 00:30:19 o'clock
 
NOTE: 0 records were written to the file _PREGRP.
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data loopinfo;
MPRINT(GP_GROUP):   set loopinfo;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: The data set WORK.LOOPINFO has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(GP_GROUP):   data EMWS1.Grp5_GROUPINFO;
MPRINT(GP_GROUP):   length _LOOP_ 8 _TARGET_ $32 _WHERE_ _WHEREDESC_ $2000;
MPRINT(GP_GROUP):   keep _LOOP_ _TARGET_ _WHERE_ _WHEREDESC_ FREQUENCY;
MPRINT(GP_GROUP):   retain _TARGET_ '';
MPRINT(GP_GROUP):   set loopinfo;
MPRINT(GP_GROUP):   _LOOP_= _N_;
MPRINT(GP_GROUP):   _WHERE_ = '';
MPRINT(GP_GROUP):   _WHEREDESC_ = '';
MPRINT(GP_GROUP):   _WHERE_ = strip(_WHERE_)!!" cv_var ="!!strip(put(cv_var, best12.));
MPRINT(GP_GROUP):   _WHEREDESC_ = strip(_WHEREDESC_)!!" cv_var ="!!strip(put(cv_var, best12.));
MPRINT(GP_GROUP):   _WHERE_ = '^('!!strip(_WHERE_)!!')';
MPRINT(GP_GROUP):   _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
MPRINT(GP_GROUP):   FREQUENCY = 2437 - FREQUENCY;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: The data set EMWS1.GRP5_GROUPINFO has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data EMWS1.Grp5_EMINFO;
MPRINT(GP_GROUP):   length TARGET KEY $32 DATA $43;
MPRINT(GP_GROUP):   TARGET='';
MPRINT(GP_GROUP):   KEY='GROUPINFO';
MPRINT(GP_GROUP):   DATA="Grp5";
MPRINT(GP_GROUP):   output;
MPRINT(GP_GROUP):   run;
 
NOTE: The data set EMWS1.GRP5_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data EMWS1.Grp5_EMLOOPINFO;
MPRINT(GP_GROUP):   set EMWS1.Grp5_GROUPINFO;
MPRINT(GP_GROUP):   label _LOOP_ = "Group Index" _TARGET_ = "Target" _WHEREDESC_ = "Group" FREQUENCY = "Frequency Count";
MPRINT(GP_GROUP):   keep _LOOP_ _WHEREDESC_ FREQUENCY;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: The data set EMWS1.GRP5_EMLOOPINFO has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   proc datasets lib=work nolist;
MPRINT(GP_GROUP):   delete temp loopinfo ;
MPRINT(GP_GROUP):   run;
 
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.LOOPINFO (memtype=DATA).
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\CDELTA_TRAIN.sas";
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp5_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 1 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:28 o'clock,
      Create Time=02 June 2018 16:26:28 o'clock
 
NOTE: 1 record was written to the file GPDELTA.
      The minimum record length was 38.
      The maximum record length was 38.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112752     *------------------------------------------------------------*;
112753     * End TRAIN: Grp5;
112754     *------------------------------------------------------------*;
112755
 
112756     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
112757     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
112758     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112759     ;
MPRINT(EM_DIAGRAM):   ;
112760     ;
MPRINT(EM_DIAGRAM):   ;
112761     ;
MPRINT(EM_DIAGRAM):   ;
112762     ;
MPRINT(EM_DIAGRAM):   ;
112763     quit;
MPRINT(EM_DIAGRAM):   quit;
112764     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112765     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
112766     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112767     /*; *"; *'; */
112768     ;
MPRINT(EM_DIAGRAM):   ;
112769     run;
MPRINT(EM_DIAGRAM):   run;
112770     quit;
MPRINT(EM_DIAGRAM):   quit;
112771     /* Reset EM Options */
112772     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
112773     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
112774     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:29 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:26:29 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O04TA885 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O04TA885 new;
MPRINT(EM_DIAGRAM):   run;
112876     %let EMEXCEPTIONSTRING=;
112877     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
112878     * SCORE: Grp5;
MPRINT(EM_DIAGRAM):   * SCORE: Grp5;
112879     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112880     %let EM_ACTION = SCORE;
112881     %let syscc = 0;
112882     %macro main;
112883
112884        filename temp catalog 'sashelp.emutil.gp_macros.source';
112885        %include temp;
112886        filename temp;
112887
112888        %SetProperties;
112889
112890        %if %upcase(&EM_ACTION) = CREATE %then %do;
112891
112892            filename temp catalog 'sashelp.emutil.gp_create.source';
112893            %include temp;
112894            filename temp;
112895
112896            %create;
112897        %end;
112898        %else
112899        %if %upcase(&EM_ACTION) = TRAIN %then %do;
112900
112901            filename temp catalog 'sashelp.emutil.gp_train.source';
112902            %include temp;
112903            filename temp;
112904
112905            %train;
112906        %end;
112907        %else
112908        %if %upcase(&EM_ACTION) = SCORE %then %do;
112909
112910            filename temp catalog 'sashelp.emutil.gp_score.source';
112911            %include temp;
112912            filename temp;
112913
112914            %score;
112915        %end;
112916        %else
112917        %if %upcase(&EM_ACTION) = REPORT %then %do;
112918
112919            filename temp catalog 'sashelp.emutil.gp_report.source';
112920            %include temp;
112921            filename temp;
112922
112923            %report;
112924
112925        %end;
112926        %else
112927        %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
112928
112929            filename temp catalog 'sashelp.emutil.gp_postloop.source';
112930            %include temp;
112931            filename temp;
112932
112933            %postloop;
112934
112935        %end;
112936
112937        %doendm:
112938     %mend main;
112939
112940     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
112941    +%macro SetProperties;
112942    +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
112943    +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
112944    +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
112945    +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
112946    +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
112947    +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
112948    +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
112949    +%mend SetProperties;
112950    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_SCORE.SOURCE.
112951    +%macro scoreTables(data=, out=, scoreref=, prefref=, keepnum=0);
112952    +
112953    +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
112954    +       data &out;
112955    +          set &data
112956    +          %if &keepNum %then %do;
112957    +              (keep=%emGrpKeep %emGrpRej)
112958    +          %end;
112959    +          ;
112960    +          %if %sysfunc(fexist(&prefref)) %then %do;
112961    +              %inc &prefref;
112962    +          %end;
112963    +          %inc &scoreref;
112964    +       run;
112965    +   %end;
112966    +
112967    +%mend scoretables;
112968    +
112969    +%macro makeExportCode;
112970    +   %em_getname(key=EXPORTCODE, type=FILE, extension=sas);
112971    +   %em_getName(key=GROUPINFO,  type=DATA);
112972    +
112973    +   filename x "&EM_USER_EXPORTCODE";
112974    +
112975    +   data _null_;
112976    +      file x;
112977    +       set &em_user_groupinfo;
112978    +       if _LOOP_ = &emloopnumber and _where_ ne '' then
112979    +          put 'if ' _where_ ' then output;';
112980    +   run;
112981    +
112982    +   %em_getname(key=PRECODE, type=FILE, extension=sas);
112983    +   filename _pregrp "&em_user_precode";
112984    +
112985    +   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
112986    +   %inc _grpdrp;
112987    +   filename _grpdrp;
112988    +   %em_varMacro(name=emGrpKeep, metadata=&EM_IMPORT_DATA_CMETA, where=%nrbquote(ROLE ne 'REJECTED'), key=NAME, nummacro=GrpKeep);
112989    +
112990    +    %em_varMacro(name=emGrpRej, metadata=&EM_DATA_VARIABLESET, where=%nrbquote(ROLE eq 'REJECTED' and GROUPROLE='GROUP'), key=NAME, nummacro=GrpRej);
112991    +
112992    +   %scoreTables(data=&em_import_data,        out=&em_export_train,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
112993    +   %scoreTables(data=&em_import_validate,    out=&em_export_validate,    scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
112994    +   %scoreTables(data=&em_import_test,        out=&em_export_test,        scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
112995    +   %scoreTables(data=&em_import_score,       out=&em_export_score,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
112996    +   %scoreTables(data=&em_import_transaction, out=&em_export_transaction, scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
112997    +
112998    +   filename x;
112999    +   filename _pregrp;
113000    +
113001    +%mend makeExportCode;
113002    +
113003    +%macro makeCode;
113004    +
113005    +   %if &emloopmode = LOOP %then %do;
113006    +       %em_getname(key=HPDMSCORE, type=FILE, extension=sas);
113007    +       filename x "&em_user_HPDMSCORE";
113008    +
113009    +       %em_getname(key=PRECODE, type=FILE, extension=sas);
113010    +       filename _pregrp "&em_user_precode";
113011    +       %em_copyfile(infref=_pregrp, outfref=x);
113012    +       filename _pregrp;
113013    +
113014    +       data _null_;
113015    +          file x mod;
113016    +          set &em_user_groupinfo;
113017    +          if _LOOP_ = &emloopnumber and _where_ ne '' then
113018    +             put 'if ^(' _where_ ') then return;';
113019    +       run;
113020    +       filename x;
113021    +
113022    +       filename x "&EM_FILE_EMFLOWSCORECODE";
113023    +
113024    +       %if "&emloopnumber" = "1" %then %do;
113025    +           %em_getname(key=PRECODE, type=FILE, extension=sas);
113026    +           filename _pregrp "&em_user_precode";
113027    +           %em_copyfile(infref=_pregrp, outfref=x);
113028    +           filename _pregrp;
113029    +       %end;
113030    +
113031    +       data _null_;
113032    +          file x
113033    +          %if &emloopnumber = 1 %then %do;
113034    +              mod
113035    +          %end;
113036    +          ;
113037    +          set &em_user_groupinfo;
113038    +          if _LOOP_ = &emloopnumber and _where_ ne '' then
113039    +             put 'if ' _where_ ' then do;';
113040    +       run;
113041    +
113042    +       filename y "&EM_FILE_EMPUBLISHSCORECODE";
113043    +       %if "&EM_PROPERTY_MODE" ne "CROSSVALIDATION"  %then %do;
113044    +           %em_copyfile(infref=x, outfref=y);
113045    +       %end;
113046    +       %else %do;
113047    +           %if "&emloopnumber" = "1" %then %do;
113048    +               %em_getname(key=PRECODE, type=FILE, extension=sas);
113049    +                filename _pregrp "&em_user_precode";
113050    +                %em_copyfile(infref=_pregrp, outfref=y);
113051    +               filename _pregrp;
113052    +           %end;
113053    +           data _null_;
113054    +             file y
113055    +             %if &emloopnumber = 1 %then %do;
113056    +                 mod
113057    +             %end;
113058    +             ;
113059    +             set &em_user_groupinfo;
113060    +             if _LOOP_ = &emloopnumber and _where_ ne '' then do;
113061    +                _where_ = tranwrd(_where_, '^(', '(');
113062    +                put 'if ' _where_ ' then do;';
113063    +                put '_XVAL_=' "&emloopnumber" ';' ;
113064    +             end;
113065    +           run;
113066    +       %end;
113067    +       filename Y ;
113068    +       filename x ;
113069    +   %end;
113070    +%mend makeCode;
113071    +
113072    +%macro score;
113073    +
113074    +   %if "&emloopmode" eq "LOOP" %then %do;
113075    +
113076    +       %em_getName(key=groupinfo,   type=DATA);
113077    +
113078    +       %if %sysfunc(exist(&em_user_groupinfo)) %then %do;
113079    +           %makeCode;
113080    +           %makeExportCode;
113081    +       %end;
113082    +   %end;
113083    +   %else
113084    +   %if "&emLoopmode" eq "POSTLOOP" %then %do;
113085    +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
113086    +       data _null_;
113087    +          rc = fdelete('gpdelta');
113088    +          run;
113089    +       filename gpdelta;
113090    +   %end;
113091    +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\HPDMSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\HPDMSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=27 May 2018 00:30:19 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod;
MPRINT(MAKECODE):   set EMWS1.Grp5_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ^(' _where_ ') then return;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\HPDMSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=27 May 2018 00:30:19 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 32.
      The maximum record length was 32.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMFLOWSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=02 June 2018 16:26:29 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod ;
MPRINT(MAKECODE):   set EMWS1.Grp5_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=02 June 2018 16:26:29 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename y "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMPUBLISHSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file y lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=02 June 2018 16:26:29 o'clock
 
NOTE: 0 records were written to the file Y.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file y mod ;
MPRINT(MAKECODE):   set EMWS1.Grp5_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then do;
MPRINT(MAKECODE):   _where_ = tranwrd(_where_, '^(', '(');
MPRINT(MAKECODE):   put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   put '_XVAL_=' "1" ';' ;
MPRINT(MAKECODE):   end;
MPRINT(MAKECODE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=02 June 2018 16:26:29 o'clock
 
NOTE: 2 records were written to the file Y.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename Y ;
NOTE: Fileref Y has been deassigned.
MPRINT(MAKECODE):   filename x ;
NOTE: Fileref X has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EXPORTCODE.sas";
MPRINT(MAKEEXPORTCODE):   data _null_;
MPRINT(MAKEEXPORTCODE):   file x;
MPRINT(MAKEEXPORTCODE):   set EMWS1.Grp5_GROUPINFO;
MPRINT(MAKEEXPORTCODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ' _where_ ' then output;';
MPRINT(MAKEEXPORTCODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EXPORTCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:29 o'clock,
      Create Time=27 May 2018 00:30:19 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 29.
      The maximum record length was 29.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas";
MPRINT(MAKEEXPORTCODE):   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file _GRPDRP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
113093    +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
113095    +   filename macFile catalog 'work.emutil.macro.source';
113096    +   %let _METAOBS = 0;
113097    +   %let _maxvar = &maxvar;
113098    +   %if "&_maxvar" eq "" %then %let maxvar = -1;
113100    +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
113101    +                   or (&metadata eq ) %then %do;
113102    +       %put * No metadata data set defined;
113103    +       %goto doend;
113104    +   %end;
113106    +   data _null_;
113107    +      length _STRING_ $80;
113108    +      retain _STRING_ '' maxvar 0;
113109    +      set &metadata end=eof;
113110    +      file macFile;
113111    +      %if %nrbquote(&where) ne %then %do;
113112    +          %let whereClause = where (%nrbquote(&where));
113113    +          %unquote(&whereClause);
113114    +      %end;
113115    +      if _N_=1 then do;
113116    +         string = "%"!!"macro &name;";
113117    +         put string;
113118    +      end;
113119    +      maxvar +1;
113120    +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
113121    +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
113122    +         if eof
113123    +            %if  %sysevalf(&_maxvar > 0) %then %do;
113124    +                or maxvar >= &maxvar
113125    +            %end;
113126    +            then do;
113127    +            put _STRING_;
113128    +            string = "%"!!"mend &name;";
113129    +            put string;
113130    +            string = strip(put(_N_, best.));
113131    +            call symput('_METAOBS', string);
113132    +            %if (&nummacro ne ) %then %do;
113133    +                put "%" "global &nummacro;";
113134    +                put "%" "let &nummacro = " string ";";
113135    +            %end;
113136    +            stop;
113137    +         end;
113138    +      end;
113139    +      else do;
113140    +         put _STRING_;
113141    +         _string_ = TRIM(&key);
113142    +         if eof
113143    +            %if  %sysevalf(&_maxvar > 0) %then %do;
113144    +              or maxvar >= &maxvar
113145    +           %end;
113146    +            then do;
113147    +            put _STRING_;
113148    +            string = "%"!!"mend &name;";
113149    +            put string;
113150    +        end;
113151    +      end;
113152    +      if eof
113153    +         %if  %sysevalf(&_maxvar > 0) %then %do;
113154    +             or maxvar >= &maxvar
113155    +         %end;
113156    +         then do;
113157    +         string = strip(put(_N_, best.));
113158    +         call symput('_METAOBS', string);
113159    +         %if (&nummacro ne ) %then %do;
113160    +             put "%" "global &nummacro;";
113161    +             put "%" "let &nummacro = " string ";";
113162    +         %end;
113163    +         stop;
113164    +      end;
113165    +   run;
113167    +   %doend:
113168    +   %if ^&_METAOBS %then %do;
113169    +       data _null_;
113170    +          file macFile;
113171    +          put "%" "macro &name;";
113172    +          put "%" "mend &name;";
113173    +          %if (&nummacro ne ) %then %do;
113174    +              put "%" "global &nummacro;";
113175    +              put "%" "let &nummacro = 0;";
113176    +          %end;
113177    +      run;
113178    +   %end;
113179    +   %inc macFile;
113180    +   filename macFile;
113181    +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAKEEXPORTCODE):   filename _grpdrp;
NOTE: Fileref _GRPDRP has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Trans2_CMeta_TRAIN end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE ne 'REJECTED');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:25,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 7 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 14 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
      WHERE ROLE not = 'REJECTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
113182    +%macro emGrpKeep;
113183    +Custid DepVar Marital_Status MntCard_Games MntMagazines
113184    +NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq
113185    +RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var
113186    +%mend emGrpKeep;
113187    +%global GrpKeep;
113188    +%let GrpKeep = 14 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Grp5_VariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE eq 'REJECTED' and GROUPROLE='GROUP');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:29,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set EMWS1.GRP5_VARIABLESET.
      WHERE (ROLE='REJECTED') and (GROUPROLE='GROUP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "mend emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = 0;";
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:29,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 4 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
113189    +%macro emGrpRej;
113190    +%mend emGrpRej;
113191    +%global GrpRej;
113192    +%let GrpRej = 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(SCORETABLES):   data EMWS1.Grp5_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN (keep
MPRINT(SCORETABLES):  =Custid DepVar Marital_Status MntCard_Games MntMagazines NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var) ;
NOTE: %INCLUDE (level 1) file _PREGRP is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\PRECODE.sas.
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file X is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EXPORTCODE.sas.
113193    +if ^(cv_var =1)  then output;
MPRINT(SCORETABLES):   if ^(cv_var =1) then output;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: The data set EMWS1.GRP5_TRAIN has 2213 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEEXPORTCODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Grp5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
113194     *------------------------------------------------------------*;
113195     * End SCORE: Grp5;
113196     *------------------------------------------------------------*;
113197
 
113199     filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):     filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMFLOWSCORE.sas";
113200     filename lpflow catalog "EMWS1.Grp5_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_DIAGRAM):   filename lpflow catalog "EMWS1.Grp5_LOOP.EMFLOWCODE_1.source";
113201     %em_copyfile(infref=emflow, outfref=lpflow);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lpflow lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("emflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPFLOW is:
      Catalog Name=EMWS1.GRP5_LOOP.EMFLOWCODE_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:29,
      Last Modified=Saturday,  2 June 2018 16:26:29,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp5_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            17KB,
      File Size (bytes)=17408
 
NOTE: 1 record was written to the file LPFLOW.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
113202     filename lpflow;
MPRINT(EM_DIAGRAM):   filename lpflow;
NOTE: Fileref LPFLOW has been deassigned.
113203     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
113204     filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMPUBLISHSCORE.sas";
113205     filename lppub catalog "EMWS1.Grp5_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_DIAGRAM):   filename lppub catalog "EMWS1.Grp5_LOOP.EMPUBLISHCODE_1.source";
113206     %em_copyfile(infref=empub, outfref=lppub);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lppub lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("empub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPPUB is:
      Catalog Name=EMWS1.GRP5_LOOP.EMPUBLISHCODE_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=6,
      Created=Saturday,  2 June 2018 16:26:29,
      Last Modified=Saturday,  2 June 2018 16:26:30,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp5_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 2 records were written to the file LPPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
113207     filename lppub;
MPRINT(EM_DIAGRAM):   filename lppub;
NOTE: Fileref LPPUB has been deassigned.
113208     filename empub;
MPRINT(EM_DIAGRAM):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
113209     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
113210     * Grp5: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Grp5: Computing metadata for TRAIN data;
113211     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Grp5_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Grp5_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Grp5_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Grp5_TRAIN out=WORK.M03QRQ06 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03QRQ06;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M03QRQ06(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03QRQ06;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M03QRQ06;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3BXVI9F NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZXGQ5O(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BXVI9F;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
The SAS System
 
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Grp5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Grp5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp5: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)= 'CV_VAR' then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:30 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:26:30 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3CNR9IN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3CNR9IN new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
