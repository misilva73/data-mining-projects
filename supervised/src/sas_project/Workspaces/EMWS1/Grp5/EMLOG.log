*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:05:13 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:10 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:05:10 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O34RRRBH "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O34RRRBH new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:10 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:05:10 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3449487    proc freq data=EMWS1.Grp5_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp5_VariableSet noprint;
3449488    table ROLE*LEVEL/out=WORK.Grp5META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp5META;
3449489    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP5_VARIABLESET.
NOTE: The data set WORK.GRP5META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
3449490    proc print data=WORK.Grp5META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp5META label noobs;
3449491    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3449492    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3449493    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3449494    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3449495    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP5META.
NOTE: The PROCEDURE PRINT printed page 2298.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3449496    title10;
MPRINT(EM_DIAGRAM):   title10;
3449497    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp5: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3449820    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3449821    * Grp5: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp5: Generation of macros and macro variables;
3449822    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3449823    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3449824    %let EMEXCEPTIONSTRING=;
3449825    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3449826    * TRAIN: Grp5;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp5;
3449827    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3449828    %let EM_ACTION = TRAIN;
3449829    %let syscc = 0;
3449830    %macro main;
3449831
3449832       filename temp catalog 'sashelp.emutil.gp_macros.source';
3449833       %include temp;
3449834       filename temp;
3449835
3449836       %SetProperties;
3449837
3449838       %if %upcase(&EM_ACTION) = CREATE %then %do;
3449839
3449840           filename temp catalog 'sashelp.emutil.gp_create.source';
3449841           %include temp;
3449842           filename temp;
3449843
3449844           %create;
3449845       %end;
3449846       %else
3449847       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3449848
3449849           filename temp catalog 'sashelp.emutil.gp_train.source';
3449850           %include temp;
3449851           filename temp;
3449852
3449853           %train;
3449854       %end;
3449855       %else
3449856       %if %upcase(&EM_ACTION) = SCORE %then %do;
3449857
3449858           filename temp catalog 'sashelp.emutil.gp_score.source';
3449859           %include temp;
3449860           filename temp;
3449861
3449862           %score;
3449863       %end;
3449864       %else
3449865       %if %upcase(&EM_ACTION) = REPORT %then %do;
3449866
3449867           filename temp catalog 'sashelp.emutil.gp_report.source';
3449868           %include temp;
3449869           filename temp;
3449870
3449871           %report;
3449872
3449873       %end;
3449874       %else
3449875       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3449876
3449877           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3449878           %include temp;
3449879           filename temp;
3449880
3449881           %postloop;
3449882
3449883       %end;
3449884
3449885       %doendm:
3449886    %mend main;
3449887
3449888    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3449889   +%macro SetProperties;
3449890   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3449891   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3449892   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3449893   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3449894   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3449895   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3449896   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3449897   +%mend SetProperties;
3449898   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3449899   +%macro scoreValidTest(data=, out=);
3449901   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3449902   +       data &out / view = &out;
3449903   +          retain _RESAMP_ 1;
3449904   +          set &data;
3449905   +       run;
3449906   +   %end;
3449908   +%mend scoreValidTest;
3449910   +%macro getVariables;
3449911   +   %if "&emloopnumber" = "1" %then %do;
3449912   +       data _null_;
3449913   +          retain numgoup 0;
3449914   +          set &em_data_variableset end=eof;
3449915   +          %if &em_num_target = 1 %then %do;
3449916   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3449917   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3449918   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3449919   +              %end;
3449920   +              %else
3449921   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3449922   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3449923   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3449924   +              %end;
3449925   +          %end;
3449926   +          %else %do;
3449927   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3449928   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3449929   +              else
3449930   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3449931   +          %end;
3449932   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3449933   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3449934   +             numgroup + 1;
3449935   +          end;
3449936   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3449937   +       run;
3449938   +    %end;
3449939   +    %else %do;
3449940   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3449941   +            data _null_;
3449942   +               retain numgoup 0;
3449943   +               set &em_data_variableset end=eof;
3449944   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3449945   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3449946   +               numgroup + 1;
3449947   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3449948   +            run;
3449949   +          %end;
3449950   +            %else
3449951   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3449952   +            %em_getName(key=BOOSTINFO,   type=DATA);
3449953   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3449954   +                data _null_;
3449955   +                   set &em_user_boostinfo;
3449956   +                   call symput('emboostvar', strip(_TARGET_));
3449957   +                run;
3449958   +            %end;
3449959   +        %end;
3449960   +        %else
3449961   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3449962   +                %em_getName(key=BAGINFO,   type=DATA);
3449963   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3449964   +                    data _null_;
3449965   +                       set &em_user_baginfo;
3449966   +                      call symput('embagvar', strip(_TARGET_));
3449967   +                    run;
3449968   +                %end;
3449969   +            %end;
3449970   +    %end;
3449971   +%mend getVariables;
3449973   +%macro gp_bag(targetname=);
3449974   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3449975   +        %put LOOP MODE:   &emloopmode ;
3449976   +        %put LOOP NUMBER: &emloopnumber;
3449977   +        %put BAGGING TARGET: &targetname;
3449978   +   %end;
3449980   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3449981   +   %include temp;
3449982   +   filename temp;
3449984   +   %em_getName(key=BAGINFO,    type=DATA);
3449985   +   %em_getName(key=EMLOOPINFO, type=DATA);
3449987   +   %if &emloopnumber = 1 %then %do;
3449988   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3449989   +       data _null_;
3449990   +          file gpdelta;
3449991   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3449992   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3449993   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3449994   +          put "end;";
3449995   +       run;
3449996   +       filename gpdelta;
3449998   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3449999   +           proc datasets lib=&em_lib nolist;
3450000   +              delete &em_nodeid._baginfo;
3450001   +           run;
3450002   +       %end;
3450004   +       %if "%em_freq" ne "" %then %do;
3450005   +           proc means data=&em_import_data sum;
3450006   +              var %em_freq;
3450007   +              output out = _tempds sum=sumfreq;
3450008   +           run;
3450009   +           quit;
3450010   +           data _null_;
3450011   +              set _tempDs;
3450012   +              call symput('_sumfreq', put(sumfreq, best12.));
3450013   +           run;
3450014   +       %end;
3450015   +       %else %do;
3450016   +           proc sql noprint;
3450017   +              select count(*) into :_sumfreq
3450018   +              from &em_import_data;
3450019   +           quit;
3450020   +       %end;
3450022   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3450023   +           data _null_;
3450024   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3450025   +           run;
3450026   +       %end;
3450027   +       %else
3450028   +           %let _size = &em_property_sizeobs;
3450030   +       data &em_user_baginfo;
3450031   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3450032   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3450033   +          _TARGET_   ="&targetname";
3450034   +          _SUMFREQ_  =&_sumfreq;
3450035   +           _SIZE_    = &_size;
3450036   +          output;
3450037   +       run;
3450038   +       data &em_user_emloopinfo;
3450039   +          length MODE $8;
3450040   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3450041   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450042   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3450043   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3450044   +           MODE='Bagging';
3450045   +       run;
3450047   +       data &em_data_eminfo;
3450048   +          length TARGET KEY $32  DATA $43;
3450049   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3450050   +       run;
3450051   +   %end;
3450052   +   %else %do;
3450053   +      data _null_;
3450054   +         set &em_user_baginfo;
3450055   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3450056   +         call symput('_size', put(_size_, best12.));
3450057   +      run;
3450058   +   %end;
3450060   +   %let bagsumFreq  = &_sumFreq;
3450061   +   %let bagSize     = &_Size;
3450063   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3450064   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3450066   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3450067   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3450069   +   %doendbg:
3450071   +%mend gp_bag;
3450074   +%macro gp_boost(targetname=);
3450075   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3450076   +       %put LOOP MODE:   &emloopmode ;
3450077   +       %put LOOP NUMBER: &emloopnumber;
3450078   +        %put BAGGING TARGET: &targetname;
3450079   +   %end;
3450081   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3450082   +   %include temp;
3450083   +   filename temp;
3450085   +   %em_getname(key=EMLOOPINFO, type=DATA);
3450086   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3450087   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3450088   +   %em_getName(key=BOOSTINFO,   type=DATA);
3450090   +   %if &emloopnumber = 1 %then %do;
3450091   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3450092   +       data _null_;
3450093   +          file gpdelta;
3450094   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3450095   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3450096   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3450097   +          put "end;";
3450098   +       run;
3450099   +       filename gpdelta;
3450101   +       %let deleteString =;
3450102   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3450103   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3450104   +       %if "&deleteString" ne "" %then %do;
3450105   +           proc datasets lib=&em_lib nolist;
3450106   +              delete &deleteString;
3450107   +           run;
3450108   +       %end;
3450110   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3450112   +       data &em_user_boostinfo;
3450113   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3450114   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3450115   +          _TARGET_          ="&targetname";
3450116   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3450117   +          _SUMFREQ_         =&_sumfreq;
3450118   +       run;
3450119   +       data &em_user_emloopinfo;
3450120   +          length MODE $8;
3450121   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3450122   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450123   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3450124   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3450125   +           MODE='Boosting';
3450126   +       run;
3450128   +       data &em_data_eminfo;
3450129   +          length TARGET KEY $32  DATA $43;
3450130   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3450131   +       run;
3450133   +   %end;
3450134   +   %else %do;
3450135   +       %global _dmboodiv;
3450136   +       %let dmboosf = %upcase(&targetname);
3450137   +       %if %sysfunc(length(&targetname))> 30 %then
3450138   +           %let dmboosf =  %substr(&targetname, 1, 30);
3450140   +       data _null_;
3450141   +          set &em_user_boostinfo;
3450142   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3450143   +       run;
3450145   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3450147   +       data &em_user_boostinfo;
3450148   +          set &em_user_boostinfo;
3450149   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3450150   +       run;
3450152   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3450154   +   %end;
3450156   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3450157   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3450159   +   %doendbst:
3450161   +%mend gp_boost;
3450163   +%macro gp_group(numgroupvar=, groupvar=);
3450164   +   %em_getname(key=GROUPINFO, type=DATA);
3450165   +   %em_getName(key=LOOPINFO,  type=DATA);
3450166   +   %em_getName(key=EMGROUPINFO, type=DATA);
3450168   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3450169   +       ods listing close;
3450170   +       %if &numgroupvar = 1 %then %do;
3450171   +           ods output onewayfreqs=temp;
3450172   +       %end;
3450173   +       %else %do;
3450174   +           ods output crosstabfreqs=temp;
3450175   +       %end;
3450176   +       proc freq data=&em_import_data;
3450177   +          table
3450179   +          %let tableString =;
3450180   +          %let freqString  =;
3450181   +          %do i=1 %to &numgroupvar;
3450182   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3450183   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3450184   +              %let freqString = &freqString.1;
3450185   +          %end;
3450186   +          &tableString / missing;
3450187   +       run;
3450188   +       ods listing;
3450189   +       %if &numgroupvar = 1 %then %do;
3450190   +           data _null_;
3450191   +              retain totalobs 0;
3450192   +              set temp end=eof;
3450193   +              totalobs + frequency;
3450194   +              if eof then
3450195   +                 call symput('_totalObs_', put(totalobs, best.));
3450196   +           run;
3450198   +           proc sort data=temp out=loopinfo nodupkey;
3450199   +              by &groupvar;
3450200   +              where frequency>=&em_property_minimumObs;
3450201   +           run;
3450202   +       %end;
3450203   +       %else %do;
3450204   +           data _null_;
3450205   +              set temp;
3450206   +              where _type_='00';
3450207   +              call symput('_totalObs_', put(frequency, best.));
3450208   +           run;
3450209   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3450210   +              by &groupvar;
3450211   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3450212   +           run;
3450213   +       %end;
3450215   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3450216   +       filename _pregrp "&em_user_precode";
3450218   +       %let dsid = %sysfunc(open(loopinfo));
3450219   +       %do i=1 %to &numgroupvar;
3450220   +           %let varname = %scan(&groupvar, &i, %str( ));
3450221   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3450222   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3450223   +           %if %index(&varfmt, -) %then %do;
3450224   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3450225   +           %end;
3450227   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3450228   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3450229   +           %let fmttype&i = &vartype;
3450230   +           %let fmtlen&i  = &varlen;
3450232   +           %let fmtvar&i =;
3450233   +           %let fmt&i    =;
3450234   +           %if "&varfmt" ne "" %then %do;
3450235   +              %let fmtvar&i  = _FORMAT&i._;
3450236   +              %let fmt&i     = &varfmt;
3450237   +           %end;
3450238   +       %end;
3450239   +       %let dsid = %sysfunc(close(&dsid));
3450241   +       data _null_;
3450242   +          %do i=1 %to &numgroupvar;
3450243   +              %if "&&fmt&i" ne "" %then %do;
3450244   +                  retain len_&i 0;
3450245   +              %end;
3450246   +          %end;
3450248   +          set loopinfo end=eof;
3450249   +          file _pregrp;
3450251   +          %do i=1 %to &numgroupvar;
3450252   +              %let varname = %scan(&groupvar, &i, %str( ));
3450253   +              %if "&&fmt&i" ne "" %then %do;
3450254   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3450255   +                    len_&i = length(put(&varname, &&fmt&i));
3450256   +              %end;
3450257   +          %end;
3450259   +          if eof then do;
3450260   +             %do i=1 %to &numgroupvar;
3450261   +                 %let varname = %scan(&groupvar, &i, %str( ));
3450262   +                 %if "&&fmt&i" ne "" %then %do;
3450263   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3450264   +                     put "drop &&fmtvar&i" len_&i ";";
3450265   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3450266   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3450267   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3450268   +                 %end;
3450269   +              %end;
3450270   +          end;
3450271   +      run;
3450273   +      data loopinfo;
3450274   +         set loopinfo;
3450275   +         %do i=1 %to &numgroupvar;
3450276   +             %let varname = %scan(&groupvar, &i, %str( ));
3450277   +             %if "&&fmt&i" ne "" %then %do;
3450278   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3450279   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3450280   +             %end;
3450281   +         %end;
3450282   +      run;
3450283   +      filename _pregrp;
3450285   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3450286   +          data temp;
3450287   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3450288   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3450289   +      %end;
3450290   +      %else %do;
3450291   +          data &em_user_groupinfo;
3450292   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3450293   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3450294   +             retain _TARGET_ '';
3450295   +      %end;
3450297   +          set loopinfo;
3450298   +          _LOOP_= _N_;
3450299   +          _WHERE_ = '';
3450300   +          _WHEREDESC_  = '';
3450301   +          %do i=1 %to &numgroupvar;
3450302   +              %let varname = %scan(&groupvar, &i, %str( ));
3450303   +              %if "&&fmt&i" eq "" %then %do;
3450304   +                  %if "&&fmtType&i" eq "N" %then %do;
3450305   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3450306   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3450307   +                   %end;
3450308   +                  %else %do;
3450309   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3450310   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3450311   +                  %end;
3450312   +              %end;
3450313   +              %else %do;
3450314   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3450315   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3450316   +              %end;
3450317   +              %if &i < &numgroupvar %then %do;
3450318   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3450319   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3450320   +              %end;
3450321   +          %end;
3450322   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3450323   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3450324   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3450325   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3450326   +          %end;
3450327   +      run;
3450329   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3450330   +          data target;
3450331   +             length _TARGET_ $32;
3450332   +              %do i=1 %to &em_num_target;
3450333   +                  %let varname = %scan(%em_target, &i, %str( ));
3450334   +                  _TARGET_ = "&varname";
3450335   +                  output;
3450336   +              %end;
3450337   +          run;
3450338   +          proc sql;
3450339   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3450340   +          quit;
3450341   +          data &em_user_groupinfo;
3450342   +             set &em_user_groupinfo;
3450343   +             _LOOP_=_N_;
3450344   +          run;
3450345   +      %end;
3450347   +      data &em_data_eminfo;
3450348   +         length TARGET KEY $32  DATA $43;
3450349   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3450350   +      run;
3450352   +      data &em_user_emloopinfo;
3450353   +         set &em_user_groupinfo;
3450354   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3450355   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450356   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3450357   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3450358   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3450359   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3450360   +         %end;
3450361   +         %else %do;
3450362   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450363   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3450364   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3450365   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3450366   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3450367   +         %end;
3450368   +      run;
3450370   +      proc datasets lib=work nolist;
3450371   +          delete temp loopinfo
3450372   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3450373   +              target
3450374   +          %end;
3450375   +          ;
3450376   +      run;
3450378   +   %end;
3450380   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3450381   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3450382   +       data _null_;
3450383   +          length quotedTarget $32;
3450384   +          set &em_user_groupinfo;
3450385   +          file gpdelta;
3450386   +          if _N_ = &emloopnumber then do;
3450387   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3450388   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3450390   +             %do i=1 %to &numgroupvar;
3450391   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3450392   +                 put "if upcase(NAME)= '&gvar' then delete;";
3450393   +             %end;
3450394   +          end;
3450395   +       run;
3450396   +   %end;
3450397   +   %else %do;
3450398   +       data _null_;
3450399   +          set &em_user_groupinfo;
3450400   +          file gpdelta;
3450401   +          if _N_ = &emloopnumber then do;
3450402   +             %do i=1 %to &numgroupvar;
3450403   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3450404   +                 put "if upcase(NAME)= '&gvar' then delete;";
3450405   +             %end;
3450406   +          end;
3450407   +       run;
3450408   +   %end;
3450409   +   filename gpdelta;
3450411   +   %let nobs=0;
3450412   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3450413   +   %if &dsid>0 %then %do;
3450414   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3450415   +       %let dsid = %sysfunc(close(&dsid));
3450416   +   %end;
3450418   +   %if ^&nobs  %then
3450419   +       %let emloopmode =;
3450420   +   %else
3450421   +       %if &nobs< &emloopnumber %then
3450422   +           %let emloopmode = POSTLOOP;
3450423   +        %else
3450424   +        %let emloopmode = LOOP;
3450425   +%mend gp_group;
3450427   +%macro gp_Index;
3450429   +   %em_getName(key=INDEXINFO,  type=DATA);
3450430   +   %em_getName(key=EMLOOPINFO, type=DATA);
3450432   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3450433   +       data &em_user_indexinfo;
3450434   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3450435   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3450436   +          _TARGET_   ="";
3450437   +          _WHERE_    ="";
3450438   +          output;
3450439   +       run;
3450440   +       data &em_data_eminfo;
3450441   +          length TARGET KEY $32  DATA $43;
3450442   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3450443   +       run;
3450445   +       data &em_user_emloopinfo;
3450446   +          length MODE $8;
3450447   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3450448   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450449   +          set &em_user_indexinfo(keep=_LOOP_ );
3450450   +          MODE='Index';
3450451   +       run;
3450452   +   %end;
3450454   +%mend gp_index;
3450456   +%macro gp_Target;
3450457   +   %let TargetName = %scan(%em_target, &emloopnumber);
3450458   +   %if "&targetName" eq "" %then %do;
3450459   +       %goto doendgpt;
3450460   +   %end;
3450462   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3450463   +       %put GP_TARGET;
3450464   +       %put &emLoopnumber &TargetName;
3450465   +   %end;
3450467   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3450468   +   data _null_;
3450469   +      file gpdelta;
3450470   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3450471   +   run;
3450472   +   filename gpdelta;
3450474   +   %if &emloopnumber eq 1 %then %do;
3450475   +       %em_getName(key=TARGETINFO,  type=DATA);
3450476   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3450478   +       data &em_user_targetinfo;
3450479   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3450480   +          retain _LOOP_;
3450481   +          _WHERE_ = '';
3450482   +          %do i=1 %to &em_num_target;
3450483   +              %let varname = %scan(%em_target, &i, ' ');
3450484   +              _TARGET_ = "&varname";
3450485   +              _LOOP_+1;
3450486   +              output;
3450487   +           %end;
3450488   +       run;
3450489   +       data &em_user_emloopinfo;
3450490   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3450491   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3450492   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3450493   +      run;
3450495   +       data &em_data_eminfo;
3450496   +          length TARGET KEY $32  DATA $43;
3450497   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3450498   +       run;
3450499   +   %end;
3450501   +   %doendgpt:
3450502   +%mend gp_target;
3450504   +%macro train;
3450505   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3450506   +       %put LOOP MODE:   &emloopmode ;
3450507   +       %put LOOP NUMBER: &emloopnumber;
3450508   +   %end;
3450510   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3450512   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3450514   +       %let hpdmFlag = 0;
3450515   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3450516   +            data _null_;
3450517   +               set &em_import_DATA_eminfo;
3450518   +               where KEY = "HPDMSAMPLE";
3450519   +               call symput('hpdmFlag', '1');
3450520   +            run;
3450521   +       %end;
3450522   +       %if &hpdmFlag %then %do;
3450523   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3450524   +           %goto doendmain;
3450525   +       %end;
3450526   +   %end;
3450528   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3450529   +   %em_getname(key=GROUPINFO,  type=DATA);
3450530   +   %em_getname(key=BOOSTINFO,  type=DATA);
3450531   +   %em_getname(key=BAGINFO,    type=DATA);
3450532   +   %em_getname(key=TARGETINFO, type=DATA);
3450533   +   %em_getname(key=INDEXINFO,  type=DATA);
3450534   +   %em_getname(key=EMINFO,  type=DATA);
3450536   +   %if "&emloopnumber" = "1" %then %do;
3450537   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3450538   +       filename _pregrp "&em_user_precode";
3450539   +       data _null_;
3450540   +         rc = fdelete('_pregrp');
3450541   +       run;
3450542   +       filename _pregrp;
3450544   +       %let members =;
3450545   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3450546   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3450547   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3450548   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3450549   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3450550   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3450551   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3450553   +       %if "&members" ne "" %then %do;
3450554   +           proc datasets lib=&em_lib nolist;
3450555   +              delete &members;
3450556   +           run;
3450557   +      %end;
3450558   +   %end;
3450560   +   %let emboostvar    =;
3450561   +   %let embagvar      =;
3450562   +   %let emgroupvar    =;
3450563   +   %let emnumgroupvar =;
3450564   +   %getVariables;
3450566   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3450567   +       %if &EM_NUM_TARGET>=1 %then %do;
3450568   +           %gp_target;
3450569   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3450570   +               %let emloopmode= LOOP;
3450571   +           %else
3450572   +              %let emloopmode = POSTLOOP;
3450573   +       %end;
3450574   +       %else %do;
3450575   +           %let emloopmode = ;
3450576   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3450577   +           %goto doendmain;
3450578   +       %end;
3450579   +   %end;
3450580   +   %else
3450581   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3450582   +       %let emloopmode=;
3450583   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3450584   +           proc delete data=&em_data_eminfo;
3450585   +           run;
3450586   +       %end;
3450587   +   %end;
3450588   +   %else
3450589   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3450590   +       %gp_index;
3450591   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3450592   +           %let emloopmode= LOOP;
3450593   +       %else
3450594   +           %let emloopmode= POSTLOOP;
3450595   +   %end;
3450596   +   %else
3450597   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3450598   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3450599   +           %let emloopmode = ;
3450600   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3450601   +           %goto doendmain;
3450602   +       %end;
3450604   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3450605   +   %end;
3450606   +   %else
3450607   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3450608   +       %if "&emboostvar" eq "" %then %do;
3450609   +           %let emloopmode = ;
3450610   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3450611   +           %goto doendmain;
3450612   +       %end;
3450614   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3450615   +           %let emloopmode= LOOP;
3450616   +           %gp_boost(targetname=&emboostvar);
3450618   +       %end;
3450619   +       %else
3450620   +           %let emloopmode= POSTLOOP;
3450621   +   %end;
3450622   +   %else
3450623   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3450624   +       %if "&embagvar" eq "" %then %do;
3450625   +           %let emloopmode = ;
3450626   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3450627   +           %goto doendmain;
3450628   +       %end;
3450630   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3450631   +           %let emloopmode= LOOP;
3450632   +           %gp_bag(targetname=&embagvar);
3450633   +       %end;
3450634   +       %else
3450635   +           %let emloopmode= POSTLOOP;
3450636   +   %end;
3450639   +   %if &emloopmode eq "" %then %do;
3450640   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3450641   +       %let member = %scan(&em_data_eminfo, 2, .);
3450642   +       proc datasets lib=&lib nolist;
3450643   +          delete &member;
3450644   +       run;
3450645   +   %end;
3450647   +   %doendmain:
3450649   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3450650   +       %put NEW LOOP MODE: &emloopmode;
3450651   +   %end;
3450653   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3450654   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3450655   +       %include temp;
3450656   +       filename temp;
3450658   +       %postloop;
3450659   +   %end;
3450661   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp5_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP5_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp5_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp5\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:05:11 o'clock,
      Create Time=02 June 2018 16:26:28 o'clock
 
NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP5_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3450663   +%macro postloop;
3450664   +   %let deleteString =;
3450665   +
3450666   +   %em_getname(key=boostweight, type=DATA);
3450667   +   %em_getname(key=boostscore,  type=DATA);
3450668   +
3450669   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3450670   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3450671   +   %if "&deleteString" ne "" %then %do;
3450672   +       proc datasets lib=&em_lib nolist;
3450673   +          delete &deleteString;
3450674   +       run;
3450675   +   %end;
3450676   +
3450677   +   %em_register(key=EMLOOPINFO,    type=DATA);
3450678   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3450679   +    proc print data=&em_user_emloopinfo noobs label;
3450680   +       title9 'Group Summary';
3450681   +    run;
3450682   +    title9;
3450683   +
3450684   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3450685   +
3450686   +%mend postloop;
3450687   +
3450688   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp5_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp5_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP5_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2299.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.39725852683058;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3450689    *------------------------------------------------------------*;
3450690    * End TRAIN: Grp5;
3450691    *------------------------------------------------------------*;
3450692
 
3450693    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3450694    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3450695    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3450696    ;
MPRINT(EM_DIAGRAM):   ;
3450697    ;
MPRINT(EM_DIAGRAM):   ;
3450698    ;
MPRINT(EM_DIAGRAM):   ;
3450699    ;
MPRINT(EM_DIAGRAM):   ;
3450700    quit;
MPRINT(EM_DIAGRAM):   quit;
3450701    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3450702    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3450703    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3450704    /*; *"; *'; */
3450705    ;
MPRINT(EM_DIAGRAM):   ;
3450706    run;
MPRINT(EM_DIAGRAM):   run;
3450707    quit;
MPRINT(EM_DIAGRAM):   quit;
3450708    /* Reset EM Options */
3450709    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3450710    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3450711    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3450712    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3450713    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3450714    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
