*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:37:02 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:37:00 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:37:00 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2MYK97_ "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2MYK97_ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMGROUP\EMLOG_4.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:37:00 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMGROUP\EMOUTPUT_4.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:37:00 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1076868    proc freq data=EMWS1.Grp12_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp12_VariableSet noprint;
1076869    table ROLE*LEVEL/out=WORK.Grp12META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp12META;
1076870    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP12_VARIABLESET.
NOTE: The data set WORK.GRP12META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
1076871    proc print data=WORK.Grp12META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp12META label noobs;
1076872    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1076873    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
1076874    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1076875    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1076876    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP12META.
NOTE: The PROCEDURE PRINT printed page 696.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1076877    title10;
MPRINT(EM_DIAGRAM):   title10;
1076878    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp12: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077201    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1077202    * Grp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp12: Generation of macros and macro variables;
1077203    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
1077204    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
1077205    %let EMEXCEPTIONSTRING=;
1077206    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1077207    * TRAIN: Grp12;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp12;
1077208    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1077209    %let EM_ACTION = TRAIN;
1077210    %let syscc = 0;
1077211    %macro main;
1077212
1077213       filename temp catalog 'sashelp.emutil.gp_macros.source';
1077214       %include temp;
1077215       filename temp;
1077216
1077217       %SetProperties;
1077218
1077219       %if %upcase(&EM_ACTION) = CREATE %then %do;
1077220
1077221           filename temp catalog 'sashelp.emutil.gp_create.source';
1077222           %include temp;
1077223           filename temp;
1077224
1077225           %create;
1077226       %end;
1077227       %else
1077228       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1077229
1077230           filename temp catalog 'sashelp.emutil.gp_train.source';
1077231           %include temp;
1077232           filename temp;
1077233
1077234           %train;
1077235       %end;
1077236       %else
1077237       %if %upcase(&EM_ACTION) = SCORE %then %do;
1077238
1077239           filename temp catalog 'sashelp.emutil.gp_score.source';
1077240           %include temp;
1077241           filename temp;
1077242
1077243           %score;
1077244       %end;
1077245       %else
1077246       %if %upcase(&EM_ACTION) = REPORT %then %do;
1077247
1077248           filename temp catalog 'sashelp.emutil.gp_report.source';
1077249           %include temp;
1077250           filename temp;
1077251
1077252           %report;
1077253
1077254       %end;
1077255       %else
1077256       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1077257
1077258           filename temp catalog 'sashelp.emutil.gp_postloop.source';
1077259           %include temp;
1077260           filename temp;
1077261
1077262           %postloop;
1077263
1077264       %end;
1077265
1077266       %doendm:
1077267    %mend main;
1077268
1077269    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
1077270   +%macro SetProperties;
1077271   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
1077272   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
1077273   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
1077274   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
1077275   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
1077276   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
1077277   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
1077278   +%mend SetProperties;
1077279   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
1077280   +%macro scoreValidTest(data=, out=);
1077282   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
1077283   +       data &out / view = &out;
1077284   +          retain _RESAMP_ 1;
1077285   +          set &data;
1077286   +       run;
1077287   +   %end;
1077289   +%mend scoreValidTest;
1077291   +%macro getVariables;
1077292   +   %if "&emloopnumber" = "1" %then %do;
1077293   +       data _null_;
1077294   +          retain numgoup 0;
1077295   +          set &em_data_variableset end=eof;
1077296   +          %if &em_num_target = 1 %then %do;
1077297   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
1077298   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
1077299   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
1077300   +              %end;
1077301   +              %else
1077302   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
1077303   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
1077304   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
1077305   +              %end;
1077306   +          %end;
1077307   +          %else %do;
1077308   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
1077309   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
1077310   +              else
1077311   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
1077312   +          %end;
1077313   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
1077314   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
1077315   +             numgroup + 1;
1077316   +          end;
1077317   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
1077318   +       run;
1077319   +    %end;
1077320   +    %else %do;
1077321   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
1077322   +            data _null_;
1077323   +               retain numgoup 0;
1077324   +               set &em_data_variableset end=eof;
1077325   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
1077326   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
1077327   +               numgroup + 1;
1077328   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
1077329   +            run;
1077330   +          %end;
1077331   +            %else
1077332   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
1077333   +            %em_getName(key=BOOSTINFO,   type=DATA);
1077334   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
1077335   +                data _null_;
1077336   +                   set &em_user_boostinfo;
1077337   +                   call symput('emboostvar', strip(_TARGET_));
1077338   +                run;
1077339   +            %end;
1077340   +        %end;
1077341   +        %else
1077342   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
1077343   +                %em_getName(key=BAGINFO,   type=DATA);
1077344   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
1077345   +                    data _null_;
1077346   +                       set &em_user_baginfo;
1077347   +                      call symput('embagvar', strip(_TARGET_));
1077348   +                    run;
1077349   +                %end;
1077350   +            %end;
1077351   +    %end;
1077352   +%mend getVariables;
1077354   +%macro gp_bag(targetname=);
1077355   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
1077356   +        %put LOOP MODE:   &emloopmode ;
1077357   +        %put LOOP NUMBER: &emloopnumber;
1077358   +        %put BAGGING TARGET: &targetname;
1077359   +   %end;
1077361   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
1077362   +   %include temp;
1077363   +   filename temp;
1077365   +   %em_getName(key=BAGINFO,    type=DATA);
1077366   +   %em_getName(key=EMLOOPINFO, type=DATA);
1077368   +   %if &emloopnumber = 1 %then %do;
1077369   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
1077370   +       data _null_;
1077371   +          file gpdelta;
1077372   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
1077373   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
1077374   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
1077375   +          put "end;";
1077376   +       run;
1077377   +       filename gpdelta;
1077379   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
1077380   +           proc datasets lib=&em_lib nolist;
1077381   +              delete &em_nodeid._baginfo;
1077382   +           run;
1077383   +       %end;
1077385   +       %if "%em_freq" ne "" %then %do;
1077386   +           proc means data=&em_import_data sum;
1077387   +              var %em_freq;
1077388   +              output out = _tempds sum=sumfreq;
1077389   +           run;
1077390   +           quit;
1077391   +           data _null_;
1077392   +              set _tempDs;
1077393   +              call symput('_sumfreq', put(sumfreq, best12.));
1077394   +           run;
1077395   +       %end;
1077396   +       %else %do;
1077397   +           proc sql noprint;
1077398   +              select count(*) into :_sumfreq
1077399   +              from &em_import_data;
1077400   +           quit;
1077401   +       %end;
1077403   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
1077404   +           data _null_;
1077405   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
1077406   +           run;
1077407   +       %end;
1077408   +       %else
1077409   +           %let _size = &em_property_sizeobs;
1077411   +       data &em_user_baginfo;
1077412   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
1077413   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
1077414   +          _TARGET_   ="&targetname";
1077415   +          _SUMFREQ_  =&_sumfreq;
1077416   +           _SIZE_    = &_size;
1077417   +          output;
1077418   +       run;
1077419   +       data &em_user_emloopinfo;
1077420   +          length MODE $8;
1077421   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
1077422   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077423   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
1077424   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
1077425   +           MODE='Bagging';
1077426   +       run;
1077428   +       data &em_data_eminfo;
1077429   +          length TARGET KEY $32  DATA $43;
1077430   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
1077431   +       run;
1077432   +   %end;
1077433   +   %else %do;
1077434   +      data _null_;
1077435   +         set &em_user_baginfo;
1077436   +         call symput('_sumfreq', put(_sumfreq_, best12.));
1077437   +         call symput('_size', put(_size_, best12.));
1077438   +      run;
1077439   +   %end;
1077441   +   %let bagsumFreq  = &_sumFreq;
1077442   +   %let bagSize     = &_Size;
1077444   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
1077445   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
1077447   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
1077448   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
1077450   +   %doendbg:
1077452   +%mend gp_bag;
1077455   +%macro gp_boost(targetname=);
1077456   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
1077457   +       %put LOOP MODE:   &emloopmode ;
1077458   +       %put LOOP NUMBER: &emloopnumber;
1077459   +        %put BAGGING TARGET: &targetname;
1077460   +   %end;
1077462   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
1077463   +   %include temp;
1077464   +   filename temp;
1077466   +   %em_getname(key=EMLOOPINFO, type=DATA);
1077467   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
1077468   +   %em_getname(key=BOOSTSCORE,  type=DATA);
1077469   +   %em_getName(key=BOOSTINFO,   type=DATA);
1077471   +   %if &emloopnumber = 1 %then %do;
1077472   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
1077473   +       data _null_;
1077474   +          file gpdelta;
1077475   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
1077476   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
1077477   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
1077478   +          put "end;";
1077479   +       run;
1077480   +       filename gpdelta;
1077482   +       %let deleteString =;
1077483   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
1077484   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
1077485   +       %if "&deleteString" ne "" %then %do;
1077486   +           proc datasets lib=&em_lib nolist;
1077487   +              delete &deleteString;
1077488   +           run;
1077489   +       %end;
1077491   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
1077493   +       data &em_user_boostinfo;
1077494   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
1077495   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
1077496   +          _TARGET_          ="&targetname";
1077497   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
1077498   +          _SUMFREQ_         =&_sumfreq;
1077499   +       run;
1077500   +       data &em_user_emloopinfo;
1077501   +          length MODE $8;
1077502   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
1077503   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077504   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
1077505   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
1077506   +           MODE='Boosting';
1077507   +       run;
1077509   +       data &em_data_eminfo;
1077510   +          length TARGET KEY $32  DATA $43;
1077511   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
1077512   +       run;
1077514   +   %end;
1077515   +   %else %do;
1077516   +       %global _dmboodiv;
1077517   +       %let dmboosf = %upcase(&targetname);
1077518   +       %if %sysfunc(length(&targetname))> 30 %then
1077519   +           %let dmboosf =  %substr(&targetname, 1, 30);
1077521   +       data _null_;
1077522   +          set &em_user_boostinfo;
1077523   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
1077524   +       run;
1077526   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
1077528   +       data &em_user_boostinfo;
1077529   +          set &em_user_boostinfo;
1077530   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
1077531   +       run;
1077533   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
1077535   +   %end;
1077537   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
1077538   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
1077540   +   %doendbst:
1077542   +%mend gp_boost;
1077544   +%macro gp_group(numgroupvar=, groupvar=);
1077545   +   %em_getname(key=GROUPINFO, type=DATA);
1077546   +   %em_getName(key=LOOPINFO,  type=DATA);
1077547   +   %em_getName(key=EMGROUPINFO, type=DATA);
1077549   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
1077550   +       ods listing close;
1077551   +       %if &numgroupvar = 1 %then %do;
1077552   +           ods output onewayfreqs=temp;
1077553   +       %end;
1077554   +       %else %do;
1077555   +           ods output crosstabfreqs=temp;
1077556   +       %end;
1077557   +       proc freq data=&em_import_data;
1077558   +          table
1077560   +          %let tableString =;
1077561   +          %let freqString  =;
1077562   +          %do i=1 %to &numgroupvar;
1077563   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
1077564   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
1077565   +              %let freqString = &freqString.1;
1077566   +          %end;
1077567   +          &tableString / missing;
1077568   +       run;
1077569   +       ods listing;
1077570   +       %if &numgroupvar = 1 %then %do;
1077571   +           data _null_;
1077572   +              retain totalobs 0;
1077573   +              set temp end=eof;
1077574   +              totalobs + frequency;
1077575   +              if eof then
1077576   +                 call symput('_totalObs_', put(totalobs, best.));
1077577   +           run;
1077579   +           proc sort data=temp out=loopinfo nodupkey;
1077580   +              by &groupvar;
1077581   +              where frequency>=&em_property_minimumObs;
1077582   +           run;
1077583   +       %end;
1077584   +       %else %do;
1077585   +           data _null_;
1077586   +              set temp;
1077587   +              where _type_='00';
1077588   +              call symput('_totalObs_', put(frequency, best.));
1077589   +           run;
1077590   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
1077591   +              by &groupvar;
1077592   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
1077593   +           run;
1077594   +       %end;
1077596   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
1077597   +       filename _pregrp "&em_user_precode";
1077599   +       %let dsid = %sysfunc(open(loopinfo));
1077600   +       %do i=1 %to &numgroupvar;
1077601   +           %let varname = %scan(&groupvar, &i, %str( ));
1077602   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
1077603   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
1077604   +           %if %index(&varfmt, -) %then %do;
1077605   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
1077606   +           %end;
1077608   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
1077609   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
1077610   +           %let fmttype&i = &vartype;
1077611   +           %let fmtlen&i  = &varlen;
1077613   +           %let fmtvar&i =;
1077614   +           %let fmt&i    =;
1077615   +           %if "&varfmt" ne "" %then %do;
1077616   +              %let fmtvar&i  = _FORMAT&i._;
1077617   +              %let fmt&i     = &varfmt;
1077618   +           %end;
1077619   +       %end;
1077620   +       %let dsid = %sysfunc(close(&dsid));
1077622   +       data _null_;
1077623   +          %do i=1 %to &numgroupvar;
1077624   +              %if "&&fmt&i" ne "" %then %do;
1077625   +                  retain len_&i 0;
1077626   +              %end;
1077627   +          %end;
1077629   +          set loopinfo end=eof;
1077630   +          file _pregrp;
1077632   +          %do i=1 %to &numgroupvar;
1077633   +              %let varname = %scan(&groupvar, &i, %str( ));
1077634   +              %if "&&fmt&i" ne "" %then %do;
1077635   +                 if length(put(&varname, &&fmt&i)) > len_&i then
1077636   +                    len_&i = length(put(&varname, &&fmt&i));
1077637   +              %end;
1077638   +          %end;
1077640   +          if eof then do;
1077641   +             %do i=1 %to &numgroupvar;
1077642   +                 %let varname = %scan(&groupvar, &i, %str( ));
1077643   +                 %if "&&fmt&i" ne "" %then %do;
1077644   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
1077645   +                     put "drop &&fmtvar&i" len_&i ";";
1077646   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
1077647   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
1077648   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
1077649   +                 %end;
1077650   +              %end;
1077651   +          end;
1077652   +      run;
1077654   +      data loopinfo;
1077655   +         set loopinfo;
1077656   +         %do i=1 %to &numgroupvar;
1077657   +             %let varname = %scan(&groupvar, &i, %str( ));
1077658   +             %if "&&fmt&i" ne "" %then %do;
1077659   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
1077660   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
1077661   +             %end;
1077662   +         %end;
1077663   +      run;
1077664   +      filename _pregrp;
1077666   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
1077667   +          data temp;
1077668   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
1077669   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
1077670   +      %end;
1077671   +      %else %do;
1077672   +          data &em_user_groupinfo;
1077673   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
1077674   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
1077675   +             retain _TARGET_ '';
1077676   +      %end;
1077678   +          set loopinfo;
1077679   +          _LOOP_= _N_;
1077680   +          _WHERE_ = '';
1077681   +          _WHEREDESC_  = '';
1077682   +          %do i=1 %to &numgroupvar;
1077683   +              %let varname = %scan(&groupvar, &i, %str( ));
1077684   +              %if "&&fmt&i" eq "" %then %do;
1077685   +                  %if "&&fmtType&i" eq "N" %then %do;
1077686   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
1077687   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
1077688   +                   %end;
1077689   +                  %else %do;
1077690   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
1077691   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
1077692   +                  %end;
1077693   +              %end;
1077694   +              %else %do;
1077695   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
1077696   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
1077697   +              %end;
1077698   +              %if &i < &numgroupvar %then %do;
1077699   +                  _WHERE_ = strip(_WHERE_)!!' and ';
1077700   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
1077701   +              %end;
1077702   +          %end;
1077703   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
1077704   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
1077705   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
1077706   +              FREQUENCY = &_totalobs_ - FREQUENCY;
1077707   +          %end;
1077708   +      run;
1077710   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
1077711   +          data target;
1077712   +             length _TARGET_ $32;
1077713   +              %do i=1 %to &em_num_target;
1077714   +                  %let varname = %scan(%em_target, &i, %str( ));
1077715   +                  _TARGET_ = "&varname";
1077716   +                  output;
1077717   +              %end;
1077718   +          run;
1077719   +          proc sql;
1077720   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
1077721   +          quit;
1077722   +          data &em_user_groupinfo;
1077723   +             set &em_user_groupinfo;
1077724   +             _LOOP_=_N_;
1077725   +          run;
1077726   +      %end;
1077728   +      data &em_data_eminfo;
1077729   +         length TARGET KEY $32  DATA $43;
1077730   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
1077731   +      run;
1077733   +      data &em_user_emloopinfo;
1077734   +         set &em_user_groupinfo;
1077735   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
1077736   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077737   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
1077738   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
1077739   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
1077740   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
1077741   +         %end;
1077742   +         %else %do;
1077743   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077744   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
1077745   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
1077746   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
1077747   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
1077748   +         %end;
1077749   +      run;
1077751   +      proc datasets lib=work nolist;
1077752   +          delete temp loopinfo
1077753   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
1077754   +              target
1077755   +          %end;
1077756   +          ;
1077757   +      run;
1077759   +   %end;
1077761   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
1077762   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
1077763   +       data _null_;
1077764   +          length quotedTarget $32;
1077765   +          set &em_user_groupinfo;
1077766   +          file gpdelta;
1077767   +          if _N_ = &emloopnumber then do;
1077768   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
1077769   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
1077771   +             %do i=1 %to &numgroupvar;
1077772   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
1077773   +                 put "if upcase(NAME)= '&gvar' then delete;";
1077774   +             %end;
1077775   +          end;
1077776   +       run;
1077777   +   %end;
1077778   +   %else %do;
1077779   +       data _null_;
1077780   +          set &em_user_groupinfo;
1077781   +          file gpdelta;
1077782   +          if _N_ = &emloopnumber then do;
1077783   +             %do i=1 %to &numgroupvar;
1077784   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
1077785   +                 put "if upcase(NAME)= '&gvar' then delete;";
1077786   +             %end;
1077787   +          end;
1077788   +       run;
1077789   +   %end;
1077790   +   filename gpdelta;
1077792   +   %let nobs=0;
1077793   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
1077794   +   %if &dsid>0 %then %do;
1077795   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
1077796   +       %let dsid = %sysfunc(close(&dsid));
1077797   +   %end;
1077799   +   %if ^&nobs  %then
1077800   +       %let emloopmode =;
1077801   +   %else
1077802   +       %if &nobs< &emloopnumber %then
1077803   +           %let emloopmode = POSTLOOP;
1077804   +        %else
1077805   +        %let emloopmode = LOOP;
1077806   +%mend gp_group;
1077808   +%macro gp_Index;
1077810   +   %em_getName(key=INDEXINFO,  type=DATA);
1077811   +   %em_getName(key=EMLOOPINFO, type=DATA);
1077813   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
1077814   +       data &em_user_indexinfo;
1077815   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
1077816   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
1077817   +          _TARGET_   ="";
1077818   +          _WHERE_    ="";
1077819   +          output;
1077820   +       run;
1077821   +       data &em_data_eminfo;
1077822   +          length TARGET KEY $32  DATA $43;
1077823   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
1077824   +       run;
1077826   +       data &em_user_emloopinfo;
1077827   +          length MODE $8;
1077828   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
1077829   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077830   +          set &em_user_indexinfo(keep=_LOOP_ );
1077831   +          MODE='Index';
1077832   +       run;
1077833   +   %end;
1077835   +%mend gp_index;
1077837   +%macro gp_Target;
1077838   +   %let TargetName = %scan(%em_target, &emloopnumber);
1077839   +   %if "&targetName" eq "" %then %do;
1077840   +       %goto doendgpt;
1077841   +   %end;
1077843   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
1077844   +       %put GP_TARGET;
1077845   +       %put &emLoopnumber &TargetName;
1077846   +   %end;
1077848   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
1077849   +   data _null_;
1077850   +      file gpdelta;
1077851   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
1077852   +   run;
1077853   +   filename gpdelta;
1077855   +   %if &emloopnumber eq 1 %then %do;
1077856   +       %em_getName(key=TARGETINFO,  type=DATA);
1077857   +       %em_getName(key=EMLOOPINFO,  type=DATA);
1077859   +       data &em_user_targetinfo;
1077860   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
1077861   +          retain _LOOP_;
1077862   +          _WHERE_ = '';
1077863   +          %do i=1 %to &em_num_target;
1077864   +              %let varname = %scan(%em_target, &i, ' ');
1077865   +              _TARGET_ = "&varname";
1077866   +              _LOOP_+1;
1077867   +              output;
1077868   +           %end;
1077869   +       run;
1077870   +       data &em_user_emloopinfo;
1077871   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
1077872   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
1077873   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
1077874   +      run;
1077876   +       data &em_data_eminfo;
1077877   +          length TARGET KEY $32  DATA $43;
1077878   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
1077879   +       run;
1077880   +   %end;
1077882   +   %doendgpt:
1077883   +%mend gp_target;
1077885   +%macro train;
1077886   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
1077887   +       %put LOOP MODE:   &emloopmode ;
1077888   +       %put LOOP NUMBER: &emloopnumber;
1077889   +   %end;
1077891   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
1077893   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
1077895   +       %let hpdmFlag = 0;
1077896   +       %if %symexist(em_import_DATA_eminfo) %then %do;
1077897   +            data _null_;
1077898   +               set &em_import_DATA_eminfo;
1077899   +               where KEY = "HPDMSAMPLE";
1077900   +               call symput('hpdmFlag', '1');
1077901   +            run;
1077902   +       %end;
1077903   +       %if &hpdmFlag %then %do;
1077904   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
1077905   +           %goto doendmain;
1077906   +       %end;
1077907   +   %end;
1077909   +   %em_getname(key=EMLOOPINFO,  type=DATA);
1077910   +   %em_getname(key=GROUPINFO,  type=DATA);
1077911   +   %em_getname(key=BOOSTINFO,  type=DATA);
1077912   +   %em_getname(key=BAGINFO,    type=DATA);
1077913   +   %em_getname(key=TARGETINFO, type=DATA);
1077914   +   %em_getname(key=INDEXINFO,  type=DATA);
1077915   +   %em_getname(key=EMINFO,  type=DATA);
1077917   +   %if "&emloopnumber" = "1" %then %do;
1077918   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
1077919   +       filename _pregrp "&em_user_precode";
1077920   +       data _null_;
1077921   +         rc = fdelete('_pregrp');
1077922   +       run;
1077923   +       filename _pregrp;
1077925   +       %let members =;
1077926   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
1077927   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
1077928   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
1077929   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
1077930   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
1077931   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
1077932   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
1077934   +       %if "&members" ne "" %then %do;
1077935   +           proc datasets lib=&em_lib nolist;
1077936   +              delete &members;
1077937   +           run;
1077938   +      %end;
1077939   +   %end;
1077941   +   %let emboostvar    =;
1077942   +   %let embagvar      =;
1077943   +   %let emgroupvar    =;
1077944   +   %let emnumgroupvar =;
1077945   +   %getVariables;
1077947   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
1077948   +       %if &EM_NUM_TARGET>=1 %then %do;
1077949   +           %gp_target;
1077950   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
1077951   +               %let emloopmode= LOOP;
1077952   +           %else
1077953   +              %let emloopmode = POSTLOOP;
1077954   +       %end;
1077955   +       %else %do;
1077956   +           %let emloopmode = ;
1077957   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
1077958   +           %goto doendmain;
1077959   +       %end;
1077960   +   %end;
1077961   +   %else
1077962   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
1077963   +       %let emloopmode=;
1077964   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
1077965   +           proc delete data=&em_data_eminfo;
1077966   +           run;
1077967   +       %end;
1077968   +   %end;
1077969   +   %else
1077970   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
1077971   +       %gp_index;
1077972   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
1077973   +           %let emloopmode= LOOP;
1077974   +       %else
1077975   +           %let emloopmode= POSTLOOP;
1077976   +   %end;
1077977   +   %else
1077978   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
1077979   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
1077980   +           %let emloopmode = ;
1077981   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
1077982   +           %goto doendmain;
1077983   +       %end;
1077985   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
1077986   +   %end;
1077987   +   %else
1077988   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
1077989   +       %if "&emboostvar" eq "" %then %do;
1077990   +           %let emloopmode = ;
1077991   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
1077992   +           %goto doendmain;
1077993   +       %end;
1077995   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
1077996   +           %let emloopmode= LOOP;
1077997   +           %gp_boost(targetname=&emboostvar);
1077999   +       %end;
1078000   +       %else
1078001   +           %let emloopmode= POSTLOOP;
1078002   +   %end;
1078003   +   %else
1078004   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
1078005   +       %if "&embagvar" eq "" %then %do;
1078006   +           %let emloopmode = ;
1078007   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
1078008   +           %goto doendmain;
1078009   +       %end;
1078011   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
1078012   +           %let emloopmode= LOOP;
1078013   +           %gp_bag(targetname=&embagvar);
1078014   +       %end;
1078015   +       %else
1078016   +           %let emloopmode= POSTLOOP;
1078017   +   %end;
1078020   +   %if &emloopmode eq "" %then %do;
1078021   +       %let lib    = %scan(&em_data_eminfo, 1, .);
1078022   +       %let member = %scan(&em_data_eminfo, 2, .);
1078023   +       proc datasets lib=&lib nolist;
1078024   +          delete &member;
1078025   +       run;
1078026   +   %end;
1078028   +   %doendmain:
1078030   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
1078031   +       %put NEW LOOP MODE: &emloopmode;
1078032   +   %end;
1078034   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
1078035   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
1078036   +       %include temp;
1078037   +       filename temp;
1078039   +       %postloop;
1078040   +   %end;
1078042   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp12_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP12_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp12_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 4 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:00 o'clock,
      Create Time=02 June 2018 16:26:08 o'clock
 
NOTE: 1 record was written to the file GPDELTA.
      The minimum record length was 38.
      The maximum record length was 38.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp12;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078044    *------------------------------------------------------------*;
1078045    * End TRAIN: Grp12;
1078046    *------------------------------------------------------------*;
1078047
 
1078048    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1078049    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1078050    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078051    ;
MPRINT(EM_DIAGRAM):   ;
1078052    ;
MPRINT(EM_DIAGRAM):   ;
1078053    ;
MPRINT(EM_DIAGRAM):   ;
1078054    ;
MPRINT(EM_DIAGRAM):   ;
1078055    quit;
MPRINT(EM_DIAGRAM):   quit;
1078056    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078057    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1078058    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078059    /*; *"; *'; */
1078060    ;
MPRINT(EM_DIAGRAM):   ;
1078061    run;
MPRINT(EM_DIAGRAM):   run;
1078062    quit;
MPRINT(EM_DIAGRAM):   quit;
1078063    /* Reset EM Options */
1078064    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1078065    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1078066    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:37:01 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:37:01 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28XGIP3 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28XGIP3 new;
MPRINT(EM_DIAGRAM):   run;
1078168    %let EMEXCEPTIONSTRING=;
1078169    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1078170    * SCORE: Grp12;
MPRINT(EM_DIAGRAM):   * SCORE: Grp12;
1078171    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078172    %let EM_ACTION = SCORE;
1078173    %let syscc = 0;
1078174    %macro main;
1078175
1078176       filename temp catalog 'sashelp.emutil.gp_macros.source';
1078177       %include temp;
1078178       filename temp;
1078179
1078180       %SetProperties;
1078181
1078182       %if %upcase(&EM_ACTION) = CREATE %then %do;
1078183
1078184           filename temp catalog 'sashelp.emutil.gp_create.source';
1078185           %include temp;
1078186           filename temp;
1078187
1078188           %create;
1078189       %end;
1078190       %else
1078191       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1078192
1078193           filename temp catalog 'sashelp.emutil.gp_train.source';
1078194           %include temp;
1078195           filename temp;
1078196
1078197           %train;
1078198       %end;
1078199       %else
1078200       %if %upcase(&EM_ACTION) = SCORE %then %do;
1078201
1078202           filename temp catalog 'sashelp.emutil.gp_score.source';
1078203           %include temp;
1078204           filename temp;
1078205
1078206           %score;
1078207       %end;
1078208       %else
1078209       %if %upcase(&EM_ACTION) = REPORT %then %do;
1078210
1078211           filename temp catalog 'sashelp.emutil.gp_report.source';
1078212           %include temp;
1078213           filename temp;
1078214
1078215           %report;
1078216
1078217       %end;
1078218       %else
1078219       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1078220
1078221           filename temp catalog 'sashelp.emutil.gp_postloop.source';
1078222           %include temp;
1078223           filename temp;
1078224
1078225           %postloop;
1078226
1078227       %end;
1078228
1078229       %doendm:
1078230    %mend main;
1078231
1078232    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
1078233   +%macro SetProperties;
1078234   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
1078235   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
1078236   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
1078237   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
1078238   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
1078239   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
1078240   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
1078241   +%mend SetProperties;
1078242   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_SCORE.SOURCE.
1078243   +%macro scoreTables(data=, out=, scoreref=, prefref=, keepnum=0);
1078244   +
1078245   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
1078246   +       data &out;
1078247   +          set &data
1078248   +          %if &keepNum %then %do;
1078249   +              (keep=%emGrpKeep %emGrpRej)
1078250   +          %end;
1078251   +          ;
1078252   +          %if %sysfunc(fexist(&prefref)) %then %do;
1078253   +              %inc &prefref;
1078254   +          %end;
1078255   +          %inc &scoreref;
1078256   +       run;
1078257   +   %end;
1078258   +
1078259   +%mend scoretables;
1078260   +
1078261   +%macro makeExportCode;
1078262   +   %em_getname(key=EXPORTCODE, type=FILE, extension=sas);
1078263   +   %em_getName(key=GROUPINFO,  type=DATA);
1078264   +
1078265   +   filename x "&EM_USER_EXPORTCODE";
1078266   +
1078267   +   data _null_;
1078268   +      file x;
1078269   +       set &em_user_groupinfo;
1078270   +       if _LOOP_ = &emloopnumber and _where_ ne '' then
1078271   +          put 'if ' _where_ ' then output;';
1078272   +   run;
1078273   +
1078274   +   %em_getname(key=PRECODE, type=FILE, extension=sas);
1078275   +   filename _pregrp "&em_user_precode";
1078276   +
1078277   +   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
1078278   +   %inc _grpdrp;
1078279   +   filename _grpdrp;
1078280   +   %em_varMacro(name=emGrpKeep, metadata=&EM_IMPORT_DATA_CMETA, where=%nrbquote(ROLE ne 'REJECTED'), key=NAME, nummacro=GrpKeep);
1078281   +
1078282   +    %em_varMacro(name=emGrpRej, metadata=&EM_DATA_VARIABLESET, where=%nrbquote(ROLE eq 'REJECTED' and GROUPROLE='GROUP'), key=NAME, nummacro=GrpRej);
1078283   +
1078284   +   %scoreTables(data=&em_import_data,        out=&em_export_train,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
1078285   +   %scoreTables(data=&em_import_validate,    out=&em_export_validate,    scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
1078286   +   %scoreTables(data=&em_import_test,        out=&em_export_test,        scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
1078287   +   %scoreTables(data=&em_import_score,       out=&em_export_score,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
1078288   +   %scoreTables(data=&em_import_transaction, out=&em_export_transaction, scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
1078289   +
1078290   +   filename x;
1078291   +   filename _pregrp;
1078292   +
1078293   +%mend makeExportCode;
1078294   +
1078295   +%macro makeCode;
1078296   +
1078297   +   %if &emloopmode = LOOP %then %do;
1078298   +       %em_getname(key=HPDMSCORE, type=FILE, extension=sas);
1078299   +       filename x "&em_user_HPDMSCORE";
1078300   +
1078301   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
1078302   +       filename _pregrp "&em_user_precode";
1078303   +       %em_copyfile(infref=_pregrp, outfref=x);
1078304   +       filename _pregrp;
1078305   +
1078306   +       data _null_;
1078307   +          file x mod;
1078308   +          set &em_user_groupinfo;
1078309   +          if _LOOP_ = &emloopnumber and _where_ ne '' then
1078310   +             put 'if ^(' _where_ ') then return;';
1078311   +       run;
1078312   +       filename x;
1078313   +
1078314   +       filename x "&EM_FILE_EMFLOWSCORECODE";
1078315   +
1078316   +       %if "&emloopnumber" = "1" %then %do;
1078317   +           %em_getname(key=PRECODE, type=FILE, extension=sas);
1078318   +           filename _pregrp "&em_user_precode";
1078319   +           %em_copyfile(infref=_pregrp, outfref=x);
1078320   +           filename _pregrp;
1078321   +       %end;
1078322   +
1078323   +       data _null_;
1078324   +          file x
1078325   +          %if &emloopnumber = 1 %then %do;
1078326   +              mod
1078327   +          %end;
1078328   +          ;
1078329   +          set &em_user_groupinfo;
1078330   +          if _LOOP_ = &emloopnumber and _where_ ne '' then
1078331   +             put 'if ' _where_ ' then do;';
1078332   +       run;
1078333   +
1078334   +       filename y "&EM_FILE_EMPUBLISHSCORECODE";
1078335   +       %if "&EM_PROPERTY_MODE" ne "CROSSVALIDATION"  %then %do;
1078336   +           %em_copyfile(infref=x, outfref=y);
1078337   +       %end;
1078338   +       %else %do;
1078339   +           %if "&emloopnumber" = "1" %then %do;
1078340   +               %em_getname(key=PRECODE, type=FILE, extension=sas);
1078341   +                filename _pregrp "&em_user_precode";
1078342   +                %em_copyfile(infref=_pregrp, outfref=y);
1078343   +               filename _pregrp;
1078344   +           %end;
1078345   +           data _null_;
1078346   +             file y
1078347   +             %if &emloopnumber = 1 %then %do;
1078348   +                 mod
1078349   +             %end;
1078350   +             ;
1078351   +             set &em_user_groupinfo;
1078352   +             if _LOOP_ = &emloopnumber and _where_ ne '' then do;
1078353   +                _where_ = tranwrd(_where_, '^(', '(');
1078354   +                put 'if ' _where_ ' then do;';
1078355   +                put '_XVAL_=' "&emloopnumber" ';' ;
1078356   +             end;
1078357   +           run;
1078358   +       %end;
1078359   +       filename Y ;
1078360   +       filename x ;
1078361   +   %end;
1078362   +%mend makeCode;
1078363   +
1078364   +%macro score;
1078365   +
1078366   +   %if "&emloopmode" eq "LOOP" %then %do;
1078367   +
1078368   +       %em_getName(key=groupinfo,   type=DATA);
1078369   +
1078370   +       %if %sysfunc(exist(&em_user_groupinfo)) %then %do;
1078371   +           %makeCode;
1078372   +           %makeExportCode;
1078373   +       %end;
1078374   +   %end;
1078375   +   %else
1078376   +   %if "&emLoopmode" eq "POSTLOOP" %then %do;
1078377   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
1078378   +       data _null_;
1078379   +          rc = fdelete('gpdelta');
1078380   +          run;
1078381   +       filename gpdelta;
1078382   +   %end;
1078383   +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\HPDMSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\HPDMSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:01 o'clock,
      Create Time=27 May 2018 00:29:53 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod;
MPRINT(MAKECODE):   set EMWS1.Grp12_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 4 and _where_ ne '' then put 'if ^(' _where_ ') then return;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\HPDMSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:01 o'clock,
      Create Time=27 May 2018 00:29:53 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 32.
      The maximum record length was 32.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMFLOWSCORE.sas";
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x ;
MPRINT(MAKECODE):   set EMWS1.Grp12_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 4 and _where_ ne '' then put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:01 o'clock,
      Create Time=02 June 2018 16:26:08 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename y "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMPUBLISHSCORE.sas";
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file y ;
MPRINT(MAKECODE):   set EMWS1.Grp12_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 4 and _where_ ne '' then do;
MPRINT(MAKECODE):   _where_ = tranwrd(_where_, '^(', '(');
MPRINT(MAKECODE):   put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   put '_XVAL_=' "4" ';' ;
MPRINT(MAKECODE):   end;
MPRINT(MAKECODE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:01 o'clock,
      Create Time=02 June 2018 16:26:08 o'clock
 
NOTE: 2 records were written to the file Y.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename Y ;
NOTE: Fileref Y has been deassigned.
MPRINT(MAKECODE):   filename x ;
NOTE: Fileref X has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EXPORTCODE.sas";
MPRINT(MAKEEXPORTCODE):   data _null_;
MPRINT(MAKEEXPORTCODE):   file x;
MPRINT(MAKEEXPORTCODE):   set EMWS1.Grp12_GROUPINFO;
MPRINT(MAKEEXPORTCODE):   if _LOOP_ = 4 and _where_ ne '' then put 'if ' _where_ ' then output;';
MPRINT(MAKEEXPORTCODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EXPORTCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:37:01 o'clock,
      Create Time=27 May 2018 00:29:54 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 29.
      The maximum record length was 29.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\PRECODE.sas";
MPRINT(MAKEEXPORTCODE):   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file _GRPDRP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
1078385   +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
1078387   +   filename macFile catalog 'work.emutil.macro.source';
1078388   +   %let _METAOBS = 0;
1078389   +   %let _maxvar = &maxvar;
1078390   +   %if "&_maxvar" eq "" %then %let maxvar = -1;
1078392   +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
1078393   +                   or (&metadata eq ) %then %do;
1078394   +       %put * No metadata data set defined;
1078395   +       %goto doend;
1078396   +   %end;
1078398   +   data _null_;
1078399   +      length _STRING_ $80;
1078400   +      retain _STRING_ '' maxvar 0;
1078401   +      set &metadata end=eof;
1078402   +      file macFile;
1078403   +      %if %nrbquote(&where) ne %then %do;
1078404   +          %let whereClause = where (%nrbquote(&where));
1078405   +          %unquote(&whereClause);
1078406   +      %end;
1078407   +      if _N_=1 then do;
1078408   +         string = "%"!!"macro &name;";
1078409   +         put string;
1078410   +      end;
1078411   +      maxvar +1;
1078412   +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
1078413   +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
1078414   +         if eof
1078415   +            %if  %sysevalf(&_maxvar > 0) %then %do;
1078416   +                or maxvar >= &maxvar
1078417   +            %end;
1078418   +            then do;
1078419   +            put _STRING_;
1078420   +            string = "%"!!"mend &name;";
1078421   +            put string;
1078422   +            string = strip(put(_N_, best.));
1078423   +            call symput('_METAOBS', string);
1078424   +            %if (&nummacro ne ) %then %do;
1078425   +                put "%" "global &nummacro;";
1078426   +                put "%" "let &nummacro = " string ";";
1078427   +            %end;
1078428   +            stop;
1078429   +         end;
1078430   +      end;
1078431   +      else do;
1078432   +         put _STRING_;
1078433   +         _string_ = TRIM(&key);
1078434   +         if eof
1078435   +            %if  %sysevalf(&_maxvar > 0) %then %do;
1078436   +              or maxvar >= &maxvar
1078437   +           %end;
1078438   +            then do;
1078439   +            put _STRING_;
1078440   +            string = "%"!!"mend &name;";
1078441   +            put string;
1078442   +        end;
1078443   +      end;
1078444   +      if eof
1078445   +         %if  %sysevalf(&_maxvar > 0) %then %do;
1078446   +             or maxvar >= &maxvar
1078447   +         %end;
1078448   +         then do;
1078449   +         string = strip(put(_N_, best.));
1078450   +         call symput('_METAOBS', string);
1078451   +         %if (&nummacro ne ) %then %do;
1078452   +             put "%" "global &nummacro;";
1078453   +             put "%" "let &nummacro = " string ";";
1078454   +         %end;
1078455   +         stop;
1078456   +      end;
1078457   +   run;
1078459   +   %doend:
1078460   +   %if ^&_METAOBS %then %do;
1078461   +       data _null_;
1078462   +          file macFile;
1078463   +          put "%" "macro &name;";
1078464   +          put "%" "mend &name;";
1078465   +          %if (&nummacro ne ) %then %do;
1078466   +              put "%" "global &nummacro;";
1078467   +              put "%" "let &nummacro = 0;";
1078468   +          %end;
1078469   +      run;
1078470   +   %end;
1078471   +   %inc macFile;
1078472   +   filename macFile;
1078473   +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAKEEXPORTCODE):   filename _grpdrp;
NOTE: Fileref _GRPDRP has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Trans2_CMeta_TRAIN end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE ne 'REJECTED');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:36:57,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 7 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 14 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
      WHERE ROLE not = 'REJECTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
1078474   +%macro emGrpKeep;
1078475   +Custid DepVar Marital_Status MntCard_Games MntMagazines
1078476   +NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq
1078477   +RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var
1078478   +%mend emGrpKeep;
1078479   +%global GrpKeep;
1078480   +%let GrpKeep = 14 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Grp12_VariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE eq 'REJECTED' and GROUPROLE='GROUP');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:37:01,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set EMWS1.GRP12_VARIABLESET.
      WHERE (ROLE='REJECTED') and (GROUPROLE='GROUP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "mend emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = 0;";
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:37:01,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 4 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
1078481   +%macro emGrpRej;
1078482   +%mend emGrpRej;
1078483   +%global GrpRej;
1078484   +%let GrpRej = 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(SCORETABLES):   data EMWS1.Grp12_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN (keep
MPRINT(SCORETABLES):  =Custid DepVar Marital_Status MntCard_Games MntMagazines NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var) ;
NOTE: %INCLUDE (level 1) file _PREGRP is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\PRECODE.sas.
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file X is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EXPORTCODE.sas.
1078485   +if ^(cv_var =4)  then output;
MPRINT(SCORETABLES):   if ^(cv_var =4) then output;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: The data set EMWS1.GRP12_TRAIN has 2179 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEEXPORTCODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Grp12;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1078486    *------------------------------------------------------------*;
1078487    * End SCORE: Grp12;
1078488    *------------------------------------------------------------*;
1078489
 
1078491    filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):     filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMFLOWSCORE.sas";
1078492    filename lpflow catalog "EMWS1.Grp12_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_DIAGRAM):   filename lpflow catalog "EMWS1.Grp12_LOOP.EMFLOWCODE_4.source";
1078493    %em_copyfile(infref=emflow, outfref=lpflow);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lpflow lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("emflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPFLOW is:
      Catalog Name=EMWS1.GRP12_LOOP.EMFLOWCODE_4.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=11,
      Created=Saturday,  2 June 2018 16:26:09,
      Last Modified=Saturday,  2 June 2018 16:33:23,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp12_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            41KB,
      File Size (bytes)=41984
 
NOTE: 1 record was written to the file LPFLOW.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
1078494    filename lpflow;
MPRINT(EM_DIAGRAM):   filename lpflow;
NOTE: Fileref LPFLOW has been deassigned.
1078495    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1078496    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMPUBLISHSCORE.sas";
1078497    filename lppub catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_DIAGRAM):   filename lppub catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_4.source";
1078498    %em_copyfile(infref=empub, outfref=lppub);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lppub lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("empub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPPUB is:
      Catalog Name=EMWS1.GRP12_LOOP.EMPUBLISHCODE_4.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=12,
      Created=Saturday,  2 June 2018 16:26:09,
      Last Modified=Saturday,  2 June 2018 16:37:01,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp12_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            45KB,
      File Size (bytes)=46080
 
NOTE: 2 records were written to the file LPPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
1078499    filename lppub;
MPRINT(EM_DIAGRAM):   filename lppub;
NOTE: Fileref LPPUB has been deassigned.
1078500    filename empub;
MPRINT(EM_DIAGRAM):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
1078501    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1078502    * Grp12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Grp12: Computing metadata for TRAIN data;
1078503    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Grp12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Grp12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Grp12_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Grp12_TRAIN out=WORK.M2QZ0651 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QZ0651;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QZ0651(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QZ0651;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QZ0651;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3ANVFF9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12RPATD(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ANVFF9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Grp12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Grp12";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)= 'CV_VAR' then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:37:02 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:37:02 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0V1NVH4 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0V1NVH4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
