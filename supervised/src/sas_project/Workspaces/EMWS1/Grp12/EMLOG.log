*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:04:50 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:47 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:04:47 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O13MAAX2 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O13MAAX2 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:47 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:47 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3413847    proc freq data=EMWS1.Grp12_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp12_VariableSet noprint;
3413848    table ROLE*LEVEL/out=WORK.Grp12META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp12META;
3413849    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP12_VARIABLESET.
NOTE: The data set WORK.GRP12META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
3413850    proc print data=WORK.Grp12META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp12META label noobs;
3413851    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3413852    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3413853    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3413854    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3413855    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP12META.
NOTE: The PROCEDURE PRINT printed page 2288.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3413856    title10;
MPRINT(EM_DIAGRAM):   title10;
3413857    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp12: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3414180    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3414181    * Grp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp12: Generation of macros and macro variables;
3414182    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3414183    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3414184    %let EMEXCEPTIONSTRING=;
3414185    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3414186    * TRAIN: Grp12;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp12;
3414187    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3414188    %let EM_ACTION = TRAIN;
3414189    %let syscc = 0;
3414190    %macro main;
3414191
3414192       filename temp catalog 'sashelp.emutil.gp_macros.source';
3414193       %include temp;
3414194       filename temp;
3414195
3414196       %SetProperties;
3414197
3414198       %if %upcase(&EM_ACTION) = CREATE %then %do;
3414199
3414200           filename temp catalog 'sashelp.emutil.gp_create.source';
3414201           %include temp;
3414202           filename temp;
3414203
3414204           %create;
3414205       %end;
3414206       %else
3414207       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3414208
3414209           filename temp catalog 'sashelp.emutil.gp_train.source';
3414210           %include temp;
3414211           filename temp;
3414212
3414213           %train;
3414214       %end;
3414215       %else
3414216       %if %upcase(&EM_ACTION) = SCORE %then %do;
3414217
3414218           filename temp catalog 'sashelp.emutil.gp_score.source';
3414219           %include temp;
3414220           filename temp;
3414221
3414222           %score;
3414223       %end;
3414224       %else
3414225       %if %upcase(&EM_ACTION) = REPORT %then %do;
3414226
3414227           filename temp catalog 'sashelp.emutil.gp_report.source';
3414228           %include temp;
3414229           filename temp;
3414230
3414231           %report;
3414232
3414233       %end;
3414234       %else
3414235       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3414236
3414237           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3414238           %include temp;
3414239           filename temp;
3414240
3414241           %postloop;
3414242
3414243       %end;
3414244
3414245       %doendm:
3414246    %mend main;
3414247
3414248    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3414249   +%macro SetProperties;
3414250   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3414251   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3414252   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3414253   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3414254   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3414255   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3414256   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3414257   +%mend SetProperties;
3414258   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3414259   +%macro scoreValidTest(data=, out=);
3414261   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3414262   +       data &out / view = &out;
3414263   +          retain _RESAMP_ 1;
3414264   +          set &data;
3414265   +       run;
3414266   +   %end;
3414268   +%mend scoreValidTest;
3414270   +%macro getVariables;
3414271   +   %if "&emloopnumber" = "1" %then %do;
3414272   +       data _null_;
3414273   +          retain numgoup 0;
3414274   +          set &em_data_variableset end=eof;
3414275   +          %if &em_num_target = 1 %then %do;
3414276   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3414277   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3414278   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3414279   +              %end;
3414280   +              %else
3414281   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3414282   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3414283   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3414284   +              %end;
3414285   +          %end;
3414286   +          %else %do;
3414287   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3414288   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3414289   +              else
3414290   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3414291   +          %end;
3414292   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3414293   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3414294   +             numgroup + 1;
3414295   +          end;
3414296   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3414297   +       run;
3414298   +    %end;
3414299   +    %else %do;
3414300   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3414301   +            data _null_;
3414302   +               retain numgoup 0;
3414303   +               set &em_data_variableset end=eof;
3414304   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3414305   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3414306   +               numgroup + 1;
3414307   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3414308   +            run;
3414309   +          %end;
3414310   +            %else
3414311   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3414312   +            %em_getName(key=BOOSTINFO,   type=DATA);
3414313   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3414314   +                data _null_;
3414315   +                   set &em_user_boostinfo;
3414316   +                   call symput('emboostvar', strip(_TARGET_));
3414317   +                run;
3414318   +            %end;
3414319   +        %end;
3414320   +        %else
3414321   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3414322   +                %em_getName(key=BAGINFO,   type=DATA);
3414323   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3414324   +                    data _null_;
3414325   +                       set &em_user_baginfo;
3414326   +                      call symput('embagvar', strip(_TARGET_));
3414327   +                    run;
3414328   +                %end;
3414329   +            %end;
3414330   +    %end;
3414331   +%mend getVariables;
3414333   +%macro gp_bag(targetname=);
3414334   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3414335   +        %put LOOP MODE:   &emloopmode ;
3414336   +        %put LOOP NUMBER: &emloopnumber;
3414337   +        %put BAGGING TARGET: &targetname;
3414338   +   %end;
3414340   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3414341   +   %include temp;
3414342   +   filename temp;
3414344   +   %em_getName(key=BAGINFO,    type=DATA);
3414345   +   %em_getName(key=EMLOOPINFO, type=DATA);
3414347   +   %if &emloopnumber = 1 %then %do;
3414348   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3414349   +       data _null_;
3414350   +          file gpdelta;
3414351   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3414352   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3414353   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3414354   +          put "end;";
3414355   +       run;
3414356   +       filename gpdelta;
3414358   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3414359   +           proc datasets lib=&em_lib nolist;
3414360   +              delete &em_nodeid._baginfo;
3414361   +           run;
3414362   +       %end;
3414364   +       %if "%em_freq" ne "" %then %do;
3414365   +           proc means data=&em_import_data sum;
3414366   +              var %em_freq;
3414367   +              output out = _tempds sum=sumfreq;
3414368   +           run;
3414369   +           quit;
3414370   +           data _null_;
3414371   +              set _tempDs;
3414372   +              call symput('_sumfreq', put(sumfreq, best12.));
3414373   +           run;
3414374   +       %end;
3414375   +       %else %do;
3414376   +           proc sql noprint;
3414377   +              select count(*) into :_sumfreq
3414378   +              from &em_import_data;
3414379   +           quit;
3414380   +       %end;
3414382   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3414383   +           data _null_;
3414384   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3414385   +           run;
3414386   +       %end;
3414387   +       %else
3414388   +           %let _size = &em_property_sizeobs;
3414390   +       data &em_user_baginfo;
3414391   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3414392   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3414393   +          _TARGET_   ="&targetname";
3414394   +          _SUMFREQ_  =&_sumfreq;
3414395   +           _SIZE_    = &_size;
3414396   +          output;
3414397   +       run;
3414398   +       data &em_user_emloopinfo;
3414399   +          length MODE $8;
3414400   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3414401   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414402   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3414403   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3414404   +           MODE='Bagging';
3414405   +       run;
3414407   +       data &em_data_eminfo;
3414408   +          length TARGET KEY $32  DATA $43;
3414409   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3414410   +       run;
3414411   +   %end;
3414412   +   %else %do;
3414413   +      data _null_;
3414414   +         set &em_user_baginfo;
3414415   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3414416   +         call symput('_size', put(_size_, best12.));
3414417   +      run;
3414418   +   %end;
3414420   +   %let bagsumFreq  = &_sumFreq;
3414421   +   %let bagSize     = &_Size;
3414423   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3414424   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3414426   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3414427   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3414429   +   %doendbg:
3414431   +%mend gp_bag;
3414434   +%macro gp_boost(targetname=);
3414435   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3414436   +       %put LOOP MODE:   &emloopmode ;
3414437   +       %put LOOP NUMBER: &emloopnumber;
3414438   +        %put BAGGING TARGET: &targetname;
3414439   +   %end;
3414441   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3414442   +   %include temp;
3414443   +   filename temp;
3414445   +   %em_getname(key=EMLOOPINFO, type=DATA);
3414446   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3414447   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3414448   +   %em_getName(key=BOOSTINFO,   type=DATA);
3414450   +   %if &emloopnumber = 1 %then %do;
3414451   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3414452   +       data _null_;
3414453   +          file gpdelta;
3414454   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3414455   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3414456   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3414457   +          put "end;";
3414458   +       run;
3414459   +       filename gpdelta;
3414461   +       %let deleteString =;
3414462   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3414463   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3414464   +       %if "&deleteString" ne "" %then %do;
3414465   +           proc datasets lib=&em_lib nolist;
3414466   +              delete &deleteString;
3414467   +           run;
3414468   +       %end;
3414470   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3414472   +       data &em_user_boostinfo;
3414473   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3414474   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3414475   +          _TARGET_          ="&targetname";
3414476   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3414477   +          _SUMFREQ_         =&_sumfreq;
3414478   +       run;
3414479   +       data &em_user_emloopinfo;
3414480   +          length MODE $8;
3414481   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3414482   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414483   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3414484   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3414485   +           MODE='Boosting';
3414486   +       run;
3414488   +       data &em_data_eminfo;
3414489   +          length TARGET KEY $32  DATA $43;
3414490   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3414491   +       run;
3414493   +   %end;
3414494   +   %else %do;
3414495   +       %global _dmboodiv;
3414496   +       %let dmboosf = %upcase(&targetname);
3414497   +       %if %sysfunc(length(&targetname))> 30 %then
3414498   +           %let dmboosf =  %substr(&targetname, 1, 30);
3414500   +       data _null_;
3414501   +          set &em_user_boostinfo;
3414502   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3414503   +       run;
3414505   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3414507   +       data &em_user_boostinfo;
3414508   +          set &em_user_boostinfo;
3414509   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3414510   +       run;
3414512   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3414514   +   %end;
3414516   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3414517   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3414519   +   %doendbst:
3414521   +%mend gp_boost;
3414523   +%macro gp_group(numgroupvar=, groupvar=);
3414524   +   %em_getname(key=GROUPINFO, type=DATA);
3414525   +   %em_getName(key=LOOPINFO,  type=DATA);
3414526   +   %em_getName(key=EMGROUPINFO, type=DATA);
3414528   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3414529   +       ods listing close;
3414530   +       %if &numgroupvar = 1 %then %do;
3414531   +           ods output onewayfreqs=temp;
3414532   +       %end;
3414533   +       %else %do;
3414534   +           ods output crosstabfreqs=temp;
3414535   +       %end;
3414536   +       proc freq data=&em_import_data;
3414537   +          table
3414539   +          %let tableString =;
3414540   +          %let freqString  =;
3414541   +          %do i=1 %to &numgroupvar;
3414542   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3414543   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3414544   +              %let freqString = &freqString.1;
3414545   +          %end;
3414546   +          &tableString / missing;
3414547   +       run;
3414548   +       ods listing;
3414549   +       %if &numgroupvar = 1 %then %do;
3414550   +           data _null_;
3414551   +              retain totalobs 0;
3414552   +              set temp end=eof;
3414553   +              totalobs + frequency;
3414554   +              if eof then
3414555   +                 call symput('_totalObs_', put(totalobs, best.));
3414556   +           run;
3414558   +           proc sort data=temp out=loopinfo nodupkey;
3414559   +              by &groupvar;
3414560   +              where frequency>=&em_property_minimumObs;
3414561   +           run;
3414562   +       %end;
3414563   +       %else %do;
3414564   +           data _null_;
3414565   +              set temp;
3414566   +              where _type_='00';
3414567   +              call symput('_totalObs_', put(frequency, best.));
3414568   +           run;
3414569   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3414570   +              by &groupvar;
3414571   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3414572   +           run;
3414573   +       %end;
3414575   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3414576   +       filename _pregrp "&em_user_precode";
3414578   +       %let dsid = %sysfunc(open(loopinfo));
3414579   +       %do i=1 %to &numgroupvar;
3414580   +           %let varname = %scan(&groupvar, &i, %str( ));
3414581   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3414582   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3414583   +           %if %index(&varfmt, -) %then %do;
3414584   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3414585   +           %end;
3414587   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3414588   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3414589   +           %let fmttype&i = &vartype;
3414590   +           %let fmtlen&i  = &varlen;
3414592   +           %let fmtvar&i =;
3414593   +           %let fmt&i    =;
3414594   +           %if "&varfmt" ne "" %then %do;
3414595   +              %let fmtvar&i  = _FORMAT&i._;
3414596   +              %let fmt&i     = &varfmt;
3414597   +           %end;
3414598   +       %end;
3414599   +       %let dsid = %sysfunc(close(&dsid));
3414601   +       data _null_;
3414602   +          %do i=1 %to &numgroupvar;
3414603   +              %if "&&fmt&i" ne "" %then %do;
3414604   +                  retain len_&i 0;
3414605   +              %end;
3414606   +          %end;
3414608   +          set loopinfo end=eof;
3414609   +          file _pregrp;
3414611   +          %do i=1 %to &numgroupvar;
3414612   +              %let varname = %scan(&groupvar, &i, %str( ));
3414613   +              %if "&&fmt&i" ne "" %then %do;
3414614   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3414615   +                    len_&i = length(put(&varname, &&fmt&i));
3414616   +              %end;
3414617   +          %end;
3414619   +          if eof then do;
3414620   +             %do i=1 %to &numgroupvar;
3414621   +                 %let varname = %scan(&groupvar, &i, %str( ));
3414622   +                 %if "&&fmt&i" ne "" %then %do;
3414623   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3414624   +                     put "drop &&fmtvar&i" len_&i ";";
3414625   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3414626   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3414627   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3414628   +                 %end;
3414629   +              %end;
3414630   +          end;
3414631   +      run;
3414633   +      data loopinfo;
3414634   +         set loopinfo;
3414635   +         %do i=1 %to &numgroupvar;
3414636   +             %let varname = %scan(&groupvar, &i, %str( ));
3414637   +             %if "&&fmt&i" ne "" %then %do;
3414638   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3414639   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3414640   +             %end;
3414641   +         %end;
3414642   +      run;
3414643   +      filename _pregrp;
3414645   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3414646   +          data temp;
3414647   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3414648   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3414649   +      %end;
3414650   +      %else %do;
3414651   +          data &em_user_groupinfo;
3414652   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3414653   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3414654   +             retain _TARGET_ '';
3414655   +      %end;
3414657   +          set loopinfo;
3414658   +          _LOOP_= _N_;
3414659   +          _WHERE_ = '';
3414660   +          _WHEREDESC_  = '';
3414661   +          %do i=1 %to &numgroupvar;
3414662   +              %let varname = %scan(&groupvar, &i, %str( ));
3414663   +              %if "&&fmt&i" eq "" %then %do;
3414664   +                  %if "&&fmtType&i" eq "N" %then %do;
3414665   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3414666   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3414667   +                   %end;
3414668   +                  %else %do;
3414669   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3414670   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3414671   +                  %end;
3414672   +              %end;
3414673   +              %else %do;
3414674   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3414675   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3414676   +              %end;
3414677   +              %if &i < &numgroupvar %then %do;
3414678   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3414679   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3414680   +              %end;
3414681   +          %end;
3414682   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3414683   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3414684   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3414685   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3414686   +          %end;
3414687   +      run;
3414689   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3414690   +          data target;
3414691   +             length _TARGET_ $32;
3414692   +              %do i=1 %to &em_num_target;
3414693   +                  %let varname = %scan(%em_target, &i, %str( ));
3414694   +                  _TARGET_ = "&varname";
3414695   +                  output;
3414696   +              %end;
3414697   +          run;
3414698   +          proc sql;
3414699   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3414700   +          quit;
3414701   +          data &em_user_groupinfo;
3414702   +             set &em_user_groupinfo;
3414703   +             _LOOP_=_N_;
3414704   +          run;
3414705   +      %end;
3414707   +      data &em_data_eminfo;
3414708   +         length TARGET KEY $32  DATA $43;
3414709   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3414710   +      run;
3414712   +      data &em_user_emloopinfo;
3414713   +         set &em_user_groupinfo;
3414714   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3414715   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414716   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3414717   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3414718   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3414719   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3414720   +         %end;
3414721   +         %else %do;
3414722   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414723   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3414724   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3414725   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3414726   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3414727   +         %end;
3414728   +      run;
3414730   +      proc datasets lib=work nolist;
3414731   +          delete temp loopinfo
3414732   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3414733   +              target
3414734   +          %end;
3414735   +          ;
3414736   +      run;
3414738   +   %end;
3414740   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3414741   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3414742   +       data _null_;
3414743   +          length quotedTarget $32;
3414744   +          set &em_user_groupinfo;
3414745   +          file gpdelta;
3414746   +          if _N_ = &emloopnumber then do;
3414747   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3414748   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3414750   +             %do i=1 %to &numgroupvar;
3414751   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3414752   +                 put "if upcase(NAME)= '&gvar' then delete;";
3414753   +             %end;
3414754   +          end;
3414755   +       run;
3414756   +   %end;
3414757   +   %else %do;
3414758   +       data _null_;
3414759   +          set &em_user_groupinfo;
3414760   +          file gpdelta;
3414761   +          if _N_ = &emloopnumber then do;
3414762   +             %do i=1 %to &numgroupvar;
3414763   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3414764   +                 put "if upcase(NAME)= '&gvar' then delete;";
3414765   +             %end;
3414766   +          end;
3414767   +       run;
3414768   +   %end;
3414769   +   filename gpdelta;
3414771   +   %let nobs=0;
3414772   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3414773   +   %if &dsid>0 %then %do;
3414774   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3414775   +       %let dsid = %sysfunc(close(&dsid));
3414776   +   %end;
3414778   +   %if ^&nobs  %then
3414779   +       %let emloopmode =;
3414780   +   %else
3414781   +       %if &nobs< &emloopnumber %then
3414782   +           %let emloopmode = POSTLOOP;
3414783   +        %else
3414784   +        %let emloopmode = LOOP;
3414785   +%mend gp_group;
3414787   +%macro gp_Index;
3414789   +   %em_getName(key=INDEXINFO,  type=DATA);
3414790   +   %em_getName(key=EMLOOPINFO, type=DATA);
3414792   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3414793   +       data &em_user_indexinfo;
3414794   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3414795   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3414796   +          _TARGET_   ="";
3414797   +          _WHERE_    ="";
3414798   +          output;
3414799   +       run;
3414800   +       data &em_data_eminfo;
3414801   +          length TARGET KEY $32  DATA $43;
3414802   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3414803   +       run;
3414805   +       data &em_user_emloopinfo;
3414806   +          length MODE $8;
3414807   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3414808   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414809   +          set &em_user_indexinfo(keep=_LOOP_ );
3414810   +          MODE='Index';
3414811   +       run;
3414812   +   %end;
3414814   +%mend gp_index;
3414816   +%macro gp_Target;
3414817   +   %let TargetName = %scan(%em_target, &emloopnumber);
3414818   +   %if "&targetName" eq "" %then %do;
3414819   +       %goto doendgpt;
3414820   +   %end;
3414822   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3414823   +       %put GP_TARGET;
3414824   +       %put &emLoopnumber &TargetName;
3414825   +   %end;
3414827   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3414828   +   data _null_;
3414829   +      file gpdelta;
3414830   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3414831   +   run;
3414832   +   filename gpdelta;
3414834   +   %if &emloopnumber eq 1 %then %do;
3414835   +       %em_getName(key=TARGETINFO,  type=DATA);
3414836   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3414838   +       data &em_user_targetinfo;
3414839   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3414840   +          retain _LOOP_;
3414841   +          _WHERE_ = '';
3414842   +          %do i=1 %to &em_num_target;
3414843   +              %let varname = %scan(%em_target, &i, ' ');
3414844   +              _TARGET_ = "&varname";
3414845   +              _LOOP_+1;
3414846   +              output;
3414847   +           %end;
3414848   +       run;
3414849   +       data &em_user_emloopinfo;
3414850   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3414851   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3414852   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3414853   +      run;
3414855   +       data &em_data_eminfo;
3414856   +          length TARGET KEY $32  DATA $43;
3414857   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3414858   +       run;
3414859   +   %end;
3414861   +   %doendgpt:
3414862   +%mend gp_target;
3414864   +%macro train;
3414865   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3414866   +       %put LOOP MODE:   &emloopmode ;
3414867   +       %put LOOP NUMBER: &emloopnumber;
3414868   +   %end;
3414870   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3414872   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3414874   +       %let hpdmFlag = 0;
3414875   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3414876   +            data _null_;
3414877   +               set &em_import_DATA_eminfo;
3414878   +               where KEY = "HPDMSAMPLE";
3414879   +               call symput('hpdmFlag', '1');
3414880   +            run;
3414881   +       %end;
3414882   +       %if &hpdmFlag %then %do;
3414883   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3414884   +           %goto doendmain;
3414885   +       %end;
3414886   +   %end;
3414888   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3414889   +   %em_getname(key=GROUPINFO,  type=DATA);
3414890   +   %em_getname(key=BOOSTINFO,  type=DATA);
3414891   +   %em_getname(key=BAGINFO,    type=DATA);
3414892   +   %em_getname(key=TARGETINFO, type=DATA);
3414893   +   %em_getname(key=INDEXINFO,  type=DATA);
3414894   +   %em_getname(key=EMINFO,  type=DATA);
3414896   +   %if "&emloopnumber" = "1" %then %do;
3414897   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3414898   +       filename _pregrp "&em_user_precode";
3414899   +       data _null_;
3414900   +         rc = fdelete('_pregrp');
3414901   +       run;
3414902   +       filename _pregrp;
3414904   +       %let members =;
3414905   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3414906   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3414907   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3414908   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3414909   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3414910   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3414911   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3414913   +       %if "&members" ne "" %then %do;
3414914   +           proc datasets lib=&em_lib nolist;
3414915   +              delete &members;
3414916   +           run;
3414917   +      %end;
3414918   +   %end;
3414920   +   %let emboostvar    =;
3414921   +   %let embagvar      =;
3414922   +   %let emgroupvar    =;
3414923   +   %let emnumgroupvar =;
3414924   +   %getVariables;
3414926   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3414927   +       %if &EM_NUM_TARGET>=1 %then %do;
3414928   +           %gp_target;
3414929   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3414930   +               %let emloopmode= LOOP;
3414931   +           %else
3414932   +              %let emloopmode = POSTLOOP;
3414933   +       %end;
3414934   +       %else %do;
3414935   +           %let emloopmode = ;
3414936   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3414937   +           %goto doendmain;
3414938   +       %end;
3414939   +   %end;
3414940   +   %else
3414941   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3414942   +       %let emloopmode=;
3414943   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3414944   +           proc delete data=&em_data_eminfo;
3414945   +           run;
3414946   +       %end;
3414947   +   %end;
3414948   +   %else
3414949   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3414950   +       %gp_index;
3414951   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3414952   +           %let emloopmode= LOOP;
3414953   +       %else
3414954   +           %let emloopmode= POSTLOOP;
3414955   +   %end;
3414956   +   %else
3414957   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3414958   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3414959   +           %let emloopmode = ;
3414960   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3414961   +           %goto doendmain;
3414962   +       %end;
3414964   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3414965   +   %end;
3414966   +   %else
3414967   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3414968   +       %if "&emboostvar" eq "" %then %do;
3414969   +           %let emloopmode = ;
3414970   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3414971   +           %goto doendmain;
3414972   +       %end;
3414974   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3414975   +           %let emloopmode= LOOP;
3414976   +           %gp_boost(targetname=&emboostvar);
3414978   +       %end;
3414979   +       %else
3414980   +           %let emloopmode= POSTLOOP;
3414981   +   %end;
3414982   +   %else
3414983   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3414984   +       %if "&embagvar" eq "" %then %do;
3414985   +           %let emloopmode = ;
3414986   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3414987   +           %goto doendmain;
3414988   +       %end;
3414990   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3414991   +           %let emloopmode= LOOP;
3414992   +           %gp_bag(targetname=&embagvar);
3414993   +       %end;
3414994   +       %else
3414995   +           %let emloopmode= POSTLOOP;
3414996   +   %end;
3414999   +   %if &emloopmode eq "" %then %do;
3415000   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3415001   +       %let member = %scan(&em_data_eminfo, 2, .);
3415002   +       proc datasets lib=&lib nolist;
3415003   +          delete &member;
3415004   +       run;
3415005   +   %end;
3415007   +   %doendmain:
3415009   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3415010   +       %put NEW LOOP MODE: &emloopmode;
3415011   +   %end;
3415013   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3415014   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3415015   +       %include temp;
3415016   +       filename temp;
3415018   +       %postloop;
3415019   +   %end;
3415021   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp12_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP12_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp12_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp12\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:04:48 o'clock,
      Create Time=02 June 2018 16:26:08 o'clock
 
NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3415023   +%macro postloop;
3415024   +   %let deleteString =;
3415025   +
3415026   +   %em_getname(key=boostweight, type=DATA);
3415027   +   %em_getname(key=boostscore,  type=DATA);
3415028   +
3415029   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3415030   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3415031   +   %if "&deleteString" ne "" %then %do;
3415032   +       proc datasets lib=&em_lib nolist;
3415033   +          delete &deleteString;
3415034   +       run;
3415035   +   %end;
3415036   +
3415037   +   %em_register(key=EMLOOPINFO,    type=DATA);
3415038   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3415039   +    proc print data=&em_user_emloopinfo noobs label;
3415040   +       title9 'Group Summary';
3415041   +    run;
3415042   +    title9;
3415043   +
3415044   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3415045   +
3415046   +%mend postloop;
3415047   +
3415048   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp12_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp12_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP12_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2289.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67517688436209;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp12;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3415049    *------------------------------------------------------------*;
3415050    * End TRAIN: Grp12;
3415051    *------------------------------------------------------------*;
3415052
 
3415053    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3415054    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3415055    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3415056    ;
MPRINT(EM_DIAGRAM):   ;
3415057    ;
MPRINT(EM_DIAGRAM):   ;
3415058    ;
MPRINT(EM_DIAGRAM):   ;
3415059    ;
MPRINT(EM_DIAGRAM):   ;
3415060    quit;
MPRINT(EM_DIAGRAM):   quit;
3415061    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3415062    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3415063    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3415064    /*; *"; *'; */
3415065    ;
MPRINT(EM_DIAGRAM):   ;
3415066    run;
MPRINT(EM_DIAGRAM):   run;
3415067    quit;
MPRINT(EM_DIAGRAM):   quit;
3415068    /* Reset EM Options */
3415069    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3415070    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3415071    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3415072    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3415073    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3415074    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
