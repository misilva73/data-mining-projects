*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:26:18 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:15 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:26:15 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0FYOIXB "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0FYOIXB new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMGROUP\EMLOG_1.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:15 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMGROUP\EMOUTPUT_1.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:15 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
89646      proc freq data=EMWS1.Grp9_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp9_VariableSet noprint;
89647      table ROLE*LEVEL/out=WORK.Grp9META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp9META;
89648      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP9_VARIABLESET.
NOTE: The data set WORK.GRP9META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
89649      proc print data=WORK.Grp9META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp9META label noobs;
89650      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
89651      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
89652      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
89653      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
89654      run;
 
NOTE: There were 4 observations read from the data set WORK.GRP9META.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
89655      title10;
MPRINT(EM_DIAGRAM):   title10;
89656      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp9: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
89979      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
89980      * Grp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp9: Generation of macros and macro variables;
89981      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
89982      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
89983      %let EMEXCEPTIONSTRING=;
89984      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
89985      * TRAIN: Grp9;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp9;
89986      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
89987      %let EM_ACTION = TRAIN;
89988      %let syscc = 0;
89989      %macro main;
89990
89991         filename temp catalog 'sashelp.emutil.gp_macros.source';
89992         %include temp;
89993         filename temp;
89994
89995         %SetProperties;
89996
89997         %if %upcase(&EM_ACTION) = CREATE %then %do;
89998
89999             filename temp catalog 'sashelp.emutil.gp_create.source';
90000             %include temp;
90001             filename temp;
90002
90003             %create;
90004         %end;
90005         %else
90006         %if %upcase(&EM_ACTION) = TRAIN %then %do;
90007
90008             filename temp catalog 'sashelp.emutil.gp_train.source';
90009             %include temp;
90010             filename temp;
90011
90012             %train;
90013         %end;
90014         %else
90015         %if %upcase(&EM_ACTION) = SCORE %then %do;
90016
90017             filename temp catalog 'sashelp.emutil.gp_score.source';
90018             %include temp;
90019             filename temp;
90020
90021             %score;
90022         %end;
90023         %else
90024         %if %upcase(&EM_ACTION) = REPORT %then %do;
90025
90026             filename temp catalog 'sashelp.emutil.gp_report.source';
90027             %include temp;
90028             filename temp;
90029
90030             %report;
90031
90032         %end;
90033         %else
90034         %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
90035
90036             filename temp catalog 'sashelp.emutil.gp_postloop.source';
90037             %include temp;
90038             filename temp;
90039
90040             %postloop;
90041
90042         %end;
90043
90044         %doendm:
90045      %mend main;
90046
90047      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
90048     +%macro SetProperties;
90049     +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
90050     +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
90051     +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
90052     +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
90053     +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
90054     +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
90055     +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
90056     +%mend SetProperties;
90057     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
90058     +%macro scoreValidTest(data=, out=);
90060     +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
90061     +       data &out / view = &out;
90062     +          retain _RESAMP_ 1;
90063     +          set &data;
90064     +       run;
90065     +   %end;
90067     +%mend scoreValidTest;
90069     +%macro getVariables;
90070     +   %if "&emloopnumber" = "1" %then %do;
90071     +       data _null_;
90072     +          retain numgoup 0;
90073     +          set &em_data_variableset end=eof;
90074     +          %if &em_num_target = 1 %then %do;
90075     +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
90076     +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
90077     +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
90078     +              %end;
90079     +              %else
90080     +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
90081     +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
90082     +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
90083     +              %end;
90084     +          %end;
90085     +          %else %do;
90086     +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
90087     +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
90088     +              else
90089     +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
90090     +          %end;
90091     +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
90092     +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
90093     +             numgroup + 1;
90094     +          end;
90095     +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
90096     +       run;
90097     +    %end;
90098     +    %else %do;
90099     +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
90100     +            data _null_;
90101     +               retain numgoup 0;
90102     +               set &em_data_variableset end=eof;
90103     +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
90104     +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
90105     +               numgroup + 1;
90106     +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
90107     +            run;
90108     +          %end;
90109     +            %else
90110     +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
90111     +            %em_getName(key=BOOSTINFO,   type=DATA);
90112     +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
90113     +                data _null_;
90114     +                   set &em_user_boostinfo;
90115     +                   call symput('emboostvar', strip(_TARGET_));
90116     +                run;
90117     +            %end;
90118     +        %end;
90119     +        %else
90120     +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
90121     +                %em_getName(key=BAGINFO,   type=DATA);
90122     +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
90123     +                    data _null_;
90124     +                       set &em_user_baginfo;
90125     +                      call symput('embagvar', strip(_TARGET_));
90126     +                    run;
90127     +                %end;
90128     +            %end;
90129     +    %end;
90130     +%mend getVariables;
90132     +%macro gp_bag(targetname=);
90133     +   %if %index(&EM_DEBUG, _ALL_) %then %do;
90134     +        %put LOOP MODE:   &emloopmode ;
90135     +        %put LOOP NUMBER: &emloopnumber;
90136     +        %put BAGGING TARGET: &targetname;
90137     +   %end;
90139     +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
90140     +   %include temp;
90141     +   filename temp;
90143     +   %em_getName(key=BAGINFO,    type=DATA);
90144     +   %em_getName(key=EMLOOPINFO, type=DATA);
90146     +   %if &emloopnumber = 1 %then %do;
90147     +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
90148     +       data _null_;
90149     +          file gpdelta;
90150     +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
90151     +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
90152     +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
90153     +          put "end;";
90154     +       run;
90155     +       filename gpdelta;
90157     +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
90158     +           proc datasets lib=&em_lib nolist;
90159     +              delete &em_nodeid._baginfo;
90160     +           run;
90161     +       %end;
90163     +       %if "%em_freq" ne "" %then %do;
90164     +           proc means data=&em_import_data sum;
90165     +              var %em_freq;
90166     +              output out = _tempds sum=sumfreq;
90167     +           run;
90168     +           quit;
90169     +           data _null_;
90170     +              set _tempDs;
90171     +              call symput('_sumfreq', put(sumfreq, best12.));
90172     +           run;
90173     +       %end;
90174     +       %else %do;
90175     +           proc sql noprint;
90176     +              select count(*) into :_sumfreq
90177     +              from &em_import_data;
90178     +           quit;
90179     +       %end;
90181     +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
90182     +           data _null_;
90183     +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
90184     +           run;
90185     +       %end;
90186     +       %else
90187     +           %let _size = &em_property_sizeobs;
90189     +       data &em_user_baginfo;
90190     +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
90191     +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
90192     +          _TARGET_   ="&targetname";
90193     +          _SUMFREQ_  =&_sumfreq;
90194     +           _SIZE_    = &_size;
90195     +          output;
90196     +       run;
90197     +       data &em_user_emloopinfo;
90198     +          length MODE $8;
90199     +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
90200     +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90201     +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
90202     +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
90203     +           MODE='Bagging';
90204     +       run;
90206     +       data &em_data_eminfo;
90207     +          length TARGET KEY $32  DATA $43;
90208     +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
90209     +       run;
90210     +   %end;
90211     +   %else %do;
90212     +      data _null_;
90213     +         set &em_user_baginfo;
90214     +         call symput('_sumfreq', put(_sumfreq_, best12.));
90215     +         call symput('_size', put(_size_, best12.));
90216     +      run;
90217     +   %end;
90219     +   %let bagsumFreq  = &_sumFreq;
90220     +   %let bagSize     = &_Size;
90222     +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
90223     +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
90225     +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
90226     +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
90228     +   %doendbg:
90230     +%mend gp_bag;
90233     +%macro gp_boost(targetname=);
90234     +   %if %index(&EM_DEBUG, _ALL_) %then %do;
90235     +       %put LOOP MODE:   &emloopmode ;
90236     +       %put LOOP NUMBER: &emloopnumber;
90237     +        %put BAGGING TARGET: &targetname;
90238     +   %end;
90240     +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
90241     +   %include temp;
90242     +   filename temp;
90244     +   %em_getname(key=EMLOOPINFO, type=DATA);
90245     +   %em_getname(key=BOOSTWEIGHT, type=DATA);
90246     +   %em_getname(key=BOOSTSCORE,  type=DATA);
90247     +   %em_getName(key=BOOSTINFO,   type=DATA);
90249     +   %if &emloopnumber = 1 %then %do;
90250     +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
90251     +       data _null_;
90252     +          file gpdelta;
90253     +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
90254     +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
90255     +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
90256     +          put "end;";
90257     +       run;
90258     +       filename gpdelta;
90260     +       %let deleteString =;
90261     +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
90262     +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
90263     +       %if "&deleteString" ne "" %then %do;
90264     +           proc datasets lib=&em_lib nolist;
90265     +              delete &deleteString;
90266     +           run;
90267     +       %end;
90269     +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
90271     +       data &em_user_boostinfo;
90272     +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
90273     +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
90274     +          _TARGET_          ="&targetname";
90275     +          _DMBOOST_DIVISOR_ =&_dmboodiv;
90276     +          _SUMFREQ_         =&_sumfreq;
90277     +       run;
90278     +       data &em_user_emloopinfo;
90279     +          length MODE $8;
90280     +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
90281     +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90282     +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
90283     +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
90284     +           MODE='Boosting';
90285     +       run;
90287     +       data &em_data_eminfo;
90288     +          length TARGET KEY $32  DATA $43;
90289     +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
90290     +       run;
90292     +   %end;
90293     +   %else %do;
90294     +       %global _dmboodiv;
90295     +       %let dmboosf = %upcase(&targetname);
90296     +       %if %sysfunc(length(&targetname))> 30 %then
90297     +           %let dmboosf =  %substr(&targetname, 1, 30);
90299     +       data _null_;
90300     +          set &em_user_boostinfo;
90301     +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
90302     +       run;
90304     +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
90306     +       data &em_user_boostinfo;
90307     +          set &em_user_boostinfo;
90308     +          _DMBOOST_DIVISOR_ =&_dmboodiv;
90309     +       run;
90311     +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
90313     +   %end;
90315     +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
90316     +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
90318     +   %doendbst:
90320     +%mend gp_boost;
90322     +%macro gp_group(numgroupvar=, groupvar=);
90323     +   %em_getname(key=GROUPINFO, type=DATA);
90324     +   %em_getName(key=LOOPINFO,  type=DATA);
90325     +   %em_getName(key=EMGROUPINFO, type=DATA);
90327     +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
90328     +       ods listing close;
90329     +       %if &numgroupvar = 1 %then %do;
90330     +           ods output onewayfreqs=temp;
90331     +       %end;
90332     +       %else %do;
90333     +           ods output crosstabfreqs=temp;
90334     +       %end;
90335     +       proc freq data=&em_import_data;
90336     +          table
90338     +          %let tableString =;
90339     +          %let freqString  =;
90340     +          %do i=1 %to &numgroupvar;
90341     +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
90342     +              %if &i<&numgroupvar %then %let tableString = &tableString *;
90343     +              %let freqString = &freqString.1;
90344     +          %end;
90345     +          &tableString / missing;
90346     +       run;
90347     +       ods listing;
90348     +       %if &numgroupvar = 1 %then %do;
90349     +           data _null_;
90350     +              retain totalobs 0;
90351     +              set temp end=eof;
90352     +              totalobs + frequency;
90353     +              if eof then
90354     +                 call symput('_totalObs_', put(totalobs, best.));
90355     +           run;
90357     +           proc sort data=temp out=loopinfo nodupkey;
90358     +              by &groupvar;
90359     +              where frequency>=&em_property_minimumObs;
90360     +           run;
90361     +       %end;
90362     +       %else %do;
90363     +           data _null_;
90364     +              set temp;
90365     +              where _type_='00';
90366     +              call symput('_totalObs_', put(frequency, best.));
90367     +           run;
90368     +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
90369     +              by &groupvar;
90370     +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
90371     +           run;
90372     +       %end;
90374     +       %em_getname(key=PRECODE, type=FILE, extension=sas);
90375     +       filename _pregrp "&em_user_precode";
90377     +       %let dsid = %sysfunc(open(loopinfo));
90378     +       %do i=1 %to &numgroupvar;
90379     +           %let varname = %scan(&groupvar, &i, %str( ));
90380     +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
90381     +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
90382     +           %if %index(&varfmt, -) %then %do;
90383     +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
90384     +           %end;
90386     +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
90387     +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
90388     +           %let fmttype&i = &vartype;
90389     +           %let fmtlen&i  = &varlen;
90391     +           %let fmtvar&i =;
90392     +           %let fmt&i    =;
90393     +           %if "&varfmt" ne "" %then %do;
90394     +              %let fmtvar&i  = _FORMAT&i._;
90395     +              %let fmt&i     = &varfmt;
90396     +           %end;
90397     +       %end;
90398     +       %let dsid = %sysfunc(close(&dsid));
90400     +       data _null_;
90401     +          %do i=1 %to &numgroupvar;
90402     +              %if "&&fmt&i" ne "" %then %do;
90403     +                  retain len_&i 0;
90404     +              %end;
90405     +          %end;
90407     +          set loopinfo end=eof;
90408     +          file _pregrp;
90410     +          %do i=1 %to &numgroupvar;
90411     +              %let varname = %scan(&groupvar, &i, %str( ));
90412     +              %if "&&fmt&i" ne "" %then %do;
90413     +                 if length(put(&varname, &&fmt&i)) > len_&i then
90414     +                    len_&i = length(put(&varname, &&fmt&i));
90415     +              %end;
90416     +          %end;
90418     +          if eof then do;
90419     +             %do i=1 %to &numgroupvar;
90420     +                 %let varname = %scan(&groupvar, &i, %str( ));
90421     +                 %if "&&fmt&i" ne "" %then %do;
90422     +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
90423     +                     put "drop &&fmtvar&i" len_&i ";";
90424     +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
90425     +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
90426     +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
90427     +                 %end;
90428     +              %end;
90429     +          end;
90430     +      run;
90432     +      data loopinfo;
90433     +         set loopinfo;
90434     +         %do i=1 %to &numgroupvar;
90435     +             %let varname = %scan(&groupvar, &i, %str( ));
90436     +             %if "&&fmt&i" ne "" %then %do;
90437     +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
90438     +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
90439     +             %end;
90440     +         %end;
90441     +      run;
90442     +      filename _pregrp;
90444     +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
90445     +          data temp;
90446     +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
90447     +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
90448     +      %end;
90449     +      %else %do;
90450     +          data &em_user_groupinfo;
90451     +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
90452     +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
90453     +             retain _TARGET_ '';
90454     +      %end;
90456     +          set loopinfo;
90457     +          _LOOP_= _N_;
90458     +          _WHERE_ = '';
90459     +          _WHEREDESC_  = '';
90460     +          %do i=1 %to &numgroupvar;
90461     +              %let varname = %scan(&groupvar, &i, %str( ));
90462     +              %if "&&fmt&i" eq "" %then %do;
90463     +                  %if "&&fmtType&i" eq "N" %then %do;
90464     +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
90465     +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
90466     +                   %end;
90467     +                  %else %do;
90468     +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
90469     +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
90470     +                  %end;
90471     +              %end;
90472     +              %else %do;
90473     +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
90474     +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
90475     +              %end;
90476     +              %if &i < &numgroupvar %then %do;
90477     +                  _WHERE_ = strip(_WHERE_)!!' and ';
90478     +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
90479     +              %end;
90480     +          %end;
90481     +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
90482     +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
90483     +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
90484     +              FREQUENCY = &_totalobs_ - FREQUENCY;
90485     +          %end;
90486     +      run;
90488     +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
90489     +          data target;
90490     +             length _TARGET_ $32;
90491     +              %do i=1 %to &em_num_target;
90492     +                  %let varname = %scan(%em_target, &i, %str( ));
90493     +                  _TARGET_ = "&varname";
90494     +                  output;
90495     +              %end;
90496     +          run;
90497     +          proc sql;
90498     +             create table &em_user_groupinfo as select * from  work.temp, work.target;
90499     +          quit;
90500     +          data &em_user_groupinfo;
90501     +             set &em_user_groupinfo;
90502     +             _LOOP_=_N_;
90503     +          run;
90504     +      %end;
90506     +      data &em_data_eminfo;
90507     +         length TARGET KEY $32  DATA $43;
90508     +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
90509     +      run;
90511     +      data &em_user_emloopinfo;
90512     +         set &em_user_groupinfo;
90513     +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
90514     +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90515     +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
90516     +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
90517     +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
90518     +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
90519     +         %end;
90520     +         %else %do;
90521     +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90522     +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
90523     +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
90524     +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
90525     +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
90526     +         %end;
90527     +      run;
90529     +      proc datasets lib=work nolist;
90530     +          delete temp loopinfo
90531     +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
90532     +              target
90533     +          %end;
90534     +          ;
90535     +      run;
90537     +   %end;
90539     +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
90540     +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
90541     +       data _null_;
90542     +          length quotedTarget $32;
90543     +          set &em_user_groupinfo;
90544     +          file gpdelta;
90545     +          if _N_ = &emloopnumber then do;
90546     +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
90547     +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
90549     +             %do i=1 %to &numgroupvar;
90550     +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
90551     +                 put "if upcase(NAME)= '&gvar' then delete;";
90552     +             %end;
90553     +          end;
90554     +       run;
90555     +   %end;
90556     +   %else %do;
90557     +       data _null_;
90558     +          set &em_user_groupinfo;
90559     +          file gpdelta;
90560     +          if _N_ = &emloopnumber then do;
90561     +             %do i=1 %to &numgroupvar;
90562     +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
90563     +                 put "if upcase(NAME)= '&gvar' then delete;";
90564     +             %end;
90565     +          end;
90566     +       run;
90567     +   %end;
90568     +   filename gpdelta;
90570     +   %let nobs=0;
90571     +   %let dsid = %sysfunc(open(&em_user_groupinfo));
90572     +   %if &dsid>0 %then %do;
90573     +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
90574     +       %let dsid = %sysfunc(close(&dsid));
90575     +   %end;
90577     +   %if ^&nobs  %then
90578     +       %let emloopmode =;
90579     +   %else
90580     +       %if &nobs< &emloopnumber %then
90581     +           %let emloopmode = POSTLOOP;
90582     +        %else
90583     +        %let emloopmode = LOOP;
90584     +%mend gp_group;
90586     +%macro gp_Index;
90588     +   %em_getName(key=INDEXINFO,  type=DATA);
90589     +   %em_getName(key=EMLOOPINFO, type=DATA);
90591     +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
90592     +       data &em_user_indexinfo;
90593     +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
90594     +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
90595     +          _TARGET_   ="";
90596     +          _WHERE_    ="";
90597     +          output;
90598     +       run;
90599     +       data &em_data_eminfo;
90600     +          length TARGET KEY $32  DATA $43;
90601     +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
90602     +       run;
90604     +       data &em_user_emloopinfo;
90605     +          length MODE $8;
90606     +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
90607     +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90608     +          set &em_user_indexinfo(keep=_LOOP_ );
90609     +          MODE='Index';
90610     +       run;
90611     +   %end;
90613     +%mend gp_index;
90615     +%macro gp_Target;
90616     +   %let TargetName = %scan(%em_target, &emloopnumber);
90617     +   %if "&targetName" eq "" %then %do;
90618     +       %goto doendgpt;
90619     +   %end;
90621     +   %if %index(&EM_DEBUG, _ALL_) %then %do;
90622     +       %put GP_TARGET;
90623     +       %put &emLoopnumber &TargetName;
90624     +   %end;
90626     +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
90627     +   data _null_;
90628     +      file gpdelta;
90629     +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
90630     +   run;
90631     +   filename gpdelta;
90633     +   %if &emloopnumber eq 1 %then %do;
90634     +       %em_getName(key=TARGETINFO,  type=DATA);
90635     +       %em_getName(key=EMLOOPINFO,  type=DATA);
90637     +       data &em_user_targetinfo;
90638     +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
90639     +          retain _LOOP_;
90640     +          _WHERE_ = '';
90641     +          %do i=1 %to &em_num_target;
90642     +              %let varname = %scan(%em_target, &i, ' ');
90643     +              _TARGET_ = "&varname";
90644     +              _LOOP_+1;
90645     +              output;
90646     +           %end;
90647     +       run;
90648     +       data &em_user_emloopinfo;
90649     +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
90650     +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
90651     +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
90652     +      run;
90654     +       data &em_data_eminfo;
90655     +          length TARGET KEY $32  DATA $43;
90656     +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
90657     +       run;
90658     +   %end;
90660     +   %doendgpt:
90661     +%mend gp_target;
90663     +%macro train;
90664     +   %if %index(&EM_DEBUG, _ALL_) %then %do;
90665     +       %put LOOP MODE:   &emloopmode ;
90666     +       %put LOOP NUMBER: &emloopnumber;
90667     +   %end;
90669     +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
90671     +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
90673     +       %let hpdmFlag = 0;
90674     +       %if %symexist(em_import_DATA_eminfo) %then %do;
90675     +            data _null_;
90676     +               set &em_import_DATA_eminfo;
90677     +               where KEY = "HPDMSAMPLE";
90678     +               call symput('hpdmFlag', '1');
90679     +            run;
90680     +       %end;
90681     +       %if &hpdmFlag %then %do;
90682     +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
90683     +           %goto doendmain;
90684     +       %end;
90685     +   %end;
90687     +   %em_getname(key=EMLOOPINFO,  type=DATA);
90688     +   %em_getname(key=GROUPINFO,  type=DATA);
90689     +   %em_getname(key=BOOSTINFO,  type=DATA);
90690     +   %em_getname(key=BAGINFO,    type=DATA);
90691     +   %em_getname(key=TARGETINFO, type=DATA);
90692     +   %em_getname(key=INDEXINFO,  type=DATA);
90693     +   %em_getname(key=EMINFO,  type=DATA);
90695     +   %if "&emloopnumber" = "1" %then %do;
90696     +       %em_getname(key=PRECODE, type=FILE, extension=sas);
90697     +       filename _pregrp "&em_user_precode";
90698     +       data _null_;
90699     +         rc = fdelete('_pregrp');
90700     +       run;
90701     +       filename _pregrp;
90703     +       %let members =;
90704     +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
90705     +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
90706     +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
90707     +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
90708     +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
90709     +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
90710     +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
90712     +       %if "&members" ne "" %then %do;
90713     +           proc datasets lib=&em_lib nolist;
90714     +              delete &members;
90715     +           run;
90716     +      %end;
90717     +   %end;
90719     +   %let emboostvar    =;
90720     +   %let embagvar      =;
90721     +   %let emgroupvar    =;
90722     +   %let emnumgroupvar =;
90723     +   %getVariables;
90725     +   %if &EM_PROPERTY_MODE = TARGET %then %do;
90726     +       %if &EM_NUM_TARGET>=1 %then %do;
90727     +           %gp_target;
90728     +           %if &emLoopNumber <= &EM_NUM_TARGET %then
90729     +               %let emloopmode= LOOP;
90730     +           %else
90731     +              %let emloopmode = POSTLOOP;
90732     +       %end;
90733     +       %else %do;
90734     +           %let emloopmode = ;
90735     +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
90736     +           %goto doendmain;
90737     +       %end;
90738     +   %end;
90739     +   %else
90740     +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
90741     +       %let emloopmode=;
90742     +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
90743     +           proc delete data=&em_data_eminfo;
90744     +           run;
90745     +       %end;
90746     +   %end;
90747     +   %else
90748     +   %if &EM_PROPERTY_MODE = INDEX %then %do;
90749     +       %gp_index;
90750     +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
90751     +           %let emloopmode= LOOP;
90752     +       %else
90753     +           %let emloopmode= POSTLOOP;
90754     +   %end;
90755     +   %else
90756     +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
90757     +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
90758     +           %let emloopmode = ;
90759     +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
90760     +           %goto doendmain;
90761     +       %end;
90763     +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
90764     +   %end;
90765     +   %else
90766     +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
90767     +       %if "&emboostvar" eq "" %then %do;
90768     +           %let emloopmode = ;
90769     +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
90770     +           %goto doendmain;
90771     +       %end;
90773     +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
90774     +           %let emloopmode= LOOP;
90775     +           %gp_boost(targetname=&emboostvar);
90777     +       %end;
90778     +       %else
90779     +           %let emloopmode= POSTLOOP;
90780     +   %end;
90781     +   %else
90782     +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
90783     +       %if "&embagvar" eq "" %then %do;
90784     +           %let emloopmode = ;
90785     +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
90786     +           %goto doendmain;
90787     +       %end;
90789     +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
90790     +           %let emloopmode= LOOP;
90791     +           %gp_bag(targetname=&embagvar);
90792     +       %end;
90793     +       %else
90794     +           %let emloopmode= POSTLOOP;
90795     +   %end;
90798     +   %if &emloopmode eq "" %then %do;
90799     +       %let lib    = %scan(&em_data_eminfo, 1, .);
90800     +       %let member = %scan(&em_data_eminfo, 2, .);
90801     +       proc datasets lib=&lib nolist;
90802     +          delete &member;
90803     +       run;
90804     +   %end;
90806     +   %doendmain:
90808     +   %if %index(&EM_DEBUG, _ALL_) %then %do;
90809     +       %put NEW LOOP MODE: &emloopmode;
90810     +   %end;
90812     +   %if "&emloopmode" eq "POSTLOOP" %then %do;
90813     +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
90814     +       %include temp;
90815     +       filename temp;
90817     +       %postloop;
90818     +   %end;
90820     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   rc = fdelete('_pregrp');
MPRINT(TRAIN):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete Grp9_GROUPINFO Grp9_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: Deleting EMWS1.GRP9_GROUPINFO (memtype=DATA).
NOTE: Deleting EMWS1.GRP9_EMINFO (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp9_VariableSet end=eof;
MPRINT(GETVARIABLES):   if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   end;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP9_VARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   ods listing close;
MPRINT(GP_GROUP):   ods output onewayfreqs=temp;
MPRINT(GP_GROUP):   proc freq data=EMWS1.Trans2_TRAIN;
MPRINT(GP_GROUP):   table cv_var / missing;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: The data set WORK.TEMP has 10 observations and 7 variables.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
 
 
MPRINT(GP_GROUP):   ods listing;
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   retain totalobs 0;
MPRINT(GP_GROUP):   set temp end=eof;
MPRINT(GP_GROUP):   totalobs + frequency;
MPRINT(GP_GROUP):   if eof then call symput('_totalObs_', put(totalobs, best.));
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   proc sort data=temp out=loopinfo nodupkey;
MPRINT(GP_GROUP):   by cv_var;
MPRINT(GP_GROUP):   where frequency>=10;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.TEMP.
      WHERE frequency>=10;
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.LOOPINFO has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set loopinfo end=eof;
MPRINT(GP_GROUP):   file _pregrp;
MPRINT(GP_GROUP):   if eof then do;
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file _PREGRP is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:16 o'clock,
      Create Time=27 May 2018 00:30:02 o'clock
 
NOTE: 0 records were written to the file _PREGRP.
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data loopinfo;
MPRINT(GP_GROUP):   set loopinfo;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: The data set WORK.LOOPINFO has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(GP_GROUP):   data EMWS1.Grp9_GROUPINFO;
MPRINT(GP_GROUP):   length _LOOP_ 8 _TARGET_ $32 _WHERE_ _WHEREDESC_ $2000;
MPRINT(GP_GROUP):   keep _LOOP_ _TARGET_ _WHERE_ _WHEREDESC_ FREQUENCY;
MPRINT(GP_GROUP):   retain _TARGET_ '';
MPRINT(GP_GROUP):   set loopinfo;
MPRINT(GP_GROUP):   _LOOP_= _N_;
MPRINT(GP_GROUP):   _WHERE_ = '';
MPRINT(GP_GROUP):   _WHEREDESC_ = '';
MPRINT(GP_GROUP):   _WHERE_ = strip(_WHERE_)!!" cv_var ="!!strip(put(cv_var, best12.));
MPRINT(GP_GROUP):   _WHEREDESC_ = strip(_WHEREDESC_)!!" cv_var ="!!strip(put(cv_var, best12.));
MPRINT(GP_GROUP):   _WHERE_ = '^('!!strip(_WHERE_)!!')';
MPRINT(GP_GROUP):   _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
MPRINT(GP_GROUP):   FREQUENCY = 2437 - FREQUENCY;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set WORK.LOOPINFO.
NOTE: The data set EMWS1.GRP9_GROUPINFO has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   data EMWS1.Grp9_EMINFO;
MPRINT(GP_GROUP):   length TARGET KEY $32 DATA $43;
MPRINT(GP_GROUP):   TARGET='';
MPRINT(GP_GROUP):   KEY='GROUPINFO';
MPRINT(GP_GROUP):   DATA="Grp9";
MPRINT(GP_GROUP):   output;
MPRINT(GP_GROUP):   run;
 
NOTE: The data set EMWS1.GRP9_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data EMWS1.Grp9_EMLOOPINFO;
MPRINT(GP_GROUP):   set EMWS1.Grp9_GROUPINFO;
MPRINT(GP_GROUP):   label _LOOP_ = "Group Index" _TARGET_ = "Target" _WHEREDESC_ = "Group" FREQUENCY = "Frequency Count";
MPRINT(GP_GROUP):   keep _LOOP_ _WHEREDESC_ FREQUENCY;
MPRINT(GP_GROUP):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: The data set EMWS1.GRP9_EMLOOPINFO has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   proc datasets lib=work nolist;
MPRINT(GP_GROUP):   delete temp loopinfo ;
MPRINT(GP_GROUP):   run;
 
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.LOOPINFO (memtype=DATA).
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\CDELTA_TRAIN.sas";
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp9_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 1 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:16 o'clock,
      Create Time=02 June 2018 16:26:16 o'clock
 
NOTE: 1 record was written to the file GPDELTA.
      The minimum record length was 38.
      The maximum record length was 38.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
90822      *------------------------------------------------------------*;
90823      * End TRAIN: Grp9;
90824      *------------------------------------------------------------*;
90825
 
90826      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
90827      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
90828      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
90829      ;
MPRINT(EM_DIAGRAM):   ;
90830      ;
MPRINT(EM_DIAGRAM):   ;
90831      ;
MPRINT(EM_DIAGRAM):   ;
90832      ;
MPRINT(EM_DIAGRAM):   ;
90833      quit;
MPRINT(EM_DIAGRAM):   quit;
90834      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
90835      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
90836      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
90837      /*; *"; *'; */
90838      ;
MPRINT(EM_DIAGRAM):   ;
90839      run;
MPRINT(EM_DIAGRAM):   run;
90840      quit;
MPRINT(EM_DIAGRAM):   quit;
90841      /* Reset EM Options */
90842      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
90843      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
90844      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:17 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:26:17 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3QHHHUA "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3QHHHUA new;
MPRINT(EM_DIAGRAM):   run;
90946      %let EMEXCEPTIONSTRING=;
90947      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
90948      * SCORE: Grp9;
MPRINT(EM_DIAGRAM):   * SCORE: Grp9;
90949      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
90950      %let EM_ACTION = SCORE;
90951      %let syscc = 0;
90952      %macro main;
90953
90954         filename temp catalog 'sashelp.emutil.gp_macros.source';
90955         %include temp;
90956         filename temp;
90957
90958         %SetProperties;
90959
90960         %if %upcase(&EM_ACTION) = CREATE %then %do;
90961
90962             filename temp catalog 'sashelp.emutil.gp_create.source';
90963             %include temp;
90964             filename temp;
90965
90966             %create;
90967         %end;
90968         %else
90969         %if %upcase(&EM_ACTION) = TRAIN %then %do;
90970
90971             filename temp catalog 'sashelp.emutil.gp_train.source';
90972             %include temp;
90973             filename temp;
90974
90975             %train;
90976         %end;
90977         %else
90978         %if %upcase(&EM_ACTION) = SCORE %then %do;
90979
90980             filename temp catalog 'sashelp.emutil.gp_score.source';
90981             %include temp;
90982             filename temp;
90983
90984             %score;
90985         %end;
90986         %else
90987         %if %upcase(&EM_ACTION) = REPORT %then %do;
90988
90989             filename temp catalog 'sashelp.emutil.gp_report.source';
90990             %include temp;
90991             filename temp;
90992
90993             %report;
90994
90995         %end;
90996         %else
90997         %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
90998
90999             filename temp catalog 'sashelp.emutil.gp_postloop.source';
91000             %include temp;
91001             filename temp;
91002
91003             %postloop;
91004
91005         %end;
91006
91007         %doendm:
91008      %mend main;
91009
91010      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
91011     +%macro SetProperties;
91012     +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
91013     +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
91014     +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
91015     +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
91016     +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
91017     +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
91018     +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
91019     +%mend SetProperties;
91020     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_SCORE.SOURCE.
91021     +%macro scoreTables(data=, out=, scoreref=, prefref=, keepnum=0);
91022     +
91023     +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
91024     +       data &out;
91025     +          set &data
91026     +          %if &keepNum %then %do;
91027     +              (keep=%emGrpKeep %emGrpRej)
91028     +          %end;
91029     +          ;
91030     +          %if %sysfunc(fexist(&prefref)) %then %do;
91031     +              %inc &prefref;
91032     +          %end;
91033     +          %inc &scoreref;
91034     +       run;
91035     +   %end;
91036     +
91037     +%mend scoretables;
91038     +
91039     +%macro makeExportCode;
91040     +   %em_getname(key=EXPORTCODE, type=FILE, extension=sas);
91041     +   %em_getName(key=GROUPINFO,  type=DATA);
91042     +
91043     +   filename x "&EM_USER_EXPORTCODE";
91044     +
91045     +   data _null_;
91046     +      file x;
91047     +       set &em_user_groupinfo;
91048     +       if _LOOP_ = &emloopnumber and _where_ ne '' then
91049     +          put 'if ' _where_ ' then output;';
91050     +   run;
91051     +
91052     +   %em_getname(key=PRECODE, type=FILE, extension=sas);
91053     +   filename _pregrp "&em_user_precode";
91054     +
91055     +   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
91056     +   %inc _grpdrp;
91057     +   filename _grpdrp;
91058     +   %em_varMacro(name=emGrpKeep, metadata=&EM_IMPORT_DATA_CMETA, where=%nrbquote(ROLE ne 'REJECTED'), key=NAME, nummacro=GrpKeep);
91059     +
91060     +    %em_varMacro(name=emGrpRej, metadata=&EM_DATA_VARIABLESET, where=%nrbquote(ROLE eq 'REJECTED' and GROUPROLE='GROUP'), key=NAME, nummacro=GrpRej);
91061     +
91062     +   %scoreTables(data=&em_import_data,        out=&em_export_train,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
91063     +   %scoreTables(data=&em_import_validate,    out=&em_export_validate,    scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
91064     +   %scoreTables(data=&em_import_test,        out=&em_export_test,        scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
91065     +   %scoreTables(data=&em_import_score,       out=&em_export_score,       scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
91066     +   %scoreTables(data=&em_import_transaction, out=&em_export_transaction, scoreref=x, prefref=_pregrp, keepnum=&GrpKeep);
91067     +
91068     +   filename x;
91069     +   filename _pregrp;
91070     +
91071     +%mend makeExportCode;
91072     +
91073     +%macro makeCode;
91074     +
91075     +   %if &emloopmode = LOOP %then %do;
91076     +       %em_getname(key=HPDMSCORE, type=FILE, extension=sas);
91077     +       filename x "&em_user_HPDMSCORE";
91078     +
91079     +       %em_getname(key=PRECODE, type=FILE, extension=sas);
91080     +       filename _pregrp "&em_user_precode";
91081     +       %em_copyfile(infref=_pregrp, outfref=x);
91082     +       filename _pregrp;
91083     +
91084     +       data _null_;
91085     +          file x mod;
91086     +          set &em_user_groupinfo;
91087     +          if _LOOP_ = &emloopnumber and _where_ ne '' then
91088     +             put 'if ^(' _where_ ') then return;';
91089     +       run;
91090     +       filename x;
91091     +
91092     +       filename x "&EM_FILE_EMFLOWSCORECODE";
91093     +
91094     +       %if "&emloopnumber" = "1" %then %do;
91095     +           %em_getname(key=PRECODE, type=FILE, extension=sas);
91096     +           filename _pregrp "&em_user_precode";
91097     +           %em_copyfile(infref=_pregrp, outfref=x);
91098     +           filename _pregrp;
91099     +       %end;
91100     +
91101     +       data _null_;
91102     +          file x
91103     +          %if &emloopnumber = 1 %then %do;
91104     +              mod
91105     +          %end;
91106     +          ;
91107     +          set &em_user_groupinfo;
91108     +          if _LOOP_ = &emloopnumber and _where_ ne '' then
91109     +             put 'if ' _where_ ' then do;';
91110     +       run;
91111     +
91112     +       filename y "&EM_FILE_EMPUBLISHSCORECODE";
91113     +       %if "&EM_PROPERTY_MODE" ne "CROSSVALIDATION"  %then %do;
91114     +           %em_copyfile(infref=x, outfref=y);
91115     +       %end;
91116     +       %else %do;
91117     +           %if "&emloopnumber" = "1" %then %do;
91118     +               %em_getname(key=PRECODE, type=FILE, extension=sas);
91119     +                filename _pregrp "&em_user_precode";
91120     +                %em_copyfile(infref=_pregrp, outfref=y);
91121     +               filename _pregrp;
91122     +           %end;
91123     +           data _null_;
91124     +             file y
91125     +             %if &emloopnumber = 1 %then %do;
91126     +                 mod
91127     +             %end;
91128     +             ;
91129     +             set &em_user_groupinfo;
91130     +             if _LOOP_ = &emloopnumber and _where_ ne '' then do;
91131     +                _where_ = tranwrd(_where_, '^(', '(');
91132     +                put 'if ' _where_ ' then do;';
91133     +                put '_XVAL_=' "&emloopnumber" ';' ;
91134     +             end;
91135     +           run;
91136     +       %end;
91137     +       filename Y ;
91138     +       filename x ;
91139     +   %end;
91140     +%mend makeCode;
91141     +
91142     +%macro score;
91143     +
91144     +   %if "&emloopmode" eq "LOOP" %then %do;
91145     +
91146     +       %em_getName(key=groupinfo,   type=DATA);
91147     +
91148     +       %if %sysfunc(exist(&em_user_groupinfo)) %then %do;
91149     +           %makeCode;
91150     +           %makeExportCode;
91151     +       %end;
91152     +   %end;
91153     +   %else
91154     +   %if "&emLoopmode" eq "POSTLOOP" %then %do;
91155     +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
91156     +       data _null_;
91157     +          rc = fdelete('gpdelta');
91158     +          run;
91159     +       filename gpdelta;
91160     +   %end;
91161     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\HPDMSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\HPDMSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:16 o'clock,
      Create Time=27 May 2018 00:30:02 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod;
MPRINT(MAKECODE):   set EMWS1.Grp9_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ^(' _where_ ') then return;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\HPDMSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:16 o'clock,
      Create Time=27 May 2018 00:30:02 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 32.
      The maximum record length was 32.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKECODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMFLOWSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:17 o'clock,
      Create Time=02 June 2018 16:26:17 o'clock
 
NOTE: 0 records were written to the file X.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file x mod ;
MPRINT(MAKECODE):   set EMWS1.Grp9_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:17 o'clock,
      Create Time=02 June 2018 16:26:17 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename y "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMPUBLISHSCORE.sas";
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file y lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_pregrp",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:17 o'clock,
      Create Time=02 June 2018 16:26:17 o'clock
 
NOTE: 0 records were written to the file Y.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECODE):  ;
MPRINT(MAKECODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(MAKECODE):   data _null_;
MPRINT(MAKECODE):   file y mod ;
MPRINT(MAKECODE):   set EMWS1.Grp9_groupinfo;
MPRINT(MAKECODE):   if _LOOP_ = 1 and _where_ ne '' then do;
MPRINT(MAKECODE):   _where_ = tranwrd(_where_, '^(', '(');
MPRINT(MAKECODE):   put 'if ' _where_ ' then do;';
MPRINT(MAKECODE):   put '_XVAL_=' "1" ';' ;
MPRINT(MAKECODE):   end;
MPRINT(MAKECODE):   run;
 
NOTE: The file Y is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:17 o'clock,
      Create Time=02 June 2018 16:26:17 o'clock
 
NOTE: 2 records were written to the file Y.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECODE):   filename Y ;
NOTE: Fileref Y has been deassigned.
MPRINT(MAKECODE):   filename x ;
NOTE: Fileref X has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EXPORTCODE.sas";
MPRINT(MAKEEXPORTCODE):   data _null_;
MPRINT(MAKEEXPORTCODE):   file x;
MPRINT(MAKEEXPORTCODE):   set EMWS1.Grp9_GROUPINFO;
MPRINT(MAKEEXPORTCODE):   if _LOOP_ = 1 and _where_ ne '' then put 'if ' _where_ ' then output;';
MPRINT(MAKEEXPORTCODE):   run;
 
NOTE: The file X is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EXPORTCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 16:26:17 o'clock,
      Create Time=27 May 2018 00:30:02 o'clock
 
NOTE: 1 record was written to the file X.
      The minimum record length was 29.
      The maximum record length was 29.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename _pregrp "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas";
MPRINT(MAKEEXPORTCODE):   filename _grpdrp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file _GRPDRP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
91163     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
91165     +   filename macFile catalog 'work.emutil.macro.source';
91166     +   %let _METAOBS = 0;
91167     +   %let _maxvar = &maxvar;
91168     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
91170     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
91171     +                   or (&metadata eq ) %then %do;
91172     +       %put * No metadata data set defined;
91173     +       %goto doend;
91174     +   %end;
91176     +   data _null_;
91177     +      length _STRING_ $80;
91178     +      retain _STRING_ '' maxvar 0;
91179     +      set &metadata end=eof;
91180     +      file macFile;
91181     +      %if %nrbquote(&where) ne %then %do;
91182     +          %let whereClause = where (%nrbquote(&where));
91183     +          %unquote(&whereClause);
91184     +      %end;
91185     +      if _N_=1 then do;
91186     +         string = "%"!!"macro &name;";
91187     +         put string;
91188     +      end;
91189     +      maxvar +1;
91190     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
91191     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
91192     +         if eof
91193     +            %if  %sysevalf(&_maxvar > 0) %then %do;
91194     +                or maxvar >= &maxvar
91195     +            %end;
91196     +            then do;
91197     +            put _STRING_;
91198     +            string = "%"!!"mend &name;";
91199     +            put string;
91200     +            string = strip(put(_N_, best.));
91201     +            call symput('_METAOBS', string);
91202     +            %if (&nummacro ne ) %then %do;
91203     +                put "%" "global &nummacro;";
91204     +                put "%" "let &nummacro = " string ";";
91205     +            %end;
91206     +            stop;
91207     +         end;
91208     +      end;
91209     +      else do;
91210     +         put _STRING_;
91211     +         _string_ = TRIM(&key);
91212     +         if eof
91213     +            %if  %sysevalf(&_maxvar > 0) %then %do;
91214     +              or maxvar >= &maxvar
91215     +           %end;
91216     +            then do;
91217     +            put _STRING_;
91218     +            string = "%"!!"mend &name;";
91219     +            put string;
91220     +        end;
91221     +      end;
91222     +      if eof
91223     +         %if  %sysevalf(&_maxvar > 0) %then %do;
91224     +             or maxvar >= &maxvar
91225     +         %end;
91226     +         then do;
91227     +         string = strip(put(_N_, best.));
91228     +         call symput('_METAOBS', string);
91229     +         %if (&nummacro ne ) %then %do;
91230     +             put "%" "global &nummacro;";
91231     +             put "%" "let &nummacro = " string ";";
91232     +         %end;
91233     +         stop;
91234     +      end;
91235     +   run;
91237     +   %doend:
91238     +   %if ^&_METAOBS %then %do;
91239     +       data _null_;
91240     +          file macFile;
91241     +          put "%" "macro &name;";
91242     +          put "%" "mend &name;";
91243     +          %if (&nummacro ne ) %then %do;
91244     +              put "%" "global &nummacro;";
91245     +              put "%" "let &nummacro = 0;";
91246     +          %end;
91247     +      run;
91248     +   %end;
91249     +   %inc macFile;
91250     +   filename macFile;
91251     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAKEEXPORTCODE):   filename _grpdrp;
NOTE: Fileref _GRPDRP has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Trans2_CMeta_TRAIN end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE ne 'REJECTED');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpKeep;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpKeep;";
MPRINT(EM_VARMACRO):   put "%" "let GrpKeep = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:13,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 7 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 76.
NOTE: There were 14 observations read from the data set EMWS1.TRANS2_CMETA_TRAIN.
      WHERE ROLE not = 'REJECTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
91252     +%macro emGrpKeep;
91253     +Custid DepVar Marital_Status MntCard_Games MntMagazines
91254     +NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq
91255     +RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var
91256     +%mend emGrpKeep;
91257     +%global GrpKeep;
91258     +%let GrpKeep = 14 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set EMWS1.Grp9_VariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (ROLE eq 'REJECTED' and GROUPROLE='GROUP');
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend emGrpRej;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:17,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set EMWS1.GRP9_VARIABLESET.
      WHERE (ROLE='REJECTED') and (GROUPROLE='GROUP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "mend emGrpRej;";
MPRINT(EM_VARMACRO):   put "%" "global GrpRej;";
MPRINT(EM_VARMACRO):   put "%" "let GrpRej = 0;";
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:01,
      Last Modified=Saturday,  2 June 2018 16:26:17,
      Filename=C:\Users\misil\AppData\Local\Temp\SAS Temporary Files\_TD7712_DESKTOP-61HCQ9U_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 4 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
91259     +%macro emGrpRej;
91260     +%mend emGrpRej;
91261     +%global GrpRej;
91262     +%let GrpRej = 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(SCORETABLES):   data EMWS1.Grp9_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN (keep
MPRINT(SCORETABLES):  =Custid DepVar Marital_Status MntCard_Games MntMagazines NumCatalogPurchases NumDealsPurchases NumWebPurchases RANGE_Frq RANGE_Recency RANGE_average_purchase RANGE_campaign_acceptance _WARN_ cv_var) ;
NOTE: %INCLUDE (level 1) file _PREGRP is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\PRECODE.sas.
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file X is file C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EXPORTCODE.sas.
91263     +if ^(cv_var =1)  then output;
MPRINT(SCORETABLES):   if ^(cv_var =1) then output;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: The data set EMWS1.GRP9_TRAIN has 2187 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
 
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):  ;
MPRINT(MAKEEXPORTCODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEEXPORTCODE):   filename _pregrp;
NOTE: Fileref _PREGRP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Grp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
91264      *------------------------------------------------------------*;
91265      * End SCORE: Grp9;
91266      *------------------------------------------------------------*;
91267
 
91269      filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):     filename emflow "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMFLOWSCORE.sas";
91270      filename lpflow catalog "EMWS1.Grp9_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_DIAGRAM):   filename lpflow catalog "EMWS1.Grp9_LOOP.EMFLOWCODE_1.source";
The SAS System
 
91271      %em_copyfile(infref=emflow, outfref=lpflow);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lpflow lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("emflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPFLOW is:
      Catalog Name=EMWS1.GRP9_LOOP.EMFLOWCODE_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Saturday,  2 June 2018 16:26:17,
      Last Modified=Saturday,  2 June 2018 16:26:17,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp9_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            17KB,
      File Size (bytes)=17408
 
NOTE: 1 record was written to the file LPFLOW.
      The minimum record length was 25.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
91272      filename lpflow;
MPRINT(EM_DIAGRAM):   filename lpflow;
NOTE: Fileref LPFLOW has been deassigned.
91273      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
91274      filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename empub "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMPUBLISHSCORE.sas";
91275      filename lppub catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_DIAGRAM):   filename lppub catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_1.source";
91276      %em_copyfile(infref=empub, outfref=lppub);
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file lppub lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("empub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file LPPUB is:
      Catalog Name=EMWS1.GRP9_LOOP.EMPUBLISHCODE_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=6,
      Created=Saturday,  2 June 2018 16:26:17,
      Last Modified=Saturday,  2 June 2018 16:26:17,
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\grp9_loop.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-61HCQ9U\misil,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 2 records were written to the file LPPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
91277      filename lppub;
MPRINT(EM_DIAGRAM):   filename lppub;
NOTE: Fileref LPPUB has been deassigned.
91278      filename empub;
MPRINT(EM_DIAGRAM):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
91279      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
91280      * Grp9: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Grp9: Computing metadata for TRAIN data;
91281      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Grp9_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Grp9_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Grp9_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Grp9_TRAIN out=WORK.M066UBFE noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M066UBFE;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M066UBFE(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M066UBFE;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M066UBFE;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M104OT20 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1CFMOIV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   set WORK.M104OT20;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Grp9_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Grp9";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp9: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)= 'CV_VAR' then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:18 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:26:18 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0Y57Q3K "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0Y57Q3K new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
