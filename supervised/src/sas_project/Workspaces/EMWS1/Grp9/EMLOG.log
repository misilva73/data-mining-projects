*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:05:00 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:56 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:04:56 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O05G6C0O "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O05G6C0O new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:56 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:56 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3428103    proc freq data=EMWS1.Grp9_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp9_VariableSet noprint;
3428104    table ROLE*LEVEL/out=WORK.Grp9META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp9META;
3428105    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP9_VARIABLESET.
NOTE: The data set WORK.GRP9META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
3428106    proc print data=WORK.Grp9META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp9META label noobs;
3428107    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3428108    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3428109    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3428110    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3428111    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP9META.
NOTE: The PROCEDURE PRINT printed page 2292.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3428112    title10;
MPRINT(EM_DIAGRAM):   title10;
3428113    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp9: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3428436    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3428437    * Grp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp9: Generation of macros and macro variables;
3428438    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3428439    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3428440    %let EMEXCEPTIONSTRING=;
3428441    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3428442    * TRAIN: Grp9;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp9;
3428443    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3428444    %let EM_ACTION = TRAIN;
3428445    %let syscc = 0;
3428446    %macro main;
3428447
3428448       filename temp catalog 'sashelp.emutil.gp_macros.source';
3428449       %include temp;
3428450       filename temp;
3428451
3428452       %SetProperties;
3428453
3428454       %if %upcase(&EM_ACTION) = CREATE %then %do;
3428455
3428456           filename temp catalog 'sashelp.emutil.gp_create.source';
3428457           %include temp;
3428458           filename temp;
3428459
3428460           %create;
3428461       %end;
3428462       %else
3428463       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3428464
3428465           filename temp catalog 'sashelp.emutil.gp_train.source';
3428466           %include temp;
3428467           filename temp;
3428468
3428469           %train;
3428470       %end;
3428471       %else
3428472       %if %upcase(&EM_ACTION) = SCORE %then %do;
3428473
3428474           filename temp catalog 'sashelp.emutil.gp_score.source';
3428475           %include temp;
3428476           filename temp;
3428477
3428478           %score;
3428479       %end;
3428480       %else
3428481       %if %upcase(&EM_ACTION) = REPORT %then %do;
3428482
3428483           filename temp catalog 'sashelp.emutil.gp_report.source';
3428484           %include temp;
3428485           filename temp;
3428486
3428487           %report;
3428488
3428489       %end;
3428490       %else
3428491       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3428492
3428493           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3428494           %include temp;
3428495           filename temp;
3428496
3428497           %postloop;
3428498
3428499       %end;
3428500
3428501       %doendm:
3428502    %mend main;
3428503
3428504    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3428505   +%macro SetProperties;
3428506   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3428507   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3428508   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3428509   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3428510   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3428511   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3428512   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3428513   +%mend SetProperties;
3428514   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3428515   +%macro scoreValidTest(data=, out=);
3428517   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3428518   +       data &out / view = &out;
3428519   +          retain _RESAMP_ 1;
3428520   +          set &data;
3428521   +       run;
3428522   +   %end;
3428524   +%mend scoreValidTest;
3428526   +%macro getVariables;
3428527   +   %if "&emloopnumber" = "1" %then %do;
3428528   +       data _null_;
3428529   +          retain numgoup 0;
3428530   +          set &em_data_variableset end=eof;
3428531   +          %if &em_num_target = 1 %then %do;
3428532   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3428533   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3428534   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3428535   +              %end;
3428536   +              %else
3428537   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3428538   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3428539   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3428540   +              %end;
3428541   +          %end;
3428542   +          %else %do;
3428543   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3428544   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3428545   +              else
3428546   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3428547   +          %end;
3428548   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3428549   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3428550   +             numgroup + 1;
3428551   +          end;
3428552   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3428553   +       run;
3428554   +    %end;
3428555   +    %else %do;
3428556   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3428557   +            data _null_;
3428558   +               retain numgoup 0;
3428559   +               set &em_data_variableset end=eof;
3428560   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3428561   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3428562   +               numgroup + 1;
3428563   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3428564   +            run;
3428565   +          %end;
3428566   +            %else
3428567   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3428568   +            %em_getName(key=BOOSTINFO,   type=DATA);
3428569   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3428570   +                data _null_;
3428571   +                   set &em_user_boostinfo;
3428572   +                   call symput('emboostvar', strip(_TARGET_));
3428573   +                run;
3428574   +            %end;
3428575   +        %end;
3428576   +        %else
3428577   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3428578   +                %em_getName(key=BAGINFO,   type=DATA);
3428579   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3428580   +                    data _null_;
3428581   +                       set &em_user_baginfo;
3428582   +                      call symput('embagvar', strip(_TARGET_));
3428583   +                    run;
3428584   +                %end;
3428585   +            %end;
3428586   +    %end;
3428587   +%mend getVariables;
3428589   +%macro gp_bag(targetname=);
3428590   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3428591   +        %put LOOP MODE:   &emloopmode ;
3428592   +        %put LOOP NUMBER: &emloopnumber;
3428593   +        %put BAGGING TARGET: &targetname;
3428594   +   %end;
3428596   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3428597   +   %include temp;
3428598   +   filename temp;
3428600   +   %em_getName(key=BAGINFO,    type=DATA);
3428601   +   %em_getName(key=EMLOOPINFO, type=DATA);
3428603   +   %if &emloopnumber = 1 %then %do;
3428604   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3428605   +       data _null_;
3428606   +          file gpdelta;
3428607   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3428608   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3428609   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3428610   +          put "end;";
3428611   +       run;
3428612   +       filename gpdelta;
3428614   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3428615   +           proc datasets lib=&em_lib nolist;
3428616   +              delete &em_nodeid._baginfo;
3428617   +           run;
3428618   +       %end;
3428620   +       %if "%em_freq" ne "" %then %do;
3428621   +           proc means data=&em_import_data sum;
3428622   +              var %em_freq;
3428623   +              output out = _tempds sum=sumfreq;
3428624   +           run;
3428625   +           quit;
3428626   +           data _null_;
3428627   +              set _tempDs;
3428628   +              call symput('_sumfreq', put(sumfreq, best12.));
3428629   +           run;
3428630   +       %end;
3428631   +       %else %do;
3428632   +           proc sql noprint;
3428633   +              select count(*) into :_sumfreq
3428634   +              from &em_import_data;
3428635   +           quit;
3428636   +       %end;
3428638   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3428639   +           data _null_;
3428640   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3428641   +           run;
3428642   +       %end;
3428643   +       %else
3428644   +           %let _size = &em_property_sizeobs;
3428646   +       data &em_user_baginfo;
3428647   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3428648   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3428649   +          _TARGET_   ="&targetname";
3428650   +          _SUMFREQ_  =&_sumfreq;
3428651   +           _SIZE_    = &_size;
3428652   +          output;
3428653   +       run;
3428654   +       data &em_user_emloopinfo;
3428655   +          length MODE $8;
3428656   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3428657   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3428658   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3428659   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3428660   +           MODE='Bagging';
3428661   +       run;
3428663   +       data &em_data_eminfo;
3428664   +          length TARGET KEY $32  DATA $43;
3428665   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3428666   +       run;
3428667   +   %end;
3428668   +   %else %do;
3428669   +      data _null_;
3428670   +         set &em_user_baginfo;
3428671   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3428672   +         call symput('_size', put(_size_, best12.));
3428673   +      run;
3428674   +   %end;
3428676   +   %let bagsumFreq  = &_sumFreq;
3428677   +   %let bagSize     = &_Size;
3428679   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3428680   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3428682   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3428683   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3428685   +   %doendbg:
3428687   +%mend gp_bag;
3428690   +%macro gp_boost(targetname=);
3428691   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3428692   +       %put LOOP MODE:   &emloopmode ;
3428693   +       %put LOOP NUMBER: &emloopnumber;
3428694   +        %put BAGGING TARGET: &targetname;
3428695   +   %end;
3428697   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3428698   +   %include temp;
3428699   +   filename temp;
3428701   +   %em_getname(key=EMLOOPINFO, type=DATA);
3428702   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3428703   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3428704   +   %em_getName(key=BOOSTINFO,   type=DATA);
3428706   +   %if &emloopnumber = 1 %then %do;
3428707   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3428708   +       data _null_;
3428709   +          file gpdelta;
3428710   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3428711   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3428712   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3428713   +          put "end;";
3428714   +       run;
3428715   +       filename gpdelta;
3428717   +       %let deleteString =;
3428718   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3428719   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3428720   +       %if "&deleteString" ne "" %then %do;
3428721   +           proc datasets lib=&em_lib nolist;
3428722   +              delete &deleteString;
3428723   +           run;
3428724   +       %end;
3428726   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3428728   +       data &em_user_boostinfo;
3428729   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3428730   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3428731   +          _TARGET_          ="&targetname";
3428732   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3428733   +          _SUMFREQ_         =&_sumfreq;
3428734   +       run;
3428735   +       data &em_user_emloopinfo;
3428736   +          length MODE $8;
3428737   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3428738   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3428739   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3428740   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3428741   +           MODE='Boosting';
3428742   +       run;
3428744   +       data &em_data_eminfo;
3428745   +          length TARGET KEY $32  DATA $43;
3428746   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3428747   +       run;
3428749   +   %end;
3428750   +   %else %do;
3428751   +       %global _dmboodiv;
3428752   +       %let dmboosf = %upcase(&targetname);
3428753   +       %if %sysfunc(length(&targetname))> 30 %then
3428754   +           %let dmboosf =  %substr(&targetname, 1, 30);
3428756   +       data _null_;
3428757   +          set &em_user_boostinfo;
3428758   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3428759   +       run;
3428761   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3428763   +       data &em_user_boostinfo;
3428764   +          set &em_user_boostinfo;
3428765   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3428766   +       run;
3428768   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3428770   +   %end;
3428772   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3428773   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3428775   +   %doendbst:
3428777   +%mend gp_boost;
3428779   +%macro gp_group(numgroupvar=, groupvar=);
3428780   +   %em_getname(key=GROUPINFO, type=DATA);
3428781   +   %em_getName(key=LOOPINFO,  type=DATA);
3428782   +   %em_getName(key=EMGROUPINFO, type=DATA);
3428784   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3428785   +       ods listing close;
3428786   +       %if &numgroupvar = 1 %then %do;
3428787   +           ods output onewayfreqs=temp;
3428788   +       %end;
3428789   +       %else %do;
3428790   +           ods output crosstabfreqs=temp;
3428791   +       %end;
3428792   +       proc freq data=&em_import_data;
3428793   +          table
3428795   +          %let tableString =;
3428796   +          %let freqString  =;
3428797   +          %do i=1 %to &numgroupvar;
3428798   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3428799   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3428800   +              %let freqString = &freqString.1;
3428801   +          %end;
3428802   +          &tableString / missing;
3428803   +       run;
3428804   +       ods listing;
3428805   +       %if &numgroupvar = 1 %then %do;
3428806   +           data _null_;
3428807   +              retain totalobs 0;
3428808   +              set temp end=eof;
3428809   +              totalobs + frequency;
3428810   +              if eof then
3428811   +                 call symput('_totalObs_', put(totalobs, best.));
3428812   +           run;
3428814   +           proc sort data=temp out=loopinfo nodupkey;
3428815   +              by &groupvar;
3428816   +              where frequency>=&em_property_minimumObs;
3428817   +           run;
3428818   +       %end;
3428819   +       %else %do;
3428820   +           data _null_;
3428821   +              set temp;
3428822   +              where _type_='00';
3428823   +              call symput('_totalObs_', put(frequency, best.));
3428824   +           run;
3428825   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3428826   +              by &groupvar;
3428827   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3428828   +           run;
3428829   +       %end;
3428831   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3428832   +       filename _pregrp "&em_user_precode";
3428834   +       %let dsid = %sysfunc(open(loopinfo));
3428835   +       %do i=1 %to &numgroupvar;
3428836   +           %let varname = %scan(&groupvar, &i, %str( ));
3428837   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3428838   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3428839   +           %if %index(&varfmt, -) %then %do;
3428840   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3428841   +           %end;
3428843   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3428844   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3428845   +           %let fmttype&i = &vartype;
3428846   +           %let fmtlen&i  = &varlen;
3428848   +           %let fmtvar&i =;
3428849   +           %let fmt&i    =;
3428850   +           %if "&varfmt" ne "" %then %do;
3428851   +              %let fmtvar&i  = _FORMAT&i._;
3428852   +              %let fmt&i     = &varfmt;
3428853   +           %end;
3428854   +       %end;
3428855   +       %let dsid = %sysfunc(close(&dsid));
3428857   +       data _null_;
3428858   +          %do i=1 %to &numgroupvar;
3428859   +              %if "&&fmt&i" ne "" %then %do;
3428860   +                  retain len_&i 0;
3428861   +              %end;
3428862   +          %end;
3428864   +          set loopinfo end=eof;
3428865   +          file _pregrp;
3428867   +          %do i=1 %to &numgroupvar;
3428868   +              %let varname = %scan(&groupvar, &i, %str( ));
3428869   +              %if "&&fmt&i" ne "" %then %do;
3428870   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3428871   +                    len_&i = length(put(&varname, &&fmt&i));
3428872   +              %end;
3428873   +          %end;
3428875   +          if eof then do;
3428876   +             %do i=1 %to &numgroupvar;
3428877   +                 %let varname = %scan(&groupvar, &i, %str( ));
3428878   +                 %if "&&fmt&i" ne "" %then %do;
3428879   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3428880   +                     put "drop &&fmtvar&i" len_&i ";";
3428881   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3428882   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3428883   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3428884   +                 %end;
3428885   +              %end;
3428886   +          end;
3428887   +      run;
3428889   +      data loopinfo;
3428890   +         set loopinfo;
3428891   +         %do i=1 %to &numgroupvar;
3428892   +             %let varname = %scan(&groupvar, &i, %str( ));
3428893   +             %if "&&fmt&i" ne "" %then %do;
3428894   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3428895   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3428896   +             %end;
3428897   +         %end;
3428898   +      run;
3428899   +      filename _pregrp;
3428901   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3428902   +          data temp;
3428903   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3428904   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3428905   +      %end;
3428906   +      %else %do;
3428907   +          data &em_user_groupinfo;
3428908   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3428909   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3428910   +             retain _TARGET_ '';
3428911   +      %end;
3428913   +          set loopinfo;
3428914   +          _LOOP_= _N_;
3428915   +          _WHERE_ = '';
3428916   +          _WHEREDESC_  = '';
3428917   +          %do i=1 %to &numgroupvar;
3428918   +              %let varname = %scan(&groupvar, &i, %str( ));
3428919   +              %if "&&fmt&i" eq "" %then %do;
3428920   +                  %if "&&fmtType&i" eq "N" %then %do;
3428921   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3428922   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3428923   +                   %end;
3428924   +                  %else %do;
3428925   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3428926   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3428927   +                  %end;
3428928   +              %end;
3428929   +              %else %do;
3428930   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3428931   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3428932   +              %end;
3428933   +              %if &i < &numgroupvar %then %do;
3428934   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3428935   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3428936   +              %end;
3428937   +          %end;
3428938   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3428939   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3428940   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3428941   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3428942   +          %end;
3428943   +      run;
3428945   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3428946   +          data target;
3428947   +             length _TARGET_ $32;
3428948   +              %do i=1 %to &em_num_target;
3428949   +                  %let varname = %scan(%em_target, &i, %str( ));
3428950   +                  _TARGET_ = "&varname";
3428951   +                  output;
3428952   +              %end;
3428953   +          run;
3428954   +          proc sql;
3428955   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3428956   +          quit;
3428957   +          data &em_user_groupinfo;
3428958   +             set &em_user_groupinfo;
3428959   +             _LOOP_=_N_;
3428960   +          run;
3428961   +      %end;
3428963   +      data &em_data_eminfo;
3428964   +         length TARGET KEY $32  DATA $43;
3428965   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3428966   +      run;
3428968   +      data &em_user_emloopinfo;
3428969   +         set &em_user_groupinfo;
3428970   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3428971   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3428972   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3428973   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3428974   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3428975   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3428976   +         %end;
3428977   +         %else %do;
3428978   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3428979   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3428980   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3428981   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3428982   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3428983   +         %end;
3428984   +      run;
3428986   +      proc datasets lib=work nolist;
3428987   +          delete temp loopinfo
3428988   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3428989   +              target
3428990   +          %end;
3428991   +          ;
3428992   +      run;
3428994   +   %end;
3428996   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3428997   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3428998   +       data _null_;
3428999   +          length quotedTarget $32;
3429000   +          set &em_user_groupinfo;
3429001   +          file gpdelta;
3429002   +          if _N_ = &emloopnumber then do;
3429003   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3429004   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3429006   +             %do i=1 %to &numgroupvar;
3429007   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3429008   +                 put "if upcase(NAME)= '&gvar' then delete;";
3429009   +             %end;
3429010   +          end;
3429011   +       run;
3429012   +   %end;
3429013   +   %else %do;
3429014   +       data _null_;
3429015   +          set &em_user_groupinfo;
3429016   +          file gpdelta;
3429017   +          if _N_ = &emloopnumber then do;
3429018   +             %do i=1 %to &numgroupvar;
3429019   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3429020   +                 put "if upcase(NAME)= '&gvar' then delete;";
3429021   +             %end;
3429022   +          end;
3429023   +       run;
3429024   +   %end;
3429025   +   filename gpdelta;
3429027   +   %let nobs=0;
3429028   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3429029   +   %if &dsid>0 %then %do;
3429030   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3429031   +       %let dsid = %sysfunc(close(&dsid));
3429032   +   %end;
3429034   +   %if ^&nobs  %then
3429035   +       %let emloopmode =;
3429036   +   %else
3429037   +       %if &nobs< &emloopnumber %then
3429038   +           %let emloopmode = POSTLOOP;
3429039   +        %else
3429040   +        %let emloopmode = LOOP;
3429041   +%mend gp_group;
3429043   +%macro gp_Index;
3429045   +   %em_getName(key=INDEXINFO,  type=DATA);
3429046   +   %em_getName(key=EMLOOPINFO, type=DATA);
3429048   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3429049   +       data &em_user_indexinfo;
3429050   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3429051   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3429052   +          _TARGET_   ="";
3429053   +          _WHERE_    ="";
3429054   +          output;
3429055   +       run;
3429056   +       data &em_data_eminfo;
3429057   +          length TARGET KEY $32  DATA $43;
3429058   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3429059   +       run;
3429061   +       data &em_user_emloopinfo;
3429062   +          length MODE $8;
3429063   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3429064   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3429065   +          set &em_user_indexinfo(keep=_LOOP_ );
3429066   +          MODE='Index';
3429067   +       run;
3429068   +   %end;
3429070   +%mend gp_index;
3429072   +%macro gp_Target;
3429073   +   %let TargetName = %scan(%em_target, &emloopnumber);
3429074   +   %if "&targetName" eq "" %then %do;
3429075   +       %goto doendgpt;
3429076   +   %end;
3429078   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3429079   +       %put GP_TARGET;
3429080   +       %put &emLoopnumber &TargetName;
3429081   +   %end;
3429083   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3429084   +   data _null_;
3429085   +      file gpdelta;
3429086   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3429087   +   run;
3429088   +   filename gpdelta;
3429090   +   %if &emloopnumber eq 1 %then %do;
3429091   +       %em_getName(key=TARGETINFO,  type=DATA);
3429092   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3429094   +       data &em_user_targetinfo;
3429095   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3429096   +          retain _LOOP_;
3429097   +          _WHERE_ = '';
3429098   +          %do i=1 %to &em_num_target;
3429099   +              %let varname = %scan(%em_target, &i, ' ');
3429100   +              _TARGET_ = "&varname";
3429101   +              _LOOP_+1;
3429102   +              output;
3429103   +           %end;
3429104   +       run;
3429105   +       data &em_user_emloopinfo;
3429106   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3429107   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3429108   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3429109   +      run;
3429111   +       data &em_data_eminfo;
3429112   +          length TARGET KEY $32  DATA $43;
3429113   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3429114   +       run;
3429115   +   %end;
3429117   +   %doendgpt:
3429118   +%mend gp_target;
3429120   +%macro train;
3429121   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3429122   +       %put LOOP MODE:   &emloopmode ;
3429123   +       %put LOOP NUMBER: &emloopnumber;
3429124   +   %end;
3429126   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3429128   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3429130   +       %let hpdmFlag = 0;
3429131   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3429132   +            data _null_;
3429133   +               set &em_import_DATA_eminfo;
3429134   +               where KEY = "HPDMSAMPLE";
3429135   +               call symput('hpdmFlag', '1');
3429136   +            run;
3429137   +       %end;
3429138   +       %if &hpdmFlag %then %do;
3429139   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3429140   +           %goto doendmain;
3429141   +       %end;
3429142   +   %end;
3429144   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3429145   +   %em_getname(key=GROUPINFO,  type=DATA);
3429146   +   %em_getname(key=BOOSTINFO,  type=DATA);
3429147   +   %em_getname(key=BAGINFO,    type=DATA);
3429148   +   %em_getname(key=TARGETINFO, type=DATA);
3429149   +   %em_getname(key=INDEXINFO,  type=DATA);
3429150   +   %em_getname(key=EMINFO,  type=DATA);
3429152   +   %if "&emloopnumber" = "1" %then %do;
3429153   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3429154   +       filename _pregrp "&em_user_precode";
3429155   +       data _null_;
3429156   +         rc = fdelete('_pregrp');
3429157   +       run;
3429158   +       filename _pregrp;
3429160   +       %let members =;
3429161   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3429162   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3429163   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3429164   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3429165   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3429166   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3429167   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3429169   +       %if "&members" ne "" %then %do;
3429170   +           proc datasets lib=&em_lib nolist;
3429171   +              delete &members;
3429172   +           run;
3429173   +      %end;
3429174   +   %end;
3429176   +   %let emboostvar    =;
3429177   +   %let embagvar      =;
3429178   +   %let emgroupvar    =;
3429179   +   %let emnumgroupvar =;
3429180   +   %getVariables;
3429182   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3429183   +       %if &EM_NUM_TARGET>=1 %then %do;
3429184   +           %gp_target;
3429185   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3429186   +               %let emloopmode= LOOP;
3429187   +           %else
3429188   +              %let emloopmode = POSTLOOP;
3429189   +       %end;
3429190   +       %else %do;
3429191   +           %let emloopmode = ;
3429192   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3429193   +           %goto doendmain;
3429194   +       %end;
3429195   +   %end;
3429196   +   %else
3429197   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3429198   +       %let emloopmode=;
3429199   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3429200   +           proc delete data=&em_data_eminfo;
3429201   +           run;
3429202   +       %end;
3429203   +   %end;
3429204   +   %else
3429205   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3429206   +       %gp_index;
3429207   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3429208   +           %let emloopmode= LOOP;
3429209   +       %else
3429210   +           %let emloopmode= POSTLOOP;
3429211   +   %end;
3429212   +   %else
3429213   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3429214   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3429215   +           %let emloopmode = ;
3429216   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3429217   +           %goto doendmain;
3429218   +       %end;
3429220   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3429221   +   %end;
3429222   +   %else
3429223   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3429224   +       %if "&emboostvar" eq "" %then %do;
3429225   +           %let emloopmode = ;
3429226   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3429227   +           %goto doendmain;
3429228   +       %end;
3429230   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3429231   +           %let emloopmode= LOOP;
3429232   +           %gp_boost(targetname=&emboostvar);
3429234   +       %end;
3429235   +       %else
3429236   +           %let emloopmode= POSTLOOP;
3429237   +   %end;
3429238   +   %else
3429239   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3429240   +       %if "&embagvar" eq "" %then %do;
3429241   +           %let emloopmode = ;
3429242   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3429243   +           %goto doendmain;
3429244   +       %end;
3429246   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3429247   +           %let emloopmode= LOOP;
3429248   +           %gp_bag(targetname=&embagvar);
3429249   +       %end;
3429250   +       %else
3429251   +           %let emloopmode= POSTLOOP;
3429252   +   %end;
3429255   +   %if &emloopmode eq "" %then %do;
3429256   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3429257   +       %let member = %scan(&em_data_eminfo, 2, .);
3429258   +       proc datasets lib=&lib nolist;
3429259   +          delete &member;
3429260   +       run;
3429261   +   %end;
3429263   +   %doendmain:
3429265   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3429266   +       %put NEW LOOP MODE: &emloopmode;
3429267   +   %end;
3429269   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3429270   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3429271   +       %include temp;
3429272   +       filename temp;
3429274   +       %postloop;
3429275   +   %end;
3429277   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp9_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP9_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp9_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp9\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:04:57 o'clock,
      Create Time=02 June 2018 16:26:16 o'clock
 
NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3429279   +%macro postloop;
3429280   +   %let deleteString =;
3429281   +
3429282   +   %em_getname(key=boostweight, type=DATA);
3429283   +   %em_getname(key=boostscore,  type=DATA);
3429284   +
3429285   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3429286   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3429287   +   %if "&deleteString" ne "" %then %do;
3429288   +       proc datasets lib=&em_lib nolist;
3429289   +          delete &deleteString;
3429290   +       run;
3429291   +   %end;
3429292   +
3429293   +   %em_register(key=EMLOOPINFO,    type=DATA);
3429294   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3429295   +    proc print data=&em_user_emloopinfo noobs label;
3429296   +       title9 'Group Summary';
3429297   +    run;
3429298   +    title9;
3429299   +
3429300   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3429301   +
3429302   +%mend postloop;
3429303   +
3429304   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp9_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp9_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP9_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2293.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06094676631546;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3429305    *------------------------------------------------------------*;
3429306    * End TRAIN: Grp9;
3429307    *------------------------------------------------------------*;
3429308
 
3429309    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3429310    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3429311    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3429312    ;
MPRINT(EM_DIAGRAM):   ;
3429313    ;
MPRINT(EM_DIAGRAM):   ;
3429314    ;
MPRINT(EM_DIAGRAM):   ;
3429315    ;
MPRINT(EM_DIAGRAM):   ;
3429316    quit;
MPRINT(EM_DIAGRAM):   quit;
3429317    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3429318    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3429319    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3429320    /*; *"; *'; */
3429321    ;
MPRINT(EM_DIAGRAM):   ;
3429322    run;
MPRINT(EM_DIAGRAM):   run;
3429323    quit;
MPRINT(EM_DIAGRAM):   quit;
3429324    /* Reset EM Options */
3429325    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3429326    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3429327    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3429328    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3429329    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3429330    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
