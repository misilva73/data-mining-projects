MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:12:29 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:12:29 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0OBIJXO "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0OBIJXO new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:12:29 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:12:30 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlImp\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
3936343    proc freq data=EMWS1.MdlImp_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.MdlImp_VariableSet noprint;
3936344    table ROLE*LEVEL/out=WORK.MdlImpMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MdlImpMETA;
3936345    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set EMWS1.MDLIMP_VARIABLESET.
NOTE: The data set WORK.MDLIMPMETA has 12 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

3936346    proc print data=WORK.MdlImpMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlImpMETA label noobs;
3936347    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3936348    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
3936348  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
3936348  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
3936349    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3936350    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3936351    run;

NOTE: There were 12 observations read from the data set WORK.MDLIMPMETA.
NOTE: The PROCEDURE PRINT printed page 2562.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3936352    title10;
MPRINT(EM_DIAGRAM):   title10;
3936353    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.EndGrp_TRAIN EMWS1.EndGrp_TRAIN 
EMWS1.EndGrp_TRAIN EMWS1.EndGrp_TRAIN EMWS1 EndGrp_TRAIN 
EMWS1.EndGrp_TRAIN EMWS1.EndGrp_TRAIN 
EMWS1.EndGrp_TRAIN EMWS1.EndGrp_TRAIN EMWS1 EndGrp_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.EndGrp_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3936382    data WORK.MdlImp_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.MdlImp_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
3936383    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3936384    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3936384  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3936384  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3936385       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3936385  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3936385  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3936386    set EMWS1.TREE_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.TREE_DEPVAR_DM( where=(_TYPE_="TARGET"));
3936387    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3936388    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3936389    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3936390    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3936391    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3936392    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3936393    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3936394    end;
MPRINT(EM_DIAGRAM):   end;
3936395    output;
MPRINT(EM_DIAGRAM):   output;
3936396    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.MDLIMP_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3936397    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3936398    proc print data=WORK.MdlImp_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlImp_EVENT noobs label;
3936399    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3936400    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3936401    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3936402    run;

NOTE: There were 1 observations read from the data set WORK.MDLIMP_EVENT.
NOTE: The PROCEDURE PRINT printed page 2563.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3936403    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
3936404    proc print data = EMWS1.Tree_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Tree_DepVar_DM noobs label;
3936405    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3936406    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
3936407    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3936407  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3936407  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3936408    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3936409    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3936410    run;

NOTE: There were 7 observations read from the data set EMWS1.TREE_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2564.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3936411    title10;
MPRINT(EM_DIAGRAM):   title10;
3936412    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlImp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlImp: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * MdlImp: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
3936882    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3936883    * MdlImp: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * MdlImp: Generation of macros and macro variables;
3936884    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
3936885    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

3936886    %let EMEXCEPTIONSTRING=;
3936887    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3936888    * TRAIN: MdlImp;
MPRINT(EM_DIAGRAM):   * TRAIN: MdlImp;
3936889    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3936890    %let EM_ACTION = TRAIN;
3936891    %let syscc = 0;
3936892    %macro main;
3936893    
3936894       %if %upcase(&EM_ACTION) = CREATE %then %do;
3936895    
3936896           filename temp catalog 'sashelp.emmodl.modelimport_create.source';
3936897           %include temp;
3936898           filename temp;
3936899           %create;
3936900       %end;
3936901       %else
3936902       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3936903    
3936904           filename temp catalog 'sashelp.emmodl.modelimport_train.source';
3936905           %include temp;
3936906           filename temp;
3936907           %train;
3936908       %end;
3936909       %else
3936910       %if %upcase(&EM_ACTION) = SCORE %then %do;
3936911    
3936912           filename temp catalog 'sashelp.emmodl.modelimport_score.source';
3936913           %include temp;
3936914           filename temp;
3936915           %score;
3936916       %end;
3936917       %else
3936918       %if %upcase(&EM_ACTION) = OPENMAPPINGTABLE %then %do;
3936919    
3936920           filename temp catalog 'sashelp.emmodl.modelimport_actions.source';
3936921           %include temp;
3936922           filename temp;
3936923           %openMappingTable;
3936924       %end;
3936925       %else
3936926       %if %upcase(&EM_ACTION) = CLOSEMAPPINGTABLE %then %do;
3936927    
3936928           filename temp catalog 'sashelp.emmodl.modelimport_actions.source';
3936929           %include temp;
3936930           filename temp;
3936931           %closeMappingTable;
3936932       %end;
3936933    %mend main;
3936934    
3936935    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.modelimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.MODELIMPORT_TRAIN.SOURCE.
3936936   +%macro em_mdlimp_checkScoreInputs;
3936937   +     %EM_GETNAME(key=MODELINPUT,  type=DATA);
3936938   +     %EM_REGISTER(key=INPUTEXCEPTION, type=DATA);
3936939   +     %let newNum=0;
3936940   +     %if %sysfunc(exist(work.mdlimp_meta)) %then %do;
3936941   +         %let dsid = %sysfunc(open(work.mdlimp_meta));
3936942   +         %if &dsid %then %do;
3936943   +             %let newNum     = %sysfunc(varnum(&dsid, NewName));
3936944   +             %let dsid = %sysfunc(close(&dsid));
3936945   +         %end;
3936946   +
3936947   +         %if &newNum %then %do;
3936948   +             proc sort data=work.mdlimp_meta(keep=Name NewName rename=(Name=VVName
3936948  !+Newname=Name));
3936949   +                by VVName;
3936950   +             run;
3936951   +             proc sort data=&em_user_modelinput
3936951  !+out=work.modelInput(rename=(NAME=VVName));
3936952   +                by Name;
3936953   +             run;
3936954   +             data work.modelinput;
3936955   +                merge work.mdlimp_meta(in=_a) work.modelinput(in=_b);
3936956   +                by VVName;
3936957   +               if _a and ^_b then delete;
3936958   +             run;
3936959   +             proc sort data=work.modelinput;
3936960   +                by Name;
3936961   +             run;
3936962   +         %end;
3936963   +         %else %do;
3936964   +             proc sort data=work.mdlimp_meta(keep=Name);
3936965   +                by Name;
3936966   +             run;
3936967   +             proc sort data=&em_user_modelinput out=work.modelInput;
3936968   +                by Name;
3936969   +             run;
3936970   +             data work.modelinput;
3936971   +                merge work.mdlimp_meta(in=_a) work.modelinput(in=_b);
3936972   +                by Name;
3936973   +               if _a and ^_b then delete;
3936974   +             run;
3936975   +         %end;
3936976   +      %end;
3936977   +      %else %do;
3936978   +          proc sort data=&em_user_modelinput out=work.modelInput;
3936979   +             by Name;
3936980   +          run;
3936981   +      %end;
3936982   +
3936983   +
3936984   +     proc sort data=&em_data_variableset out=_temp(keep=NAME type length format
3936984  !+rename=(type=NewType format=NewFormat length=NewLength));
3936985   +        by NAME;
3936986   +     run;
3936987   +     %let numMissing = 0;
3936988   +     %let numType    = 0;
3936989   +     %let numLength  = 0;
3936990   +     %let numFormat  = 0;
3936991   +
3936992   +     data &em_user_inputexception(keep=NAME ATTRIBUTE VALUE NEWVALUE);
3936993   +        length Name $32 Attribute $8 Value NewValue $32;
3936994   +        retain numMissing numLength numType numFormat 0;
3936995   +        label Name      = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,
3936995  !+NOQUOTE))"
3936996   +              Attribute = "%sysfunc(sasmsg(sashelp.dmine, rpt_attribute_vlabel,
3936996  !+NOQUOTE))"
3936997   +              Value     = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,
3936997  !+NOQUOTE))"
3936998   +              NewValue  = "%sysfunc(sasmsg(sashelp.dmine, rpt_newvalue_vlabel,
3936998  !+NOQUOTE))";
3936999   +              merge work.modelinput(in=_a) _temp(in=_b) end=eof;
3937000   +        by NAME;
3937001   +        %if %sysfunc(exist(work.mdlimp_meta)) and &newNum %then %do;
3937002   +           if Name='' and VVname ne '' then do;
3937003   +              Name = VVName;
3937004   +           end;
3937005   +        %end;
3937006   +
3937007   +        if _a and ^_b then do;
3937008   +
3937009   +           attribute='MISSING';
3937010   +           numMissing + 1;
3937011   +           output;
3937012   +        end;
3937013   +        if _a and _b then do;
3937014   +           if type ne newtype then do;
3937015   +              attribute = 'TYPE';
3937016   +              value     = type;
3937017   +              newvalue  = newtype;
3937018   +              numType + 1;
3937019   +              output;
3937020   +           end;
3937021   +           if length ne newlength then do;
3937022   +              attribute = 'LENGTH';
3937023   +              value     = length;
3937024   +              newvalue  = newlength;
3937025   +              numLength + 1;
3937026   +              output;
3937027   +           end;
3937028   +           if format ne newformat then do;
3937029   +              attribute = 'FORMAT';
3937030   +              value     = format;
3937031   +              newvalue  = newformat;
3937032   +              numFormat + 1;
3937033   +              output;
3937034   +           end;
3937035   +        end;
3937036   +        if eof then do;
3937037   +           call symput('numMissing',strip(put(numMissing, best.)));
3937038   +           call symput('numType',   strip(put(numType, best.)));
3937039   +           call symput('numLength', strip(put(numLength, best.)));
3937040   +           call symput('numFormat', strip(put(numFormat, best.)));
3937041   +        end;
3937042   +      run;
3937043   +      %if &numMissing or &numType or &numLength or &numFormat %then %do;
3937044   +          %em_report(key=INPUTEXCEPTION, viewType=DATA, autoDisplay=Y,
3937044  !+description=InputException, block=MODEL);
3937045   +          %put &em_codebar;
3937046   +          %put * %sysfunc(sasmsg(sashelp.dmine, warning_inputscorevars_note,
3937046  !+NOQUOTE));
3937047   +          %put * %sysfunc(sasmsg(sashelp.dmine, warning_inputscorevars2_note,
3937047  !+NOQUOTE));
3937048   +          %put * %sysfunc(sasmsg(sashelp.dmine, warning_inputscorevars3_note,
3937048  !+NOQUOTE));
3937049   +
3937050   +          %if &numMissing %then
3937051   +              %put * %sysfunc(sasmsg(sashelp.dmine, warning_missingvars_note ,
3937051  !+NOQUOTE, &numMissing));
3937052   +          %if &numType %then
3937053   +              %put * %sysfunc(sasmsg(sashelp.dmine, warning_type_note , NOQUOTE,
3937053  !+&numType));
3937054   +          %if &numlength %then
3937055   +              %put * %sysfunc(sasmsg(sashelp.dmine, warning_length_note , NOQUOTE,
3937055  !+&numLength));
3937056   +          %if &numFormat %then
3937057   +              %put * %sysfunc(sasmsg(sashelp.dmine, warning_format_note , NOQUOTE,
3937057  !+&numFormat));
3937058   +          %put &em_codebar;
3937059   +          proc print data=&em_user_inputexception(obs=500) label noobs;
3937060   +             title9  "%sysfunc(sasmsg(sashelp.dmine, rpt_inputexception_title,
3937060  !+NOQUOTE))";
3937061   +             title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title,
3937061  !+NOQUOTE))";
3937062   +          run;
3937063   +          title9;
3937064   +          title10;
3937065   +     %end;
3937066   +     %else %do;
3937067   +         proc datasets lib=&em_lib nolist;
3937068   +            delete &em_nodeid._INPUTEXCEPTION;
3937069   +         run;
3937070   +     %end;
3937071   +
3937072   +     proc datasets lib=work nolist;
3937073   +        delete _temp modelInput;
3937074   +     quit;
3937075   +
3937076   +
3937077   +%mend em_mdlimp_checkScoreInputs;
3937078   +
3937079   +%macro em_mdlimp_modifyModelDs;
3937080   +     %EM_GETNAME(key=MODELINPUT,  type=DATA);
3937081   +     %EM_GETNAME(key=MODELOUTPUT, type=DATA);
3937082   +     %EM_GETNAME(key=MODELSTAT,   type=DATA);
3937083   +     %EM_GETNAME(key=MODELREPORT, type=DATA);
3937084   +
3937085   +     %if %sysfunc(exist(&em_user_modelinput)) %then %do;
3937086   +         proc sort data=&em_user_modelinput(keep=columnName columnLength
3937086  !+SASColumnType
3937087   +            SASFormat Description Order Level Role Creator
3937088   +            rename=(columnName=Name ColumnLength=Length Description=Label
3937088  !+SASColumnType=Type SASFormat=Format)) out=_temp;
3937089   +            by NAME;
3937090   +         run;
3937091   +         data &em_user_modelinput;
3937092   +            set _temp;
3937093   +            label  Name   = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,
3937093  !+NOQUOTE))"
3937094   +                   Length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel,
3937094  !+NOQUOTE))"
3937095   +                   Type   = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,
3937095  !+NOQUOTE))"
3937096   +                   Order  = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel,
3937096  !+NOQUOTE))"
3937097   +                   Role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel,
3937097  !+NOQUOTE))"
3937098   +                   Level  = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel,
3937098  !+NOQUOTE))"
3937099   +                   Format = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel,
3937099  !+NOQUOTE))"
3937100   +                   Label  = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,
3937100  !+NOQUOTE))"
3937101   +                   Creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel,
3937101  !+NOQUOTE))";
3937102   +         run;
3937103   +     %end;
3937104   +
3937105   +     %if %sysfunc(exist(&em_user_modeloutput)) %then %do;
3937106   +         data &em_user_modeloutput;
3937107   +            set &em_user_modeloutput(keep=columnName columnLength SASColumnType Role
3937108   +             SASFormat Description Order Level Creator
3937109   +            rename=(columnName=Name ColumnLength=Length Description=Label
3937109  !+SASColumnType=Type SASFormat=Format));
3937110   +            label Name   = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,
3937110  !+NOQUOTE))"
3937111   +                  Length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel,
3937111  !+NOQUOTE))"
3937112   +                  Type   = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,
3937112  !+NOQUOTE))"
3937113   +                  Role  = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel,
3937113  !+NOQUOTE))"
3937114   +                  Order  = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel,
3937114  !+NOQUOTE))"
3937115   +                  Level  = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel,
3937115  !+NOQUOTE))"
3937116   +                  Format = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel,
3937116  !+NOQUOTE))"
3937117   +                  Label  = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,
3937117  !+NOQUOTE))"
3937118   +                  Creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel,
3937118  !+NOQUOTE))";
3937119   +         run;
3937120   +     %end;
3937121   +
3937122   +     %if %sysfunc(exist(&em_user_modelstat)) %then %do;
3937123   +         data tempmodelstat;
3937124   +         length TARGET $32 STAT $32 LABEL $200 TRAIN VALIDATE TEST 8;
3937125   +         label TARGET   = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,
3937125  !+NOQUOTE))"
3937126   +               STAT     = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,
3937126  !+NOQUOTE))"
3937127   +               LABEL    = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel,
3937127  !+NOQUOTE))"
3937128   +               TRAIN    = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel,
3937128  !+NOQUOTE))"
3937129   +               VALIDATE = "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel,
3937129  !+NOQUOTE))"
3937130   +               TEST     = "%sysfunc(sasmsg(sashelp.dmine, rpt_test_vlabel,
3937130  !+NOQUOTE))";
3937131   +         keep TARGET STAT LABEL TRAIN VALIDATE TEST;
3937132   +         length vstat tstat $32;
3937133   +         dsid = open("&em_user_modelstat");
3937134   +         nvars = attrn(dsid, 'NVARS');
3937135   +         do while(^fetch(dsid));
3937136   +            target = getvarc(dsid, 1);
3937137   +            do i=2 to nvars;
3937138   +               stat = varname(dsid, i);
3937139   +               label = varlabel(dsid, i);
3937140   +
3937141   +               if (substr(stat, 1, 1) ne '_')
3937142   +                   or (substr(stat, 1, 2) in( '_V', '_T')) then continue;
3937143   +
3937144   +               train = getvarn(dsid, i);
3937145   +               vstat = '_V'!!substr(stat,2);
3937146   +               vnum  = varnum(dsid, vstat) ;
3937147   +               if vnum then
3937148   +                  validate = getvarn(dsid, vnum);
3937149   +               else
3937150   +                  validate = .;
3937151   +               tstat = '_T'!!substr(stat,2);
3937152   +               tnum  = varnum(dsid, tstat) ;
3937153   +               if tnum then
3937154   +                  test = getvarn(dsid, tnum);
3937155   +               else
3937156   +                  test = .;
3937157   +               output;
3937158   +            end;
3937159   +         end;
3937160   +         dsid = close(dsid);
3937161   +      run;
3937162   +      data &em_user_modelstat;
3937163   +         set tempmodelstat;
3937164   +      run;
3937165   +      proc datasets lib=work nolist;
3937166   +         delete tempmodelstat;
3937167   +      quit;
3937168   +      %end;
3937169   +
3937170   +     %EM_GETNAME(key=MODELINFO,   type=DATA);
3937171   +     %EM_GETNAME(key=MODELTARGET, type=DATA);
3937172   +     %EM_GETNAME(key=MODELTRAINING,   type=DATA);
3937173   +
3937174   +     data &em_user_modelreport;
3937175   +        length Attribute $32 Value $64;
3937176   +        label Attribute = "%sysfunc(sasmsg(sashelp.dmine, rpt_attribute_vlabel,
3937176  !+NOQUOTE))"
3937177   +              Value     = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,
3937177  !+NOQUOTE))";
3937178   +        if _n_=1 then do;
3937179   +           Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_modelname_text,
3937179  !+NOQUOTE))";  Value=strip("&em_property_ModelName"); output;
3937180   +        end;
3937181   +
3937182   +        %if %sysfunc(exist(&em_user_modelinfo)) %then %do;
3937183   +            set &em_user_modelinfo;
3937184   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_userid_text,
3937184  !+NOQUOTE))";          Value=strip(UserId);                   output;
3937185   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_miningfunction_text,
3937185  !+ NOQUOTE))";  Value=strip(MiningFunction);           output;
3937186   +            Attribute="%sysfunc(sasmsg(sashelp.dmine,
3937186  !+modelinfo_miningalgorithm_text, NOQUOTE))"; Value=strip(MiningAlgorithm);
3937186  !+output;
3937187   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_scorecodefmt_text,
3937187  !+NOQUOTE))";    Value=strip(ScoreCodeType);           output;
3937188   +        %end;
3937189   +        %if %sysfunc(exist(&em_user_modeltarget)) %then %do;
3937190   +            set &em_user_modeltarget;
3937191   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_targetname_text,
3937191  !+NOQUOTE))";      Value=strip(ColumnName);               output;
3937192   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_targetlevel_text,
3937192  !+NOQUOTE))";     Value=strip(level);                    output;
3937193   +        %end;
3937194   +        %if %sysfunc(exist(&em_user_modelTraining)) %then %do;
3937195   +            set &em_user_modelTraining;
3937196   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_tablename_text,
3937196  !+NOQUOTE))";        Value=strip(libname)!!'.'!!strip(SASTableName);  output;
3937197   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_numbercols_text,
3937197  !+NOQUOTE))";       Value=strip(put(NumberColumns, best.));               output;
3937198   +            Attribute="%sysfunc(sasmsg(sashelp.dmine, modelinfo_numberrows_text,
3937198  !+NOQUOTE))";       Value=strip(put(NumberRows, best.));                  output;
3937199   +        %end;
3937200   +
3937201   +        keep Attribute Value;
3937202   +    run;
3937203   +
3937204   +%mend em_mdlimp_modifyModelDs;
3937205   +
3937206   +%macro em_mdlimp_makePredictedVar(file=);
3937207   +   filename temp "&file" mod;
3937208   +   data _null_;
3937209   +      file temp;
3937210   +      %if &missingNum %then %do;
3937211   +          length SumVar $3200 deqLabel $200;
3937212   +          retain SumVar;
3937213   +      %end;
3937214   +      set &em_user_mapping end=eof;
3937215   +      if _N_=1 then do;
3937216   +         put "&em_codebar;";
3937217   +         put "* Computing Predicted Vars: &em_dec_target;";
3937218   +         put "&em_codebar;";
3937219   +      end;
3937220   +
3937221   +      if PredictedVar ne ModelVar then do;
3937222   +         deqLabel = tranwrd(PredictedLabel, '"', '""');
3937223   +         put 'Label ' predictedVar '=' '"' deqLabel '";';
3937224   +         if ModelVar ne '' then
3937225   +            put PredictedVar '=' ModelVar ';';
3937226   +      end;
3937227   +      %if &missingNum %then %do;
3937228   +          if sumVar eq '' then sumvar = ModelVar;
3937229   +          else
3937230   +             if ModelVar ne '' then
3937231   +                sumVar = strip(sumVar)!! '+'!! ModelVar;
3937232   +
3937233   +          if eof then
3937234   +             put "&missingVar = 1 - "  sumVar ";";
3937235   +      %end;
3937236   +   run;
3937237   +   filename temp;
3937238   +%mend em_mdlimp_makePredictedVar;
3937239   +
3937240   +%macro em_mdlimp_checkModelPrior;
3937241   +   %EM_GETNAME(key=MAPPING, type=DATA) ;
3937242   +   data _null_;
3937243   +      length missingVar $32;
3937244   +      retain missing sum 0 missingVar;
3937245   +      set &em_user_mapping end=eof;
3937246   +      if Prior eq . then do;
3937247   +         missing +1;
3937248   +         missingVar = PredictedVar;
3937249   +      end;
3937250   +      else sum + Prior;
3937251   +      if eof then do;
3937252   +         call symput('missingNum', strip(put(missing, best.)));
3937253   +         call symput('sum',        strip(put(sum, best.)));
3937254   +         call symput('missingVar', strip(missingVar));
3937255   +      end;
3937256   +   run;
3937257   +   %if &missingNum>1 %then %goto doendc;
3937258   +
3937259   +    %let decdata=;
3937260   +    %if %sysfunc(exist(&em_dec_decdata)) and ("&em_dec_decdata" ne "") %then %let
3937260  !+decmdata = &em_dec_decdata;
3937261   +    %else
3937262   +        %if %symexist(EM_IMPORT_DATA_EMINFO) %then %do;
3937263   +            %if %sysfunc(exist(&EM_IMPORT_DATA_EMINFO)) and
3937263  !+("&EM_IMPORT_DATA_EMINFO" ne "") %then %do;
3937264   +                data _null_;
3937265   +                   set &EM_IMPORT_DATA_EMINFO(where=(KEY='DECMETA' and
3937265  !+TARGET="&EM_DEC_TARGET"));
3937266   +                   if TARGET="&EM_DEC_TARGET" then do;
3937267   +                      if key='DECMETA' then call symput('decmeta', data);
3937268   +                      if key='DECDATA' then call symput('decdata', data);
3937269   +                   end;
3937270   +                run;
3937271   +            %end;
3937272   +        %end;
3937273   +
3937274   +     data _null_;
3937275   +        set em_targetdecinfo;
3937276   +        where target ="&EM_DEC_TARGET";
3937277   +        call symput('mdl_decmeta', DECMETA);
3937278   +        call symput('mdl_decdata', DECDATA);
3937279   +     run;
3937280   +
3937281   +   %doendc:
3937282   +%mend;
3937283   +
3937284   +%macro em_mdlimp_scoreVNN(import=, export=, codeRef=);
3937285   +
3937286   +     %if &import ne and (%sysfunc(exist(&import)) or %sysfunc(exist(&import, VIEW
3937286  !+))) %then %do;
3937287   +         data &export;
3937288   +            set &import;
3937289   +            %inc &codeRef;
3937290   +         run;
3937291   +     %end;
3937292   +%mend;
3937293   +
3937294   +
3937295   +%macro train;
3937296   +    filename temp catalog 'sashelp.emmodl.modelimport_actions.source';
3937297   +    %include temp;
3937298   +    filename temp;
3937299   +
3937300   +    %if "&em_property_importtype" eq "REGISTEREDMODEL" %then %do;
3937301   +        %EM_REGISTER(key=MODELINPUT,  type=DATA, property=Y, autodelete=N);
3937302   +        %EM_REGISTER(key=MODELOUTPUT, type=DATA, property=Y, autodelete=N);
3937303   +        %EM_REGISTER(key=MODELSTAT,   type=DATA, property=Y, autodelete=N);
3937304   +        %EM_REGISTER(key=MODELTRAINING,  type=DATA, property=Y, autodelete=N);
3937305   +        %EM_REGISTER(key=MODELTARGET, type=DATA, property=Y, autodelete=N);
3937306   +        %EM_REGISTER(key=MODELSCORE,  type=FILE, extension=sas, property=Y,
3937306  !+autodelete=N);
3937307   +        %EM_REGISTER(key=MODELINFO,   type=DATA, property=Y, autodelete=N);
3937308   +        %EM_REGISTER(key=MODELREPORT, type=DATA,             autodelete=N);
3937309   +   %end;
3937310   +
3937311   +   %em_getname(key=MAPPING, type=DATA);
3937312   +   %em_getname(key=CHOICE,  type=DATA);
3937313   +
3937314   +   %if "&em_dec_target" eq "" %then %do;
3937315   +       %let emexceptionString = exception.server.METADATA.USE1TARGET;
3937316   +       %goto doendt;
3937317   +   %end;
3937318   +
3937319   +
3937320   +   /* Check the type of score code */;
3937321   +   %if ("&em_property_importtype" eq "REGISTEREDMODEL") %then %do;
3937322   +        %if %sysfunc(exist(&em_user_modelinfo)) %then %do;
3937323   +            %let ScoreCodeType = ;
3937324   +            data _null_;
3937325   +               set &em_user_modelinfo;
3937326   +               call symput('ScoreCodeType', strip(ScoreCodeType));
3937327   +            run;
3937328   +            %if "&ScoreCodeType" eq "SAS Program" %then %do;
3937329   +                %let emexceptionString = exception.server.EMTOOL.NONDATASTEPCODE;
3937330   +                %goto doendt;
3937331   +            %end;
3937332   +        %end;
3937333   +   %end;
3937334   +
3937335   +   /* Check if the specified target has already been modeled in the flow */;
3937336   +   %let modelFlag = 0;
3937337   +   %if %symexist(EM_IMPORT_DATA_EMINFO) and ("&em_property_importtype" ne
3937337  !+"REGISTEREDMODEL") %then %do;
3937338   +       %if %sysfunc(exist(&EM_IMPORT_DATA_EMINFO)) and ("&EM_IMPORT_DATA_EMINFO" ne
3937338  !+"") %then %do;
3937339   +           data _null_;
3937340   +              set &EM_IMPORT_DATA_EMINFO(where=(KEY='MODEL' and
3937340  !+TARGET="&EM_DEC_TARGET" and DATA ne ''));
3937341   +              call symput('modelFlag', '1');
3937342   +           run;
3937343   +        %end;
3937344   +    %end;
3937345   +    %if &modelFlag %then %do;
3937346   +        %goto dorslt;
3937347   +    %end;
3937348   +
3937349   +     %EM_GETNAME(key=MODELINPUT,  type=DATA);
3937350   +
3937351   +    /* Registered Model */
3937352   +    %if "&em_property_importtype" eq "REGISTEREDMODEL" %then %do;
3937353   +        %EM_GETNAME(key=MODELSCORE, type=FILE, extension=sas);
3937354   +        filename temp  "&em_user_modelscore";
3937355   +        filename temp3 "&EM_FILE_EMPUBLISHSCORECODE";
3937356   +        %em_copyfile(infref=temp, outfref=temp3);
3937357   +        filename temp;
3937358   +        filename temp3;
3937359   +    %end;
3937360   +
3937361   +    /* Refresh or Create the Mapping Table */
3937362   +    %openMappingTable;
3937363   +
3937364   +
3937365   +   /* Check if the Predicted Variables have been Specified */
3937366   +   %let missingNum = 0;
3937367   +   %let missingVar =;
3937368   +   data _null_;
3937369   +      length missingVar $32;
3937370   +      retain missing 0 missingVar;
3937371   +      set &em_user_mapping end=eof;
3937372   +      if ModelVar eq '' then do;
3937373   +         missing +1;
3937374   +         missingVar = PredictedVar;
3937375   +      end;
3937376   +      if eof then do;
3937377   +         call symput('missingNum', strip(put(missing, best.)));
3937378   +         call symput('missingVar', strip(missingVar));
3937379   +      end;
3937380   +    run;
3937381   +
3937382   +    %if ("&em_dec_level"="INTERVAL" and &missingNum) or ("&em_dec_level" ne
3937382  !+"INTERVAL" and &missingNum>1) %then %do;
3937383   +         %let EMEXCEPTIONSTRING=exception.server.EMTOOL.MISSINGPREDICTED;
3937384   +        %goto doendt;
3937385   +    %end;
3937386   +
3937387   +    %if "&em_property_importtype" eq "REGISTEREDMODEL" %then %do;
3937388   +
3937389   +        %em_mdlimp_checkScoreInputs;
3937390   +
3937391   +        %em_report(key=MODELINPUT,  viewtype=DATA, autodisplay=N, block=MODEL,
3937391  !+Description=METASCOREINPUTVARS);
3937392   +        %em_report(key=MODELOUTPUT, viewtype=DATA, autodisplay=N, block=MODEL,
3937392  !+Description=METASCOREOUTPUTVARS);
3937393   +        %em_report(key=MODELSTAT,   viewtype=DATA, autodisplay=N, block=MODEL,
3937393  !+Description=METAREPORTFITSTAT);
3937394   +        %em_report(key=MODELREPORT, viewtype=DATA, autodisplay=Y, block=MODEL,
3937394  !+Description=MODELMETAINFO);
3937395   +
3937396   +        %if %sysfunc(exist(&em_user_modelreport)) %then %do;
3937397   +            proc print data=&em_user_modelreport noobs label;
3937398   +               title9 ' ';
3937399   +               title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelmetainfo_title,
3937399  !+NOQUOTE))";
3937400   +            run;
3937401   +            title9;
3937402   +            title10;
3937403   +        %end;
3937404   +    %end;
3937405   +
3937406   +    %dorslt:
3937407   +
3937408   +    %if ^&modelFlag %then %do;
3937409   +
3937410   +        %em_mdlimp_makePredictedVar(file= &EM_FILE_EMFLOWSCORECODE);
3937411   +        %em_mdlimp_makePredictedVar(file= &EM_FILE_EMPUBLISHSCORECODE);
3937412   +
3937413   +        /* Check if any Modeling Priors have been specified*/
3937414   +        %if "&em_dec_level" ne "INTERVAL" %then %em_mdlimp_checkModelPrior;
3937415   +
3937416   +        %let deccode=N;
3937417   +        %if &EM_PROPERTY_APPLYDECISIONS=Y %then %let deccode=Y;
3937418   +
3937419   +        %em_model(TARGET=&em_dec_target , ASSESS=Y, DECSCORECODE=&deccode,
3937419  !+FITSTATISTICS=Y, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3937420   +    %end;
3937421   +    %else %do;
3937422   +        %em_model(TARGET=&em_dec_target , ASSESS=Y, DECSCORECODE=N, FITSTATISTICS=Y,
3937422  !+ CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
3937423   +    %end;
3937424   +
3937425   +%doendt:
3937426   +%mend train;
3937427   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.modelimport_actions.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.MODELIMPORT_ACTIONS.SOURCE.
3937428   +
3937429   +%macro em_mdlimp_makeDecInfo;
3937430   +   %let decmeta =;
3937431   +   %let decdata =;
3937432   +
3937433   +    %if "&EM_DEC_TARGET" eq "" %then
3937434   +        %let EM_DEC_TARGET = %scan(%EM_TARGET, 1, %str());
3937435   +
3937436   +    %if %sysfunc(exist(&em_dec_decmeta)) and ("&em_dec_decmeta" ne "") %then %let
3937436  !+decmeta = &em_dec_decmeta;
3937437   +    %else
3937438   +        %if %symexist(EM_IMPORT_DATA_EMINFO) %then %do;
3937439   +            %if %sysfunc(exist(&EM_IMPORT_DATA_EMINFO)) and
3937439  !+("&em_import_data_eminfo" ne "") %then %do;
3937440   +                data _null_;
3937441   +                   set &EM_IMPORT_DATA_EMINFO(where=(KEY='DECMETA' and
3937441  !+TARGET="&EM_DEC_TARGET"));
3937442   +                   if TARGET="&EM_DEC_TARGET" then do;
3937443   +                      if key='DECMETA' then call symput('decmeta', data);
3937444   +                      if key='DECDATA' then call symput('decdata', data);
3937445   +                   end;
3937446   +                run;
3937447   +            %end;
3937448   +        %end;
3937449   +
3937450   +    %if "&decmeta" eq "" %then %do;
3937451   +        data _null_;
3937452   +             set em_targetdecinfo;
3937453   +             where target ="&EM_DEC_TARGET";
3937454   +             call symput('decmeta', DECMETA);
3937455   +             call symput('decdata', DECDATA);
3937456   +          run;
3937457   +          %emtp(data=&em_import_data, target=&em_dec_target,
3937457  !+columnsmeta=&em_data_variableset,
3937458   +                         decdata=&decdata, decmeta=&decmeta);
3937459   +    %end;
3937460   +
3937461   +%mend em_mdlimp_makeDecInfo;
3937462   +
3937463   +
3937464   +%macro em_mdlimp_checkVVNCode;
3937465   +    %em_getName(key=MODELINPUT,  type=DATA);
3937466   +
3937467   +    %if ^%sysfunc(exist(&em_user_modelinput)) %then %do;
3937468   +        %goto endvvn;
3937469   +    %end;
3937470   +
3937471   +    %let nameNum=0;
3937472   +    %let colnameNum=0;
3937473   +    %let dsid = %sysfunc(open(&em_user_modelinput));
3937474   +    %if &dsid %then %do;
3937475   +        %let nameNum    = %sysfunc(varnum(&dsid, name));
3937476   +        %let colnameNum = %sysfunc(varnum(&dsid, ColumnName));
3937477   +        %let dsid = %sysfunc(close(&dsid));
3937478   +    %end;
3937479   +
3937480   +    /* Is the score code based on any VVN variables? */
3937481   +    %let vvnFlag = 0;
3937482   +    %if &nameNum %then %do;
3937483   +        data _null_;
3937484   +           set &em_user_modelinput;
3937485   +           %if &colnameNum %then %do;
3937486   +              if notname(trim(ColumnName)) then
3937487   +           %end;
3937488   +           %else %do;
3937489   +            if notname(trim(Name)) then
3937490   +           %end;
3937491   +
3937492   +           call symput('vvnFlag', '1');
3937493   +        run;
3937494   +    %end;
3937495   +
3937496   +     %EM_GETNAME(key=MODELSCORE, type=FILE, extension=sas);
3937497   +    filename temp  "&em_user_modelscore";
3937498   +    filename temp2 "&EM_FILE_EMFLOWSCORECODE";
3937499   +    %em_copyfile(infref=temp, outfref=temp2);
3937500   +    filename temp;
3937501   +    filename temp2;
3937502   +
3937503   +    %if ^&vvnFlag %then %do;
3937504   +       %goto endvvn;
3937505   +    %end;
3937506   +
3937507   +    /* Find the Mapping for the input variables */
3937508   +    %let rootTable=;
3937509   +    data _null_;
3937510   +       set &em_import_data_eminfo;
3937511   +       where upcase(key)='IDSTABLE';
3937512   +       call symput('rootTable', trim(DATA));
3937513   +    run;
3937514   +
3937515   +
3937516   +    %if (^%sysfunc(exist(&rootTable)) and  ^%sysfunc(exist(&rootTable, VIEW))) or
3937516  !+&rootTable eq  %then
3937517   +        %goto endvvn;
3937518   +
3937519   +    options validvarname=ANY;
3937520   +    %emadviseColumns(&rootTable, adviseMode=BASIC, outdata=work.mdlimp_meta);
3937521   +    options validvarname=V7;
3937522   +
3937523   +    filename _mdlvvn catalog 'WORK.MODELIMPRT.VVNMAP.SOURCE' mod;
3937524   +    filename _flow "&EM_FILE_EMFLOWSCORECODE";
3937525   +    data _null_;
3937526   +       retain inputFlag 0;
3937527   +       file _mdlvvn;
3937528   +       infile _flow length=linelen;
3937529   +       input;
3937530   +       if index(_infile_,'* TOOL:') then do;
3937531   +          if index(_infile_,'* TOOL: Input Data Source') then
3937532   +             inputFlag=1;
3937533   +          else
3937534   +             inputFlag=0;
3937535   +       end;
3937536   +       if ^inputFlag then do;
3937537   +          put _infile_;
3937538   +       end;
3937539   +    run;
3937540   +
3937541   +    %em_copyfile(infref=_mdlvvn, outfref=_flow);
3937542   +
3937543   +    filename _mdlvvn;
3937544   +    filename _flow;
3937545   +
3937546   +    %endvvn:
3937547   +%mend;
3937548   +
3937549   +%macro em_mdlimp_findpredvars(out=);
3937550   +
3937551   +   %if %sysfunc(exist(&out)) %then %do;
3937552   +      proc delete data=&out;
3937553   +      run;
3937554   +      quit;
3937555   +   %end;
3937556   +
3937557   +   options validvarname=ANY;
3937558   +   filename _flow "&EM_FILE_EMFLOWSCORECODE";
3937559   +   data work.mdlimp_train;
3937560   +      set &em_import_data(obs=1);
3937561   +      %inc _flow;
3937562   +   run;
3937563   +   %emadviseColumns( work.mdlimp_train, adviseMode=BASIC, outdata=&out);
3937564   +   options validvarname=V7;
3937565   +   proc delete data=work.mdlimp_train;
3937566   +   run;
3937567   +   quit;
3937568   +
3937569   +   data &out(keep=NAME rename=(NAME=CHOICE));
3937570   +      set &out(keep=NAME ROLE);
3937571   +      where ROLE='PREDICT' and ^(NAME=: 'EM_');
3937572   +   run;
3937573   +
3937574   +%mend;
3937575   +
3937576   +
3937577   +%macro openMappingtable;
3937578   +    %EM_GETNAME(key=MAPPING,     type=DATA) ;
3937579   +    %EM_GETNAME(key=CHOICE,      type=DATA) ;
3937580   +    %EM_GETNAME(key=MODELOUTPUT, type=DATA);
3937581   +    %EM_GETNAME(key=MODELINPUT, type=DATA);
3937582   +
3937583   +    %if ^%sysfunc(exist(&em_import_data)) and ^%sysfunc(exist(&em_import_data,
3937583  !+VIEW)) %then %do;
3937584   +        %let emexceptionString = exception.server.EMTOOL.PATHNEEDSTORUN;
3937585   +        %goto doendm;
3937586   +    %end;
3937587   +
3937588   +    %if "&em_dec_target" eq "" %then %do;
3937589   +        %let emexceptionString = exception.server.METADATA.USE1TARGET;
3937590   +        %goto doendm;
3937591   +    %end;
3937592   +
3937593   +     /* Registered Model */
3937594   +     %if "&em_property_importtype" eq "REGISTEREDMODEL" %then %do;
3937595   +        %let dsid = %sysfunc(open(&em_user_modelinput));
3937596   +        %if &dsid %then %do;
3937597   +            %let nameNum = %sysfunc(varnum(&dsid, Name));
3937598   +            %let dsid = %sysfunc(close(&dsid));
3937599   +
3937600   +            %if ^&namenum %then %do;
3937601   +                %em_mdlimp_modifyModelDs;
3937602   +            %end;
3937603   +        %end;
3937604   +
3937605   +        %if %sysfunc(exist(&em_user_modeloutput)) %then %do;
3937606   +            %em_mdlimp_checkVVNCode;
3937607   +
3937608   +
3937609   +            %em_mdlimp_findPredVars(out=WORK.MDLIMP_PREDICTVARS);
3937610   +
3937611   +             %let em_predict=%str();
3937612   +             data &em_user_choice(KEEP=Variable Choice);
3937613   +                length Variable $32 Choice $32;
3937614   +                set WORK.MDLIMP_PREDICTVARS end=eof;
3937615   +                drop ROLE;
3937616   +                Variable = "ModelVar";
3937617   +                call symput('em_predict', strip(symget('em_predict'))!!' '!!choice);
3937618   +                output;
3937619   +                if eof then do;
3937620   +                   Variable="ModelVar"; Choice="";output;
3937621   +                end;
3937622   +             run;
3937623   +             proc delete data=WORK.MDLIMP_PREDICTVARS;
3937624   +             run;
3937625   +         %end;
3937626   +         %else %do;
3937627   +             %let EMEXCEPTIONSTRING=exception.server.EMTOOL.NOREGISTEREDMODEL;
3937628   +             %goto doendm;
3937629   +         %end;
3937630   +     %end;
3937631   +     %else %do;
3937632   +         %if %sysfunc(exist(&em_data_variableset)) %then %do;
3937633   +             data &em_user_choice(KEEP=Variable Choice);
3937634   +                length Variable $32 Choice $32;
3937635   +                set &em_data_variableset(where=(ROLE='PREDICT') rename=(NAME=CHOICE)
3937635  !+ keep=NAME ROLE) end=eof;
3937636   +                Variable = "ModelVar";
3937637   +                output;
3937638   +                if eof then do;
3937639   +                   Variable="ModelVar"; Choice="";output;
3937640   +                end;
3937641   +             run;
3937642   +        %end;
3937643   +    %end;
3937644   +
3937645   +    %let decmeta = ;
3937646   +    %em_mdlimp_makeDecInfo;
3937647   +    %if %sysfunc(exist(&em_dec_decmeta)) and ("&em_dec_decmeta" ne "") %then %let
3937647  !+decmeta = &em_dec_decmeta;
3937648   +    %else %do;
3937649   +        %if %symexist(EM_IMPORT_DATA_EMINFO) %then %do;
3937650   +            %if %sysfunc(exist(&EM_IMPORT_DATA_EMINFO)) and
3937650  !+("&em_import_data_eminfo" ne "") %then %do;
3937651   +                data _null_;
3937652   +                   set &EM_IMPORT_DATA_EMINFO(where=(KEY='DECMETA' and
3937652  !+TARGET="&EM_DEC_TARGET"));
3937653   +                   if _N_=1 then call symput('decmeta', data);
3937654   +                run;
3937655   +            %end;
3937656   +        %end;
3937657   +    %end;
3937658   +
3937659   +    %if "&decmeta" ne "" %then %do;
3937660   +        data temp;
3937661   +           set &em_user_mapping;
3937662   +           upred = upcase(Predictedvar);
3937663   +        run;
3937664   +        proc sort data=temp;
3937665   +           by PredictedVar;
3937666   +        run;
3937667   +        data temp2;
3937668   +           set &decmeta(where=(_TYPE_='PREDICTED')
3937669   +               keep=_TYPE_ LEVEL VARIABLE LABEL rename=(Variable=PredictedVar
3937669  !+LABEL=PredictedLabel));
3937670   +               upred = upcase(Predictedvar);
3937671   +        run;
3937672   +        proc sort data=temp2;
3937673   +           by upred;
3937674   +        run;
3937675   +
3937676   +        data temp;
3937677   +           length level $32 PredictedVar ModelVar $32 Prior 8 PredictedLabel $40;
3937678   +           merge temp temp2(in=a);
3937679   +           by upred;
3937680   +           %if "&em_property_importtype" eq "REGISTEREDMODEL" %then %do;
3937681   +               if ^indexw(upcase("&EM_PREDICT"), upcase(ModelVar)) then ModelVar='';
3937682   +               if ModelVar='' and indexw(upcase("&EM_PREDICT"),
3937682  !+upcase(PredictedVar)) then ModelVar=PredictedVar;
3937683   +           %end;
3937684   +           %else %do;
3937685   +               if ^indexw(upcase("%EM_PREDICT"), upcase(ModelVar)) then ModelVar='';
3937686   +               if ModelVar='' and indexw(upcase("%EM_PREDICT"),
3937686  !+upcase(PredictedVar)) then ModelVar=PredictedVar;
3937687   +           %end;
3937688   +
3937689   +           if a then output;
3937690   +           drop upred _type_;
3937691   +        run;
3937692   +
3937693   +        /* Check if a difference exists */
3937694   +        %let _nobs1=0;
3937695   +        data _null_;
3937696   +           set &em_user_mapping end=eof;
3937697   +           if eof then
3937698   +           call symput('_nobs1', put(_N_, best.));
3937699   +        run;
3937700   +        %let _nobs2=0;
3937701   +        data _null_;
3937702   +           set temp end=eof;
3937703   +           if eof then
3937704   +           call symput('_nobs2', put(_N_, best.));
3937705   +        run;
3937706   +        %let diff_nobs=0;
3937707   +        %if &_nobs1 and &_nobs2 %then %do;
3937708   +            proc compare base=&em_user_mapping compare=temp out=diff outdiff
3937708  !+outnoequal noprint;
3937709   +            run;
3937710   +           data diff;
3937711   +              set diff end=eof;
3937712   +              if eof then call symput('diff_nobs', put(_N_, best.));
3937713   +           run;
3937714   +        %end;
3937715   +        %if &diff_nobs or (&_nobs1 ne &_nobs2) %then %do;
3937716   +            data &em_user_mapping;
3937717   +               set temp;
3937718   +            run;
3937719   +        %end;
3937720   +        proc datasets lib=work nolist;
3937721   +          delete diff temp temp2;
3937722   +        run;
3937723   +    %end;
3937724   +
3937725   +    %doendm:
3937726   +
3937727   +%mend openMappingTable;
3937728   +
3937729   +%macro closeMappingtable;
3937730   +
3937731   +    %let badsum=0;
3937732   +    %let userprior=0;
3937733   +    data _null_;
3937734   +       length userprior $1;
3937735   +       retain sumprior 0 userprior '0';
3937736   +       set &em_temptable end=eof;
3937737   +        if prior ne . then do;
3937738   +           sumprior=sumprior + prior;
3937739   +           userprior='1';
3937740   +        end;
3937741   +        if eof and ^(0.999<=sumprior<=1.00) then do;
3937742   +           call symput('badsum',    '1');
3937743   +           call symput('userprior', userprior);
3937744   +       end;
3937745   +    run;
3937746   +    %if &badsum and ("&userprior" eq "1") %then
3937747   +        %let EMEXCEPTIONSTRING= exception.server.EMTOOL.BADPRIORSUM;
3937748   +
3937749   +%mend closeMappingTable;
3937750   +
3937751   +
3937752   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.EndGrp_EMINFO(where=(KEY='MODEL' and TARGET="DepVar" and DATA ne 
''));
MPRINT(TRAIN):   call symput('modelFlag', '1');
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP_EMINFO.
      WHERE (KEY='MODEL') and (TARGET='DepVar') and (DATA not = ' ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: MdlImp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3937753    *------------------------------------------------------------*;
3937754    * End TRAIN: MdlImp;
3937755    *------------------------------------------------------------*;
3937756    

3937757    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3937758    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3937759    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3937760    ;
MPRINT(EM_DIAGRAM):   ;
3937761    ;
MPRINT(EM_DIAGRAM):   ;
3937762    ;
MPRINT(EM_DIAGRAM):   ;
3937763    ;
MPRINT(EM_DIAGRAM):   ;
3937764    quit;
MPRINT(EM_DIAGRAM):   quit;
3937765    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3937766    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3937767    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3937768    /*; *"; *'; */
3937769    ;
MPRINT(EM_DIAGRAM):   ;
3937770    run;
MPRINT(EM_DIAGRAM):   run;
3937771    quit;
MPRINT(EM_DIAGRAM):   quit;
3937772    /* Reset EM Options */
3937773    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3937774    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3937775    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
