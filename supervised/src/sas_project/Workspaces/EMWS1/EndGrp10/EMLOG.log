*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:08:58 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:45 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Post Grouping Log
Date:                02 June 2018
Time:                17:08:45 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1HET2EW "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1HET2EW new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:45 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:45 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
3704929    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3704930    set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
3704931    where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
3704932    call symput('EMGROUPMODE', strip(key));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPMODE', strip(key));
3704933    call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
3704934    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3704935    data WORK.M08O8CM_;
MPRINT(EM_DIAGRAM):    data WORK.M08O8CM_;
3704936    set WORK.M08O8CM_;
MPRINT(EM_DIAGRAM):   set WORK.M08O8CM_;
3704937    where upcase(NAME) in(
3704938    "DEPVAR"
3704939    );
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "DEPVAR" );
3704940    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M08O8CM_.
      WHERE UPCASE(NAME)='DEPVAR';
NOTE: The data set WORK.M08O8CM_ has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3704941    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3704970    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
3704971    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3704972    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3704972  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3704972  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3704973       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3704973  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3704973  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3704974    set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
3704975    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3704976    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3704977    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3704978    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3704979    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3704980    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3704981    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3704982    end;
MPRINT(EM_DIAGRAM):   end;
3704983    output;
MPRINT(EM_DIAGRAM):   output;
3704984    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP10_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3704985    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3704986    proc print data=WORK.EndGrp10_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp10_EVENT noobs label;
3704987    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3704988    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3704989    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3704990    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP10_EVENT.
NOTE: The PROCEDURE PRINT printed page 2426.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3704991    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
3704992    proc print data = EMWS1.Neural_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural_DepVar_DM noobs label;
3704993    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3704994    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
3704995    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3704995  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3704995  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3704996    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3704997    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3704998    run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2427.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3704999    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp10: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3705461    %let EMEXCEPTIONSTRING=;
3705462    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3705463    * POSTLOOP: EndGrp10;
MPRINT(EM_DIAGRAM):   * POSTLOOP: EndGrp10;
3705464    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3705465    %let EM_ACTION = POSTLOOP;
3705466    %let syscc = 0;
3705467    %macro main;
3705468       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3705469
3705470           filename temp catalog 'sashelp.emutil.endgp_train.source';
3705471           %include temp;
3705472           filename temp;
3705473
3705474           %train;
3705475
3705476       %end;
3705477       %else
3705478          %if %upcase(&EM_ACTION) = SCORE %then %do;
3705479
3705480           filename temp catalog 'sashelp.emutil.endgp_score.source';
3705481           %include temp;
3705482           filename temp;
3705483
3705484           %score;
3705485       %end;
3705486       %else
3705487       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3705488
3705489           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3705490           %include temp;
3705491           filename temp;
3705492
3705493           %postloop;
3705494
3705495       %end;
3705496
3705497       %doendm:
3705498    %mend main;
3705499
3705500    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_POSTLOOP.SOURCE.
3705501   +%macro scoreTables(data=, out=, scoreref=, prescore=);
3705503   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW)))
3705503  !+%then %do;
3705504   +       data &out / view=&out;
3705505   +          set &data
3705508   +          %if "&prescore" = "Y" %then %do;
3705509   +              (obs=1)
3705510   +          %end;
3705512   +          ;
3705514   +       %let fexist = %sysfunc(fexist(&scoreref));
3705515   +       %if &fexist %then %do;
3705516   +          %inc &scoreref;
3705517   +       %end;
3705519   +       %if "&prescore" eq "Y" %then %do;
3705520   +          drop I_: R_:;
3705521   +       %end;
3705523   +       run;
3705524   +   %end;
3705526   +%mend scoretables;
3705528   +%macro postboostbag(groupid=, type=);
3705529   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3705530   +   data _null_;
3705531   +      retain index 0;
3705532   +      set &infoDs;
3705533   +      call symput('targetname', strip(_target_));
3705534   +   run;
3705536   +   data _null_;
3705537   +      set &em_import_data_eminfo;
3705538   +      where key in('MODEL', 'DECMETA') and TARGET="&targetname";
3705539   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
3705540   +      else call symput('MODELID', strip(data));
3705541   +   run;
3705543   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
3705544   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
3705546   +   filename loopflow "&em_user_loopflowcode";
3705547   +   filename looppub "&em_user_looppubcode";
3705549   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3705550   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3705552   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
3705553   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
3705555   +   filename loopflow;
3705556   +   filename looppub;
3705557   +   filename emflow;
3705558   +   filename empub;
3705560   +   %let EMGROUPASSMT = Y;
3705562   +   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y, DECSCORECODE=Y,
3705562  !+FITSTATISTICS=N, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3705564   +   %em_getname(key=emoutfit, type=DATA);
3705565   +   %em_getname(key=emoutfit_loop, type=DATA);
3705567   +   data &em_user_emoutfit;
3705568   +      set &em_user_emoutfit_loop end=eof;
3705569   +      drop _LOOP_ _WHERE_;
3705570   +      if eof then output;
3705571   +   run;
3705573   +%mend postboostbag;
3705575   +%macro postgroup(groupid=, type=);
3705576   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3705577   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3705579   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3705580   +   %let _XValidation = 0;
3705582   +   data _null_;
3705583   +      retain index 0;
3705584   +      set &infoDs end=eof;
3705585   +      index + 1;
3705586   +      call symput('loopwhere'!!strip(put(index, best.)), tranwrd(strip(_wheredesc_),
3705586  !+ '"', '""'));
3705587   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3705588   +      if eof and substr(_WHERE_, 1, 2)='^(' then
3705589   +         call symput('_XValidation', '1');
3705590   +   run;
3705592   +   %let grouptarget=;
3705593   +   /* Looping Over Groups Only.  Retrieve targets from EMINFO */
3705594   +   %if "&looptarget1" eq "" %then %do;
3705595   +      data _null_;
3705596   +         set &em_import_data_eminfo;
3705597   +         where key in('MODEL');
3705598   +         call symput('grouptarget', strip(symget('grouptarget'))!!'
3705598  !+'!!strip(target));
3705599   +      run;
3705600   +   %end;
3705602   +   %do j=1 %to &emloopnumber;
3705603   +       %let EnsembleIndex=0;
3705604   +       data _null_;
3705605   +          retain index 0 ensembleIndex 0;
3705606   +          set &em_user_path end=eof;
3705607   +          where LOOPID=&j;
3705608   +          if nodelabel = "&groupid" or index then do;
3705609   +             index + 1;
3705610   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3705611   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3705612   +             call symput('loopaccum'!!strip(put(index, best.)),
3705612  !+strip(accumulatedScoreCode));
3705613   +          end;
3705614   +          if component='Ensemble' then ensembleIndex = index;
3705615   +          if eof then do;
3705616   +             call symput('loopcodenum', strip(put(index, best.)));
3705617   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3705618   +          end;
3705619   +       run;
3705621   +       %do i = 1 %to &loopcodenum;
3705622   +           %let fsourceEntry =
3705622  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3705623   +           %let psourceEntry =
3705623  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3705625   +           %if (&&loopnode&i eq &em_nodeid ) or
3705626   +               ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or
3705626  !+&i>&ensembleIndex or &i=&ensembleIndex) ) %then %do;
3705628   +               data _null_;
3705629   +                  file emflow mod;
3705630   +                  put "&em_codebar;";
3705631   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3705632   +                  put "* User: &sysuserid;";
3705633   +                  put "* Date: &sysdate: &systime;";
3705634   +                  %if "&&loopwhere&j" ne "" %then %do;
3705635   +                      put "* Group: &&loopwhere&j;";
3705636   +                  %end;
3705637   +                  %if "&&looptarget&j" ne "" %then %do;
3705638   +                       put "* Target: &&looptarget&j;";
3705639   +                  %end;
3705640   +                  put "&em_codebar ;";
3705641   +               run;
3705642   +               data _null_;
3705643   +                   file empub mod;
3705644   +                   put "&em_codebar ;";
3705645   +                   put "* &&loopnode&i: &&loopdesc&i;" ;
3705646   +                   put "* User: &sysuserid;";
3705647   +                   put "* Date: &sysdate: &systime;";
3705648   +                   %if "&&loopwhere&j" ne "" %then %do;
3705649   +                       put "* Group: &&loopwhere&j;";
3705650   +                   %end;
3705651   +                   %if "&&looptarget&j" ne "" %then %do;
3705652   +                       put "* Target: &&looptarget&j;";
3705653   +                   %end;
3705654   +                   put "&em_codebar;";
3705655   +               run;
3705656   +           %end;
3705658   +           %if ("&&loopnode&i" ne "&em_nodeid" ) %then %do;
3705659   +               %if (&ensembleIndex = 0) or (&i=1 or &i>&ensembleIndex or
3705659  !+&i=&ensembleIndex) %then %do;
3705660   +                   %if "&&loopnode&i" eq "&groupid" and "&_XValidation" eq "1" %then
3705660  !+ %do;
3705661   +                       filename y catalog "&psourceEntry";
3705662   +                       %em_copyfile(infref=y, outfref=emflow, append=Y);
3705663   +                       filename y;
3705664   +                   %end;
3705665   +                   %else %do;
3705666   +                       filename x catalog "&fsourceEntry";
3705667   +                       %em_copyfile(infref=x, outfref=emflow, append=Y);
3705668   +                       filename x;
3705669   +                   %end;
3705671   +                   filename y catalog "&psourceEntry";
3705672   +                   %em_copyfile(infref=y, outfref=empub, append=Y);
3705673   +                   filename y;
3705674   +               %end;
3705675   +           %end;
3705676   +           %else %do;
3705677   +              %if "&&loopwhere&j" ne "" %then %do;
3705678   +                  data _null_;
3705679   +                     file emflow mod;
3705680   +                     put 'end;';
3705681   +                  run;
3705682   +                  data _null_;
3705683   +                     file empub mod;
3705684   +                     put 'end;';
3705685   +                  run;
3705686   +               %end;
3705687   +           %end;
3705688   +       %end;
3705689   +   %end;
3705690   +   filename emflow;
3705691   +   filename empub;
3705693   +   /* Stratify Model Need to Recompute All Assessment Reports */
3705694   +   %if "&grouptarget" eq "" %then %do;
3705695   +       %let assessTarget=;
3705696   +       %do j=1 %to &emloopnumber;
3705697   +           %let targetname = &&looptarget&j;
3705698   +           %if ^%index(&assesstarget, &targetname) and ("&targetname" ne "") %then
3705698  !+%do;
3705699   +               %let assesstarget = &assesstarget &targetname;
3705700   +               %let index = 1;
3705701   +               %do %while( %scan(%sysfunc(strip(&targetname)), &index) ne
3705701  !+%sysfunc(strip(&targetname)));
3705702   +                   %let index = %eval(&index + 1);
3705703   +               %end;
3705704   +               %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &index
3705704  !+,%str( ));
3705706   +               %if "&targetlevel" ne "INTERVAL" %then
3705707   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3705707  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3705708   +               %else
3705709   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3705709  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3705710   +           %end;
3705711   +       %end;
3705712   +   %end;
3705713   +   %else %do;
3705714   +       %do i=1 %to &em_num_target;
3705715   +           %let targetname = %scan(%em_target, &i, %str( )) ;
3705716   +           %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &i ,%str( ));
3705718   +           %if %sysfunc(indexw(&grouptarget, &targetname)) %then %do;
3705719   +              %if "&targetlevel" ne "INTERVAL" %then
3705720   +                  %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3705720  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3705721   +              %else
3705722   +                 %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3705722  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3705723   +           %end;
3705724   +           %else %do;
3705725   +               %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N,
3705725  !+DECSCORECODE=N, FITSTATISTICS=N, RESIDUALS=N, PREDICTED=N);
3705726   +           %end;
3705727   +       %end;
3705728   +   %end;
3705729   +   %let EMGROUPASSMT = N;
3705730   +%mend postgroup;
3705732   +%macro posttarget(groupid=, type=);
3705733   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3705734   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3705736   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3705737   +   data _null_;
3705738   +      retain index 0;
3705739   +      set &infoDs end=eof;
3705740   +      index + 1;
3705741   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3705742   +   run;
3705744   +   %do j=1 %to &emloopnumber;
3705745   +       %let EnsembleIndex=0;
3705746   +       data _null_;
3705747   +          retain index 0 ensembleIndex 0;
3705748   +          set &em_user_path end=eof;
3705749   +          where LOOPID=&j;
3705750   +          if nodelabel = "&groupid" or index then do;
3705751   +             index + 1;
3705752   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3705753   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3705754   +             call symput('loopaccum'!!strip(put(index, best.)),
3705754  !+strip(accumulatedScoreCode));
3705755   +          end;
3705756   +          if component='Ensemble' then ensembleIndex = index;
3705757   +          if eof then do;
3705758   +             call symput('loopcodenum', strip(put(index, best.)));
3705759   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3705760   +          end;
3705761   +       run;
3705763   +       %do i = 1 %to &loopcodenum;
3705764   +           %let fsourceEntry =
3705764  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3705765   +           %let psourceEntry =
3705765  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3705767   +           %if (&&loopnode&i ne &em_nodeid ) and
3705768   +               ( (&ensembleIndex = 0) or (&i>=&ensembleIndex) ) %then %do;
3705769   +               data _null_;
3705770   +                  file emflow mod;
3705771   +                  put "&em_codebar;";
3705772   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3705773   +                  put "* User: &sysuserid;";
3705774   +                  put "* Date: &sysdate: &systime;";
3705775   +                  put "* Target: &&looptarget&j;";
3705776   +                  put "&em_codebar ;";
3705777   +               run;
3705778   +               data _null_;
3705779   +                  file empub mod;
3705780   +                  put "&em_codebar ;";
3705781   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3705782   +                  put "* User: &sysuserid;";
3705783   +                  put "* Date: &sysdate: &systime;";
3705784   +                  put "* Target: &&looptarget&j;";
3705785   +                  put "&em_codebar;";
3705786   +               run;
3705788   +               filename x catalog "&fsourceEntry";
3705789   +               %em_copyfile(infref=x, outfref=emflow, append=Y);
3705790   +               filename x;
3705792   +               filename y catalog "&psourceEntry";
3705793   +               %em_copyfile(infref=y, outfref=empub, append=Y);
3705794   +               filename y;
3705795   +           %end;
3705796   +       %end;
3705797   +   %end;
3705798   +   filename emflow;
3705799   +   filename empub;
3705801   +   %do j=1 %to &emloopnumber;
3705802   +       %let targetname = &&looptarget&j;
3705803   +       %let k = 1;
3705804   +       %do %while( %scan(%sysfunc(strip(&targetname)), &k) ne
3705804  !+%sysfunc(strip(&targetname)));
3705805   +           %let k = %eval(&k + 1);
3705806   +       %end;
3705807   +       %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &k ,%str( ));
3705808   +       %if "&targetlevel" ne "INTERVAL" %then
3705809   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3705809  !+FITSTATISTICS=N, CLASSIFICATION=N, PREDICTED=Y);
3705810   +       %else
3705811   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3705811  !+FITSTATISTICS=N, RESIDUALS=N, PREDICTED=Y);
3705812   +       %let EMGROUPASSMT = N;
3705813   +   %end;
3705815   +%mend posttarget;
3705817   +%macro postloop;
3705819   +   %if ^%symexist(em_import_data_eminfo) %then %goto doendpl;
3705821   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
3705821  !+%then %do;
3705822   +       %let emexceptionstring = nomodeltarget;
3705823   +       %goto doendpl;
3705824   +   %end;
3705826   +   %let targetName=;
3705827   +   %let endgrp_decmeta=;
3705829   +   data _null_;
3705830   +      set &em_import_data_eminfo;
3705831   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
3705832   +      call symput('GROUPID',   strip(data));
3705833   +      call symput('LOOPTYPE', strip(key));
3705834   +   run;
3705836   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
3705837   +   %include temp;
3705838   +   filename temp;
3705840   +   %em_getname(key=PATH, type=DATA);
3705842   +   %if ^%sysfunc(exist(&em_user_path)) %then %goto doendpl;
3705844   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
3705846   +   %let gptrain=;
3705847   +   %let gpvalidate=;
3705848   +   %let gptest=;
3705850   +   data _null_;
3705851   +      set &groupImportDs;
3705852   +      select(upcase(port));
3705853   +          when('DATA')     call symput('gpTrain',    strip(dataset));
3705854   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
3705855   +          when('TEST')     call symput('gpTest',     strip(dataset));
3705856   +       otherwise;
3705857   +      end;
3705858   +   run;
3705859   +   %let gpTrain =&em_lib..%sysfunc(strip(&gpTrain));
3705861   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
3705861  !+%postboostbag(groupid=&groupid, type=&looptype);
3705862   +   %else
3705863   +   %if ("&looptype" eq "GROUPINFO") %then %postgroup(groupid=&groupid,
3705863  !+type=&looptype);
3705864   +   %else
3705865   +   %if ("&looptype" eq "TARGETINFO") %then %posttarget(groupid=&groupid,
3705865  !+type=&looptype);
3705867   +   %let deleteString = &em_nodeid._path;
3705869   +   proc sort data=&em_user_path nodupkey;
3705870   +      by nodelabel;
3705871   +   run;
3705872   +   %let loopnodenum=0;
3705873   +   data _null_;
3705874   +      retain index 0;
3705875   +      set &em_user_path end=eof;
3705876   +      if nodelabel = "&groupid" or index then do;
3705877   +         index + 1;
3705878   +         call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3705879   +      end;
3705880   +      if eof then do;
3705881   +         call symput('loopnodenum', strip(put(index, best.)));
3705882   +      end;
3705883   +   run;
3705884   +   proc datasets lib=&em_lib nolist;
3705885   +      delete &deleteString;
3705886   +      delete
3705887   +      %do i = 1 %to &loopnodenum;
3705888   +          %let loopcatalog = %sysfunc(strip(&&loopnode&i))_LOOP;
3705889   +          %if %sysfunc(cexist(&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP)) %then
3705889  !+%do;
3705891   +              &loopcatalog
3705892   +          %end;
3705893   +          %if &i = &loopnodenum %then %do;
3705894   +              / mt=catalog;
3705895   +          %end;
3705896   +      %end;
3705897   +   run;
3705898   +   quit;
3705900   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
3705902   +   %if "&gpTrain" ne "" and (("&looptype" eq "BOOSTINFO") or ("&looptype" eq
3705902  !+"BAGINFO")) %then %do;
3705904   +       %let targetType = ;
3705905   +       data _null_;
3705906   +          set &endgrp_decmeta;
3705907   +          where _TYPE_='TARGET';
3705908   +          call symput('TARGETTYPE', strip(level));
3705909   +       run;
3705911   +       filename empub "&EM_FILE_EMPUBLISHSCORECODE" MOD;
3705913   +       %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow,
3705913  !+prescore=Y);
3705915   +       %if &targetType ne 'INTERVAL' %then %do;
3705916   +           %makeClassificationVars(target=&target, data=&em_export_train,
3705916  !+decmeta=&endgrp_decmeta, publish=Y, fref=empub);
3705917   +       %end;
3705919   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
3705921   +       %em_model(TARGET=&targetname, ASSESS=Y, DECSCORECODE=Y, FITSTATISTICS=Y,
3705921  !+CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3705923   +       filename empub;
3705925   +   %end;
3705927   +   %if "&gpTrain" ne "" %then
3705928   +        %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow);
3705929   +   %if "&gpValidate" ne "" %then
3705930   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),
3705930  !+out=&em_export_validate, scoreref=emflow);
3705931   +   %if "&gpTest" ne "" %then
3705932   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),
3705932  !+out=&em_export_test,     scoreref=emflow);
3705934   +   filename emflow;
3705936   +   %doendpl:
3705938   +%mend postloop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Neural_EMINFO;
MPRINT(POSTLOOP):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO',
'INDEXINFO');
MPRINT(POSTLOOP):   call symput('GROUPID', strip(data));
MPRINT(POSTLOOP):   call symput('LOOPTYPE', strip(key));
MPRINT(POSTLOOP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
3705939   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
3705940   +   proc display c=sashelp.emcore.pathscorecode.scl;
3705941   +   run;
3705942   +%mend EM_GETTRAINPATH;
3705943   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(POSTLOOP):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Grp9_importset;
MPRINT(POSTLOOP):   select(upcase(port));
MPRINT(POSTLOOP):   when('DATA') call symput('gpTrain', strip(dataset));
MPRINT(POSTLOOP):   when('VALIDATE') call symput('gpValidate', strip(dataset));
MPRINT(POSTLOOP):   when('TEST') call symput('gpTest', strip(dataset));
MPRINT(POSTLOOP):   otherwise;
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.GRP9_IMPORTSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas";
MPRINT(POSTGROUP):   filename empub "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas";
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0;
MPRINT(POSTGROUP):   set EMWS1.Grp9_GROUPINFO end=eof;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopwhere'!!strip(put(index, best.)),
tranwrd(strip(_wheredesc_), '"', '""'));
MPRINT(POSTGROUP):   call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
MPRINT(POSTGROUP):   if eof and substr(_WHERE_, 1, 2)='^(' then call symput('_XValidation',
'1');
MPRINT(POSTGROUP):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.GRP9_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   set EMWS1.Neural_EMINFO;
MPRINT(POSTGROUP):   where key in('MODEL');
MPRINT(POSTGROUP):   call symput('grouptarget', strip(symget('grouptarget'))!!'
'!!strip(target));
MPRINT(POSTGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=1;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=217,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=217,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=254,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=254,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=476,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=476,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11019,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10053,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11238,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10272,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=2;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11244,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10278,
      Last Modified=02 June 2018 17:08:47 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=11461,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=10495,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11498,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10532,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=11720,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=10754,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22263,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=20331,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22482,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=20550,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=3;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22488,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=20556,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=22705,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=20773,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22742,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=20810,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=22964,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=21032,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33507,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=30609,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33726,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=30828,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=4;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33732,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=30834,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=33949,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=31051,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33986,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=31088,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=34208,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=31310,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44751,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=40887,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44970,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41106,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=5;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44976,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41112,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=45193,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=41329,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=45230,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41366,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=45452,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=41588,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55995,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51165,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=56214,
      Last Modified=02 June 2018 17:08:48 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51384,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=6;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=56220,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51390,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=56437,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=51607,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=56474,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51644,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=56696,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=51866,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=67239,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61443,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=67458,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61662,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=7;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=67464,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61668,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=67681,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=61885,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=67718,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61922,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=67940,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=62144,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78483,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=71721,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78702,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=71940,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=8;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78708,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=71946,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=78925,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=72163,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78962,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72200,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=79184,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=72422,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89727,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=81999,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89946,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82218,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=9;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89952,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82224,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=90169,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=82441,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=90206,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82478,
      Last Modified=02 June 2018 17:08:49 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=90428,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=82700,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=100971,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92277,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=101190,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92496,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=10;
MPRINT(POSTGROUP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
      WHERE LOOPID=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=101196,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp9: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92502,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=101414,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp9_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=92720,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=101453,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92759,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=101676,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 322 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=92982,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 283 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=112219,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp10: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=102559,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=112439,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=102779,
      Last Modified=02 June 2018 17:08:50 o'clock,
      Create Time=02 June 2018 17:08:47 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(POSTGROUP):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   set WORK.EM_USER_MODEL end=eof;
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   if eof then do;
MPRINT(EM_MODEL):   data = "EMWS1.TRANS2_TRAIN";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   end;
MPRINT(EM_MODEL):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_USER_MODEL.
NOTE: The data set WORK.EM_USER_MODEL has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   proc sort data=EMWS1.EndGrp10_PATH nodupkey;
MPRINT(POSTLOOP):   by nodelabel;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 120 observations read from the data set EMWS1.ENDGRP10_PATH.
NOTE: 108 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.ENDGRP10_PATH has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   retain index 0;
MPRINT(POSTLOOP):   set EMWS1.EndGrp10_PATH end=eof;
MPRINT(POSTLOOP):   if nodelabel = "Grp9" or index then do;
MPRINT(POSTLOOP):   index + 1;
MPRINT(POSTLOOP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   if eof then do;
MPRINT(POSTLOOP):   call symput('loopnodenum', strip(put(index, best.)));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   proc datasets lib=EMWS1 nolist;
MPRINT(POSTLOOP):   delete EndGrp10_path;
MPRINT(POSTLOOP):   delete Grp9_LOOP Neural_LOOP / mt=catalog;
MPRINT(POSTLOOP):   run;
 
NOTE: Deleting EMWS1.ENDGRP10_PATH (memtype=DATA).
NOTE: Deleting EMWS1.GRP9_LOOP (memtype=CATALOG).
NOTE: Deleting EMWS1.NEURAL_LOOP (memtype=CATALOG).
MPRINT(POSTLOOP):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(POSTLOOP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas" MOD;
MPRINT(SCORETABLES):   data EMWS1.EndGrp10_TRAIN / view=EMWS1.EndGrp10_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN ;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMFLOWSCORE.sas.
3705944   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3705945   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3705946   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3705947   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3705948   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3705949   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3705950   +if (cv_var =1)  then do;
MPRINT(SCORETABLES):   if (cv_var =1) then do;
3705951   +_XVAL_=1;
MPRINT(SCORETABLES):   _XVAL_=1;
3705952   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3705953   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3705954   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3705955   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3705956   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3705957   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3705958   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3705959   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3705960   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3705961   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3705962   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3705963   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3705964   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3705965   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3705966   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3705967   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3705968   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3705969   +LENGTH _WARN_ $4
3705970   +      F_DepVar  $ 12
3705971   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3705972   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3705973   +
3705974   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3705975   +
3705976   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3705977   +
3705978   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3705979   +
3705980   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3705981   +
3705982   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3705983   +
3705984   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3705985   +
3705986   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3705987   +
3705988   +      label S_RANGE_campaign_acceptance =
3705989   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3705990   +
3705991   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3705992   +
3705993   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3705994   +
3705995   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3705996   +
3705997   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3705998   +
3705999   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3706000   +
3706001   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3706002   +
3706003   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3706004   +
3706005   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706006   +
3706007   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3706008   +
3706009   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3706010   +
3706011   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3706012   +
3706013   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3706014   +
3706015   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3706016   +
3706017   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3706018   +
3706019   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3706020   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3706021   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3706022   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3706023   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3706024   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3706025   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3706026   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3706027   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3706028   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706029   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706030   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706031   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706032   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3706033   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706034   +end;
MPRINT(SCORETABLES):   end;
3706035   +else do;
MPRINT(SCORETABLES):   else do;
3706036   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3706037   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3706038   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706039   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3706040   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3706041   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3706042   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3706043   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3706044   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706045   +         end;
MPRINT(SCORETABLES):   end;
3706046   +         else do;
MPRINT(SCORETABLES):   else do;
3706047   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3706048   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3706049   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706050   +            end;
MPRINT(SCORETABLES):   end;
3706051   +         end;
MPRINT(SCORETABLES):   end;
3706052   +      end;
MPRINT(SCORETABLES):   end;
3706053   +      else do;
MPRINT(SCORETABLES):   else do;
3706054   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3706055   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3706056   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706057   +         end;
MPRINT(SCORETABLES):   end;
3706058   +      end;
MPRINT(SCORETABLES):   end;
3706059   +   end;
MPRINT(SCORETABLES):   end;
3706060   +   else do;
MPRINT(SCORETABLES):   else do;
3706061   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3706062   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3706063   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706064   +      end;
MPRINT(SCORETABLES):   end;
3706065   +      else do;
MPRINT(SCORETABLES):   else do;
3706066   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3706067   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3706068   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3706069   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3706070   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3706071   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706072   +         end;
MPRINT(SCORETABLES):   end;
3706073   +      end;
MPRINT(SCORETABLES):   end;
3706074   +   end;
MPRINT(SCORETABLES):   end;
3706075   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3706076   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706077   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706078   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706079   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706080   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3706081   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706082   +   end;
MPRINT(SCORETABLES):   end;
3706083   +end;
MPRINT(SCORETABLES):   end;
3706084   +
3706085   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706086   +*** Checking missing input Interval
3706087   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3706088   +
3706089   +IF NMISS(
3706090   +   MntCard_Games ,
3706091   +   MntMagazines ,
3706092   +   NumCatalogPurchases ,
3706093   +   NumDealsPurchases ,
3706094   +   NumWebPurchases ,
3706095   +   RANGE_Frq ,
3706096   +   RANGE_Recency ,
3706097   +   RANGE_average_purchase ,
3706098   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3706099   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3706100   +
3706101   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706102   +END;
MPRINT(SCORETABLES):   END;
3706103   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706104   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3706105   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706106   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706107   +   S_MntCard_Games  =    -2.31443880149645 +     6.60696044415922 *
3706108   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31443880149645 + 6.60696044415922 * MntCard_Games ;
3706109   +   S_MntMagazines  =    -0.83518699862706 +     17.5080622494492 *
3706110   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83518699862706 + 17.5080622494492 * MntMagazines ;
3706111   +   S_NumCatalogPurchases  =    -3.11517742102545 +     13.5001014849444 *
3706112   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11517742102545 + 13.5001014849444 *
NumCatalogPurchases ;
3706113   +   S_NumDealsPurchases  =    -1.42433963721206 +     11.3005450269131 *
3706114   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42433963721206 + 11.3005450269131 *
NumDealsPurchases ;
3706115   +   S_NumWebPurchases  =    -5.23126390248359 +      12.268030981197 *
3706116   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23126390248359 + 12.268030981197 *
NumWebPurchases ;
3706117   +   S_RANGE_Frq  =    -1.36737264900818 +      4.2114974885657 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36737264900818 + 4.2114974885657 * RANGE_Frq ;
3706118   +   S_RANGE_Recency  =    -1.66886726105788 +     3.35597816708239 *
3706119   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66886726105788 + 3.35597816708239 * RANGE_Recency ;
3706120   +   S_RANGE_average_purchase  =    -1.03892952919331 +     5.17297242883714 *
3706121   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03892952919331 + 5.17297242883714 *
RANGE_average_purchase ;
3706122   +   S_RANGE_campaign_acceptance
3706123   +          =    -0.47377177401348 +     5.76433307241995 *
3706124   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47377177401348 + 5.76433307241995 *
RANGE_campaign_acceptance ;
3706125   +END;
MPRINT(SCORETABLES):   END;
3706126   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706127   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3706128   +   ELSE S_MntCard_Games  =    -2.31443880149645 +     6.60696044415922 *
3706129   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31443880149645 + 6.60696044415922 *
MntCard_Games ;
3706130   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3706131   +   ELSE S_MntMagazines  =    -0.83518699862706 +     17.5080622494492 *
3706132   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83518699862706 + 17.5080622494492 *
MntMagazines ;
3706133   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3706134   +   ELSE S_NumCatalogPurchases
3706135   +          =    -3.11517742102545 +     13.5001014849444 * NumCatalogPurchases
3706136   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11517742102545 + 13.5001014849444 *
NumCatalogPurchases ;
3706137   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3706138   +   ELSE S_NumDealsPurchases  =    -1.42433963721206 +     11.3005450269131 *
3706139   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42433963721206 + 11.3005450269131 *
NumDealsPurchases ;
3706140   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3706141   +   ELSE S_NumWebPurchases  =    -5.23126390248359 +      12.268030981197 *
3706142   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23126390248359 + 12.268030981197 *
NumWebPurchases ;
3706143   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3706144   +   ELSE S_RANGE_Frq  =    -1.36737264900818 +      4.2114974885657 * RANGE_Frq
3706145   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36737264900818 + 4.2114974885657 * RANGE_Frq ;
3706146   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3706147   +   ELSE S_RANGE_Recency  =    -1.66886726105788 +     3.35597816708239 *
3706148   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66886726105788 + 3.35597816708239 *
RANGE_Recency ;
3706149   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3706150   +   ELSE S_RANGE_average_purchase
3706151   +          =    -1.03892952919331 +     5.17297242883714 *
3706152   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03892952919331 + 5.17297242883714 *
RANGE_average_purchase ;
3706153   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3706154   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3706155   +   ELSE S_RANGE_campaign_acceptance
3706156   +          =    -0.47377177401348 +     5.76433307241995 *
3706157   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47377177401348 + 5.76433307241995
* RANGE_campaign_acceptance ;
3706158   +END;
MPRINT(SCORETABLES):   END;
3706159   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706160   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3706161   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706162   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706163   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3706164   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706165   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706166   +   H11  =    -0.58755238975054 * S_MntCard_Games  +     0.04614315224278 *
3706167   +        S_MntMagazines  +    -0.43183106452205 * S_NumCatalogPurchases
3706168   +          +    -0.33890443632457 * S_NumDealsPurchases
3706169   +          +    -0.62335188089036 * S_NumWebPurchases
3706170   +          +    -0.07531701266895 * S_RANGE_Frq  +      0.8725516417669 *
3706171   +        S_RANGE_Recency  +     0.27593284747391 * S_RANGE_average_purchase
3706172   +          +    -0.53305316111367 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.58755238975054 * S_MntCard_Games + 0.04614315224278 *
S_MntMagazines + -0.43183106452205 * S_NumCatalogPurchases + -0.33890443632457 *
S_NumDealsPurchases + -0.62335188089036 * S_NumWebPurchases + -0.07531701266895 * S_RANGE_Frq
+ 0.8725516417669 * S_RANGE_Recency + 0.27593284747391 * S_RANGE_average_purchase +
-0.53305316111367 * S_RANGE_campaign_acceptance ;
3706173   +   H12  =    -0.14953146902126 * S_MntCard_Games  +    -0.00591800285493 *
3706174   +        S_MntMagazines  +    -0.15720328075587 * S_NumCatalogPurchases
3706175   +          +    -0.20153933045335 * S_NumDealsPurchases
3706176   +          +     0.03112722068091 * S_NumWebPurchases
3706177   +          +    -0.09642116258376 * S_RANGE_Frq  +      0.3419049789581 *
3706178   +        S_RANGE_Recency  +    -0.15338559420915 * S_RANGE_average_purchase
3706179   +          +     -0.2102415141838 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.14953146902126 * S_MntCard_Games + -0.00591800285493 *
S_MntMagazines + -0.15720328075587 * S_NumCatalogPurchases + -0.20153933045335 *
S_NumDealsPurchases + 0.03112722068091 * S_NumWebPurchases + -0.09642116258376 * S_RANGE_Frq +
0.3419049789581 * S_RANGE_Recency + -0.15338559420915 * S_RANGE_average_purchase +
-0.2102415141838 * S_RANGE_campaign_acceptance ;
3706180   +   H11  = H11  +     0.14330939483531 * Marital_StatusDivorced
3706181   +          +    -0.07947576782069 * Marital_StatusMarried
3706182   +          +     0.40818974930925 * Marital_StatusSingle
3706183   +          +    -0.41311423696045 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.14330939483531 * Marital_StatusDivorced +
-0.07947576782069 * Marital_StatusMarried + 0.40818974930925 * Marital_StatusSingle +
-0.41311423696045 * Marital_StatusTogether ;
3706184   +   H12  = H12  +    -0.23839323195806 * Marital_StatusDivorced
3706185   +          +      0.1794935036749 * Marital_StatusMarried
3706186   +          +    -0.29305612621411 * Marital_StatusSingle
3706187   +          +      0.5384795730885 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.23839323195806 * Marital_StatusDivorced +
0.1794935036749 * Marital_StatusMarried + -0.29305612621411 * Marital_StatusSingle +
0.5384795730885 * Marital_StatusTogether ;
3706188   +   H11  =     2.04984302012003 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.04984302012003 + H11 ;
3706189   +   H12  =     1.02557139367418 + H12 ;
MPRINT(SCORETABLES):   H12 = 1.02557139367418 + H12 ;
3706190   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3706191   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3706192   +END;
MPRINT(SCORETABLES):   END;
3706193   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706194   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3706195   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3706196   +END;
MPRINT(SCORETABLES):   END;
3706197   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706198   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3706199   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706200   +
3706201   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3706202   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3706203   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706204   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3706205   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3706206   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706207   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3706208   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706209   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706210   +end;
MPRINT(SCORETABLES):   end;
3706211   +else do;
MPRINT(SCORETABLES):   else do;
3706212   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3706213   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3706214   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3706215   +   end;
MPRINT(SCORETABLES):   end;
3706216   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3706217   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3706218   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3706219   +   end;
MPRINT(SCORETABLES):   end;
3706220   +   else do;
MPRINT(SCORETABLES):   else do;
3706221   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706222   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706223   +   end;
MPRINT(SCORETABLES):   end;
3706224   +end;
MPRINT(SCORETABLES):   end;
3706225   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706226   +   P_DepVar1  =    -5.13300828292496 * H11  +    -9.70493770638732 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.13300828292496 * H11 + -9.70493770638732 * H12 ;
3706227   +   P_DepVar1  =      6.0049948649406 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 6.0049948649406 + P_DepVar1 ;
3706228   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3706229   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3706230   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3706231   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3706232   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3706233   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3706234   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3706235   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3706236   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3706237   +END;
MPRINT(SCORETABLES):   END;
3706238   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706239   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3706240   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3706241   +END;
MPRINT(SCORETABLES):   END;
3706242   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3706243   +   P_DepVar1  =     0.13214449016918;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13214449016918;
3706244   +   P_DepVar0  =     0.86785550983081;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86785550983081;
3706245   +END;
MPRINT(SCORETABLES):   END;
3706246   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3706247   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3706248   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3706249   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3706250   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3706251   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3706252   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3706253   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706254   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3706255   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706256   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3706257   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3706258   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3706259   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3706260   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3706261   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3706262   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3706263   +END;
MPRINT(SCORETABLES):   END;
3706264   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706265   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3706266   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706267   +drop
3706268   +S_MntCard_Games
3706269   +S_MntMagazines
3706270   +S_NumCatalogPurchases
3706271   +S_NumDealsPurchases
3706272   +S_NumWebPurchases
3706273   +S_RANGE_Frq
3706274   +S_RANGE_Recency
3706275   +S_RANGE_average_purchase
3706276   +S_RANGE_campaign_acceptance
3706277   +H11
3706278   +H12
3706279   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3706280   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706281   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3706282   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706283   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706284   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3706285   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706286   +end;
MPRINT(SCORETABLES):   end;
3706287   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706288   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3706289   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706290   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706291   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3706292   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706293   +if (cv_var =2)  then do;
MPRINT(SCORETABLES):   if (cv_var =2) then do;
3706294   +_XVAL_=2;
MPRINT(SCORETABLES):   _XVAL_=2;
3706295   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706296   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3706297   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706298   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706299   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3706300   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706301   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706302   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3706303   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706304   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3706305   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3706306   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3706307   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3706308   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3706309   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3706310   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3706311   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3706312   +LENGTH _WARN_ $4
3706313   +      F_DepVar  $ 12
3706314   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3706315   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3706316   +
3706317   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3706318   +
3706319   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3706320   +
3706321   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3706322   +
3706323   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3706324   +
3706325   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3706326   +
3706327   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3706328   +
3706329   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3706330   +
3706331   +      label S_RANGE_campaign_acceptance =
3706332   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3706333   +
3706334   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3706335   +
3706336   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3706337   +
3706338   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3706339   +
3706340   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3706341   +
3706342   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3706343   +
3706344   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3706345   +
3706346   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3706347   +
3706348   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706349   +
3706350   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3706351   +
3706352   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3706353   +
3706354   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3706355   +
3706356   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3706357   +
3706358   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3706359   +
3706360   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3706361   +
3706362   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3706363   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3706364   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3706365   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3706366   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3706367   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3706368   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3706369   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3706370   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3706371   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706372   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706373   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706374   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706375   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3706376   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706377   +end;
MPRINT(SCORETABLES):   end;
3706378   +else do;
MPRINT(SCORETABLES):   else do;
3706379   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3706380   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3706381   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706382   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3706383   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3706384   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3706385   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3706386   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3706387   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706388   +         end;
MPRINT(SCORETABLES):   end;
3706389   +         else do;
MPRINT(SCORETABLES):   else do;
3706390   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3706391   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3706392   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706393   +            end;
MPRINT(SCORETABLES):   end;
3706394   +         end;
MPRINT(SCORETABLES):   end;
3706395   +      end;
MPRINT(SCORETABLES):   end;
3706396   +      else do;
MPRINT(SCORETABLES):   else do;
3706397   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3706398   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3706399   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706400   +         end;
MPRINT(SCORETABLES):   end;
3706401   +      end;
MPRINT(SCORETABLES):   end;
3706402   +   end;
MPRINT(SCORETABLES):   end;
3706403   +   else do;
MPRINT(SCORETABLES):   else do;
3706404   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3706405   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3706406   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706407   +      end;
MPRINT(SCORETABLES):   end;
3706408   +      else do;
MPRINT(SCORETABLES):   else do;
3706409   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3706410   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3706411   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3706412   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3706413   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3706414   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706415   +         end;
MPRINT(SCORETABLES):   end;
3706416   +      end;
MPRINT(SCORETABLES):   end;
3706417   +   end;
MPRINT(SCORETABLES):   end;
3706418   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3706419   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706420   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706421   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706422   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706423   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3706424   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706425   +   end;
MPRINT(SCORETABLES):   end;
3706426   +end;
MPRINT(SCORETABLES):   end;
3706427   +
3706428   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706429   +*** Checking missing input Interval
3706430   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3706431   +
3706432   +IF NMISS(
3706433   +   MntCard_Games ,
3706434   +   MntMagazines ,
3706435   +   NumCatalogPurchases ,
3706436   +   NumDealsPurchases ,
3706437   +   NumWebPurchases ,
3706438   +   RANGE_Frq ,
3706439   +   RANGE_Recency ,
3706440   +   RANGE_average_purchase ,
3706441   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3706442   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3706443   +
3706444   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706445   +END;
MPRINT(SCORETABLES):   END;
3706446   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706447   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3706448   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706449   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706450   +   S_MntCard_Games  =    -2.34365076479701 +     6.64912228235011 *
3706451   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.34365076479701 + 6.64912228235011 * MntCard_Games ;
3706452   +   S_MntMagazines  =    -0.83185588911852 +     17.1653473128701 *
3706453   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83185588911852 + 17.1653473128701 * MntMagazines ;
3706454   +   S_NumCatalogPurchases  =    -3.09230321443129 +     13.3305220475383 *
3706455   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09230321443129 + 13.3305220475383 *
NumCatalogPurchases ;
3706456   +   S_NumDealsPurchases  =    -1.40724633310318 +      11.190543518488 *
3706457   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40724633310318 + 11.190543518488 *
NumDealsPurchases ;
3706458   +   S_NumWebPurchases  =    -5.18592580011552 +     12.1640913340275 *
3706459   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.18592580011552 + 12.1640913340275 *
NumWebPurchases ;
3706460   +   S_RANGE_Frq  =    -1.36446276559599 +     4.21451721303862 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36446276559599 + 4.21451721303862 * RANGE_Frq ;
3706461   +   S_RANGE_Recency  =    -1.67035138311991 +      3.3590608274234 *
3706462   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67035138311991 + 3.3590608274234 * RANGE_Recency ;
3706463   +   S_RANGE_average_purchase  =    -1.03510184851223 +     5.11192585526914 *
3706464   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03510184851223 + 5.11192585526914 *
RANGE_average_purchase ;
3706465   +   S_RANGE_campaign_acceptance
3706466   +          =    -0.47680111132029 +     5.72683855350182 *
3706467   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47680111132029 + 5.72683855350182 *
RANGE_campaign_acceptance ;
3706468   +END;
MPRINT(SCORETABLES):   END;
3706469   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706470   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3706471   +   ELSE S_MntCard_Games  =    -2.34365076479701 +     6.64912228235011 *
3706472   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.34365076479701 + 6.64912228235011 *
MntCard_Games ;
3706473   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3706474   +   ELSE S_MntMagazines  =    -0.83185588911852 +     17.1653473128701 *
3706475   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83185588911852 + 17.1653473128701 *
MntMagazines ;
3706476   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3706477   +   ELSE S_NumCatalogPurchases
3706478   +          =    -3.09230321443129 +     13.3305220475383 * NumCatalogPurchases
3706479   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09230321443129 + 13.3305220475383 *
NumCatalogPurchases ;
3706480   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3706481   +   ELSE S_NumDealsPurchases  =    -1.40724633310318 +      11.190543518488 *
3706482   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40724633310318 + 11.190543518488 *
NumDealsPurchases ;
3706483   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3706484   +   ELSE S_NumWebPurchases  =    -5.18592580011552 +     12.1640913340275 *
3706485   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.18592580011552 + 12.1640913340275 *
NumWebPurchases ;
3706486   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3706487   +   ELSE S_RANGE_Frq  =    -1.36446276559599 +     4.21451721303862 * RANGE_Frq
3706488   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36446276559599 + 4.21451721303862 * RANGE_Frq ;
3706489   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3706490   +   ELSE S_RANGE_Recency  =    -1.67035138311991 +      3.3590608274234 *
3706491   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67035138311991 + 3.3590608274234 *
RANGE_Recency ;
3706492   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3706493   +   ELSE S_RANGE_average_purchase
3706494   +          =    -1.03510184851223 +     5.11192585526914 *
3706495   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03510184851223 + 5.11192585526914 *
RANGE_average_purchase ;
3706496   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3706497   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3706498   +   ELSE S_RANGE_campaign_acceptance
3706499   +          =    -0.47680111132029 +     5.72683855350182 *
3706500   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47680111132029 + 5.72683855350182
* RANGE_campaign_acceptance ;
3706501   +END;
MPRINT(SCORETABLES):   END;
3706502   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706503   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3706504   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706505   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706506   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3706507   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706508   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706509   +   H11  =    -0.49207500487209 * S_MntCard_Games  +      0.0690124003468 *
3706510   +        S_MntMagazines  +    -0.44338041717767 * S_NumCatalogPurchases
3706511   +          +     -0.3189765465749 * S_NumDealsPurchases
3706512   +          +    -0.71698396342234 * S_NumWebPurchases
3706513   +          +    -0.13233632905423 * S_RANGE_Frq  +     0.69300683612471 *
3706514   +        S_RANGE_Recency  +     0.37593764023513 * S_RANGE_average_purchase
3706515   +          +    -0.46244554374221 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.49207500487209 * S_MntCard_Games + 0.0690124003468 *
S_MntMagazines + -0.44338041717767 * S_NumCatalogPurchases + -0.3189765465749 *
S_NumDealsPurchases + -0.71698396342234 * S_NumWebPurchases + -0.13233632905423 * S_RANGE_Frq
+ 0.69300683612471 * S_RANGE_Recency + 0.37593764023513 * S_RANGE_average_purchase +
-0.46244554374221 * S_RANGE_campaign_acceptance ;
3706516   +   H12  =    -0.12196746006663 * S_MntCard_Games  +      -0.003292765472 *
3706517   +        S_MntMagazines  +    -0.10510057692949 * S_NumCatalogPurchases
3706518   +          +    -0.13057006244096 * S_NumDealsPurchases
3706519   +          +     0.01481477097995 * S_NumWebPurchases
3706520   +          +    -0.04764456858931 * S_RANGE_Frq  +      0.2499989962603 *
3706521   +        S_RANGE_Recency  +    -0.09250232188074 * S_RANGE_average_purchase
3706522   +          +    -0.15149363120377 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.12196746006663 * S_MntCard_Games + -0.003292765472 *
S_MntMagazines + -0.10510057692949 * S_NumCatalogPurchases + -0.13057006244096 *
S_NumDealsPurchases + 0.01481477097995 * S_NumWebPurchases + -0.04764456858931 * S_RANGE_Frq +
0.2499989962603 * S_RANGE_Recency + -0.09250232188074 * S_RANGE_average_purchase +
-0.15149363120377 * S_RANGE_campaign_acceptance ;
3706523   +   H11  = H11  +      0.1148824277761 * Marital_StatusDivorced
3706524   +          +    -0.24531247196814 * Marital_StatusMarried
3706525   +          +     0.52999801549184 * Marital_StatusSingle
3706526   +          +    -0.57583944974265 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.1148824277761 * Marital_StatusDivorced +
-0.24531247196814 * Marital_StatusMarried + 0.52999801549184 * Marital_StatusSingle +
-0.57583944974265 * Marital_StatusTogether ;
3706527   +   H12  = H12  +    -0.12378736674994 * Marital_StatusDivorced
3706528   +          +     0.14723002127775 * Marital_StatusMarried
3706529   +          +    -0.18493223535528 * Marital_StatusSingle
3706530   +          +     0.29776198538277 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.12378736674994 * Marital_StatusDivorced +
0.14723002127775 * Marital_StatusMarried + -0.18493223535528 * Marital_StatusSingle +
0.29776198538277 * Marital_StatusTogether ;
3706531   +   H11  =     2.09252434279299 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.09252434279299 + H11 ;
3706532   +   H12  =     0.80126316135319 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.80126316135319 + H12 ;
3706533   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3706534   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3706535   +END;
MPRINT(SCORETABLES):   END;
3706536   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706537   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3706538   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3706539   +END;
MPRINT(SCORETABLES):   END;
3706540   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706541   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3706542   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706543   +
3706544   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3706545   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3706546   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706547   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3706548   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3706549   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706550   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3706551   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706552   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706553   +end;
MPRINT(SCORETABLES):   end;
3706554   +else do;
MPRINT(SCORETABLES):   else do;
3706555   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3706556   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3706557   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3706558   +   end;
MPRINT(SCORETABLES):   end;
3706559   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3706560   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3706561   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3706562   +   end;
MPRINT(SCORETABLES):   end;
3706563   +   else do;
MPRINT(SCORETABLES):   else do;
3706564   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706565   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706566   +   end;
MPRINT(SCORETABLES):   end;
3706567   +end;
MPRINT(SCORETABLES):   end;
3706568   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706569   +   P_DepVar1  =    -5.17196565462201 * H11  +    -14.9521433638576 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.17196565462201 * H11 + -14.9521433638576 * H12 ;
3706570   +   P_DepVar1  =     8.37281739494831 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 8.37281739494831 + P_DepVar1 ;
3706571   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3706572   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3706573   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3706574   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3706575   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3706576   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3706577   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3706578   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3706579   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3706580   +END;
MPRINT(SCORETABLES):   END;
3706581   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706582   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3706583   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3706584   +END;
MPRINT(SCORETABLES):   END;
3706585   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3706586   +   P_DepVar1  =     0.13914233576642;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13914233576642;
3706587   +   P_DepVar0  =     0.86085766423357;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86085766423357;
3706588   +END;
MPRINT(SCORETABLES):   END;
3706589   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3706590   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3706591   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3706592   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3706593   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3706594   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3706595   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3706596   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706597   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3706598   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706599   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3706600   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3706601   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3706602   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3706603   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3706604   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3706605   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3706606   +END;
MPRINT(SCORETABLES):   END;
3706607   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706608   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3706609   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706610   +drop
3706611   +S_MntCard_Games
3706612   +S_MntMagazines
3706613   +S_NumCatalogPurchases
3706614   +S_NumDealsPurchases
3706615   +S_NumWebPurchases
3706616   +S_RANGE_Frq
3706617   +S_RANGE_Recency
3706618   +S_RANGE_average_purchase
3706619   +S_RANGE_campaign_acceptance
3706620   +H11
3706621   +H12
3706622   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3706623   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706624   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3706625   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706626   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706627   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3706628   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706629   +end;
MPRINT(SCORETABLES):   end;
3706630   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706631   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3706632   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706633   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706634   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3706635   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706636   +if (cv_var =3)  then do;
MPRINT(SCORETABLES):   if (cv_var =3) then do;
3706637   +_XVAL_=3;
MPRINT(SCORETABLES):   _XVAL_=3;
3706638   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706639   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3706640   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706641   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706642   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3706643   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706644   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706645   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3706646   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706647   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3706648   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3706649   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3706650   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3706651   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3706652   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3706653   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3706654   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3706655   +LENGTH _WARN_ $4
3706656   +      F_DepVar  $ 12
3706657   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3706658   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3706659   +
3706660   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3706661   +
3706662   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3706663   +
3706664   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3706665   +
3706666   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3706667   +
3706668   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3706669   +
3706670   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3706671   +
3706672   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3706673   +
3706674   +      label S_RANGE_campaign_acceptance =
3706675   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3706676   +
3706677   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3706678   +
3706679   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3706680   +
3706681   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3706682   +
3706683   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3706684   +
3706685   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3706686   +
3706687   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3706688   +
3706689   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3706690   +
3706691   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706692   +
3706693   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3706694   +
3706695   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3706696   +
3706697   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3706698   +
3706699   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3706700   +
3706701   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3706702   +
3706703   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3706704   +
3706705   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3706706   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3706707   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3706708   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3706709   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3706710   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3706711   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3706712   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3706713   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3706714   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706715   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706716   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706717   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706718   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3706719   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706720   +end;
MPRINT(SCORETABLES):   end;
3706721   +else do;
MPRINT(SCORETABLES):   else do;
3706722   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3706723   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3706724   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706725   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3706726   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3706727   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3706728   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3706729   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3706730   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706731   +         end;
MPRINT(SCORETABLES):   end;
3706732   +         else do;
MPRINT(SCORETABLES):   else do;
3706733   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3706734   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3706735   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706736   +            end;
MPRINT(SCORETABLES):   end;
3706737   +         end;
MPRINT(SCORETABLES):   end;
3706738   +      end;
MPRINT(SCORETABLES):   end;
3706739   +      else do;
MPRINT(SCORETABLES):   else do;
3706740   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3706741   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3706742   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706743   +         end;
MPRINT(SCORETABLES):   end;
3706744   +      end;
MPRINT(SCORETABLES):   end;
3706745   +   end;
MPRINT(SCORETABLES):   end;
3706746   +   else do;
MPRINT(SCORETABLES):   else do;
3706747   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3706748   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3706749   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706750   +      end;
MPRINT(SCORETABLES):   end;
3706751   +      else do;
MPRINT(SCORETABLES):   else do;
3706752   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3706753   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3706754   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3706755   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3706756   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3706757   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3706758   +         end;
MPRINT(SCORETABLES):   end;
3706759   +      end;
MPRINT(SCORETABLES):   end;
3706760   +   end;
MPRINT(SCORETABLES):   end;
3706761   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3706762   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3706763   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3706764   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3706765   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3706766   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3706767   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706768   +   end;
MPRINT(SCORETABLES):   end;
3706769   +end;
MPRINT(SCORETABLES):   end;
3706770   +
3706771   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706772   +*** Checking missing input Interval
3706773   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3706774   +
3706775   +IF NMISS(
3706776   +   MntCard_Games ,
3706777   +   MntMagazines ,
3706778   +   NumCatalogPurchases ,
3706779   +   NumDealsPurchases ,
3706780   +   NumWebPurchases ,
3706781   +   RANGE_Frq ,
3706782   +   RANGE_Recency ,
3706783   +   RANGE_average_purchase ,
3706784   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3706785   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3706786   +
3706787   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3706788   +END;
MPRINT(SCORETABLES):   END;
3706789   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706790   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3706791   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706792   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706793   +   S_MntCard_Games  =     -2.3349533302094 +     6.63376117621091 *
3706794   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3349533302094 + 6.63376117621091 * MntCard_Games ;
3706795   +   S_MntMagazines  =    -0.84580391547708 +     17.4839342731808 *
3706796   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84580391547708 + 17.4839342731808 * MntMagazines ;
3706797   +   S_NumCatalogPurchases  =     -3.1227571204495 +     13.5382437660997 *
3706798   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.1227571204495 + 13.5382437660997 *
NumCatalogPurchases ;
3706799   +   S_NumDealsPurchases  =    -1.41728826142801 +     11.1648224460604 *
3706800   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41728826142801 + 11.1648224460604 *
NumDealsPurchases ;
3706801   +   S_NumWebPurchases  =    -5.23045924012296 +     12.2428241396556 *
3706802   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23045924012296 + 12.2428241396556 *
NumWebPurchases ;
3706803   +   S_RANGE_Frq  =      -1.361191996156 +     4.21676768500113 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.361191996156 + 4.21676768500113 * RANGE_Frq ;
3706804   +   S_RANGE_Recency  =    -1.66462179593212 +     3.35606719171069 *
3706805   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66462179593212 + 3.35606719171069 * RANGE_Recency ;
3706806   +   S_RANGE_average_purchase  =    -1.03559869310558 +     5.17126986979648 *
3706807   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03559869310558 + 5.17126986979648 *
RANGE_average_purchase ;
3706808   +   S_RANGE_campaign_acceptance
3706809   +          =    -0.48045571937783 +     5.78141737010678 *
3706810   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.48045571937783 + 5.78141737010678 *
RANGE_campaign_acceptance ;
3706811   +END;
MPRINT(SCORETABLES):   END;
3706812   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706813   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3706814   +   ELSE S_MntCard_Games  =     -2.3349533302094 +     6.63376117621091 *
3706815   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3349533302094 + 6.63376117621091 *
MntCard_Games ;
3706816   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3706817   +   ELSE S_MntMagazines  =    -0.84580391547708 +     17.4839342731808 *
3706818   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84580391547708 + 17.4839342731808 *
MntMagazines ;
3706819   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3706820   +   ELSE S_NumCatalogPurchases
3706821   +          =     -3.1227571204495 +     13.5382437660997 * NumCatalogPurchases
3706822   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.1227571204495 + 13.5382437660997 *
NumCatalogPurchases ;
3706823   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3706824   +   ELSE S_NumDealsPurchases  =    -1.41728826142801 +     11.1648224460604 *
3706825   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41728826142801 + 11.1648224460604 *
NumDealsPurchases ;
3706826   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3706827   +   ELSE S_NumWebPurchases  =    -5.23045924012296 +     12.2428241396556 *
3706828   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23045924012296 + 12.2428241396556 *
NumWebPurchases ;
3706829   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3706830   +   ELSE S_RANGE_Frq  =      -1.361191996156 +     4.21676768500113 * RANGE_Frq
3706831   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.361191996156 + 4.21676768500113 * RANGE_Frq ;
3706832   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3706833   +   ELSE S_RANGE_Recency  =    -1.66462179593212 +     3.35606719171069 *
3706834   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66462179593212 + 3.35606719171069 *
RANGE_Recency ;
3706835   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3706836   +   ELSE S_RANGE_average_purchase
3706837   +          =    -1.03559869310558 +     5.17126986979648 *
3706838   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03559869310558 + 5.17126986979648 *
RANGE_average_purchase ;
3706839   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3706840   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3706841   +   ELSE S_RANGE_campaign_acceptance
3706842   +          =    -0.48045571937783 +     5.78141737010678 *
3706843   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.48045571937783 + 5.78141737010678
* RANGE_campaign_acceptance ;
3706844   +END;
MPRINT(SCORETABLES):   END;
3706845   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706846   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3706847   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706848   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706849   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3706850   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706851   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706852   +   H11  =     -1.6843212525989 * S_MntCard_Games  +     0.23183980307836 *
3706853   +        S_MntMagazines  +    -1.57012601167041 * S_NumCatalogPurchases
3706854   +          +    -1.11128723645949 * S_NumDealsPurchases
3706855   +          +    -2.01870213671901 * S_NumWebPurchases
3706856   +          +    -0.61694935068701 * S_RANGE_Frq  +     2.81431308664044 *
3706857   +        S_RANGE_Recency  +     0.78527220670672 * S_RANGE_average_purchase
3706858   +          +    -1.77301200390835 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -1.6843212525989 * S_MntCard_Games + 0.23183980307836 *
S_MntMagazines + -1.57012601167041 * S_NumCatalogPurchases + -1.11128723645949 *
S_NumDealsPurchases + -2.01870213671901 * S_NumWebPurchases + -0.61694935068701 * S_RANGE_Frq
+ 2.81431308664044 * S_RANGE_Recency + 0.78527220670672 * S_RANGE_average_purchase +
-1.77301200390835 * S_RANGE_campaign_acceptance ;
3706859   +   H12  =    -0.14798780744897 * S_MntCard_Games  +    -0.01210009884989 *
3706860   +        S_MntMagazines  +    -0.12119563959557 * S_NumCatalogPurchases
3706861   +          +    -0.16489974664777 * S_NumDealsPurchases
3706862   +          +     0.02551936245602 * S_NumWebPurchases
3706863   +          +    -0.06443441940176 * S_RANGE_Frq  +     0.29059193404589 *
3706864   +        S_RANGE_Recency  +    -0.12583280278863 * S_RANGE_average_purchase
3706865   +          +    -0.17640197189034 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.14798780744897 * S_MntCard_Games + -0.01210009884989 *
S_MntMagazines + -0.12119563959557 * S_NumCatalogPurchases + -0.16489974664777 *
S_NumDealsPurchases + 0.02551936245602 * S_NumWebPurchases + -0.06443441940176 * S_RANGE_Frq +
0.29059193404589 * S_RANGE_Recency + -0.12583280278863 * S_RANGE_average_purchase +
-0.17640197189034 * S_RANGE_campaign_acceptance ;
3706866   +   H11  = H11  +     0.63525901256732 * Marital_StatusDivorced
3706867   +          +     0.52623368458153 * Marital_StatusMarried
3706868   +          +     0.96495903032869 * Marital_StatusSingle
3706869   +          +     0.02412862428083 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.63525901256732 * Marital_StatusDivorced +
0.52623368458153 * Marital_StatusMarried + 0.96495903032869 * Marital_StatusSingle +
0.02412862428083 * Marital_StatusTogether ;
3706870   +   H12  = H12  +    -0.23501505510202 * Marital_StatusDivorced
3706871   +          +     0.08076135733923 * Marital_StatusMarried
3706872   +          +    -0.27440986106674 * Marital_StatusSingle
3706873   +          +      0.2755156259042 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.23501505510202 * Marital_StatusDivorced +
0.08076135733923 * Marital_StatusMarried + -0.27440986106674 * Marital_StatusSingle +
0.2755156259042 * Marital_StatusTogether ;
3706874   +   H11  =     4.73812771671869 + H11 ;
MPRINT(SCORETABLES):   H11 = 4.73812771671869 + H11 ;
3706875   +   H12  =     1.29558536219117 + H12 ;
MPRINT(SCORETABLES):   H12 = 1.29558536219117 + H12 ;
3706876   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3706877   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3706878   +END;
MPRINT(SCORETABLES):   END;
3706879   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706880   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3706881   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3706882   +END;
MPRINT(SCORETABLES):   END;
3706883   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706884   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3706885   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706886   +
3706887   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3706888   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3706889   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3706890   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3706891   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3706892   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3706893   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3706894   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706895   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706896   +end;
MPRINT(SCORETABLES):   end;
3706897   +else do;
MPRINT(SCORETABLES):   else do;
3706898   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3706899   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3706900   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3706901   +   end;
MPRINT(SCORETABLES):   end;
3706902   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3706903   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3706904   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3706905   +   end;
MPRINT(SCORETABLES):   end;
3706906   +   else do;
MPRINT(SCORETABLES):   else do;
3706907   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3706908   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3706909   +   end;
MPRINT(SCORETABLES):   end;
3706910   +end;
MPRINT(SCORETABLES):   end;
3706911   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3706912   +   P_DepVar1  =    -3.01881072210347 * H11  +    -14.9353443976364 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.01881072210347 * H11 + -14.9353443976364 * H12 ;
3706913   +   P_DepVar1  =     9.93027623872906 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 9.93027623872906 + P_DepVar1 ;
3706914   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3706915   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3706916   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3706917   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3706918   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3706919   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3706920   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3706921   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3706922   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3706923   +END;
MPRINT(SCORETABLES):   END;
3706924   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3706925   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3706926   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3706927   +END;
MPRINT(SCORETABLES):   END;
3706928   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3706929   +   P_DepVar1  =     0.13931034482758;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13931034482758;
3706930   +   P_DepVar0  =     0.86068965517241;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86068965517241;
3706931   +END;
MPRINT(SCORETABLES):   END;
3706932   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3706933   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3706934   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3706935   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3706936   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3706937   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3706938   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3706939   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706940   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3706941   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3706942   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3706943   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3706944   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3706945   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3706946   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3706947   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3706948   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3706949   +END;
MPRINT(SCORETABLES):   END;
3706950   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706951   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3706952   +********************************;
MPRINT(SCORETABLES):   ********************************;
3706953   +drop
3706954   +S_MntCard_Games
3706955   +S_MntMagazines
3706956   +S_NumCatalogPurchases
3706957   +S_NumDealsPurchases
3706958   +S_NumWebPurchases
3706959   +S_RANGE_Frq
3706960   +S_RANGE_Recency
3706961   +S_RANGE_average_purchase
3706962   +S_RANGE_campaign_acceptance
3706963   +H11
3706964   +H12
3706965   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3706966   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706967   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3706968   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706969   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706970   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3706971   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706972   +end;
MPRINT(SCORETABLES):   end;
3706973   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706974   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3706975   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706976   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706977   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3706978   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706979   +if (cv_var =4)  then do;
MPRINT(SCORETABLES):   if (cv_var =4) then do;
3706980   +_XVAL_=4;
MPRINT(SCORETABLES):   _XVAL_=4;
3706981   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3706982   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3706983   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3706984   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3706985   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3706986   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3706987   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706988   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3706989   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3706990   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3706991   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3706992   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3706993   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3706994   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3706995   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3706996   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3706997   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3706998   +LENGTH _WARN_ $4
3706999   +      F_DepVar  $ 12
3707000   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3707001   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3707002   +
3707003   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3707004   +
3707005   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3707006   +
3707007   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3707008   +
3707009   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3707010   +
3707011   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3707012   +
3707013   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3707014   +
3707015   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3707016   +
3707017   +      label S_RANGE_campaign_acceptance =
3707018   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3707019   +
3707020   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3707021   +
3707022   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3707023   +
3707024   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3707025   +
3707026   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3707027   +
3707028   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3707029   +
3707030   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3707031   +
3707032   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3707033   +
3707034   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707035   +
3707036   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3707037   +
3707038   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3707039   +
3707040   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3707041   +
3707042   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3707043   +
3707044   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3707045   +
3707046   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3707047   +
3707048   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3707049   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3707050   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3707051   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3707052   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3707053   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3707054   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3707055   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3707056   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3707057   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707058   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707059   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707060   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707061   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3707062   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707063   +end;
MPRINT(SCORETABLES):   end;
3707064   +else do;
MPRINT(SCORETABLES):   else do;
3707065   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3707066   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3707067   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707068   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3707069   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3707070   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3707071   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3707072   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3707073   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707074   +         end;
MPRINT(SCORETABLES):   end;
3707075   +         else do;
MPRINT(SCORETABLES):   else do;
3707076   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3707077   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3707078   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707079   +            end;
MPRINT(SCORETABLES):   end;
3707080   +         end;
MPRINT(SCORETABLES):   end;
3707081   +      end;
MPRINT(SCORETABLES):   end;
3707082   +      else do;
MPRINT(SCORETABLES):   else do;
3707083   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3707084   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3707085   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707086   +         end;
MPRINT(SCORETABLES):   end;
3707087   +      end;
MPRINT(SCORETABLES):   end;
3707088   +   end;
MPRINT(SCORETABLES):   end;
3707089   +   else do;
MPRINT(SCORETABLES):   else do;
3707090   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3707091   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3707092   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707093   +      end;
MPRINT(SCORETABLES):   end;
3707094   +      else do;
MPRINT(SCORETABLES):   else do;
3707095   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3707096   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3707097   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3707098   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3707099   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3707100   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707101   +         end;
MPRINT(SCORETABLES):   end;
3707102   +      end;
MPRINT(SCORETABLES):   end;
3707103   +   end;
MPRINT(SCORETABLES):   end;
3707104   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3707105   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707106   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707107   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707108   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707109   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3707110   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707111   +   end;
MPRINT(SCORETABLES):   end;
3707112   +end;
MPRINT(SCORETABLES):   end;
3707113   +
3707114   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707115   +*** Checking missing input Interval
3707116   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3707117   +
3707118   +IF NMISS(
3707119   +   MntCard_Games ,
3707120   +   MntMagazines ,
3707121   +   NumCatalogPurchases ,
3707122   +   NumDealsPurchases ,
3707123   +   NumWebPurchases ,
3707124   +   RANGE_Frq ,
3707125   +   RANGE_Recency ,
3707126   +   RANGE_average_purchase ,
3707127   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3707128   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3707129   +
3707130   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707131   +END;
MPRINT(SCORETABLES):   END;
3707132   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707133   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3707134   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707135   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707136   +   S_MntCard_Games  =    -2.32490039936768 +     6.61209049827254 *
3707137   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32490039936768 + 6.61209049827254 * MntCard_Games ;
3707138   +   S_MntMagazines  =    -0.83432449329842 +     17.5274621028707 *
3707139   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83432449329842 + 17.5274621028707 * MntMagazines ;
3707140   +   S_NumCatalogPurchases  =    -3.09377826747936 +     13.3686531025843 *
3707141   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09377826747936 + 13.3686531025843 *
NumCatalogPurchases ;
3707142   +   S_NumDealsPurchases  =    -1.41225276435245 +     11.2255973113469 *
3707143   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41225276435245 + 11.2255973113469 *
NumDealsPurchases ;
3707144   +   S_NumWebPurchases  =    -5.19056163351378 +     12.1819831318644 *
3707145   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.19056163351378 + 12.1819831318644 *
NumWebPurchases ;
3707146   +   S_RANGE_Frq  =    -1.37666284591738 +     4.22656849661136 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37666284591738 + 4.22656849661136 * RANGE_Frq ;
3707147   +   S_RANGE_Recency  =    -1.66982507603222 +      3.3561864149435 *
3707148   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66982507603222 + 3.3561864149435 * RANGE_Recency ;
3707149   +   S_RANGE_average_purchase  =    -1.04534785422249 +     5.15352671987144 *
3707150   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04534785422249 + 5.15352671987144 *
RANGE_average_purchase ;
3707151   +   S_RANGE_campaign_acceptance
3707152   +          =    -0.47730847713543 +      5.6636334736607 *
3707153   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47730847713543 + 5.6636334736607 *
RANGE_campaign_acceptance ;
3707154   +END;
MPRINT(SCORETABLES):   END;
3707155   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707156   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3707157   +   ELSE S_MntCard_Games  =    -2.32490039936768 +     6.61209049827254 *
3707158   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32490039936768 + 6.61209049827254 *
MntCard_Games ;
3707159   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3707160   +   ELSE S_MntMagazines  =    -0.83432449329842 +     17.5274621028707 *
3707161   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83432449329842 + 17.5274621028707 *
MntMagazines ;
3707162   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3707163   +   ELSE S_NumCatalogPurchases
3707164   +          =    -3.09377826747936 +     13.3686531025843 * NumCatalogPurchases
3707165   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09377826747936 + 13.3686531025843 *
NumCatalogPurchases ;
3707166   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3707167   +   ELSE S_NumDealsPurchases  =    -1.41225276435245 +     11.2255973113469 *
3707168   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41225276435245 + 11.2255973113469 *
NumDealsPurchases ;
3707169   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3707170   +   ELSE S_NumWebPurchases  =    -5.19056163351378 +     12.1819831318644 *
3707171   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.19056163351378 + 12.1819831318644 *
NumWebPurchases ;
3707172   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3707173   +   ELSE S_RANGE_Frq  =    -1.37666284591738 +     4.22656849661136 * RANGE_Frq
3707174   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37666284591738 + 4.22656849661136 * RANGE_Frq ;
3707175   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3707176   +   ELSE S_RANGE_Recency  =    -1.66982507603222 +      3.3561864149435 *
3707177   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66982507603222 + 3.3561864149435 *
RANGE_Recency ;
3707178   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3707179   +   ELSE S_RANGE_average_purchase
3707180   +          =    -1.04534785422249 +     5.15352671987144 *
3707181   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04534785422249 + 5.15352671987144 *
RANGE_average_purchase ;
3707182   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3707183   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3707184   +   ELSE S_RANGE_campaign_acceptance
3707185   +          =    -0.47730847713543 +      5.6636334736607 *
3707186   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47730847713543 + 5.6636334736607
* RANGE_campaign_acceptance ;
3707187   +END;
MPRINT(SCORETABLES):   END;
3707188   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707189   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3707190   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707191   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707192   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3707193   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707194   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707195   +   H11  =     0.29325872472198 * S_MntCard_Games  +    -0.00545684538634 *
3707196   +        S_MntMagazines  +     0.22383681129512 * S_NumCatalogPurchases
3707197   +          +     0.20885459361526 * S_NumDealsPurchases
3707198   +          +     0.11675009158441 * S_NumWebPurchases
3707199   +          +     0.02639957366345 * S_RANGE_Frq  +      -0.438044705853 *
3707200   +        S_RANGE_Recency  +     0.14273290137235 * S_RANGE_average_purchase
3707201   +          +     0.27915415422468 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.29325872472198 * S_MntCard_Games + -0.00545684538634 *
S_MntMagazines + 0.22383681129512 * S_NumCatalogPurchases + 0.20885459361526 *
S_NumDealsPurchases + 0.11675009158441 * S_NumWebPurchases + 0.02639957366345 * S_RANGE_Frq +
-0.438044705853 * S_RANGE_Recency + 0.14273290137235 * S_RANGE_average_purchase +
0.27915415422468 * S_RANGE_campaign_acceptance ;
3707202   +   H12  =      0.7504665672974 * S_MntCard_Games  +     0.13432652819093 *
3707203   +        S_MntMagazines  +    -0.00770682406427 * S_NumCatalogPurchases
3707204   +          +    -1.07740672212966 * S_NumDealsPurchases
3707205   +          +     0.06195416147195 * S_NumWebPurchases
3707206   +          +    -0.08943901083122 * S_RANGE_Frq  +     0.23896675474776 *
3707207   +        S_RANGE_Recency  +     1.52290574485194 * S_RANGE_average_purchase
3707208   +          +    -0.27156499343868 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.7504665672974 * S_MntCard_Games + 0.13432652819093 *
S_MntMagazines + -0.00770682406427 * S_NumCatalogPurchases + -1.07740672212966 *
S_NumDealsPurchases + 0.06195416147195 * S_NumWebPurchases + -0.08943901083122 * S_RANGE_Frq +
0.23896675474776 * S_RANGE_Recency + 1.52290574485194 * S_RANGE_average_purchase +
-0.27156499343868 * S_RANGE_campaign_acceptance ;
3707209   +   H11  = H11  +     0.02931431688387 * Marital_StatusDivorced
3707210   +          +    -0.10388069139344 * Marital_StatusMarried
3707211   +          +      0.0211324102793 * Marital_StatusSingle
3707212   +          +    -0.06321341557102 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.02931431688387 * Marital_StatusDivorced +
-0.10388069139344 * Marital_StatusMarried + 0.0211324102793 * Marital_StatusSingle +
-0.06321341557102 * Marital_StatusTogether ;
3707213   +   H12  = H12  +    -0.75126689956125 * Marital_StatusDivorced
3707214   +          +     0.82335005970524 * Marital_StatusMarried
3707215   +          +    -2.02423793187419 * Marital_StatusSingle
3707216   +          +     3.28731569256715 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.75126689956125 * Marital_StatusDivorced +
0.82335005970524 * Marital_StatusMarried + -2.02423793187419 * Marital_StatusSingle +
3.28731569256715 * Marital_StatusTogether ;
3707217   +   H11  =    -0.80379611718205 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.80379611718205 + H11 ;
3707218   +   H12  =    -4.02830550797549 + H12 ;
MPRINT(SCORETABLES):   H12 = -4.02830550797549 + H12 ;
3707219   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3707220   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3707221   +END;
MPRINT(SCORETABLES):   END;
3707222   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707223   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3707224   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3707225   +END;
MPRINT(SCORETABLES):   END;
3707226   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707227   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3707228   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707229   +
3707230   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3707231   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3707232   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707233   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3707234   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3707235   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707236   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3707237   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707238   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707239   +end;
MPRINT(SCORETABLES):   end;
3707240   +else do;
MPRINT(SCORETABLES):   else do;
3707241   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3707242   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3707243   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3707244   +   end;
MPRINT(SCORETABLES):   end;
3707245   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3707246   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3707247   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3707248   +   end;
MPRINT(SCORETABLES):   end;
3707249   +   else do;
MPRINT(SCORETABLES):   else do;
3707250   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707251   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707252   +   end;
MPRINT(SCORETABLES):   end;
3707253   +end;
MPRINT(SCORETABLES):   end;
3707254   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707255   +   P_DepVar1  =     11.6836183176269 * H11  +    -3.25226976946889 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = 11.6836183176269 * H11 + -3.25226976946889 * H12 ;
3707256   +   P_DepVar1  =    -1.29123054778892 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.29123054778892 + P_DepVar1 ;
3707257   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3707258   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3707259   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3707260   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3707261   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3707262   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3707263   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3707264   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3707265   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3707266   +END;
MPRINT(SCORETABLES):   END;
3707267   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707268   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3707269   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3707270   +END;
MPRINT(SCORETABLES):   END;
3707271   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3707272   +   P_DepVar1  =     0.13891402714932;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13891402714932;
3707273   +   P_DepVar0  =     0.86108597285067;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86108597285067;
3707274   +END;
MPRINT(SCORETABLES):   END;
3707275   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3707276   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3707277   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3707278   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3707279   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3707280   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3707281   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3707282   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707283   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3707284   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707285   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3707286   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3707287   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3707288   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3707289   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3707290   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3707291   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3707292   +END;
MPRINT(SCORETABLES):   END;
3707293   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707294   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3707295   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707296   +drop
3707297   +S_MntCard_Games
3707298   +S_MntMagazines
3707299   +S_NumCatalogPurchases
3707300   +S_NumDealsPurchases
3707301   +S_NumWebPurchases
3707302   +S_RANGE_Frq
3707303   +S_RANGE_Recency
3707304   +S_RANGE_average_purchase
3707305   +S_RANGE_campaign_acceptance
3707306   +H11
3707307   +H12
3707308   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3707309   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707310   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3707311   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707312   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707313   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3707314   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707315   +end;
MPRINT(SCORETABLES):   end;
3707316   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707317   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3707318   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707319   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707320   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3707321   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707322   +if (cv_var =5)  then do;
MPRINT(SCORETABLES):   if (cv_var =5) then do;
3707323   +_XVAL_=5;
MPRINT(SCORETABLES):   _XVAL_=5;
3707324   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707325   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3707326   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707327   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707328   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3707329   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707330   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3707331   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3707332   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3707333   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3707334   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3707335   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3707336   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3707337   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3707338   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3707339   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3707340   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3707341   +LENGTH _WARN_ $4
3707342   +      F_DepVar  $ 12
3707343   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3707344   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3707345   +
3707346   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3707347   +
3707348   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3707349   +
3707350   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3707351   +
3707352   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3707353   +
3707354   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3707355   +
3707356   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3707357   +
3707358   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3707359   +
3707360   +      label S_RANGE_campaign_acceptance =
3707361   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3707362   +
3707363   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3707364   +
3707365   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3707366   +
3707367   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3707368   +
3707369   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3707370   +
3707371   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3707372   +
3707373   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3707374   +
3707375   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3707376   +
3707377   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707378   +
3707379   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3707380   +
3707381   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3707382   +
3707383   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3707384   +
3707385   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3707386   +
3707387   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3707388   +
3707389   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3707390   +
3707391   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3707392   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3707393   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3707394   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3707395   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3707396   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3707397   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3707398   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3707399   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3707400   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707401   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707402   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707403   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707404   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3707405   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707406   +end;
MPRINT(SCORETABLES):   end;
3707407   +else do;
MPRINT(SCORETABLES):   else do;
3707408   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3707409   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3707410   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707411   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3707412   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3707413   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3707414   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3707415   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3707416   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707417   +         end;
MPRINT(SCORETABLES):   end;
3707418   +         else do;
MPRINT(SCORETABLES):   else do;
3707419   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3707420   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3707421   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707422   +            end;
MPRINT(SCORETABLES):   end;
3707423   +         end;
MPRINT(SCORETABLES):   end;
3707424   +      end;
MPRINT(SCORETABLES):   end;
3707425   +      else do;
MPRINT(SCORETABLES):   else do;
3707426   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3707427   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3707428   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707429   +         end;
MPRINT(SCORETABLES):   end;
3707430   +      end;
MPRINT(SCORETABLES):   end;
3707431   +   end;
MPRINT(SCORETABLES):   end;
3707432   +   else do;
MPRINT(SCORETABLES):   else do;
3707433   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3707434   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3707435   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707436   +      end;
MPRINT(SCORETABLES):   end;
3707437   +      else do;
MPRINT(SCORETABLES):   else do;
3707438   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3707439   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3707440   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3707441   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3707442   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3707443   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707444   +         end;
MPRINT(SCORETABLES):   end;
3707445   +      end;
MPRINT(SCORETABLES):   end;
3707446   +   end;
MPRINT(SCORETABLES):   end;
3707447   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3707448   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707449   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707450   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707451   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707452   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3707453   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707454   +   end;
MPRINT(SCORETABLES):   end;
3707455   +end;
MPRINT(SCORETABLES):   end;
3707456   +
3707457   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707458   +*** Checking missing input Interval
3707459   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3707460   +
3707461   +IF NMISS(
3707462   +   MntCard_Games ,
3707463   +   MntMagazines ,
3707464   +   NumCatalogPurchases ,
3707465   +   NumDealsPurchases ,
3707466   +   NumWebPurchases ,
3707467   +   RANGE_Frq ,
3707468   +   RANGE_Recency ,
3707469   +   RANGE_average_purchase ,
3707470   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3707471   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3707472   +
3707473   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707474   +END;
MPRINT(SCORETABLES):   END;
3707475   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707476   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3707477   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707478   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707479   +   S_MntCard_Games  =    -2.32339505068067 +     6.59896696738134 *
3707480   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32339505068067 + 6.59896696738134 * MntCard_Games ;
3707481   +   S_MntMagazines  =    -0.83655436198017 +     17.3922918969319 *
3707482   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83655436198017 + 17.3922918969319 * MntMagazines ;
3707483   +   S_NumCatalogPurchases  =    -3.12006597018847 +     13.4776879253306 *
3707484   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12006597018847 + 13.4776879253306 *
NumCatalogPurchases ;
3707485   +   S_NumDealsPurchases  =    -1.40676795150454 +     11.2124645016146 *
3707486   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40676795150454 + 11.2124645016146 *
NumDealsPurchases ;
3707487   +   S_NumWebPurchases  =    -5.19733205814994 +      12.199313605442 *
3707488   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.19733205814994 + 12.199313605442 *
NumWebPurchases ;
3707489   +   S_RANGE_Frq  =    -1.37108994148136 +     4.20598657712966 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37108994148136 + 4.20598657712966 * RANGE_Frq ;
3707490   +   S_RANGE_Recency  =    -1.65209481761786 +     3.33924882631275 *
3707491   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65209481761786 + 3.33924882631275 * RANGE_Recency ;
3707492   +   S_RANGE_average_purchase  =    -1.04250513141757 +      5.1254724749544 *
3707493   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04250513141757 + 5.1254724749544 *
RANGE_average_purchase ;
3707494   +   S_RANGE_campaign_acceptance
3707495   +          =     -0.4807231742579 +      5.7554895266433 *
3707496   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.4807231742579 + 5.7554895266433 *
RANGE_campaign_acceptance ;
3707497   +END;
MPRINT(SCORETABLES):   END;
3707498   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707499   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3707500   +   ELSE S_MntCard_Games  =    -2.32339505068067 +     6.59896696738134 *
3707501   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32339505068067 + 6.59896696738134 *
MntCard_Games ;
3707502   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3707503   +   ELSE S_MntMagazines  =    -0.83655436198017 +     17.3922918969319 *
3707504   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83655436198017 + 17.3922918969319 *
MntMagazines ;
3707505   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3707506   +   ELSE S_NumCatalogPurchases
3707507   +          =    -3.12006597018847 +     13.4776879253306 * NumCatalogPurchases
3707508   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12006597018847 + 13.4776879253306 *
NumCatalogPurchases ;
3707509   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3707510   +   ELSE S_NumDealsPurchases  =    -1.40676795150454 +     11.2124645016146 *
3707511   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40676795150454 + 11.2124645016146 *
NumDealsPurchases ;
3707512   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3707513   +   ELSE S_NumWebPurchases  =    -5.19733205814994 +      12.199313605442 *
3707514   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.19733205814994 + 12.199313605442 *
NumWebPurchases ;
3707515   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3707516   +   ELSE S_RANGE_Frq  =    -1.37108994148136 +     4.20598657712966 * RANGE_Frq
3707517   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37108994148136 + 4.20598657712966 * RANGE_Frq ;
3707518   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3707519   +   ELSE S_RANGE_Recency  =    -1.65209481761786 +     3.33924882631275 *
3707520   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65209481761786 + 3.33924882631275 *
RANGE_Recency ;
3707521   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3707522   +   ELSE S_RANGE_average_purchase
3707523   +          =    -1.04250513141757 +      5.1254724749544 *
3707524   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04250513141757 + 5.1254724749544 *
RANGE_average_purchase ;
3707525   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3707526   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3707527   +   ELSE S_RANGE_campaign_acceptance
3707528   +          =     -0.4807231742579 +      5.7554895266433 *
3707529   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.4807231742579 + 5.7554895266433 *
RANGE_campaign_acceptance ;
3707530   +END;
MPRINT(SCORETABLES):   END;
3707531   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707532   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3707533   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707534   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707535   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3707536   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707537   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707538   +   H11  =     -0.7757590428708 * S_MntCard_Games  +     0.07290234098853 *
3707539   +        S_MntMagazines  +    -0.63004303635214 * S_NumCatalogPurchases
3707540   +          +    -0.47995480948191 * S_NumDealsPurchases
3707541   +          +    -0.95697129004394 * S_NumWebPurchases
3707542   +          +    -0.19718195301227 * S_RANGE_Frq  +     1.14299222071516 *
3707543   +        S_RANGE_Recency  +     0.29490340038858 * S_RANGE_average_purchase
3707544   +          +    -0.71897339389886 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.7757590428708 * S_MntCard_Games + 0.07290234098853 *
S_MntMagazines + -0.63004303635214 * S_NumCatalogPurchases + -0.47995480948191 *
S_NumDealsPurchases + -0.95697129004394 * S_NumWebPurchases + -0.19718195301227 * S_RANGE_Frq
+ 1.14299222071516 * S_RANGE_Recency + 0.29490340038858 * S_RANGE_average_purchase +
-0.71897339389886 * S_RANGE_campaign_acceptance ;
3707545   +   H12  =    -0.14052863952027 * S_MntCard_Games  +     0.00070718270681 *
3707546   +        S_MntMagazines  +    -0.12042221725848 * S_NumCatalogPurchases
3707547   +          +     -0.1598037114017 * S_NumDealsPurchases
3707548   +          +     0.02366672250922 * S_NumWebPurchases
3707549   +          +    -0.07405710236345 * S_RANGE_Frq  +      0.2946529392088 *
3707550   +        S_RANGE_Recency  +    -0.11257365045717 * S_RANGE_average_purchase
3707551   +          +    -0.17639859942452 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.14052863952027 * S_MntCard_Games + 0.00070718270681 *
S_MntMagazines + -0.12042221725848 * S_NumCatalogPurchases + -0.1598037114017 *
S_NumDealsPurchases + 0.02366672250922 * S_NumWebPurchases + -0.07405710236345 * S_RANGE_Frq +
0.2946529392088 * S_RANGE_Recency + -0.11257365045717 * S_RANGE_average_purchase +
-0.17639859942452 * S_RANGE_campaign_acceptance ;
3707552   +   H11  = H11  +     0.17387541268518 * Marital_StatusDivorced
3707553   +          +    -0.11778247373217 * Marital_StatusMarried
3707554   +          +     0.63317172549668 * Marital_StatusSingle
3707555   +          +    -0.75955183879677 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.17387541268518 * Marital_StatusDivorced +
-0.11778247373217 * Marital_StatusMarried + 0.63317172549668 * Marital_StatusSingle +
-0.75955183879677 * Marital_StatusTogether ;
3707556   +   H12  = H12  +    -0.18871595884611 * Marital_StatusDivorced
3707557   +          +     0.11742519159554 * Marital_StatusMarried
3707558   +          +    -0.26668319752133 * Marital_StatusSingle
3707559   +          +     0.52072665933085 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.18871595884611 * Marital_StatusDivorced +
0.11742519159554 * Marital_StatusMarried + -0.26668319752133 * Marital_StatusSingle +
0.52072665933085 * Marital_StatusTogether ;
3707560   +   H11  =     2.59489148542656 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.59489148542656 + H11 ;
3707561   +   H12  =      1.0428257552603 + H12 ;
MPRINT(SCORETABLES):   H12 = 1.0428257552603 + H12 ;
3707562   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3707563   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3707564   +END;
MPRINT(SCORETABLES):   END;
3707565   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707566   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3707567   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3707568   +END;
MPRINT(SCORETABLES):   END;
3707569   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707570   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3707571   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707572   +
3707573   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3707574   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3707575   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707576   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3707577   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3707578   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707579   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3707580   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707581   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707582   +end;
MPRINT(SCORETABLES):   end;
3707583   +else do;
MPRINT(SCORETABLES):   else do;
3707584   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3707585   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3707586   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3707587   +   end;
MPRINT(SCORETABLES):   end;
3707588   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3707589   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3707590   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3707591   +   end;
MPRINT(SCORETABLES):   end;
3707592   +   else do;
MPRINT(SCORETABLES):   else do;
3707593   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707594   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707595   +   end;
MPRINT(SCORETABLES):   end;
3707596   +end;
MPRINT(SCORETABLES):   end;
3707597   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707598   +   P_DepVar1  =    -4.50959869947159 * H11  +    -12.9243574993666 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.50959869947159 * H11 + -12.9243574993666 * H12 ;
3707599   +   P_DepVar1  =     8.05232118677962 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 8.05232118677962 + P_DepVar1 ;
3707600   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3707601   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3707602   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3707603   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3707604   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3707605   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3707606   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3707607   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3707608   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3707609   +END;
MPRINT(SCORETABLES):   END;
3707610   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707611   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3707612   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3707613   +END;
MPRINT(SCORETABLES):   END;
3707614   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3707615   +   P_DepVar1  =      0.1397800183318;
MPRINT(SCORETABLES):   P_DepVar1 = 0.1397800183318;
3707616   +   P_DepVar0  =     0.86021998166819;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86021998166819;
3707617   +END;
MPRINT(SCORETABLES):   END;
3707618   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3707619   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3707620   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3707621   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3707622   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3707623   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3707624   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3707625   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707626   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3707627   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707628   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3707629   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3707630   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3707631   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3707632   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3707633   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3707634   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3707635   +END;
MPRINT(SCORETABLES):   END;
3707636   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707637   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3707638   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707639   +drop
3707640   +S_MntCard_Games
3707641   +S_MntMagazines
3707642   +S_NumCatalogPurchases
3707643   +S_NumDealsPurchases
3707644   +S_NumWebPurchases
3707645   +S_RANGE_Frq
3707646   +S_RANGE_Recency
3707647   +S_RANGE_average_purchase
3707648   +S_RANGE_campaign_acceptance
3707649   +H11
3707650   +H12
3707651   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3707652   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707653   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3707654   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707655   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707656   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3707657   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707658   +end;
MPRINT(SCORETABLES):   end;
3707659   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707660   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3707661   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707662   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707663   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3707664   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707665   +if (cv_var =6)  then do;
MPRINT(SCORETABLES):   if (cv_var =6) then do;
3707666   +_XVAL_=6;
MPRINT(SCORETABLES):   _XVAL_=6;
3707667   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707668   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3707669   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707670   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707671   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3707672   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3707673   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3707674   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3707675   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3707676   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3707677   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3707678   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3707679   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3707680   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3707681   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3707682   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3707683   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3707684   +LENGTH _WARN_ $4
3707685   +      F_DepVar  $ 12
3707686   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3707687   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3707688   +
3707689   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3707690   +
3707691   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3707692   +
3707693   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3707694   +
3707695   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3707696   +
3707697   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3707698   +
3707699   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3707700   +
3707701   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3707702   +
3707703   +      label S_RANGE_campaign_acceptance =
3707704   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3707705   +
3707706   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3707707   +
3707708   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3707709   +
3707710   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3707711   +
3707712   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3707713   +
3707714   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3707715   +
3707716   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3707717   +
3707718   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3707719   +
3707720   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707721   +
3707722   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3707723   +
The SAS System
 
3707724   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3707725   +
3707726   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3707727   +
3707728   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3707729   +
3707730   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3707731   +
3707732   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3707733   +
3707734   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3707735   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3707736   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3707737   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3707738   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3707739   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3707740   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3707741   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3707742   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3707743   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707744   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707745   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707746   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707747   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3707748   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707749   +end;
MPRINT(SCORETABLES):   end;
3707750   +else do;
MPRINT(SCORETABLES):   else do;
3707751   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3707752   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3707753   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707754   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3707755   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3707756   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3707757   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3707758   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3707759   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707760   +         end;
MPRINT(SCORETABLES):   end;
3707761   +         else do;
MPRINT(SCORETABLES):   else do;
3707762   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3707763   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3707764   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707765   +            end;
MPRINT(SCORETABLES):   end;
3707766   +         end;
MPRINT(SCORETABLES):   end;
3707767   +      end;
MPRINT(SCORETABLES):   end;
3707768   +      else do;
MPRINT(SCORETABLES):   else do;
3707769   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3707770   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3707771   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707772   +         end;
MPRINT(SCORETABLES):   end;
3707773   +      end;
MPRINT(SCORETABLES):   end;
3707774   +   end;
MPRINT(SCORETABLES):   end;
3707775   +   else do;
MPRINT(SCORETABLES):   else do;
3707776   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3707777   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3707778   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707779   +      end;
MPRINT(SCORETABLES):   end;
3707780   +      else do;
MPRINT(SCORETABLES):   else do;
3707781   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3707782   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3707783   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3707784   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3707785   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3707786   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3707787   +         end;
MPRINT(SCORETABLES):   end;
3707788   +      end;
MPRINT(SCORETABLES):   end;
3707789   +   end;
MPRINT(SCORETABLES):   end;
3707790   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3707791   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3707792   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3707793   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3707794   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3707795   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3707796   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707797   +   end;
MPRINT(SCORETABLES):   end;
3707798   +end;
MPRINT(SCORETABLES):   end;
3707799   +
3707800   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707801   +*** Checking missing input Interval
3707802   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3707803   +
3707804   +IF NMISS(
3707805   +   MntCard_Games ,
3707806   +   MntMagazines ,
3707807   +   NumCatalogPurchases ,
3707808   +   NumDealsPurchases ,
3707809   +   NumWebPurchases ,
3707810   +   RANGE_Frq ,
3707811   +   RANGE_Recency ,
3707812   +   RANGE_average_purchase ,
3707813   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3707814   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3707815   +
3707816   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3707817   +END;
MPRINT(SCORETABLES):   END;
3707818   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707819   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3707820   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707821   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707822   +   S_MntCard_Games  =    -2.33814232072064 +     6.66324554145659 *
3707823   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33814232072064 + 6.66324554145659 * MntCard_Games ;
3707824   +   S_MntMagazines  =    -0.84842609569259 +     17.4325407190991 *
3707825   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84842609569259 + 17.4325407190991 * MntMagazines ;
3707826   +   S_NumCatalogPurchases  =    -3.11987334160799 +     13.4547174334176 *
3707827   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11987334160799 + 13.4547174334176 *
NumCatalogPurchases ;
3707828   +   S_NumDealsPurchases  =    -1.40628334403692 +     11.1136095082861 *
3707829   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40628334403692 + 11.1136095082861 *
NumDealsPurchases ;
3707830   +   S_NumWebPurchases  =    -5.23788380324221 +     12.2804390416915 *
3707831   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23788380324221 + 12.2804390416915 *
NumWebPurchases ;
3707832   +   S_RANGE_Frq  =    -1.36262762956209 +      4.2165157659707 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36262762956209 + 4.2165157659707 * RANGE_Frq ;
3707833   +   S_RANGE_Recency  =    -1.67245321534246 +     3.36533372284425 *
3707834   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67245321534246 + 3.36533372284425 * RANGE_Recency ;
3707835   +   S_RANGE_average_purchase  =    -1.03268899138172 +     5.12639033648768 *
3707836   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03268899138172 + 5.12639033648768 *
RANGE_average_purchase ;
3707837   +   S_RANGE_campaign_acceptance
3707838   +          =     -0.4751385065686 +     5.73602536441649 *
3707839   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.4751385065686 + 5.73602536441649 *
RANGE_campaign_acceptance ;
3707840   +END;
MPRINT(SCORETABLES):   END;
3707841   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707842   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3707843   +   ELSE S_MntCard_Games  =    -2.33814232072064 +     6.66324554145659 *
3707844   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33814232072064 + 6.66324554145659 *
MntCard_Games ;
3707845   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3707846   +   ELSE S_MntMagazines  =    -0.84842609569259 +     17.4325407190991 *
3707847   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84842609569259 + 17.4325407190991 *
MntMagazines ;
3707848   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3707849   +   ELSE S_NumCatalogPurchases
3707850   +          =    -3.11987334160799 +     13.4547174334176 * NumCatalogPurchases
3707851   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11987334160799 + 13.4547174334176 *
NumCatalogPurchases ;
3707852   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3707853   +   ELSE S_NumDealsPurchases  =    -1.40628334403692 +     11.1136095082861 *
3707854   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40628334403692 + 11.1136095082861 *
NumDealsPurchases ;
3707855   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3707856   +   ELSE S_NumWebPurchases  =    -5.23788380324221 +     12.2804390416915 *
3707857   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23788380324221 + 12.2804390416915 *
NumWebPurchases ;
3707858   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3707859   +   ELSE S_RANGE_Frq  =    -1.36262762956209 +      4.2165157659707 * RANGE_Frq
3707860   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36262762956209 + 4.2165157659707 * RANGE_Frq ;
3707861   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3707862   +   ELSE S_RANGE_Recency  =    -1.67245321534246 +     3.36533372284425 *
3707863   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67245321534246 + 3.36533372284425 *
RANGE_Recency ;
3707864   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3707865   +   ELSE S_RANGE_average_purchase
3707866   +          =    -1.03268899138172 +     5.12639033648768 *
3707867   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03268899138172 + 5.12639033648768 *
RANGE_average_purchase ;
3707868   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3707869   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3707870   +   ELSE S_RANGE_campaign_acceptance
3707871   +          =     -0.4751385065686 +     5.73602536441649 *
3707872   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.4751385065686 + 5.73602536441649
* RANGE_campaign_acceptance ;
3707873   +END;
MPRINT(SCORETABLES):   END;
3707874   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707875   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3707876   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707877   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707878   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3707879   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707880   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707881   +   H11  =    -0.52675232036714 * S_MntCard_Games  +     0.09247059493771 *
3707882   +        S_MntMagazines  +    -0.39563474488434 * S_NumCatalogPurchases
3707883   +          +    -0.26338579399702 * S_NumDealsPurchases
3707884   +          +    -0.60514410670254 * S_NumWebPurchases
3707885   +          +    -0.12950197442811 * S_RANGE_Frq  +     0.72710395705661 *
3707886   +        S_RANGE_Recency  +     0.25834992550142 * S_RANGE_average_purchase
3707887   +          +    -0.45934370502848 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.52675232036714 * S_MntCard_Games + 0.09247059493771 *
S_MntMagazines + -0.39563474488434 * S_NumCatalogPurchases + -0.26338579399702 *
S_NumDealsPurchases + -0.60514410670254 * S_NumWebPurchases + -0.12950197442811 * S_RANGE_Frq
+ 0.72710395705661 * S_RANGE_Recency + 0.25834992550142 * S_RANGE_average_purchase +
-0.45934370502848 * S_RANGE_campaign_acceptance ;
3707888   +   H12  =    -0.12497345831052 * S_MntCard_Games  +    -0.01646148474329 *
3707889   +        S_MntMagazines  +    -0.14940172229878 * S_NumCatalogPurchases
3707890   +          +    -0.20863873086019 * S_NumDealsPurchases
3707891   +          +     0.06947564012649 * S_NumWebPurchases
3707892   +          +    -0.06877598937606 * S_RANGE_Frq  +     0.32742701573005 *
3707893   +        S_RANGE_Recency  +    -0.16419024867202 * S_RANGE_average_purchase
3707894   +          +    -0.19783523006832 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.12497345831052 * S_MntCard_Games + -0.01646148474329 *
S_MntMagazines + -0.14940172229878 * S_NumCatalogPurchases + -0.20863873086019 *
S_NumDealsPurchases + 0.06947564012649 * S_NumWebPurchases + -0.06877598937606 * S_RANGE_Frq +
0.32742701573005 * S_RANGE_Recency + -0.16419024867202 * S_RANGE_average_purchase +
-0.19783523006832 * S_RANGE_campaign_acceptance ;
3707895   +   H11  = H11  +     0.10258015731348 * Marital_StatusDivorced
3707896   +          +    -0.06725999714252 * Marital_StatusMarried
3707897   +          +     0.31460099227437 * Marital_StatusSingle
3707898   +          +    -0.36144802981574 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.10258015731348 * Marital_StatusDivorced +
-0.06725999714252 * Marital_StatusMarried + 0.31460099227437 * Marital_StatusSingle +
-0.36144802981574 * Marital_StatusTogether ;
3707899   +   H12  = H12  +    -0.23509904669163 * Marital_StatusDivorced
3707900   +          +      0.1888792109479 * Marital_StatusMarried
3707901   +          +    -0.26907662140071 * Marital_StatusSingle
3707902   +          +     0.52676672125236 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.23509904669163 * Marital_StatusDivorced +
0.1888792109479 * Marital_StatusMarried + -0.26907662140071 * Marital_StatusSingle +
0.52676672125236 * Marital_StatusTogether ;
3707903   +   H11  =     1.78513266123228 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.78513266123228 + H11 ;
3707904   +   H12  =     0.95522237749503 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.95522237749503 + H12 ;
3707905   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3707906   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3707907   +END;
MPRINT(SCORETABLES):   END;
3707908   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707909   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3707910   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3707911   +END;
MPRINT(SCORETABLES):   END;
3707912   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707913   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3707914   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707915   +
3707916   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3707917   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3707918   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3707919   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3707920   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3707921   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3707922   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3707923   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707924   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707925   +end;
MPRINT(SCORETABLES):   end;
3707926   +else do;
MPRINT(SCORETABLES):   else do;
3707927   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3707928   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3707929   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3707930   +   end;
MPRINT(SCORETABLES):   end;
3707931   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3707932   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3707933   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3707934   +   end;
MPRINT(SCORETABLES):   end;
3707935   +   else do;
MPRINT(SCORETABLES):   else do;
3707936   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3707937   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3707938   +   end;
MPRINT(SCORETABLES):   end;
3707939   +end;
MPRINT(SCORETABLES):   end;
3707940   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3707941   +   P_DepVar1  =    -5.58687942767415 * H11  +    -9.43645953822448 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.58687942767415 * H11 + -9.43645953822448 * H12 ;
3707942   +   P_DepVar1  =     5.80706137266154 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.80706137266154 + P_DepVar1 ;
3707943   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3707944   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3707945   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3707946   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3707947   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3707948   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3707949   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3707950   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3707951   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3707952   +END;
MPRINT(SCORETABLES):   END;
3707953   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3707954   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3707955   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3707956   +END;
MPRINT(SCORETABLES):   END;
3707957   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3707958   +   P_DepVar1  =     0.13548387096774;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13548387096774;
3707959   +   P_DepVar0  =     0.86451612903225;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86451612903225;
3707960   +END;
MPRINT(SCORETABLES):   END;
3707961   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3707962   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3707963   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3707964   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3707965   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3707966   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3707967   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3707968   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707969   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3707970   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3707971   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3707972   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3707973   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3707974   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3707975   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3707976   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3707977   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3707978   +END;
MPRINT(SCORETABLES):   END;
3707979   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707980   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3707981   +********************************;
MPRINT(SCORETABLES):   ********************************;
3707982   +drop
3707983   +S_MntCard_Games
3707984   +S_MntMagazines
3707985   +S_NumCatalogPurchases
3707986   +S_NumDealsPurchases
3707987   +S_NumWebPurchases
3707988   +S_RANGE_Frq
3707989   +S_RANGE_Recency
3707990   +S_RANGE_average_purchase
3707991   +S_RANGE_campaign_acceptance
3707992   +H11
3707993   +H12
3707994   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3707995   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3707996   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3707997   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3707998   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3707999   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3708000   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708001   +end;
MPRINT(SCORETABLES):   end;
3708002   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708003   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3708004   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708005   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708006   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3708007   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708008   +if (cv_var =7)  then do;
MPRINT(SCORETABLES):   if (cv_var =7) then do;
3708009   +_XVAL_=7;
MPRINT(SCORETABLES):   _XVAL_=7;
3708010   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708011   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3708012   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708013   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708014   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3708015   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708016   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708017   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3708018   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708019   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3708020   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3708021   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3708022   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3708023   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3708024   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3708025   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3708026   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3708027   +LENGTH _WARN_ $4
3708028   +      F_DepVar  $ 12
3708029   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3708030   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3708031   +
3708032   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3708033   +
3708034   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3708035   +
3708036   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3708037   +
3708038   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3708039   +
3708040   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3708041   +
3708042   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3708043   +
3708044   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3708045   +
3708046   +      label S_RANGE_campaign_acceptance =
3708047   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3708048   +
3708049   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3708050   +
3708051   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3708052   +
3708053   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3708054   +
3708055   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3708056   +
3708057   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3708058   +
3708059   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3708060   +
3708061   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3708062   +
3708063   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708064   +
3708065   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3708066   +
3708067   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3708068   +
3708069   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3708070   +
3708071   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3708072   +
3708073   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3708074   +
3708075   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3708076   +
3708077   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3708078   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3708079   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3708080   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3708081   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3708082   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3708083   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3708084   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3708085   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3708086   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708087   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708088   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708089   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708090   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3708091   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708092   +end;
MPRINT(SCORETABLES):   end;
3708093   +else do;
MPRINT(SCORETABLES):   else do;
3708094   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3708095   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3708096   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708097   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3708098   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3708099   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3708100   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3708101   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3708102   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708103   +         end;
MPRINT(SCORETABLES):   end;
3708104   +         else do;
MPRINT(SCORETABLES):   else do;
3708105   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3708106   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3708107   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708108   +            end;
MPRINT(SCORETABLES):   end;
3708109   +         end;
MPRINT(SCORETABLES):   end;
3708110   +      end;
MPRINT(SCORETABLES):   end;
3708111   +      else do;
MPRINT(SCORETABLES):   else do;
3708112   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3708113   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3708114   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708115   +         end;
MPRINT(SCORETABLES):   end;
3708116   +      end;
MPRINT(SCORETABLES):   end;
3708117   +   end;
MPRINT(SCORETABLES):   end;
3708118   +   else do;
MPRINT(SCORETABLES):   else do;
3708119   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3708120   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3708121   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708122   +      end;
MPRINT(SCORETABLES):   end;
3708123   +      else do;
MPRINT(SCORETABLES):   else do;
3708124   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3708125   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3708126   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3708127   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3708128   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3708129   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708130   +         end;
MPRINT(SCORETABLES):   end;
3708131   +      end;
MPRINT(SCORETABLES):   end;
3708132   +   end;
MPRINT(SCORETABLES):   end;
3708133   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3708134   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708135   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708136   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708137   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708138   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3708139   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708140   +   end;
MPRINT(SCORETABLES):   end;
3708141   +end;
MPRINT(SCORETABLES):   end;
3708142   +
3708143   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708144   +*** Checking missing input Interval
3708145   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3708146   +
3708147   +IF NMISS(
3708148   +   MntCard_Games ,
3708149   +   MntMagazines ,
3708150   +   NumCatalogPurchases ,
3708151   +   NumDealsPurchases ,
3708152   +   NumWebPurchases ,
3708153   +   RANGE_Frq ,
3708154   +   RANGE_Recency ,
3708155   +   RANGE_average_purchase ,
3708156   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3708157   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3708158   +
3708159   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708160   +END;
MPRINT(SCORETABLES):   END;
3708161   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708162   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3708163   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708164   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708165   +   S_MntCard_Games  =    -2.33381293024698 +     6.63619812879026 *
3708166   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33381293024698 + 6.63619812879026 * MntCard_Games ;
3708167   +   S_MntMagazines  =    -0.83452501535831 +     17.3026363710969 *
3708168   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83452501535831 + 17.3026363710969 * MntMagazines ;
3708169   +   S_NumCatalogPurchases  =    -3.10185129178993 +     13.4637286529205 *
3708170   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10185129178993 + 13.4637286529205 *
NumCatalogPurchases ;
3708171   +   S_NumDealsPurchases  =    -1.41134775237008 +     11.1646989797343 *
3708172   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41134775237008 + 11.1646989797343 *
NumDealsPurchases ;
3708173   +   S_NumWebPurchases  =     -5.2308461801204 +      12.235883637376 *
3708174   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.2308461801204 + 12.235883637376 *
NumWebPurchases ;
3708175   +   S_RANGE_Frq  =    -1.36043304348038 +     4.21798414848893 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36043304348038 + 4.21798414848893 * RANGE_Frq ;
3708176   +   S_RANGE_Recency  =    -1.66414586388862 +      3.3617215689746 *
3708177   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66414586388862 + 3.3617215689746 * RANGE_Recency ;
3708178   +   S_RANGE_average_purchase  =    -1.03114770259456 +     5.16342852330191 *
3708179   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03114770259456 + 5.16342852330191 *
RANGE_average_purchase ;
3708180   +   S_RANGE_campaign_acceptance
3708181   +          =    -0.47176590852359 +     5.75843512855259 *
3708182   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47176590852359 + 5.75843512855259 *
RANGE_campaign_acceptance ;
3708183   +END;
MPRINT(SCORETABLES):   END;
3708184   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708185   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3708186   +   ELSE S_MntCard_Games  =    -2.33381293024698 +     6.63619812879026 *
3708187   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33381293024698 + 6.63619812879026 *
MntCard_Games ;
3708188   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3708189   +   ELSE S_MntMagazines  =    -0.83452501535831 +     17.3026363710969 *
3708190   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83452501535831 + 17.3026363710969 *
MntMagazines ;
3708191   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3708192   +   ELSE S_NumCatalogPurchases
3708193   +          =    -3.10185129178993 +     13.4637286529205 * NumCatalogPurchases
3708194   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10185129178993 + 13.4637286529205 *
NumCatalogPurchases ;
3708195   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3708196   +   ELSE S_NumDealsPurchases  =    -1.41134775237008 +     11.1646989797343 *
3708197   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41134775237008 + 11.1646989797343 *
NumDealsPurchases ;
3708198   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3708199   +   ELSE S_NumWebPurchases  =     -5.2308461801204 +      12.235883637376 *
3708200   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.2308461801204 + 12.235883637376 *
NumWebPurchases ;
3708201   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3708202   +   ELSE S_RANGE_Frq  =    -1.36043304348038 +     4.21798414848893 * RANGE_Frq
3708203   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36043304348038 + 4.21798414848893 * RANGE_Frq ;
3708204   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3708205   +   ELSE S_RANGE_Recency  =    -1.66414586388862 +      3.3617215689746 *
3708206   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66414586388862 + 3.3617215689746 *
RANGE_Recency ;
3708207   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3708208   +   ELSE S_RANGE_average_purchase
3708209   +          =    -1.03114770259456 +     5.16342852330191 *
3708210   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03114770259456 + 5.16342852330191 *
RANGE_average_purchase ;
3708211   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3708212   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3708213   +   ELSE S_RANGE_campaign_acceptance
3708214   +          =    -0.47176590852359 +     5.75843512855259 *
3708215   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47176590852359 + 5.75843512855259
* RANGE_campaign_acceptance ;
3708216   +END;
MPRINT(SCORETABLES):   END;
3708217   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708218   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3708219   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708220   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708221   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3708222   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708223   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708224   +   H11  =    -0.31574905646876 * S_MntCard_Games  +     0.00413800338761 *
3708225   +        S_MntMagazines  +    -0.31784037512437 * S_NumCatalogPurchases
3708226   +          +    -0.29919540861309 * S_NumDealsPurchases
3708227   +          +    -0.16369272497509 * S_NumWebPurchases
3708228   +          +    -0.02326954160078 * S_RANGE_Frq  +      0.6095266451271 *
3708229   +        S_RANGE_Recency  +      0.0082556646734 * S_RANGE_average_purchase
3708230   +          +    -0.38424657303202 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.31574905646876 * S_MntCard_Games + 0.00413800338761 *
S_MntMagazines + -0.31784037512437 * S_NumCatalogPurchases + -0.29919540861309 *
S_NumDealsPurchases + -0.16369272497509 * S_NumWebPurchases + -0.02326954160078 * S_RANGE_Frq
+ 0.6095266451271 * S_RANGE_Recency + 0.0082556646734 * S_RANGE_average_purchase +
-0.38424657303202 * S_RANGE_campaign_acceptance ;
3708231   +   H12  =     2.04890469297107 * S_MntCard_Games  +    -0.19426389865388 *
3708232   +        S_MntMagazines  +     1.05555822830309 * S_NumCatalogPurchases
3708233   +          +     1.44433183987648 * S_NumDealsPurchases
3708234   +          +     0.94269055062206 * S_NumWebPurchases
3708235   +          +     1.22691543427541 * S_RANGE_Frq  +    -2.46883994067164 *
3708236   +        S_RANGE_Recency  +     1.24070387887364 * S_RANGE_average_purchase
3708237   +          +     1.86282445686393 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.04890469297107 * S_MntCard_Games + -0.19426389865388 *
S_MntMagazines + 1.05555822830309 * S_NumCatalogPurchases + 1.44433183987648 *
S_NumDealsPurchases + 0.94269055062206 * S_NumWebPurchases + 1.22691543427541 * S_RANGE_Frq +
-2.46883994067164 * S_RANGE_Recency + 1.24070387887364 * S_RANGE_average_purchase +
1.86282445686393 * S_RANGE_campaign_acceptance ;
3708238   +   H11  = H11  +     0.15817517718488 * Marital_StatusDivorced
3708239   +          +     0.43620652832651 * Marital_StatusMarried
3708240   +          +    -1.22365817802874 * Marital_StatusSingle
3708241   +          +     0.52166351189124 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.15817517718488 * Marital_StatusDivorced +
0.43620652832651 * Marital_StatusMarried + -1.22365817802874 * Marital_StatusSingle +
0.52166351189124 * Marital_StatusTogether ;
3708242   +   H12  = H12  +     1.78579377297235 * Marital_StatusDivorced
3708243   +          +    -0.08643619958798 * Marital_StatusMarried
3708244   +          +    -4.45378853044641 * Marital_StatusSingle
3708245   +          +     0.54836105424745 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 1.78579377297235 * Marital_StatusDivorced +
-0.08643619958798 * Marital_StatusMarried + -4.45378853044641 * Marital_StatusSingle +
0.54836105424745 * Marital_StatusTogether ;
3708246   +   H11  =     0.95894057010244 + H11 ;
MPRINT(SCORETABLES):   H11 = 0.95894057010244 + H11 ;
3708247   +   H12  =    -1.17597151055178 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.17597151055178 + H12 ;
3708248   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3708249   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3708250   +END;
MPRINT(SCORETABLES):   END;
3708251   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708252   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3708253   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3708254   +END;
MPRINT(SCORETABLES):   END;
3708255   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708256   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3708257   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708258   +
3708259   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3708260   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3708261   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708262   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3708263   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3708264   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708265   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3708266   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708267   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708268   +end;
MPRINT(SCORETABLES):   end;
3708269   +else do;
MPRINT(SCORETABLES):   else do;
3708270   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3708271   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3708272   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3708273   +   end;
MPRINT(SCORETABLES):   end;
3708274   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3708275   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3708276   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3708277   +   end;
MPRINT(SCORETABLES):   end;
3708278   +   else do;
MPRINT(SCORETABLES):   else do;
3708279   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708280   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708281   +   end;
MPRINT(SCORETABLES):   end;
3708282   +end;
MPRINT(SCORETABLES):   end;
3708283   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708284   +   P_DepVar1  =    -7.65246913429393 * H11  +     4.86565784899913 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -7.65246913429393 * H11 + 4.86565784899913 * H12 ;
3708285   +   P_DepVar1  =    -2.49866065629667 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.49866065629667 + P_DepVar1 ;
3708286   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3708287   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3708288   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3708289   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3708290   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3708291   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3708292   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3708293   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3708294   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3708295   +END;
MPRINT(SCORETABLES):   END;
3708296   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708297   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3708298   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3708299   +END;
MPRINT(SCORETABLES):   END;
3708300   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3708301   +   P_DepVar1  =     0.13738019169329;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13738019169329;
3708302   +   P_DepVar0  =      0.8626198083067;
MPRINT(SCORETABLES):   P_DepVar0 = 0.8626198083067;
3708303   +END;
MPRINT(SCORETABLES):   END;
3708304   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3708305   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3708306   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3708307   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3708308   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3708309   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3708310   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3708311   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708312   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3708313   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708314   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3708315   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3708316   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3708317   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3708318   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3708319   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3708320   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3708321   +END;
MPRINT(SCORETABLES):   END;
3708322   +********************************;
MPRINT(SCORETABLES):   ********************************;
3708323   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3708324   +********************************;
MPRINT(SCORETABLES):   ********************************;
3708325   +drop
3708326   +S_MntCard_Games
3708327   +S_MntMagazines
3708328   +S_NumCatalogPurchases
3708329   +S_NumDealsPurchases
3708330   +S_NumWebPurchases
3708331   +S_RANGE_Frq
3708332   +S_RANGE_Recency
3708333   +S_RANGE_average_purchase
3708334   +S_RANGE_campaign_acceptance
3708335   +H11
3708336   +H12
3708337   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3708338   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708339   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3708340   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708341   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708342   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3708343   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708344   +end;
MPRINT(SCORETABLES):   end;
3708345   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708346   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3708347   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708348   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708349   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3708350   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708351   +if (cv_var =8)  then do;
MPRINT(SCORETABLES):   if (cv_var =8) then do;
3708352   +_XVAL_=8;
MPRINT(SCORETABLES):   _XVAL_=8;
3708353   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708354   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3708355   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708356   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708357   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3708358   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708359   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708360   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3708361   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708362   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3708363   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3708364   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3708365   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3708366   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3708367   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3708368   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3708369   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3708370   +LENGTH _WARN_ $4
3708371   +      F_DepVar  $ 12
3708372   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3708373   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3708374   +
3708375   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3708376   +
3708377   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3708378   +
3708379   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3708380   +
3708381   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3708382   +
3708383   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3708384   +
3708385   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3708386   +
3708387   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3708388   +
3708389   +      label S_RANGE_campaign_acceptance =
3708390   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3708391   +
3708392   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3708393   +
3708394   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3708395   +
3708396   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3708397   +
3708398   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3708399   +
3708400   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3708401   +
3708402   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3708403   +
3708404   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3708405   +
3708406   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708407   +
3708408   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3708409   +
3708410   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3708411   +
3708412   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3708413   +
3708414   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3708415   +
3708416   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3708417   +
3708418   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3708419   +
3708420   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3708421   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3708422   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3708423   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3708424   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3708425   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3708426   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3708427   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3708428   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3708429   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708430   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708431   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708432   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708433   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3708434   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708435   +end;
MPRINT(SCORETABLES):   end;
3708436   +else do;
MPRINT(SCORETABLES):   else do;
3708437   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3708438   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3708439   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708440   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3708441   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3708442   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3708443   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3708444   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3708445   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708446   +         end;
MPRINT(SCORETABLES):   end;
3708447   +         else do;
MPRINT(SCORETABLES):   else do;
3708448   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3708449   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3708450   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708451   +            end;
MPRINT(SCORETABLES):   end;
3708452   +         end;
MPRINT(SCORETABLES):   end;
3708453   +      end;
MPRINT(SCORETABLES):   end;
3708454   +      else do;
MPRINT(SCORETABLES):   else do;
3708455   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3708456   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3708457   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708458   +         end;
MPRINT(SCORETABLES):   end;
3708459   +      end;
MPRINT(SCORETABLES):   end;
3708460   +   end;
MPRINT(SCORETABLES):   end;
3708461   +   else do;
MPRINT(SCORETABLES):   else do;
3708462   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3708463   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3708464   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708465   +      end;
MPRINT(SCORETABLES):   end;
3708466   +      else do;
MPRINT(SCORETABLES):   else do;
3708467   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3708468   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3708469   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3708470   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3708471   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3708472   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708473   +         end;
MPRINT(SCORETABLES):   end;
3708474   +      end;
MPRINT(SCORETABLES):   end;
3708475   +   end;
MPRINT(SCORETABLES):   end;
3708476   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3708477   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708478   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708479   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708480   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708481   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3708482   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708483   +   end;
MPRINT(SCORETABLES):   end;
3708484   +end;
MPRINT(SCORETABLES):   end;
3708485   +
3708486   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708487   +*** Checking missing input Interval
3708488   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3708489   +
3708490   +IF NMISS(
3708491   +   MntCard_Games ,
3708492   +   MntMagazines ,
3708493   +   NumCatalogPurchases ,
3708494   +   NumDealsPurchases ,
3708495   +   NumWebPurchases ,
3708496   +   RANGE_Frq ,
3708497   +   RANGE_Recency ,
3708498   +   RANGE_average_purchase ,
3708499   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3708500   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3708501   +
3708502   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708503   +END;
MPRINT(SCORETABLES):   END;
3708504   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708505   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3708506   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708507   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708508   +   S_MntCard_Games  =    -2.33950227436932 +     6.65712390385437 *
3708509   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33950227436932 + 6.65712390385437 * MntCard_Games ;
3708510   +   S_MntMagazines  =    -0.83466686251083 +     17.3698649555885 *
3708511   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83466686251083 + 17.3698649555885 * MntMagazines ;
3708512   +   S_NumCatalogPurchases  =    -3.09636695512595 +     13.4385887478015 *
3708513   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09636695512595 + 13.4385887478015 *
NumCatalogPurchases ;
3708514   +   S_NumDealsPurchases  =    -1.41358461903555 +     11.2154452130362 *
3708515   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41358461903555 + 11.2154452130362 *
NumDealsPurchases ;
3708516   +   S_NumWebPurchases  =    -5.24139426273934 +     12.2674503522564 *
3708517   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.24139426273934 + 12.2674503522564 *
NumWebPurchases ;
3708518   +   S_RANGE_Frq  =    -1.35883301995252 +     4.22555717598823 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35883301995252 + 4.22555717598823 * RANGE_Frq ;
3708519   +   S_RANGE_Recency  =    -1.65104270136691 +     3.33981325553982 *
3708520   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65104270136691 + 3.33981325553982 * RANGE_Recency ;
3708521   +   S_RANGE_average_purchase  =    -1.03067522130225 +     5.10790958423126 *
3708522   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03067522130225 + 5.10790958423126 *
RANGE_average_purchase ;
3708523   +   S_RANGE_campaign_acceptance
3708524   +          =    -0.47020366980134 +     5.86120546129676 *
3708525   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47020366980134 + 5.86120546129676 *
RANGE_campaign_acceptance ;
3708526   +END;
MPRINT(SCORETABLES):   END;
3708527   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708528   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3708529   +   ELSE S_MntCard_Games  =    -2.33950227436932 +     6.65712390385437 *
3708530   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33950227436932 + 6.65712390385437 *
MntCard_Games ;
3708531   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3708532   +   ELSE S_MntMagazines  =    -0.83466686251083 +     17.3698649555885 *
3708533   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83466686251083 + 17.3698649555885 *
MntMagazines ;
3708534   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3708535   +   ELSE S_NumCatalogPurchases
3708536   +          =    -3.09636695512595 +     13.4385887478015 * NumCatalogPurchases
3708537   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09636695512595 + 13.4385887478015 *
NumCatalogPurchases ;
3708538   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3708539   +   ELSE S_NumDealsPurchases  =    -1.41358461903555 +     11.2154452130362 *
3708540   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41358461903555 + 11.2154452130362 *
NumDealsPurchases ;
3708541   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3708542   +   ELSE S_NumWebPurchases  =    -5.24139426273934 +     12.2674503522564 *
3708543   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.24139426273934 + 12.2674503522564 *
NumWebPurchases ;
3708544   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3708545   +   ELSE S_RANGE_Frq  =    -1.35883301995252 +     4.22555717598823 * RANGE_Frq
3708546   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35883301995252 + 4.22555717598823 * RANGE_Frq ;
3708547   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3708548   +   ELSE S_RANGE_Recency  =    -1.65104270136691 +     3.33981325553982 *
3708549   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65104270136691 + 3.33981325553982 *
RANGE_Recency ;
3708550   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3708551   +   ELSE S_RANGE_average_purchase
3708552   +          =    -1.03067522130225 +     5.10790958423126 *
3708553   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03067522130225 + 5.10790958423126 *
RANGE_average_purchase ;
3708554   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3708555   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3708556   +   ELSE S_RANGE_campaign_acceptance
3708557   +          =    -0.47020366980134 +     5.86120546129676 *
3708558   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47020366980134 + 5.86120546129676
* RANGE_campaign_acceptance ;
3708559   +END;
MPRINT(SCORETABLES):   END;
3708560   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708561   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3708562   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708563   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708564   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3708565   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708566   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708567   +   H11  =    -0.24922730400407 * S_MntCard_Games  +     0.02815075674521 *
3708568   +        S_MntMagazines  +    -0.22980775303204 * S_NumCatalogPurchases
3708569   +          +     -0.2369549179888 * S_NumDealsPurchases
3708570   +          +    -0.10433706247808 * S_NumWebPurchases
3708571   +          +      0.0236364076732 * S_RANGE_Frq  +     0.50408834965467 *
3708572   +        S_RANGE_Recency  +    -0.00779558504302 * S_RANGE_average_purchase
3708573   +          +    -0.29900719855069 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.24922730400407 * S_MntCard_Games + 0.02815075674521 *
S_MntMagazines + -0.22980775303204 * S_NumCatalogPurchases + -0.2369549179888 *
S_NumDealsPurchases + -0.10433706247808 * S_NumWebPurchases + 0.0236364076732 * S_RANGE_Frq +
0.50408834965467 * S_RANGE_Recency + -0.00779558504302 * S_RANGE_average_purchase +
-0.29900719855069 * S_RANGE_campaign_acceptance ;
3708574   +   H12  =     2.05167715866249 * S_MntCard_Games  +     0.72800483653863 *
3708575   +        S_MntMagazines  +     1.53302018836813 * S_NumCatalogPurchases
3708576   +          +     0.76812249670326 * S_NumDealsPurchases
3708577   +          +      1.7121978574676 * S_NumWebPurchases
3708578   +          +     2.79047407910644 * S_RANGE_Frq  +    -1.66056190705942 *
3708579   +        S_RANGE_Recency  +      1.3234966784806 * S_RANGE_average_purchase
3708580   +          +     1.58791041348629 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.05167715866249 * S_MntCard_Games + 0.72800483653863 *
S_MntMagazines + 1.53302018836813 * S_NumCatalogPurchases + 0.76812249670326 *
S_NumDealsPurchases + 1.7121978574676 * S_NumWebPurchases + 2.79047407910644 * S_RANGE_Frq +
-1.66056190705942 * S_RANGE_Recency + 1.3234966784806 * S_RANGE_average_purchase +
1.58791041348629 * S_RANGE_campaign_acceptance ;
3708581   +   H11  = H11  +    -0.01652849546119 * Marital_StatusDivorced
3708582   +          +     0.31759910480532 * Marital_StatusMarried
3708583   +          +    -0.27706097767685 * Marital_StatusSingle
3708584   +          +     0.39527898766418 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.01652849546119 * Marital_StatusDivorced +
0.31759910480532 * Marital_StatusMarried + -0.27706097767685 * Marital_StatusSingle +
0.39527898766418 * Marital_StatusTogether ;
3708585   +   H12  = H12  +     1.50921410859283 * Marital_StatusDivorced
3708586   +          +     2.91948488076424 * Marital_StatusMarried
3708587   +          +    -3.09732252215406 * Marital_StatusSingle
3708588   +          +     4.96547980567187 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 1.50921410859283 * Marital_StatusDivorced +
2.91948488076424 * Marital_StatusMarried + -3.09732252215406 * Marital_StatusSingle +
4.96547980567187 * Marital_StatusTogether ;
3708589   +   H11  =     0.62855547372843 + H11 ;
MPRINT(SCORETABLES):   H11 = 0.62855547372843 + H11 ;
3708590   +   H12  =    -1.91081199099149 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.91081199099149 + H12 ;
3708591   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3708592   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3708593   +END;
MPRINT(SCORETABLES):   END;
3708594   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708595   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3708596   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3708597   +END;
MPRINT(SCORETABLES):   END;
3708598   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708599   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3708600   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708601   +
3708602   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3708603   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3708604   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708605   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3708606   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3708607   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708608   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3708609   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708610   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708611   +end;
MPRINT(SCORETABLES):   end;
3708612   +else do;
MPRINT(SCORETABLES):   else do;
3708613   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3708614   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3708615   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3708616   +   end;
MPRINT(SCORETABLES):   end;
3708617   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3708618   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3708619   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3708620   +   end;
MPRINT(SCORETABLES):   end;
3708621   +   else do;
MPRINT(SCORETABLES):   else do;
3708622   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708623   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708624   +   end;
MPRINT(SCORETABLES):   end;
3708625   +end;
MPRINT(SCORETABLES):   end;
3708626   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708627   +   P_DepVar1  =    -9.05664946005689 * H11  +     2.54491810655183 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -9.05664946005689 * H11 + 2.54491810655183 * H12 ;
3708628   +   P_DepVar1  =    -1.69735400813138 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.69735400813138 + P_DepVar1 ;
3708629   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3708630   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3708631   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3708632   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3708633   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3708634   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3708635   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3708636   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3708637   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3708638   +END;
MPRINT(SCORETABLES):   END;
3708639   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708640   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3708641   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3708642   +END;
MPRINT(SCORETABLES):   END;
3708643   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3708644   +   P_DepVar1  =     0.13654984069185;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13654984069185;
3708645   +   P_DepVar0  =     0.86345015930814;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86345015930814;
3708646   +END;
MPRINT(SCORETABLES):   END;
3708647   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3708648   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3708649   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3708650   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3708651   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3708652   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3708653   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3708654   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708655   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3708656   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708657   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3708658   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3708659   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3708660   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3708661   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3708662   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3708663   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3708664   +END;
MPRINT(SCORETABLES):   END;
3708665   +********************************;
MPRINT(SCORETABLES):   ********************************;
3708666   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3708667   +********************************;
MPRINT(SCORETABLES):   ********************************;
3708668   +drop
3708669   +S_MntCard_Games
3708670   +S_MntMagazines
3708671   +S_NumCatalogPurchases
3708672   +S_NumDealsPurchases
3708673   +S_NumWebPurchases
3708674   +S_RANGE_Frq
3708675   +S_RANGE_Recency
3708676   +S_RANGE_average_purchase
3708677   +S_RANGE_campaign_acceptance
3708678   +H11
3708679   +H12
3708680   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3708681   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708682   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3708683   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708684   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708685   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3708686   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708687   +end;
MPRINT(SCORETABLES):   end;
3708688   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708689   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3708690   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708691   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708692   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3708693   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708694   +if (cv_var =9)  then do;
MPRINT(SCORETABLES):   if (cv_var =9) then do;
3708695   +_XVAL_=9;
MPRINT(SCORETABLES):   _XVAL_=9;
3708696   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3708697   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3708698   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3708699   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3708700   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3708701   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3708702   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708703   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3708704   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3708705   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3708706   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3708707   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3708708   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3708709   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3708710   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3708711   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3708712   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3708713   +LENGTH _WARN_ $4
3708714   +      F_DepVar  $ 12
3708715   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3708716   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3708717   +
3708718   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3708719   +
3708720   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3708721   +
3708722   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3708723   +
3708724   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3708725   +
3708726   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3708727   +
3708728   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3708729   +
3708730   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3708731   +
3708732   +      label S_RANGE_campaign_acceptance =
3708733   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3708734   +
3708735   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3708736   +
3708737   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3708738   +
3708739   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3708740   +
3708741   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3708742   +
3708743   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3708744   +
3708745   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3708746   +
3708747   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3708748   +
3708749   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708750   +
3708751   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3708752   +
3708753   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3708754   +
3708755   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3708756   +
3708757   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3708758   +
3708759   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3708760   +
3708761   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3708762   +
3708763   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3708764   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3708765   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3708766   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3708767   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3708768   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3708769   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3708770   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3708771   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3708772   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708773   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708774   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708775   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708776   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3708777   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708778   +end;
MPRINT(SCORETABLES):   end;
3708779   +else do;
MPRINT(SCORETABLES):   else do;
3708780   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3708781   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3708782   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708783   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3708784   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3708785   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3708786   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3708787   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3708788   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708789   +         end;
MPRINT(SCORETABLES):   end;
3708790   +         else do;
MPRINT(SCORETABLES):   else do;
3708791   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3708792   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3708793   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708794   +            end;
MPRINT(SCORETABLES):   end;
3708795   +         end;
MPRINT(SCORETABLES):   end;
3708796   +      end;
MPRINT(SCORETABLES):   end;
3708797   +      else do;
MPRINT(SCORETABLES):   else do;
3708798   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3708799   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3708800   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708801   +         end;
MPRINT(SCORETABLES):   end;
3708802   +      end;
MPRINT(SCORETABLES):   end;
3708803   +   end;
MPRINT(SCORETABLES):   end;
3708804   +   else do;
MPRINT(SCORETABLES):   else do;
3708805   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3708806   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3708807   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708808   +      end;
MPRINT(SCORETABLES):   end;
3708809   +      else do;
MPRINT(SCORETABLES):   else do;
3708810   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3708811   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3708812   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3708813   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3708814   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3708815   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3708816   +         end;
MPRINT(SCORETABLES):   end;
3708817   +      end;
MPRINT(SCORETABLES):   end;
3708818   +   end;
MPRINT(SCORETABLES):   end;
3708819   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3708820   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3708821   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3708822   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3708823   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3708824   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3708825   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708826   +   end;
MPRINT(SCORETABLES):   end;
3708827   +end;
MPRINT(SCORETABLES):   end;
3708828   +
3708829   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708830   +*** Checking missing input Interval
3708831   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3708832   +
3708833   +IF NMISS(
3708834   +   MntCard_Games ,
3708835   +   MntMagazines ,
3708836   +   NumCatalogPurchases ,
3708837   +   NumDealsPurchases ,
3708838   +   NumWebPurchases ,
3708839   +   RANGE_Frq ,
3708840   +   RANGE_Recency ,
3708841   +   RANGE_average_purchase ,
3708842   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3708843   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3708844   +
3708845   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3708846   +END;
MPRINT(SCORETABLES):   END;
3708847   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708848   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3708849   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708850   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708851   +   S_MntCard_Games  =    -2.33314274769512 +     6.67179657357056 *
3708852   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33314274769512 + 6.67179657357056 * MntCard_Games ;
3708853   +   S_MntMagazines  =    -0.83238173374504 +     17.3354990423092 *
3708854   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83238173374504 + 17.3354990423092 * MntMagazines ;
3708855   +   S_NumCatalogPurchases  =    -3.11784673319478 +     13.5128642370895 *
3708856   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11784673319478 + 13.5128642370895 *
NumCatalogPurchases ;
3708857   +   S_NumDealsPurchases  =    -1.40423934719382 +     11.0682329216304 *
3708858   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40423934719382 + 11.0682329216304 *
NumDealsPurchases ;
3708859   +   S_NumWebPurchases  =    -5.23177621286053 +     12.2542764025054 *
3708860   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23177621286053 + 12.2542764025054 *
NumWebPurchases ;
3708861   +   S_RANGE_Frq  =    -1.37347987881122 +     4.24549002989316 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37347987881122 + 4.24549002989316 * RANGE_Frq ;
3708862   +   S_RANGE_Recency  =    -1.65922219428802 +     3.33060375764365 *
3708863   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65922219428802 + 3.33060375764365 * RANGE_Recency ;
3708864   +   S_RANGE_average_purchase  =    -1.04145396929876 +     5.18548087847999 *
3708865   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04145396929876 + 5.18548087847999 *
RANGE_average_purchase ;
3708866   +   S_RANGE_campaign_acceptance
3708867   +          =    -0.48208691472615 +     5.76655197176545 *
3708868   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.48208691472615 + 5.76655197176545 *
RANGE_campaign_acceptance ;
3708869   +END;
MPRINT(SCORETABLES):   END;
3708870   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708871   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3708872   +   ELSE S_MntCard_Games  =    -2.33314274769512 +     6.67179657357056 *
3708873   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33314274769512 + 6.67179657357056 *
MntCard_Games ;
3708874   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3708875   +   ELSE S_MntMagazines  =    -0.83238173374504 +     17.3354990423092 *
3708876   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83238173374504 + 17.3354990423092 *
MntMagazines ;
3708877   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3708878   +   ELSE S_NumCatalogPurchases
3708879   +          =    -3.11784673319478 +     13.5128642370895 * NumCatalogPurchases
3708880   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11784673319478 + 13.5128642370895 *
NumCatalogPurchases ;
3708881   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3708882   +   ELSE S_NumDealsPurchases  =    -1.40423934719382 +     11.0682329216304 *
3708883   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40423934719382 + 11.0682329216304 *
NumDealsPurchases ;
3708884   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3708885   +   ELSE S_NumWebPurchases  =    -5.23177621286053 +     12.2542764025054 *
3708886   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23177621286053 + 12.2542764025054 *
NumWebPurchases ;
3708887   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3708888   +   ELSE S_RANGE_Frq  =    -1.37347987881122 +     4.24549002989316 * RANGE_Frq
3708889   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37347987881122 + 4.24549002989316 * RANGE_Frq ;
3708890   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3708891   +   ELSE S_RANGE_Recency  =    -1.65922219428802 +     3.33060375764365 *
3708892   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65922219428802 + 3.33060375764365 *
RANGE_Recency ;
3708893   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3708894   +   ELSE S_RANGE_average_purchase
3708895   +          =    -1.04145396929876 +     5.18548087847999 *
3708896   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04145396929876 + 5.18548087847999 *
RANGE_average_purchase ;
3708897   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3708898   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3708899   +   ELSE S_RANGE_campaign_acceptance
3708900   +          =    -0.48208691472615 +     5.76655197176545 *
3708901   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.48208691472615 + 5.76655197176545
* RANGE_campaign_acceptance ;
3708902   +END;
MPRINT(SCORETABLES):   END;
3708903   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708904   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3708905   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708906   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708907   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3708908   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708909   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708910   +   H11  =    -0.71120716020402 * S_MntCard_Games  +     0.08212973241532 *
3708911   +        S_MntMagazines  +    -0.61875133748213 * S_NumCatalogPurchases
3708912   +          +    -0.49368369021357 * S_NumDealsPurchases
3708913   +          +    -0.79445125853009 * S_NumWebPurchases
3708914   +          +     -0.1360008231574 * S_RANGE_Frq  +     1.08230459978838 *
3708915   +        S_RANGE_Recency  +     0.28561173662094 * S_RANGE_average_purchase
3708916   +          +    -0.69577065024142 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.71120716020402 * S_MntCard_Games + 0.08212973241532 *
S_MntMagazines + -0.61875133748213 * S_NumCatalogPurchases + -0.49368369021357 *
S_NumDealsPurchases + -0.79445125853009 * S_NumWebPurchases + -0.1360008231574 * S_RANGE_Frq +
1.08230459978838 * S_RANGE_Recency + 0.28561173662094 * S_RANGE_average_purchase +
-0.69577065024142 * S_RANGE_campaign_acceptance ;
3708917   +   H12  =    -0.15258858083861 * S_MntCard_Games  +    -0.02650815981929 *
3708918   +        S_MntMagazines  +    -0.13144634282616 * S_NumCatalogPurchases
3708919   +          +    -0.19762420124392 * S_NumDealsPurchases
3708920   +          +      0.0725529578303 * S_NumWebPurchases
3708921   +          +    -0.10127790367879 * S_RANGE_Frq  +     0.36892292336497 *
3708922   +        S_RANGE_Recency  +    -0.17443592257851 * S_RANGE_average_purchase
3708923   +          +    -0.21119456915565 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.15258858083861 * S_MntCard_Games + -0.02650815981929 *
S_MntMagazines + -0.13144634282616 * S_NumCatalogPurchases + -0.19762420124392 *
S_NumDealsPurchases + 0.0725529578303 * S_NumWebPurchases + -0.10127790367879 * S_RANGE_Frq +
0.36892292336497 * S_RANGE_Recency + -0.17443592257851 * S_RANGE_average_purchase +
-0.21119456915565 * S_RANGE_campaign_acceptance ;
3708924   +   H11  = H11  +     0.12944400789456 * Marital_StatusDivorced
3708925   +          +    -0.01774553244681 * Marital_StatusMarried
3708926   +          +      0.3692457644085 * Marital_StatusSingle
3708927   +          +    -0.29318628359981 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.12944400789456 * Marital_StatusDivorced +
-0.01774553244681 * Marital_StatusMarried + 0.3692457644085 * Marital_StatusSingle +
-0.29318628359981 * Marital_StatusTogether ;
3708928   +   H12  = H12  +    -0.25900800099706 * Marital_StatusDivorced
3708929   +          +     0.20753922970799 * Marital_StatusMarried
3708930   +          +     -0.3205409886965 * Marital_StatusSingle
3708931   +          +     0.55731339717143 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.25900800099706 * Marital_StatusDivorced +
0.20753922970799 * Marital_StatusMarried + -0.3205409886965 * Marital_StatusSingle +
0.55731339717143 * Marital_StatusTogether ;
3708932   +   H11  =     2.13550206994422 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.13550206994422 + H11 ;
3708933   +   H12  =     1.20731672701986 + H12 ;
MPRINT(SCORETABLES):   H12 = 1.20731672701986 + H12 ;
3708934   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3708935   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3708936   +END;
MPRINT(SCORETABLES):   END;
3708937   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708938   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3708939   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3708940   +END;
MPRINT(SCORETABLES):   END;
3708941   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708942   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3708943   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708944   +
3708945   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3708946   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3708947   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3708948   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3708949   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3708950   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3708951   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3708952   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708953   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708954   +end;
MPRINT(SCORETABLES):   end;
3708955   +else do;
MPRINT(SCORETABLES):   else do;
3708956   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3708957   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3708958   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3708959   +   end;
MPRINT(SCORETABLES):   end;
3708960   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3708961   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3708962   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3708963   +   end;
MPRINT(SCORETABLES):   end;
3708964   +   else do;
MPRINT(SCORETABLES):   else do;
3708965   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3708966   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3708967   +   end;
MPRINT(SCORETABLES):   end;
3708968   +end;
MPRINT(SCORETABLES):   end;
3708969   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3708970   +   P_DepVar1  =    -4.50425251535332 * H11  +    -9.74243877847253 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.50425251535332 * H11 + -9.74243877847253 * H12 ;
3708971   +   P_DepVar1  =     6.06707524711654 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 6.06707524711654 + P_DepVar1 ;
3708972   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3708973   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3708974   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3708975   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3708976   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3708977   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3708978   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3708979   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3708980   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3708981   +END;
MPRINT(SCORETABLES):   END;
3708982   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3708983   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3708984   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3708985   +END;
MPRINT(SCORETABLES):   END;
3708986   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3708987   +   P_DepVar1  =     0.13696747595052;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13696747595052;
3708988   +   P_DepVar0  =     0.86303252404947;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86303252404947;
3708989   +END;
MPRINT(SCORETABLES):   END;
3708990   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3708991   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3708992   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3708993   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3708994   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3708995   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3708996   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3708997   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3708998   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3708999   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709000   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3709001   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3709002   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3709003   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3709004   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3709005   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3709006   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3709007   +END;
MPRINT(SCORETABLES):   END;
3709008   +********************************;
MPRINT(SCORETABLES):   ********************************;
3709009   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3709010   +********************************;
MPRINT(SCORETABLES):   ********************************;
3709011   +drop
3709012   +S_MntCard_Games
3709013   +S_MntMagazines
3709014   +S_NumCatalogPurchases
3709015   +S_NumDealsPurchases
3709016   +S_NumWebPurchases
3709017   +S_RANGE_Frq
3709018   +S_RANGE_Recency
3709019   +S_RANGE_average_purchase
3709020   +S_RANGE_campaign_acceptance
3709021   +H11
3709022   +H12
3709023   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3709024   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3709025   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3709026   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3709027   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3709028   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3709029   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3709030   +end;
MPRINT(SCORETABLES):   end;
3709031   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3709032   +* Grp9: StartGroup;
MPRINT(SCORETABLES):   * Grp9: StartGroup;
3709033   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3709034   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3709035   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3709036   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3709037   +if (cv_var =10)  then do;
MPRINT(SCORETABLES):   if (cv_var =10) then do;
3709038   +_XVAL_=10;
MPRINT(SCORETABLES):   _XVAL_=10;
3709039   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3709040   +* Neural: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural: NeuralNetwork;
3709041   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3709042   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3709043   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3709044   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3709045   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3709046   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3709047   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3709048   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3709049   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3709050   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3709051   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3709052   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3709053   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3709054   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3709055   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3709056   +LENGTH _WARN_ $4
3709057   +      F_DepVar  $ 12
3709058   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3709059   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3709060   +
3709061   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3709062   +
3709063   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3709064   +
3709065   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3709066   +
3709067   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3709068   +
3709069   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3709070   +
3709071   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3709072   +
3709073   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3709074   +
3709075   +      label S_RANGE_campaign_acceptance =
3709076   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3709077   +
3709078   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3709079   +
3709080   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3709081   +
3709082   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3709083   +
3709084   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3709085   +
3709086   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3709087   +
3709088   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3709089   +
3709090   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3709091   +
3709092   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3709093   +
3709094   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3709095   +
3709096   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3709097   +
3709098   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3709099   +
3709100   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3709101   +
3709102   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3709103   +
3709104   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3709105   +
3709106   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3709107   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3709108   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3709109   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3709110   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3709111   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3709112   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3709113   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3709114   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3709115   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3709116   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3709117   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3709118   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3709119   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3709120   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3709121   +end;
MPRINT(SCORETABLES):   end;
3709122   +else do;
MPRINT(SCORETABLES):   else do;
3709123   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3709124   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3709125   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3709126   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3709127   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3709128   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3709129   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3709130   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3709131   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3709132   +         end;
MPRINT(SCORETABLES):   end;
3709133   +         else do;
MPRINT(SCORETABLES):   else do;
3709134   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3709135   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3709136   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3709137   +            end;
MPRINT(SCORETABLES):   end;
3709138   +         end;
MPRINT(SCORETABLES):   end;
3709139   +      end;
MPRINT(SCORETABLES):   end;
3709140   +      else do;
MPRINT(SCORETABLES):   else do;
3709141   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3709142   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3709143   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3709144   +         end;
MPRINT(SCORETABLES):   end;
3709145   +      end;
MPRINT(SCORETABLES):   end;
3709146   +   end;
MPRINT(SCORETABLES):   end;
3709147   +   else do;
MPRINT(SCORETABLES):   else do;
3709148   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3709149   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3709150   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3709151   +      end;
MPRINT(SCORETABLES):   end;
3709152   +      else do;
MPRINT(SCORETABLES):   else do;
3709153   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3709154   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3709155   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3709156   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3709157   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3709158   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3709159   +         end;
MPRINT(SCORETABLES):   end;
3709160   +      end;
MPRINT(SCORETABLES):   end;
3709161   +   end;
MPRINT(SCORETABLES):   end;
3709162   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3709163   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3709164   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3709165   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3709166   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3709167   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3709168   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3709169   +   end;
MPRINT(SCORETABLES):   end;
3709170   +end;
MPRINT(SCORETABLES):   end;
3709171   +
3709172   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709173   +*** Checking missing input Interval
3709174   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3709175   +
3709176   +IF NMISS(
3709177   +   MntCard_Games ,
3709178   +   MntMagazines ,
3709179   +   NumCatalogPurchases ,
3709180   +   NumDealsPurchases ,
3709181   +   NumWebPurchases ,
3709182   +   RANGE_Frq ,
3709183   +   RANGE_Recency ,
3709184   +   RANGE_average_purchase ,
3709185   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3709186   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3709187   +
3709188   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3709189   +END;
MPRINT(SCORETABLES):   END;
3709190   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709191   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3709192   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709193   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3709194   +   S_MntCard_Games  =     -2.3096877138354 +     6.57755840195221 *
3709195   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3096877138354 + 6.57755840195221 * MntCard_Games ;
3709196   +   S_MntMagazines  =     -0.8369737491432 +     17.2830130412148 *
3709197   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8369737491432 + 17.2830130412148 * MntMagazines ;
3709198   +   S_NumCatalogPurchases  =    -3.09985723708487 +     13.3970675683324 *
3709199   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09985723708487 + 13.3970675683324 *
NumCatalogPurchases ;
3709200   +   S_NumDealsPurchases  =    -1.41382231764842 +     11.3441931972062 *
3709201   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41382231764842 + 11.3441931972062 *
NumDealsPurchases ;
3709202   +   S_NumWebPurchases  =    -5.22445934389058 +     12.2515403142681 *
3709203   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22445934389058 + 12.2515403142681 *
NumWebPurchases ;
3709204   +   S_RANGE_Frq  =    -1.36254258858387 +     4.18222572866181 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36254258858387 + 4.18222572866181 * RANGE_Frq ;
3709205   +   S_RANGE_Recency  =    -1.65033688267216 +     3.35772919633621 *
3709206   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65033688267216 + 3.35772919633621 * RANGE_Recency ;
3709207   +   S_RANGE_average_purchase  =    -1.03791953522712 +       5.142838510113 *
3709208   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03791953522712 + 5.142838510113 *
RANGE_average_purchase ;
3709209   +   S_RANGE_campaign_acceptance
3709210   +          =    -0.47367458512777 +     5.73133126824963 *
3709211   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47367458512777 + 5.73133126824963 *
RANGE_campaign_acceptance ;
3709212   +END;
MPRINT(SCORETABLES):   END;
3709213   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3709214   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3709215   +   ELSE S_MntCard_Games  =     -2.3096877138354 +     6.57755840195221 *
3709216   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3096877138354 + 6.57755840195221 *
MntCard_Games ;
3709217   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3709218   +   ELSE S_MntMagazines  =     -0.8369737491432 +     17.2830130412148 *
3709219   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8369737491432 + 17.2830130412148 *
MntMagazines ;
3709220   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3709221   +   ELSE S_NumCatalogPurchases
3709222   +          =    -3.09985723708487 +     13.3970675683324 * NumCatalogPurchases
3709223   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09985723708487 + 13.3970675683324 *
NumCatalogPurchases ;
3709224   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3709225   +   ELSE S_NumDealsPurchases  =    -1.41382231764842 +     11.3441931972062 *
3709226   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41382231764842 + 11.3441931972062 *
NumDealsPurchases ;
3709227   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3709228   +   ELSE S_NumWebPurchases  =    -5.22445934389058 +     12.2515403142681 *
3709229   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22445934389058 + 12.2515403142681 *
NumWebPurchases ;
3709230   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3709231   +   ELSE S_RANGE_Frq  =    -1.36254258858387 +     4.18222572866181 * RANGE_Frq
3709232   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36254258858387 + 4.18222572866181 * RANGE_Frq ;
3709233   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3709234   +   ELSE S_RANGE_Recency  =    -1.65033688267216 +     3.35772919633621 *
3709235   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65033688267216 + 3.35772919633621 *
RANGE_Recency ;
3709236   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3709237   +   ELSE S_RANGE_average_purchase
3709238   +          =    -1.03791953522712 +       5.142838510113 *
3709239   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03791953522712 + 5.142838510113 *
RANGE_average_purchase ;
3709240   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3709241   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3709242   +   ELSE S_RANGE_campaign_acceptance
3709243   +          =    -0.47367458512777 +     5.73133126824963 *
3709244   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47367458512777 + 5.73133126824963
* RANGE_campaign_acceptance ;
3709245   +END;
MPRINT(SCORETABLES):   END;
3709246   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709247   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3709248   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709249   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709250   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3709251   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709252   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3709253   +   H11  =     0.28691049469821 * S_MntCard_Games  +    -0.01257933116877 *
3709254   +        S_MntMagazines  +     0.24982243065732 * S_NumCatalogPurchases
3709255   +          +     0.19081533003078 * S_NumDealsPurchases
3709256   +          +     0.16004063752763 * S_NumWebPurchases
3709257   +          +     0.11364589575256 * S_RANGE_Frq  +    -0.47022001049759 *
3709258   +        S_RANGE_Recency  +     0.08136041426291 * S_RANGE_average_purchase
3709259   +          +     0.29860124814388 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.28691049469821 * S_MntCard_Games + -0.01257933116877 *
S_MntMagazines + 0.24982243065732 * S_NumCatalogPurchases + 0.19081533003078 *
S_NumDealsPurchases + 0.16004063752763 * S_NumWebPurchases + 0.11364589575256 * S_RANGE_Frq +
-0.47022001049759 * S_RANGE_Recency + 0.08136041426291 * S_RANGE_average_purchase +
0.29860124814388 * S_RANGE_campaign_acceptance ;
3709260   +   H12  =    -0.33233976235401 * S_MntCard_Games  +    -0.33053172330402 *
3709261   +        S_MntMagazines  +     0.62737052299262 * S_NumCatalogPurchases
3709262   +          +    -1.71578240297147 * S_NumDealsPurchases
3709263   +          +      1.8640336793256 * S_NumWebPurchases
3709264   +          +     2.93724165829982 * S_RANGE_Frq  +      1.0882176886732 *
3709265   +        S_RANGE_Recency  +      0.8845247175819 * S_RANGE_average_purchase
3709266   +          +    -0.23819199135842 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.33233976235401 * S_MntCard_Games + -0.33053172330402 *
S_MntMagazines + 0.62737052299262 * S_NumCatalogPurchases + -1.71578240297147 *
S_NumDealsPurchases + 1.8640336793256 * S_NumWebPurchases + 2.93724165829982 * S_RANGE_Frq +
1.0882176886732 * S_RANGE_Recency + 0.8845247175819 * S_RANGE_average_purchase +
-0.23819199135842 * S_RANGE_campaign_acceptance ;
3709267   +   H11  = H11  +    -0.04059364239357 * Marital_StatusDivorced
3709268   +          +      -0.110466262538 * Marital_StatusMarried
3709269   +          +    -0.05576834620038 * Marital_StatusSingle
3709270   +          +    -0.12080784518879 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.04059364239357 * Marital_StatusDivorced +
-0.110466262538 * Marital_StatusMarried + -0.05576834620038 * Marital_StatusSingle +
-0.12080784518879 * Marital_StatusTogether ;
3709271   +   H12  = H12  +    -5.13102553665281 * Marital_StatusDivorced
3709272   +          +     1.82506146395071 * Marital_StatusMarried
3709273   +          +    -8.15247926755136 * Marital_StatusSingle
3709274   +          +     4.25770740100075 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -5.13102553665281 * Marital_StatusDivorced +
1.82506146395071 * Marital_StatusMarried + -8.15247926755136 * Marital_StatusSingle +
4.25770740100075 * Marital_StatusTogether ;
3709275   +   H11  =    -0.75763695117585 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.75763695117585 + H11 ;
3709276   +   H12  =    -2.77627505623995 + H12 ;
MPRINT(SCORETABLES):   H12 = -2.77627505623995 + H12 ;
3709277   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3709278   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3709279   +END;
MPRINT(SCORETABLES):   END;
3709280   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3709281   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3709282   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3709283   +END;
MPRINT(SCORETABLES):   END;
3709284   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709285   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3709286   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709287   +
3709288   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3709289   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3709290   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3709291   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3709292   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3709293   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3709294   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3709295   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3709296   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3709297   +end;
MPRINT(SCORETABLES):   end;
3709298   +else do;
MPRINT(SCORETABLES):   else do;
3709299   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3709300   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3709301   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3709302   +   end;
MPRINT(SCORETABLES):   end;
3709303   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3709304   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3709305   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3709306   +   end;
MPRINT(SCORETABLES):   end;
3709307   +   else do;
MPRINT(SCORETABLES):   else do;
3709308   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3709309   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3709310   +   end;
MPRINT(SCORETABLES):   end;
3709311   +end;
MPRINT(SCORETABLES):   end;
3709312   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3709313   +   P_DepVar1  =     10.6266873577129 * H11  +    -2.40465010559258 * H12 ;
MPRINT(SCORETABLES):   P_DepVar1 = 10.6266873577129 * H11 + -2.40465010559258 * H12 ;
3709314   +   P_DepVar1  =    -0.68345592936869 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.68345592936869 + P_DepVar1 ;
3709315   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3709316   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3709317   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3709318   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3709319   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3709320   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3709321   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3709322   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3709323   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3709324   +END;
MPRINT(SCORETABLES):   END;
3709325   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3709326   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3709327   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3709328   +END;
MPRINT(SCORETABLES):   END;
3709329   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3709330   +   P_DepVar1  =     0.14010989010989;
MPRINT(SCORETABLES):   P_DepVar1 = 0.14010989010989;
3709331   +   P_DepVar0  =     0.85989010989011;
MPRINT(SCORETABLES):   P_DepVar0 = 0.85989010989011;
3709332   +END;
MPRINT(SCORETABLES):   END;
3709333   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3709334   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3709335   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3709336   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3709337   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3709338   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3709339   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3709340   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709341   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3709342   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3709343   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3709344   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3709345   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3709346   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3709347   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3709348   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3709349   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3709350   +END;
MPRINT(SCORETABLES):   END;
3709351   +********************************;
MPRINT(SCORETABLES):   ********************************;
3709352   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3709353   +********************************;
MPRINT(SCORETABLES):   ********************************;
3709354   +drop
3709355   +S_MntCard_Games
3709356   +S_MntMagazines
3709357   +S_NumCatalogPurchases
3709358   +S_NumDealsPurchases
3709359   +S_NumWebPurchases
3709360   +S_RANGE_Frq
3709361   +S_RANGE_Recency
3709362   +S_RANGE_average_purchase
3709363   +S_RANGE_campaign_acceptance
3709364   +H11
3709365   +H12
3709366   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 ;
3709367   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3709368   +* EndGrp10: EndGroup;
MPRINT(SCORETABLES):   * EndGrp10: EndGroup;
3709369   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3709370   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3709371   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3709372   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3709373   +end;
MPRINT(SCORETABLES):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
 
MPRINT(POSTLOOP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End POSTLOOP: EndGrp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3709374    *------------------------------------------------------------*;
3709375    * End POSTLOOP: EndGrp10;
3709376    *------------------------------------------------------------*;
3709377
 
NOTE: There were 10 observations read from the data set EMWS1.GRP9_EMLOOPINFO.
NOTE: The data set EMWS1.ENDGRP10_EMLOOPINFO has 10 observations and 3 variables.
3709378    proc print data=EMWS1.EndGrp10_EMLOOPINFO noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.EndGrp10_EMLOOPINFO noobs label;
3709379    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rptgroupsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Group Summary";
MPRINT(EM_DIAGRAM):   run;
3709380    run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP10_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2428.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3709381    title9;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.EndGrp10_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_DepVar) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
3709405    data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT;
3709406    set WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set WORK.OUTFITDATA;
3709407    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3709408    data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT;
3709409    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
3709410    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3709411    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3709411  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3709412    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3709413    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3709414    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
3709415    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3709416    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3709417    %let _EMwarndup = 0;
3709418    %let _EMtargetdup =;
3709419    %let _EMASEtargetdup =;
3709420    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3709421    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
3709422    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3709423    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3709424    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3709425    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3709426    end;
MPRINT(EM_DIAGRAM):   end;
3709427    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3709428    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3709429    * EndGrp10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp10: Computing metadata for TRAIN data;
3709430    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp10_TRAIN out=WORK.M2XLTQEU noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XLTQEU;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XLTQEU(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XLTQEU;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XLTQEU;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M01CK_PF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1E3GSAQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID',
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CK_PF;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp10";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3709781    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3709782    set EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO;
3709783    where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
3709784    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMINFO.
      WHERE (DATA='EndGrp10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3709785    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMINFO;
3709786    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3709787    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3709788    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
3709792    run;
3709793    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
3709794    set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
3709795    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3709796    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
3709797    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3709798    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3709799    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3709800    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3709801    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3709802    proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3709803    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3709804    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3709805    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
3709806    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3709807    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3709808    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3709809    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3709810    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3709811    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3709812    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp10: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3710274    %let EMEXCEPTIONSTRING=;
3710275    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3710276    * POSTLOOPREPORT: EndGrp10;
MPRINT(EM_DIAGRAM):   * POSTLOOPREPORT: EndGrp10;
3710277    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3710278    %let EM_ACTION = POSTLOOPREPORT;
3710279    %let syscc = 0;
3710280    %macro main;
3710281       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3710282
3710283           filename temp catalog 'sashelp.emutil.endgp_train.source';
3710284           %include temp;
3710285           filename temp;
3710286
3710287           %train;
3710288
3710289       %end;
3710290       %else
3710291          %if %upcase(&EM_ACTION) = SCORE %then %do;
3710292
3710293           filename temp catalog 'sashelp.emutil.endgp_score.source';
3710294           %include temp;
3710295           filename temp;
3710296
3710297           %score;
3710298       %end;
3710299       %else
3710300       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3710301
3710302           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3710303           %include temp;
3710304           filename temp;
3710305
3710306           %postloop;
3710307
3710308       %end;
3710309
3710310       %doendm:
3710311    %mend main;
3710312
3710313    %main;
MPRINT(EM_DIAGRAM):
MPRINT(EM_DIAGRAM):  ;
3710314    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3710315    * End POSTLOOPREPORT: EndGrp10;
MPRINT(EM_DIAGRAM):   * End POSTLOOPREPORT: EndGrp10;
3710316    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3710317
 
3710318    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
3710319    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3710320    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3710321    proc sort data=EMWS1.EndGrp10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp10_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
3710322    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3710323    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP10_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3710324    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3710325    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3710326    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3710327    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3710328    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3710329    set EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_CMeta_TRAIN;
3710330    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3710330  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
3710331    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3710332    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3710333    set EMWS1.EndGrp10_TRAIN(keep=
3710334    F_DepVar
3710335    I_DepVar
3710336    P_DepVar0
3710337    P_DepVar1
3710338    R_DepVar0
3710339    R_DepVar1
3710340    U_DepVar
3710341    _WARN_
3710342    DepVar
3710343    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
3710344    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.ENDGRP10_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2437 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.EndGrp10_22TU0I5 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EndGrp10_22TU0I5;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.EndGrp10_22TU0I5(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp10_22TU0I5;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp10_22TU0I5;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370537546 _NEVENTS
334 _NNONEVENTS 2103 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2437));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 2.2654795E-7 OVLMAX 0.9999999965 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2437 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2437/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2437)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2437/20) ) / (
AVGNUMRESP / (2437/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2437/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2437/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3714631    %let grouptarget=0;
3714632    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3714633    set EMWS1.Grp9_EMLOOPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp9_EMLOOPINFO;
3714634    if _TARGET_ ne "" then do;
MPRINT(EM_DIAGRAM):   if _TARGET_ ne "" then do;
3714635    call symput('grouptarget', '1');
MPRINT(EM_DIAGRAM):   call symput('grouptarget', '1');
3714636    stop;
MPRINT(EM_DIAGRAM):   stop;
3714637    end;
MPRINT(EM_DIAGRAM):   end;
3714638    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _TARGET_ is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.GRP9_EMLOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3714639    data work.EMOUTFIT;
MPRINT(EM_DIAGRAM):    data work.EMOUTFIT;
3714640    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714641    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714642    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714642  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714643    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714644    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714645    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
3714646    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set WORK.EMOUTFIT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3714647    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
3714648    set EMWS1.EndGrp10_EMOUTFIT_LOOP work.EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT_LOOP work.EMOUTFIT;
3714649    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT_LOOP has 11 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714650    data work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):    data work.EMREPORTFIT;
3714651    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714652    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714653    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714653  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714654    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714655    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714656    set EMWS1.EndGrp10_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT;
3714657    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set WORK.EMREPORTFIT has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714658    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
3714659    set EMWS1.EndGrp10_EMREPORTFIT_LOOP work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT_LOOP work.EMREPORTFIT;
3714660    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 210 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP.
NOTE: There were 9 observations read from the data set WORK.EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP has 219 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3714661    data work.EMRANK;
MPRINT(EM_DIAGRAM):    data work.EMRANK;
3714662    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714663    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714664    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714664  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714665    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714666    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714667    set EMWS1.EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK;
3714668    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMRANK.
NOTE: The data set WORK.EMRANK has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714669    data EMWS1.EndGrp10_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMRANK_LOOP;
3714670    set EMWS1.EndGrp10_EMRANK_LOOP work.EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK_LOOP work.EMRANK;
3714671    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.ENDGRP10_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMRANK.
NOTE: The data set EMWS1.ENDGRP10_EMRANK_LOOP has 220 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714672    data work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data work.EMSCOREDIST;
3714673    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714674    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714675    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714675  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714676    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714677    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714678    set EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST;
3714679    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST.
NOTE: The data set WORK.EMSCOREDIST has 20 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714680    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
3714681    set EMWS1.EndGrp10_EMSCOREDIST_LOOP work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST_LOOP work.EMSCOREDIST;
3714682    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP has 220 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714683    data work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data work.EMCLASSIFICATION;
3714684    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714685    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714686    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714686  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714687    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714688    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714689    set EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION;
3714690    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
NOTE: The data set WORK.EMCLASSIFICATION has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714691    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
3714692    set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
3714693    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714694    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP out=_temp;
3714695    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3714696    where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
MPRINT(EM_DIAGRAM):   where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
3714697    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
      WHERE (_type_='PREDICTION') and correct and (INTO not = ' ') and (FROM not = ' ');
NOTE: The data set WORK._TEMP has 22 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3714698    data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL totalCount
3714698  ! totalPercent);
MPRINT(EM_DIAGRAM):   data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
totalCount totalPercent);
3714699    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3714700    retain totalCount totalPercent;
MPRINT(EM_DIAGRAM):   retain totalCount totalPercent;
3714701    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3714702    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3714703    totalCount = count;
MPRINT(EM_DIAGRAM):   totalCount = count;
3714704    totalPercent = percent;
MPRINT(EM_DIAGRAM):   totalPercent = percent;
3714705    end;
MPRINT(EM_DIAGRAM):   end;
3714706    else do;
MPRINT(EM_DIAGRAM):   else do;
3714707    totalCount + count;
MPRINT(EM_DIAGRAM):   totalCount + count;
3714708    totalPercent + percent;
MPRINT(EM_DIAGRAM):   totalPercent + percent;
3714709    end;
MPRINT(EM_DIAGRAM):   end;
3714710    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3714711    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TOTAL has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3714712    data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL eventCount
3714712  ! eventPercent);
MPRINT(EM_DIAGRAM):   data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
eventCount eventPercent);
3714713    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3714714    where strip(FROM) eq strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) eq strip(EVENT);
3714715    by _LOOP_ DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ DATAROLE TARGET;
3714716    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3714717    eventCount = count;
MPRINT(EM_DIAGRAM):   eventCount = count;
3714718    eventPercent = percent;
MPRINT(EM_DIAGRAM):   eventPercent = percent;
3714719    end;
MPRINT(EM_DIAGRAM):   end;
3714720    else do;
MPRINT(EM_DIAGRAM):   else do;
3714721    eventCount + count;
MPRINT(EM_DIAGRAM):   eventCount + count;
3714722    eventPercent + percent;
MPRINT(EM_DIAGRAM):   eventPercent + percent;
3714723    end;
MPRINT(EM_DIAGRAM):   end;
3714724    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3714725    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable first.modelid is uninitialized.
NOTE: Variable last.modelid is uninitialized.
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM)=STRIP(EVENT);
NOTE: The data set WORK._EVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3714726    data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL neventCount
3714726  ! neventPercent);
MPRINT(EM_DIAGRAM):   data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
neventCount neventPercent);
3714727    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3714728    retain neventCount neventPercent 0;
MPRINT(EM_DIAGRAM):   retain neventCount neventPercent 0;
3714729    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3714730    where strip(FROM) ne strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) ne strip(EVENT);
3714731    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3714732    neventCount = count;
MPRINT(EM_DIAGRAM):   neventCount = count;
3714733    neventPercent = percent;
MPRINT(EM_DIAGRAM):   neventPercent = percent;
3714734    end;
MPRINT(EM_DIAGRAM):   end;
3714735    else do;
MPRINT(EM_DIAGRAM):   else do;
3714736    neventCount + count;
MPRINT(EM_DIAGRAM):   neventCount + count;
3714737    neventPercent + percent;
MPRINT(EM_DIAGRAM):   neventPercent + percent;
3714738    end;
MPRINT(EM_DIAGRAM):   end;
3714739    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3714740    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM) not = STRIP(EVENT);
NOTE: The data set WORK._NEVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714741    data EMWS1.EndGrp10_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMMISC_LOOP;
3714742    merge _total _event _nevent;
MPRINT(EM_DIAGRAM):   merge _total _event _nevent;
3714743    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3714744    label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,   NOQUOTE))"
3714744  ! targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3714744  ! eventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctEvent_vlabel,  NOQUOTE))"
3714745       eventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,  NOQUOTE))"
3714745  ! neventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctNEvent_vlabel, NOQUOTE))"
3714745  ! neventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumNEvent_vlabel, NOQUOTE))"
3714746       totalPercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel,    NOQUOTE))"
3714746  !  totalCount = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalcount_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable" targetLabel = "Target Label"
eventPercent = "Percentage of Events" eventCount = "Number of Events" neventPercent =
"Percentage of Nonevents" neventCount = "Number of Nonevents" totalPercent = "Total
Percentage" totalCount = "Total Count";
3714747    if neventCount = . then neventCount = 0;
MPRINT(EM_DIAGRAM):   if neventCount = . then neventCount = 0;
3714748    if eventCount = . then eventCount = 0;
MPRINT(EM_DIAGRAM):   if eventCount = . then eventCount = 0;
3714749    if neventPercent = . then neventPercent = 0;
MPRINT(EM_DIAGRAM):   if neventPercent = . then neventPercent = 0;
3714750    if eventPercent = . then eventPercent = 0;
MPRINT(EM_DIAGRAM):   if eventPercent = . then eventPercent = 0;
3714751    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TOTAL.
NOTE: There were 11 observations read from the data set WORK._EVENT.
NOTE: There were 11 observations read from the data set WORK._NEVENT.
NOTE: The data set EMWS1.ENDGRP10_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3714752    proc sort data=EMWS1.EndGrp10_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp10_EMMISC_LOOP;
3714753    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3714754    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.ENDGRP10_EMMISC_LOOP.
NOTE: The data set EMWS1.ENDGRP10_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3714755    data work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data work.EMEVENTREPORT;
3714756    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3714757    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3714758    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3714758  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3714759    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3714760    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3714761    set EMWS1.EndGrp10_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMEVENTREPORT;
3714762    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMEVENTREPORT.
NOTE: The data set WORK.EMEVENTREPORT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714763    data EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
3714764    set work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set work.EMEVENTREPORT;
3714765    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.EMEVENTREPORT.
NOTE: The data set EMWS1.ENDGRP10_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714766    %let _cn = %sysfunc(getoption(CENTER));
3714767    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3714768    proc print data=EMWS1.EndGrp10_EMREPORTFIT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMREPORTFIT_LOOP noobs label;
3714769    var STAT LABEL TRAIN
3714770    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
3714771    by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
MPRINT(EM_DIAGRAM):   by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
3714772    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3714773    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3714774    run;
 
NOTE: There were 219 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2429.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714775    title10;
MPRINT(EM_DIAGRAM):   title10;
3714776    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3714777    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP nothreads;
3714778    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3714779    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714780    %let _cn = %sysfunc(getoption(CENTER));
3714781    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3714782    proc print data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMCLASSIFICATION_LOOP noobs label;
3714783    var from into pct_row pct_col count percent
3714784    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3714785    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3714786    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3714787    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3714788    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3714789    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3714790    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3714791    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3714792    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3714793    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3714794    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3714795    run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2430.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3714796    title9;
MPRINT(EM_DIAGRAM):   title9;
3714797    title10;
MPRINT(EM_DIAGRAM):   title10;
3714798    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3714799    %let _cn = %sysfunc(getoption(CENTER));
3714800    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3714801    data EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
3714802    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3714802  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
3714803    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3714803  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3714803  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3714803  ! FALSEEVENT
3714804    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3714804  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3714804  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3714805       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
3714806    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3714807    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3714808    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3714809    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3714810    set EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMEVENTREPORT_LOOP;
3714811    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMEVENTREPORT_LOOP.
NOTE: The data set EMWS1.ENDGRP10_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3714812    proc print data=EMWS1.EndGrp10_EMEVENTREPORT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMEVENTREPORT_LOOP noobs label;
3714813    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3714814    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3714815    by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted TARGETLABEL;
3714816    run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMEVENTREPORT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2431.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3714817    title10;
MPRINT(EM_DIAGRAM):   title10;
3714818    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3714819    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3714820    modify EndGrp10_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3714821    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3714822    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3714822  ! ;
MPRINT(EM_DIAGRAM):   run;
3714823    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMRANK_LOOP.DATA.
3714824    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
3714825    %let _cn = %sysfunc(getoption(CENTER));
3714826    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3714827    proc print data=EMWS1.EndGrp10_EMRANK_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMRANK_LOOP label noobs;
3714828    var
3714829    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3714830    by
3714831    notsorted DATAROLE
3714832    notsorted _WHERE_
3714833    notsorted TARGET
3714834    notsorted TARGETLABEL
3714835    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3714836    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3714837    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3714838    run;
 
NOTE: There were 220 observations read from the data set EMWS1.ENDGRP10_EMRANK_LOOP.
NOTE: The PROCEDURE PRINT printed page 2432.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3714839    title10;
MPRINT(EM_DIAGRAM):   title10;
3714840    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3714841    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3714842    modify EndGrp10_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3714843    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3714843  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3714844    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3714844  ! ;
MPRINT(EM_DIAGRAM):   run;
3714845    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMSCOREDIST_LOOP.DATA.
3714846    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
3714847    %let _cn = %sysfunc(getoption(CENTER));
3714848    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3714849    proc print data=EMWS1.EndGrp10_EMSCOREDIST_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMSCOREDIST_LOOP label noobs;
3714850    var
3714851    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
3714852    by
3714853    notsorted DATAROLE
3714854    notsorted _WHERE_
3714855    notsorted TARGET
3714856    notsorted TARGETLABEL
3714857    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3714858    where TARGET in(
3714859    "DepVar"
3714860    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
3714861    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3714862    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
3714863    run;
 
NOTE: There were 220 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 2433.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3714864    title10;
MPRINT(EM_DIAGRAM):   title10;
3714865    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3714866    %let emexceptionstring =;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:58 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:58 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMREPORT;
MPRINT(EM_DIAGRAM):   length ID 8 KEY $30 VALUE $512;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='PROPERTIES';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SETTINGS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="VARIABLES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMTRAINVARIABLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLLOG";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\EMLOG.log";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLOUTPUT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="NOTES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FLOWCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SASCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Scoring";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="MISCLASSIFICATIONMANY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMMISC_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="TOTALPERCENT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FITSTATPLOT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMOUTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="_ANYNUMERIC_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSRANKOVERLAY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMRANK_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="DECILE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="LIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BASELIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BESTLIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSSCOREDIST";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMSCOREDIST_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="SCORE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFNONEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEX";
MPRINT(EM_DIAGRAM):   VALUE="DATAROLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="NROWS";
MPRINT(EM_DIAGRAM):   VALUE="1";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="REPORTFITSTAT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMREPORTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="eventratestat";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMEVENTREPORT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="miningresult";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Gp";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp10_EMLOOPINFO";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
