*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:39:52 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:39:47 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:39:47 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2IHIM1L "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2IHIM1L new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMGROUP\EMLOG_4.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:39:47 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMGROUP\EMOUTPUT_4.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:39:47 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1314718    proc freq data=EMWS1.EndGrp10_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EndGrp10_VariableSet noprint;
1314719    table ROLE*LEVEL/out=WORK.EndGrp10META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EndGrp10META;
1314720    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_VARIABLESET.
NOTE: The data set WORK.ENDGRP10META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
1314721    proc print data=WORK.EndGrp10META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp10META label noobs;
1314722    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1314723    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
1314724    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1314725    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1314726    run;
 
NOTE: There were 8 observations read from the data set WORK.ENDGRP10META.
NOTE: The PROCEDURE PRINT printed page 875.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1314727    title10;
MPRINT(EM_DIAGRAM):   title10;
1314728    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
1314757    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1314758    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1314759    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1314760       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1314761    set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
1314762    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1314763    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1314764    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1314765    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1314766    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1314767    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1314768    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1314769    end;
MPRINT(EM_DIAGRAM):   end;
1314770    output;
MPRINT(EM_DIAGRAM):   output;
1314771    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP10_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
1314772    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1314773    proc print data=WORK.EndGrp10_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp10_EVENT noobs label;
1314774    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1314775    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1314776    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1314777    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP10_EVENT.
NOTE: The PROCEDURE PRINT printed page 876.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1314778    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1314779    proc print data = EMWS1.Neural_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural_DepVar_DM noobs label;
1314780    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1314781    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
1314782    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1314783    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1314784    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1314785    run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 877.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1314786    title10;
MPRINT(EM_DIAGRAM):   title10;
1314787    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp10: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=307;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13891402714932;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=1903;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86108597285067;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1315261    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1315262    * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
1315263    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
1315264    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
1315265    %let EMEXCEPTIONSTRING=;
1315266    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1315267    * TRAIN: EndGrp10;
MPRINT(EM_DIAGRAM):   * TRAIN: EndGrp10;
1315268    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315269    %let EM_ACTION = TRAIN;
1315270    %let syscc = 0;
1315271    %macro main;
1315272       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1315273
1315274           filename temp catalog 'sashelp.emutil.endgp_train.source';
1315275           %include temp;
1315276           filename temp;
1315277
1315278           %train;
1315279
1315280       %end;
1315281       %else
1315282          %if %upcase(&EM_ACTION) = SCORE %then %do;
1315283
1315284           filename temp catalog 'sashelp.emutil.endgp_score.source';
1315285           %include temp;
1315286           filename temp;
1315287
1315288           %score;
1315289       %end;
1315290       %else
1315291       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1315292
1315293           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1315294           %include temp;
1315295           filename temp;
1315296
1315297           %postloop;
1315298
1315299       %end;
1315300
1315301       %doendm:
1315302    %mend main;
1315303
1315304    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_TRAIN.SOURCE.
1315305   +%macro copyModelDs(model=, key=);
1315306   +   %let modelDs  = &em_lib..&model._&key;
1315307   +   %let reportDs = &em_lib..&em_nodeid._&key;
1315308   +   %if %sysfunc(exist(&modelDs)) %then %do;
1315309   +       data &reportDs;
1315310   +          length ModelId $16;
1315311   +          retain ModelId "&model";
1315312   +          set &modelDs;
1315313   +       run;
1315314   +   %end;
1315315   +%mend copyModelDs;
1315316   +
1315317   +%macro traintarget(groupid=);
1315318   +   %em_getname(key=emoutfit, type=DATA);
1315319   +   %let targetname=;
1315320   +   data _null_;
1315321   +     set &em_lib..&groupid._&looptype;
1315322   +     where _LOOP_ = &EMLOOPNUMBER;
1315323   +     call symput('targetname', strip(_TARGET_));
1315324   +   run;
1315325   +   %let modelId =;
1315326   +   data _null_;
1315327   +      set &em_import_data_eminfo;
1315328   +      where key = 'MODEL' and TARGET = "&targetname";
1315329   +      call symput('modelId',   strip(data));
1315330   +   run;
1315331   +   %if "&modelId" ne "" %then %do;
1315332   +       %copyModelDs(model=&modelid, key=EMRANK);
1315333   +       %copyModelDs(model=&modelid, key=EMSCOREDIST);
1315334   +       %copyModelDs(model=&modelid, key=EMOUTFIT);
1315335   +       %copyModelDs(model=&modelid, key=EMCLASSIFICATION);
1315336   +       %copyModelDs(model=&modelid, key=EMEVENREPORT);
1315337   +       %copyModelDs(model=&modelid, key=EMRESIDUALS);
1315338   +       %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1315339   +   %end;
1315340   +
1315341   +   %doendtgp:
1315342   +%mend;
1315343   +
1315344   +%macro trainboost(groupid=);
1315345   +
1315346   +   %let boostinfoDs  = &em_lib..%sysfunc(strip(&groupid))_boostinfo;
1315347   +   %let boostscoreDs = &em_lib..%sysfunc(strip(&groupid))_boostscore;
1315348   +
1315349   +   data _null_;
1315350   +      retain index 0;
1315351   +      set &boostinfoDs;
1315352   +      call symput('targetname', strip(_target_));
1315353   +   run;
1315354   +
1315355   +   %if "&em_import_data_eminfo" ne "" and %sysfunc(exist(&em_import_data_eminfo)) %then %do;
1315356   +       %let decmeta = ;
1315357   +       data _null_;
1315358   +          set &em_import_data_eminfo;
1315359   +          where (key='DECMETA' and TARGET="&targetname");
1315360   +          call symput('DECMETA', strip(data));
1315361   +       run;
1315362   +       %if "&decmeta" eq "" %then %do;
1315363   +           %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1315364   +           %goto doendtb;
1315365   +       %end;
1315366   +
1315367   +       %let predictedVars=;
1315368   +       data _null_;
1315369   +          set &decmeta;
1315370   +          if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1315371   +          else
1315372   +          if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1315373   +          else
1315374   +          if _TYPE_ = 'PREDICTED' then call symput('predictedvars', strip(symget('predictedVars'))!!' '!!strip(variable));
1315375   +       run;
1315376   +       %if %index(&EM_DEBUG, _ALL_) %then %do;
1315377   +           %put GROUPID: &GROUPID DECMETA: &DECMETA FROMVAR: &FROMVAR INTO: &INTOVAR PREDICTED: &PREDICTEDVARS;
1315378   +       %end;
1315379   +   %end;
1315380   +
1315381   +   * ;
1315382   +   * ENDGROUP &NODEID : Boosting scoring ;
1315383   +   * ;
1315384   +   data &em_lib..&groupid._boostscore;
1315385   +      set &em_import_data;
1315386   +      keep _WARN_ &targetname &fromvar &intovar &predictedvars;
1315387   +      %if "%em_freq" ne "" %then %do ;
1315388   +          keep %em_freq ;
1315389   +      %end ;
1315390   +   run;
1315391   +   %em_model(TARGET=&targetname , ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1315392   +
1315393   +   %doendtb:
1315394   +
1315395   +%mend trainboost;
1315396   +
1315397   +%macro trainbag(groupid=);
1315398   +   %let baginfoDs  = &em_lib..%sysfunc(strip(&groupid))_baginfo;
1315399   +   data _null_;
1315400   +      retain index 0;
1315401   +      set &baginfoDs;
1315402   +      call symput('targetname', strip(_target_));
1315403   +   run;
1315404   +
1315405   +   %let decmeta = ;
1315406   +   data _null_;
1315407   +       set &em_import_data_eminfo;
1315408   +       where (key='DECMETA' and TARGET="&targetname");
1315409   +       call symput('DECMETA', strip(data));
1315410   +   run;
1315411   +   %if "&decmeta" eq "" %then %do;
1315412   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1315413   +       %goto doendtg;
1315414   +   %end;
1315415   +
1315416   +   %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1315417   +
1315418   +   %doendtg:
1315419   +%mend trainbag;
1315420   +
1315421   +%macro traingroup(groupid=);
1315422   +   %let targetNum = 0;
1315423   +
1315424   +   data _temp1;
1315425   +      set &em_lib..&groupid._eminfo;
1315426   +      where key='MODEL';
1315427   +   run;
1315428   +   data _temp2;
1315429   +      set &em_import_data_eminfo;
1315430   +      where key='MODEL';
1315431   +   run;
1315432   +   proc sort data=_temp1; by TARGET DATA;
1315433   +   proc sort data=_temp2; by TARGET DATA;
1315434   +   data _temp2;
1315435   +      merge _temp1(in=_a) _temp2(in=_b);
1315436   +      by TARGET DATA;
1315437   +      if ^_a and _b then output;
1315438   +   run;
1315439   +   data _null_;
1315440   +      retain index 0;
1315441   +      set _temp2 end=eof;
1315442   +      index +1;
1315443   +      where key ='MODEL';
1315444   +      call symput('MODELID'!!strip(put(index, best.)), strip(data));
1315445   +      call symput('TARGET'!!strip(put(index, best.)), strip(target));
1315446   +      if eof then
1315447   +         call symput('targetnum', strip(put(index, best.)));
1315448   +   run;
1315449   +   proc datasets lib=work nolist;
1315450   +      delete _temp1 _temp2;
1315451   +   run;
1315452   +   %if "&targetNum" eq "0" %then %goto doendtgp;
1315453   +
1315454   +   %let modelString =;
1315455   +   %do i=1 %to &targetnum;
1315456   +        %if ^%sysfunc(indexw(&modelString, &&modelid&i)) %then %do;
1315457   +            %copyModelDs(model=&&modelid&i, key=EMRANK);
1315458   +            %copyModelDs(model=&&modelid&i, key=EMSCOREDIST);
1315459   +            %copyModelDs(model=&&modelid&i, key=EMOUTFIT);
1315460   +            %copyModelDs(model=&&modelid&i, key=EMCLASSIFICATION);
1315461   +            %copyModelDs(model=&&modelid&i, key=EMEVENREPORT);
1315462   +            %copyModelDs(model=&&modelid&i, key=EMRESIDUALS);
1315463   +            %let modelString = &modelString &&modelid&i;
1315464   +       %end;
1315465   +       %em_model(TARGET=&&target&i, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1315466   +   %end;
1315467   +
1315468   +   %doendtgp:
1315469   +
1315470   +%mend traingroup;
1315471   +
1315472   +%macro getSize(data=, nobsvar=);
1315473   +
1315474   +   %if %sysfunc(exist(&data, DATA)) %then %do;
1315475   +       %let dsid = %sysfunc(open(&data));
1315476   +       %if &dsid %then %do;
1315477   +           %let &&nobsvar = %sysfunc(attrn(&dsid, NLOBS));
1315478   +           %let dsid = %sysfunc(close(&dsid));
1315479   +       %end;
1315480   +   %end;
1315481   +    %if %sysfunc(exist(&data, VIEW)) %then %do;
1315482   +        proc sql;
1315483   +           reset noprint;
1315484   +           select count(*) into :&nobsvar from &data;
1315485   +        quit;
1315486   +   %end;
1315487   +
1315488   +%mend getsize;
1315489   +
1315490   +%macro train;
1315491   +
1315492   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %do;
1315493   +      %let EM_TOOLTYPE=UTILITY;
1315494   +      %if %sysfunc(exist(&em_data_eminfo)) %then %do;
1315495   +          proc delete data=&em_data_eminfo;
1315496   +          run;
1315497   +      %end;
1315498   +      %goto doendtr;
1315499   +   %end;
1315500   +
1315501   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1315502   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1315503   +       %goto doendtr;
1315504   +   %end;
1315505   +
1315506   +   %let xgroupid = ;
1315507   +   data _null_;
1315508   +      set &em_import_data_eminfo;
1315509   +      where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1315510   +      call symput('XGROUPID',  strip(data));
1315511   +      call symput('LOOPTYPE', strip(key));
1315512   +   run;
1315513   +
1315514   +   %if "&looptype" eq "BOOSTINFO" %then %do;
1315515   +       %let nDataObs=0;
1315516   +       %getSize(data=&em_import_data, nobsvar=nDataObs);
1315517   +
1315518   +       %let nStartObs=0;
1315519   +       %getsize(data=&em_lib..&xgroupid._train, nobsvar=nStartObs);
1315520   +
1315521   +       %if &nDataObs ne &nStartObs %then %do;
1315522   +           %let emexceptionstring = EMTOOL.BOOSTERRORNOBSCHANGED;
1315523   +           %goto doendtr;
1315524   +       %end;
1315525   +
1315526   +       %trainboost(groupid=&xgroupid);
1315527   +   %end;
1315528   +   %else
1315529   +   %if "&looptype" eq "BAGINFO" %then %do;
1315530   +       %trainbag(groupid=&xgroupid);
1315531   +   %end;
1315532   +   %else
1315533   +   %if "&looptype" eq "GROUPINFO" %then %do;
1315534   +       %traingroup(groupid=&xgroupid);
1315535   +   %end;
1315536   +   %else
1315537   +   %if "&looptype" eq "TARGETINFO" %then %do;
1315538   +       %traintarget(groupid=&xgroupid);
1315539   +   %end;
1315540   +
1315541   +   data &em_data_eminfo;
1315542   +      length TARGET KEY $32  DATA $43;
1315543   +      TARGET=''; KEY='ENDGROUP'; DATA="&em_nodeid"; output;
1315544   +   run;
1315545   +
1315546   +   %let EM_TOOLTYPE=MODEL;
1315547   +
1315548   +   %doendtr:
1315549   +
1315550   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.Neural_EMINFO;
MPRINT(TRAIN):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(TRAIN):   call symput('XGROUPID', strip(data));
MPRINT(TRAIN):   call symput('LOOPTYPE', strip(key));
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp1;
MPRINT(TRAINGROUP):   set EMWS1.Grp9_eminfo;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRP9_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   set EMWS1.Neural_EMINFO;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp1;
MPRINT(TRAINGROUP):   by TARGET DATA;
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp2;
MPRINT(TRAINGROUP):   by TARGET DATA;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   merge _temp1(in=_a) _temp2(in=_b);
MPRINT(TRAINGROUP):   by TARGET DATA;
MPRINT(TRAINGROUP):   if ^_a and _b then output;
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP1.
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _null_;
MPRINT(TRAINGROUP):   retain index 0;
MPRINT(TRAINGROUP):   set _temp2 end=eof;
MPRINT(TRAINGROUP):   index +1;
MPRINT(TRAINGROUP):   where key ='MODEL';
MPRINT(TRAINGROUP):   call symput('MODELID'!!strip(put(index, best.)), strip(data));
MPRINT(TRAINGROUP):   call symput('TARGET'!!strip(put(index, best.)), strip(target));
MPRINT(TRAINGROUP):   if eof then call symput('targetnum', strip(put(index, best.)));
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc datasets lib=work nolist;
MPRINT(TRAINGROUP):   delete _temp1 _temp2;
MPRINT(TRAINGROUP):   run;
 
NOTE: Deleting WORK._TEMP1 (memtype=DATA).
NOTE: Deleting WORK._TEMP2 (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMRANK;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMRANK;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The data set EMWS1.ENDGRP10_EMRANK has 20 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMSCOREDIST;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP10_EMSCOREDIST has 20 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMOUTFIT;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.EndGrp10_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET='';
MPRINT(TRAIN):   KEY='ENDGROUP';
MPRINT(TRAIN):   DATA="EndGrp10";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EndGrp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315551    *------------------------------------------------------------*;
1315552    * End TRAIN: EndGrp10;
1315553    *------------------------------------------------------------*;
1315554
 
1315555    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1315556    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1315557    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315558    ;
MPRINT(EM_DIAGRAM):   ;
1315559    ;
MPRINT(EM_DIAGRAM):   ;
1315560    ;
MPRINT(EM_DIAGRAM):   ;
1315561    ;
MPRINT(EM_DIAGRAM):   ;
1315562    quit;
MPRINT(EM_DIAGRAM):   quit;
1315563    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315564    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1315565    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315566    /*; *"; *'; */
1315567    ;
MPRINT(EM_DIAGRAM):   ;
1315568    run;
MPRINT(EM_DIAGRAM):   run;
1315569    quit;
MPRINT(EM_DIAGRAM):   quit;
1315570    /* Reset EM Options */
1315571    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1315572    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1315573    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:39:49 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:39:49 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WGDJQ2 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WGDJQ2 new;
MPRINT(EM_DIAGRAM):   run;
1315675    %let EMEXCEPTIONSTRING=;
1315676    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1315677    * SCORE: EndGrp10;
MPRINT(EM_DIAGRAM):   * SCORE: EndGrp10;
1315678    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1315679    %let EM_ACTION = SCORE;
1315680    %let syscc = 0;
1315681    %macro main;
1315682       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1315683
1315684           filename temp catalog 'sashelp.emutil.endgp_train.source';
1315685           %include temp;
1315686           filename temp;
1315687
1315688           %train;
1315689
1315690       %end;
1315691       %else
1315692          %if %upcase(&EM_ACTION) = SCORE %then %do;
1315693
1315694           filename temp catalog 'sashelp.emutil.endgp_score.source';
1315695           %include temp;
1315696           filename temp;
1315697
1315698           %score;
1315699       %end;
1315700       %else
1315701       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1315702
1315703           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1315704           %include temp;
1315705           filename temp;
1315706
1315707           %postloop;
1315708
1315709       %end;
1315710
1315711       %doendm:
1315712    %mend main;
1315713
1315714    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_SCORE.SOURCE.
1315715   +%macro scoreTables(data=, out=, scoreref=, prescore=);
1315717   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
1315718   +       data &out / view=&out;
1315719   +          set &data
1315721   +          %if "&prescore" = "Y" %then %do;
1315722   +              (obs=1)
1315723   +          %end;
1315725   +          ;
1315727   +          %inc &scoreref;
1315729   +          %if "&prescore" eq "Y" %then %do;
1315730   +              drop I_: R_:;
1315731   +          %end;
1315733   +       run;
1315734   +   %end;
1315736   +%mend scoretables;
1315738   +%macro boostbagcode(groupid=, type=, EnsembleIndex=);
1315739   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
1315740   +   data _null_;
1315741   +      retain index 0;
1315742   +      set &infoDs;
1315743   +      call symput('targetname', strip(_target_));
1315744   +      call symput('endloopnum', strip(_loop_));
1315745   +   run;
1315747   +   %let endgrp_decmeta=;
1315748   +   %let endgrp_decdata=;
1315750   +   data _null_;
1315751   +      set &em_import_data_eminfo;
1315752   +      where key in('MODEL', 'DECMETA', 'DECDATA') and TARGET="&targetname";
1315753   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
1315754   +      else
1315755   +      if key='DECDATA' then call symput('ENDGRP_DECDATA', strip(data));
1315756   +      else call symput('MODELID', strip(data));
1315757   +   run;
1315759   +   %let headerString= Boosting;
1315760   +   %let prefixString= _BoostVar;
1315762   +   %if "&type" = "BAGINFO" %then %do;
1315763   +        %let headerString = Bagging;
1315764   +        %let prefixString= _BagVar;
1315765   +   %end;
1315767   +   %let targetType=;
1315768   +   %let predictedVars=;
1315769   +   data _null_;
1315770   +      retain index;
1315771   +      set &endgrp_decmeta end=eof;
1315772   +      length tempvar $200;
1315773   +      if _TYPE_='TARGET' then call symput('TARGETTYPE', strip(level));
1315774   +      else
1315775   +      if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1315776   +      else
1315777   +      if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1315778   +      else
1315779   +      if _TYPE_ = 'PREDICTED' then do;
1315780   +         index+1;
1315781   +         call symput('predvars'!!strip(put(index, best.)), strip(variable));
1315782   +         tempvar = strip("&em_nodeid")!!'_'!!strip(variable);
1315783   +         if length(tempvar)<=32 then call symput('tempvars'!!strip(put(index, best.)), strip(tempvar));
1315784   +         else call symput('tempvars'!!strip(put(index, best.)), strip("&prefixString")!!strip(put(index, best.)));
1315785   +      end;
1315786   +      if eof then
1315787   +         call symput('prednum', strip(put(index, best.)));
1315788   +   run;
1315790   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
1315791   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
1315793   +   filename loopflow "&em_user_loopflowcode";
1315794   +   filename looppub "&em_user_looppubcode";
1315796   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
1315797   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
1315799   +   %if "&emloopnumber" = "1" %then %do;
1315800   +       data _null_;
1315801   +          rc = fdelete('loopflow');
1315802   +          rc = fdelete('looppub');
1315803   +       run;
1315804   +       data _null_;
1315805   +          file loopflow;
1315806   +          put "&em_codebar;";
1315807   +          put "* &em_nodeid: ;" ;
1315808   +          put "* User: &sysuserid;";
1315809   +          put "* Date: &sysdate: &systime;";
1315810   +          put "&em_codebar ;";
1315811   +          put "* Ensemble Code;";
1315812   +          put "&em_codebar ;";
1315813   +          put "* &headerString: Loop=1;";
1315814   +          put "* Temporary Variables;";
1315815   +          %do i= 1 %to &prednum;
1315816   +              put "drop &&tempvars&i;";
1315817   +              put "&&tempvars&i = 0;";
1315818   +          %end;
1315819   +       run;
1315820   +       %em_copyfile(infref=loopflow, outfref=looppub);
1315821   +   %end;
1315823   +   %let j=&emloopnumber;
1315824   +   %do i = 1 %to &loopcodenum;
1315825   +       %let fsourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
1315826   +       %let psourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
1315828   +       %if (&&loopnode&i eq &em_nodeid ) or
1315829   +           ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex )) %then %do;
1315830   +           data _null_;
1315831   +              file loopflow mod;
1315832   +              put "&em_codebar;";
1315833   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1315834   +              put "* User: &sysuserid;";
1315835   +              put "* Date: &sysdate: &systime;";
1315836   +              put "* &headerString: Loop=&j;";
1315837   +              put "&em_codebar;";
1315838   +           run;
1315839   +           data _null_;
1315840   +              file looppub mod;
1315841   +              put "&em_codebar;";
1315842   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1315843   +              put "* User: &sysuserid;";
1315844   +              put "* Date: &sysdate: &systime;";
1315845   +              put "* &headerString: Loop=&j;";
1315846   +              put "&em_codebar;";
1315847   +           run;
1315848   +       %end;
1315850   +       %if &&loopnode&i ne &em_nodeid %then %do;
1315851   +           %if (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex ) %then %do;
1315852   +               filename x catalog "&fsourceEntry";
1315853   +               %em_copyfile(infref=x, outfref=loopflow, append=Y);
1315854   +               filename x;
1315856   +               filename y catalog "&psourceEntry";
1315857   +               %em_copyfile(infref=y, outfref=looppub, append=Y);
1315858   +               filename y;
1315859   +           %end;
1315860   +       %end;
1315861   +       %else %do;
1315862   +           %if "&j" ne "1" %then %do;
1315863   +               %let weight = %eval(&j-1);
1315864   +               data _null_;
1315865   +                  file loopflow mod;
1315866   +                  put "&em_codebar;";
1315867   +                  %if "&j" ne "&endloopnum" %then %do;
1315868   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1315869   +                  %end;
1315870   +                  %else %do;
1315871   +                      put "* &headerString: accumulate final probabilities;";
1315872   +                  %end;
1315873   +                  put "&em_codebar;";
1315874   +                  %do k=1 %to &prednum;
1315875   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1315876   +                  %end;
1315877   +               run;
1315878   +               data _null_;
1315879   +                  file looppub mod;
1315880   +                  put "&em_codebar;";
1315881   +                  %if "&j" ne "&endloopnum" %then %do;
1315882   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1315883   +                  %end;
1315884   +                  %else %do;
1315885   +                      put "* &headerString: accumulate final probabilities;";
1315886   +                  %end;
1315887   +                  %do k=1 %to &prednum;
1315888   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1315889   +                  %end;
1315890   +               run;
1315891   +           %end;
1315892   +           %if "&j" ne "&endloopnum" %then %do;
1315893   +               data _null_;
1315894   +                  file loopflow mod;
1315895   +                  put "&em_codebar;";
1315896   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1315897   +                  put "&em_codebar;";
1315898   +               %do k=1 %to &prednum;
1315899   +                  put "&&tempvars&k = &&predvars&k;";
1315900   +               %end;
1315901   +               run;
1315902   +               data _null_;
1315903   +                  file looppub mod;
1315904   +                  put "&em_codebar;";
1315905   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1315906   +                  put "&em_codebar;";
1315907   +               %do k=1 %to &prednum;
1315908   +                   put "&&tempvars&k = &&predvars&k;";
1315909   +               %end;
1315910   +               run;
1315911   +           %end;
1315913   +       %end;
1315914   +   %end;
1315916   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
1315917   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
1315919   +   filename loopflow;
1315920   +   filename looppub;
1315921   +   filename empub;
1315923   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
1315924   +   %let gpTrain=;
1315925   +   %let gpValidate=;
1315926   +   %let gpTest=;
1315928   +   data _null_;
1315929   +      set &groupImportDs;
1315930   +      select(upcase(port));
1315931   +          when('DATA')     call symput('gpTrain',    strip(dataset));
1315932   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
1315933   +          when('TEST')     call symput('gpTest',     strip(dataset));
1315934   +       otherwise;
1315935   +      end;
1315936   +   run;
1315938   +   %if "&gpTrain" ne "" %then %do;
1315940   +       %scoreTables(data=&em_lib..&gpTrain,     out=&em_export_train,    scoreref=emflow, prescore=Y);
1315942   +       %if &targetType ne INTERVAL %then %do;
1315943   +           %makeClassificationVars(target=&targetname, data=&em_export_train, decmeta=&endgrp_decmeta, publish=N, fref=emflow);
1315944   +       %end;
1315946   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
1315948   +       %let decflow = %sysfunc(Pathname(WORK))&em_dsep._decflow.sas;
1315950   +       %em_decidecode(data=&em_export_train , decdata=&ENDGRP_DECDATA , decmeta=&ENDGRP_DECMETA ,
1315951   +                                                           noresfile=, resfile=%nrbquote(&decflow));
1315953   +       filename _decflow "&decflow";
1315954   +       %em_copyfile(infref=_decflow, outfref=emflow, append=Y);
1315955   +       filename _decflow;
1315957   +   %end;
1315959   +   %if "&gpTrain" ne "" %then
1315960   +        %scoreTables(data=&em_lib..%sysfunc(strip(&gpTrain)),     out=&em_export_train,    scoreref=emflow);
1315961   +   %if "&gpValidate" ne "" %then
1315962   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),  out=&em_export_validate, scoreref=emflow);
1315963   +   %if "&gpTest" ne "" %then
1315964   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),      out=&em_export_test,     scoreref=emflow);
1315966   +   filename emflow;
1315968   +%mend boostbagcode;
1315970   +%macro score;
1315972   +   filename _dec catalog "sashelp.emutil.em_decidecode.source";
1315973   +   %inc _dec;
1315974   +   filename _dec;
1315976   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %goto doendpl;
1315978   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1315979   +       %let emexceptionstring = nomodeltarget;
1315980   +       %goto doendpl;
1315981   +   %end;
1315983   +   %LET GROUPID=;
1315984   +   %let LOOPTYPE=;
1315985   +   data _null_;
1315986   +      set &em_import_data_eminfo;
1315987   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1315988   +      call symput('GROUPID',   strip(data));
1315989   +      call symput('LOOPTYPE', strip(key));
1315990   +   run;
1315992   +   %em_getname(key=PATH, type=DATA);
1315994   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
1315995   +   %include temp;
1315996   +   filename temp;
1315998   +   %em_gettrainpath(NODEID=&em_nodeid, OUTPATH= score_path);
1316000   +   %if &emloopnumber = 1 and %sysfunc(exist(&em_user_path)) %then %do;
1316001   +       %let deleteString = &em_nodeid._path;
1316002   +       proc datasets lib=&em_lib nolist;
1316003   +          delete &deleteString;
1316004   +       run;
1316005   +       quit;
1316006   +   %end;
1316008   +   %if ^%sysfunc(exist(WORK.score_path)) %then %goto doendpl;
1316010   +   data score_path;
1316011   +      retain LOOPID &emloopnumber;
1316012   +      set score_path;
1316013   +   run;
1316015   +   proc append base=&em_user_path  data=score_path;
1316016   +   run;
1316018   +   %let EnsembleIndex=0;
1316019   +   data _null_;
1316020   +      retain index 0 ensembleIndex 0;
1316021   +      set score_Path end=eof;
1316022   +      if nodelabel = "&groupid" or index then do;
1316023   +         index + 1;
1316024   +         call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
1316025   +         call symput('loopdesc'!!strip(put(index, best.)), strip(component));
1316026   +      end;
1316027   +      if component='Ensemble' then ensembleIndex = index;
The SAS System
 
1316028   +      if eof then do;
1316029   +         call symput('loopcodenum', strip(put(index, best.)));
1316030   +         call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
1316031   +      end;
1316032   +   run;
1316034   +   proc datasets lib=work nolist;
1316035   +      delete score_Path;
1316036   +   run;
1316037   +   quit;
1316039   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
1316040   +       %boostbagcode(groupid=&groupid, type=&looptype, EnsembleIndex=&EnsembleIndex);
1316042   +   %doendpl:
1316044   +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename _dec catalog "sashelp.emutil.em_decidecode.source";
NOTE: %INCLUDE (level 1) file _DEC is file SASHELP.EMUTIL.EM_DECIDECODE.SOURCE.
1316045   +/*
1316046   +       MACRO: EM_DECIDECODE
1316047   +
1316048   +       PURPOSE: Generate EM Decide Score Code for non-interval target.
1316049   +       SUPPORT: Taiyeong Lee
1316050   +
1316051   +       HISTORY: 01OCT04 Initial code
1316052   +       NOTE:    All parameters are optional, call %EM_DECIDECODE()
1316053   +                to add the corresponding decision code
1316054   +
1316055   +*/
1316056   +
1316057   +
1316058   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
1316059   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
1316060   +
1316061   +    %do;
1316062   +    %let m_data      = &data;
1316063   +    %let m_decdata   = &decdata;
1316064   +    %let m_decmeta   = &decmeta;
1316065   +    %let m_noresfile = &noresfile;
1316066   +    %let m_resfile   = &resfile;
1316067   +    dm "afa c=sashelp.emutil.decidecode.scl";
1316068   +  %end;
1316069   +%mend EM_DECIDECODE;
1316070   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename _dec;
NOTE: Fileref _DEC has been deassigned.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Neural_EMINFO;
MPRINT(SCORE):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(SCORE):   call symput('GROUPID', strip(data));
MPRINT(SCORE):   call symput('LOOPTYPE', strip(key));
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
1316071   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
1316072   +   proc display c=sashelp.emcore.pathscorecode.scl;
1316073   +   run;
1316074   +%mend EM_GETTRAINPATH;
1316075   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
1316076    data score_path;
MPRINT(EM_GETTRAINPATH):   data score_path;
1316077    length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
1316078    nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
1316079    parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
1316080    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1316081    component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
1316082    tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
1316083    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316084    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316085    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316086    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316087    output;
MPRINT(EM_GETTRAINPATH):   output;
1316088    nodelabel="Filter";
MPRINT(EM_GETTRAINPATH):   nodelabel="Filter";
1316089    parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
1316090    description="Filtering";
MPRINT(EM_GETTRAINPATH):   description="Filtering";
1316091    component="Filter";
MPRINT(EM_GETTRAINPATH):   component="Filter";
1316092    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1316093    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316094    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316095    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316096    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316097    output;
MPRINT(EM_GETTRAINPATH):   output;
1316098    nodelabel="Impt";
MPRINT(EM_GETTRAINPATH):   nodelabel="Impt";
1316099    parent="Filter";
MPRINT(EM_GETTRAINPATH):   parent="Filter";
1316100    description="Imputation";
MPRINT(EM_GETTRAINPATH):   description="Imputation";
1316101    component="Impute";
MPRINT(EM_GETTRAINPATH):   component="Impute";
1316102    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1316103    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316104    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316105    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316106    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316107    output;
MPRINT(EM_GETTRAINPATH):   output;
1316108    nodelabel="EMCODE2";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE2";
1316109    parent="Impt";
MPRINT(EM_GETTRAINPATH):   parent="Impt";
1316110    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1316111    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1316112    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1316113    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316114    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316115    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316116    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316117    output;
MPRINT(EM_GETTRAINPATH):   output;
1316118    nodelabel="Meta2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta2";
1316119    parent="EMCODE2";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE2";
1316120    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1316121    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1316122    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1316123    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316124    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316125    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316126    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316127    output;
MPRINT(EM_GETTRAINPATH):   output;
1316128    nodelabel="EMCODE3";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE3";
1316129    parent="Meta2";
MPRINT(EM_GETTRAINPATH):   parent="Meta2";
1316130    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1316131    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1316132    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1316133    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316134    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316135    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316136    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316137    output;
MPRINT(EM_GETTRAINPATH):   output;
1316138    nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
1316139    parent="EMCODE3";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE3";
1316140    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1316141    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1316142    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1316143    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316144    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316145    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316146    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316147    output;
MPRINT(EM_GETTRAINPATH):   output;
1316148    nodelabel="Meta";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta";
1316149    parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
1316150    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1316151    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1316152    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1316153    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316154    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316155    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316156    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316157    output;
MPRINT(EM_GETTRAINPATH):   output;
1316158    nodelabel="Trans2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans2";
1316159    parent="Meta";
MPRINT(EM_GETTRAINPATH):   parent="Meta";
1316160    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1316161    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1316162    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1316163    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316164    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316165    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316166    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316167    output;
MPRINT(EM_GETTRAINPATH):   output;
1316168    nodelabel="Grp9";
MPRINT(EM_GETTRAINPATH):   nodelabel="Grp9";
1316169    parent="Trans2";
MPRINT(EM_GETTRAINPATH):   parent="Trans2";
1316170    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1316171    component="StartGroup";
MPRINT(EM_GETTRAINPATH):   component="StartGroup";
1316172    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1316173    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316174    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316175    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316176    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316177    output;
MPRINT(EM_GETTRAINPATH):   output;
1316178    nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
1316179    parent="Grp9";
MPRINT(EM_GETTRAINPATH):   parent="Grp9";
1316180    description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
1316181    component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
1316182    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1316183    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316184    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316185    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316186    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316187    output;
MPRINT(EM_GETTRAINPATH):   output;
1316188    nodelabel="EndGrp10";
MPRINT(EM_GETTRAINPATH):   nodelabel="EndGrp10";
1316189    parent="Neural";
MPRINT(EM_GETTRAINPATH):   parent="Neural";
1316190    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1316191    component="EndGroup";
MPRINT(EM_GETTRAINPATH):   component="EndGroup";
1316192    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1316193    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1316194    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1316195    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1316196    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1316197    output;
MPRINT(EM_GETTRAINPATH):   output;
1316198    run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK.SCORE_PATH has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(SCORE):  ;
MPRINT(SCORE):   data score_path;
MPRINT(SCORE):   retain LOOPID 4;
MPRINT(SCORE):   set score_path;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: The data set WORK.SCORE_PATH has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc append base=EMWS1.EndGrp10_PATH data=score_path;
MPRINT(SCORE):   run;
 
NOTE: Appending WORK.SCORE_PATH to EMWS1.ENDGRP10_PATH.
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: 12 observations added.
NOTE: The data set EMWS1.ENDGRP10_PATH has 48 observations and 10 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   retain index 0 ensembleIndex 0;
MPRINT(SCORE):   set score_Path end=eof;
MPRINT(SCORE):   if nodelabel = "Grp9" or index then do;
MPRINT(SCORE):   index + 1;
MPRINT(SCORE):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(SCORE):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(SCORE):   end;
MPRINT(SCORE):   if component='Ensemble' then ensembleIndex = index;
MPRINT(SCORE):   if eof then do;
MPRINT(SCORE):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(SCORE):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete score_Path;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.SCORE_PATH (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: EndGrp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1316199    *------------------------------------------------------------*;
1316200    * End SCORE: EndGrp10;
1316201    *------------------------------------------------------------*;
1316202
 
1316203    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1316204    * EndGrp10: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * EndGrp10: Scoring DATA data;
1316205    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1316206    data EMWS1.EndGrp10_TRAIN
1316207    / view=EMWS1.EndGrp10_TRAIN
1316208    ;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_TRAIN / view=EMWS1.EndGrp10_TRAIN ;
1316209    set EMWS1.Neural_TRAIN
1316210    ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN ;
1316211    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1316212    quit;
 
1316214    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
1316215    * EndGrp10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp10: Computing metadata for TRAIN data;
1316216    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp10_TRAIN out=WORK.M0HFJZLH noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0HFJZLH;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0HFJZLH(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0HFJZLH;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0HFJZLH;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0FA6E90 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2W93UPL(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FA6E90;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp10";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1316562    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1316563    set EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO;
1316564    where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
1316565    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMINFO.
      WHERE (DATA='EndGrp10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1316566    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMINFO;
1316567    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1316568    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1316569    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1316573    run;
1316574    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
1316575    set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
1316576    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1316577    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
1316578    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1316579    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1316580    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1316581    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1316582    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1316583    proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1316584    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1316585    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1316586    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
1316587    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1316588    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1316589    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1316590    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1316591    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1316592    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1316593    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:39:51 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:39:51 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3DG0TJ2 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3DG0TJ2 new;
MPRINT(EM_DIAGRAM):   run;
1316617    data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT;
1316618    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1316619    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1316620    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1316621    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1316622    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1316623    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
1316624    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1316625    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1316626    %let _EMwarndup = 0;
1316627    %let _EMtargetdup =;
1316628    %let _EMASEtargetdup =;
1316629    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1316630    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1316631    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1316632    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1316633    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1316634    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1316635    end;
MPRINT(EM_DIAGRAM):   end;
1316636    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1316637    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
1316638    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1316639    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 20 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1316640    proc sort data=EMWS1.EndGrp10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
1316641    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1316642    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 20 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1316643    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1316644    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1316645    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1316646    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 20 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1316647    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1316648    set EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_CMeta_TRAIN;
1316649    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
1316650    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1316651    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1316652    set EMWS1.EndGrp10_TRAIN(keep=
1316653    F_DepVar
1316654    I_DepVar
1316655    P_DepVar0
1316656    P_DepVar1
1316657    R_DepVar0
1316658    R_DepVar1
1316659    U_DepVar
1316660    _WARN_
1316661    DepVar
1316662    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1316663    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2210 observations read from the data set EMWS1.GRP9_TRAIN.
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2210 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: There were 2210 observations read from the data set EMWS1.ENDGRP10_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2210 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
1320850    %let _cn = %sysfunc(getoption(CENTER));
1320851    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1320852    proc print data=EMWS1.EndGrp10_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMREPORTFIT noobs label;
1320853    var STAT LABEL TRAIN
1320854    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
1320855    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1320856    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1320857    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1320858    run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 878.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1320859    title10;
MPRINT(EM_DIAGRAM):   title10;
1320860    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1320861    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION nothreads;
1320862    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1320863    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1320864    %let _cn = %sysfunc(getoption(CENTER));
1320865    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1320866    proc print data=EMWS1.EndGrp10_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMCLASSIFICATION noobs label;
1320867    var from into pct_row pct_col count percent
1320868    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1320869    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1320870    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1320871    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1320872    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1320873    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1320874    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1320875    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1320876    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1320877    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1320878    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1320879    run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 879.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1320880    title9;
MPRINT(EM_DIAGRAM):   title9;
1320881    title10;
MPRINT(EM_DIAGRAM):   title10;
1320882    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1320883    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1320884    modify EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1320885    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1320886    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1320887    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMRANK.DATA.
1320888    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
1320889    %let _cn = %sysfunc(getoption(CENTER));
1320890    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1320891    proc print data=EMWS1.EndGrp10_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMRANK label noobs;
1320892    var
1320893    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1320894    by
1320895    notsorted DATAROLE
1320896    notsorted TARGET
1320897    notsorted TARGETLABEL
1320898    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1320899    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1320900    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1320901    run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMRANK.
NOTE: The PROCEDURE PRINT printed page 880.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1320902    title10;
MPRINT(EM_DIAGRAM):   title10;
1320903    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1320904    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1320905    modify EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1320906    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1320907    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1320908    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMSCOREDIST.DATA.
1320909    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
1320910    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1320911    set EMWS1.Grp9_GROUPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp9_GROUPINFO;
1320912    where _LOOP_=4;
MPRINT(EM_DIAGRAM):   where _LOOP_=4;
1320913    call symput('LOOP_WHERE', strip(_wheredesc_));
MPRINT(EM_DIAGRAM):   call symput('LOOP_WHERE', strip(_wheredesc_));
1320914    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP9_GROUPINFO.
      WHERE _LOOP_=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1320915    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1320916    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1320917    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1320918    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1320919    set EMWS1.EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK;
1320920    _LOOP_ =4;
MPRINT(EM_DIAGRAM):   _LOOP_ =4;
1320921    _WHERE_ ="^(cv_var =4)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =4)";
1320922    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMRANK.
NOTE: The data set WORK.TEMP has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1320923    data EMWS1.EndGrp10_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMRANK_LOOP;
1320924    set EMWS1.EndGrp10_EMRANK_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK_LOOP temp;
1320925    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set EMWS1.ENDGRP10_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMRANK_LOOP has 80 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1320926    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1320927    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1320928    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1320929    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1320930    set EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST;
1320931    _LOOP_ =4;
MPRINT(EM_DIAGRAM):   _LOOP_ =4;
1320932    _WHERE_ ="^(cv_var =4)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =4)";
1320933    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST.
NOTE: The data set WORK.TEMP has 20 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1320934    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
1320935    set EMWS1.EndGrp10_EMSCOREDIST_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST_LOOP temp;
1320936    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP has 80 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1320937    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1320938    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1320939    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1320940    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1320941    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1320942    _LOOP_ =4;
MPRINT(EM_DIAGRAM):   _LOOP_ =4;
1320943    _WHERE_ ="^(cv_var =4)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =4)";
1320944    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set WORK.TEMP has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1320945    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
1320946    set EMWS1.EndGrp10_EMOUTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT_LOOP temp;
1320947    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT_LOOP has 4 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1320948    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1320949    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1320950    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1320951    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1320952    set EMWS1.EndGrp10_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT;
1320953    _LOOP_ =4;
MPRINT(EM_DIAGRAM):   _LOOP_ =4;
1320954    _WHERE_ ="^(cv_var =4)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =4)";
1320955    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set WORK.TEMP has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1320956    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
1320957    set EMWS1.EndGrp10_EMREPORTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT_LOOP temp;
1320958    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 63 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP.
NOTE: There were 21 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1320959    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1320960    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1320961    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1320962    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1320963    set EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION;
1320964    _LOOP_ =4;
MPRINT(EM_DIAGRAM):   _LOOP_ =4;
1320965    _WHERE_ ="^(cv_var =4)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =4)";
1320966    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
NOTE: The data set WORK.TEMP has 4 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
1320967    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
1320968    set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP temp;
1320969    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP has 16 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
