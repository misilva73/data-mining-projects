*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:43:38 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:43:33 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:43:33 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VBNCEJ "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VBNCEJ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMGROUP\EMLOG_5.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:43:33 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMGROUP\EMOUTPUT_5.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:43:33 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
1648607    proc freq data=EMWS1.EndGrp10_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EndGrp10_VariableSet noprint;
1648608    table ROLE*LEVEL/out=WORK.EndGrp10META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EndGrp10META;
1648609    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_VARIABLESET.
NOTE: The data set WORK.ENDGRP10META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
1648610    proc print data=WORK.EndGrp10META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp10META label noobs;
1648611    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
1648612    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
1648613    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1648614    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
1648615    run;
 
NOTE: There were 8 observations read from the data set WORK.ENDGRP10META.
NOTE: The PROCEDURE PRINT printed page 1100.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1648616    title10;
MPRINT(EM_DIAGRAM):   title10;
1648617    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN
EMWS1.Neural_TRAIN EMWS1.Neural_TRAIN EMWS1 Neural_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
1648646    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp10_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
1648647    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
1648648    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
1648649       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
1648650    set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL_DEPVAR_DM( where=(_TYPE_="TARGET"));
1648651    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
1648652    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
1648653    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
1648654    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
1648655    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
1648656    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
1648657    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
1648658    end;
MPRINT(EM_DIAGRAM):   end;
1648659    output;
MPRINT(EM_DIAGRAM):   output;
1648660    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP10_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
1648661    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1648662    proc print data=WORK.EndGrp10_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp10_EVENT noobs label;
1648663    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
1648664    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1648665    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
1648666    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP10_EVENT.
NOTE: The PROCEDURE PRINT printed page 1101.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1648667    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
1648668    proc print data = EMWS1.Neural_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural_DepVar_DM noobs label;
1648669    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
1648670    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
1648671    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
1648672    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1648673    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
1648674    run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 1102.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1648675    title10;
MPRINT(EM_DIAGRAM):   title10;
1648676    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp10: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=305;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.1397800183318;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=1877;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86021998166819;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
1649150    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1649151    * EndGrp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EndGrp10: Generation of macros and macro variables;
1649152    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
1649153    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
1649154    %let EMEXCEPTIONSTRING=;
1649155    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1649156    * TRAIN: EndGrp10;
MPRINT(EM_DIAGRAM):   * TRAIN: EndGrp10;
1649157    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649158    %let EM_ACTION = TRAIN;
1649159    %let syscc = 0;
1649160    %macro main;
1649161       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1649162
1649163           filename temp catalog 'sashelp.emutil.endgp_train.source';
1649164           %include temp;
1649165           filename temp;
1649166
1649167           %train;
1649168
1649169       %end;
1649170       %else
1649171          %if %upcase(&EM_ACTION) = SCORE %then %do;
1649172
1649173           filename temp catalog 'sashelp.emutil.endgp_score.source';
1649174           %include temp;
1649175           filename temp;
1649176
1649177           %score;
1649178       %end;
1649179       %else
1649180       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1649181
1649182           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1649183           %include temp;
1649184           filename temp;
1649185
1649186           %postloop;
1649187
1649188       %end;
1649189
1649190       %doendm:
1649191    %mend main;
1649192
1649193    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_TRAIN.SOURCE.
1649194   +%macro copyModelDs(model=, key=);
1649195   +   %let modelDs  = &em_lib..&model._&key;
1649196   +   %let reportDs = &em_lib..&em_nodeid._&key;
1649197   +   %if %sysfunc(exist(&modelDs)) %then %do;
1649198   +       data &reportDs;
1649199   +          length ModelId $16;
1649200   +          retain ModelId "&model";
1649201   +          set &modelDs;
1649202   +       run;
1649203   +   %end;
1649204   +%mend copyModelDs;
1649205   +
1649206   +%macro traintarget(groupid=);
1649207   +   %em_getname(key=emoutfit, type=DATA);
1649208   +   %let targetname=;
1649209   +   data _null_;
1649210   +     set &em_lib..&groupid._&looptype;
1649211   +     where _LOOP_ = &EMLOOPNUMBER;
1649212   +     call symput('targetname', strip(_TARGET_));
1649213   +   run;
1649214   +   %let modelId =;
1649215   +   data _null_;
1649216   +      set &em_import_data_eminfo;
1649217   +      where key = 'MODEL' and TARGET = "&targetname";
1649218   +      call symput('modelId',   strip(data));
1649219   +   run;
1649220   +   %if "&modelId" ne "" %then %do;
1649221   +       %copyModelDs(model=&modelid, key=EMRANK);
1649222   +       %copyModelDs(model=&modelid, key=EMSCOREDIST);
1649223   +       %copyModelDs(model=&modelid, key=EMOUTFIT);
1649224   +       %copyModelDs(model=&modelid, key=EMCLASSIFICATION);
1649225   +       %copyModelDs(model=&modelid, key=EMEVENREPORT);
1649226   +       %copyModelDs(model=&modelid, key=EMRESIDUALS);
1649227   +       %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1649228   +   %end;
1649229   +
1649230   +   %doendtgp:
1649231   +%mend;
1649232   +
1649233   +%macro trainboost(groupid=);
1649234   +
1649235   +   %let boostinfoDs  = &em_lib..%sysfunc(strip(&groupid))_boostinfo;
1649236   +   %let boostscoreDs = &em_lib..%sysfunc(strip(&groupid))_boostscore;
1649237   +
1649238   +   data _null_;
1649239   +      retain index 0;
1649240   +      set &boostinfoDs;
1649241   +      call symput('targetname', strip(_target_));
1649242   +   run;
1649243   +
1649244   +   %if "&em_import_data_eminfo" ne "" and %sysfunc(exist(&em_import_data_eminfo)) %then %do;
1649245   +       %let decmeta = ;
1649246   +       data _null_;
1649247   +          set &em_import_data_eminfo;
1649248   +          where (key='DECMETA' and TARGET="&targetname");
1649249   +          call symput('DECMETA', strip(data));
1649250   +       run;
1649251   +       %if "&decmeta" eq "" %then %do;
1649252   +           %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1649253   +           %goto doendtb;
1649254   +       %end;
1649255   +
1649256   +       %let predictedVars=;
1649257   +       data _null_;
1649258   +          set &decmeta;
1649259   +          if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1649260   +          else
1649261   +          if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1649262   +          else
1649263   +          if _TYPE_ = 'PREDICTED' then call symput('predictedvars', strip(symget('predictedVars'))!!' '!!strip(variable));
1649264   +       run;
1649265   +       %if %index(&EM_DEBUG, _ALL_) %then %do;
1649266   +           %put GROUPID: &GROUPID DECMETA: &DECMETA FROMVAR: &FROMVAR INTO: &INTOVAR PREDICTED: &PREDICTEDVARS;
1649267   +       %end;
1649268   +   %end;
1649269   +
1649270   +   * ;
1649271   +   * ENDGROUP &NODEID : Boosting scoring ;
1649272   +   * ;
1649273   +   data &em_lib..&groupid._boostscore;
1649274   +      set &em_import_data;
1649275   +      keep _WARN_ &targetname &fromvar &intovar &predictedvars;
1649276   +      %if "%em_freq" ne "" %then %do ;
1649277   +          keep %em_freq ;
1649278   +      %end ;
1649279   +   run;
1649280   +   %em_model(TARGET=&targetname , ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1649281   +
1649282   +   %doendtb:
1649283   +
1649284   +%mend trainboost;
1649285   +
1649286   +%macro trainbag(groupid=);
1649287   +   %let baginfoDs  = &em_lib..%sysfunc(strip(&groupid))_baginfo;
1649288   +   data _null_;
1649289   +      retain index 0;
1649290   +      set &baginfoDs;
1649291   +      call symput('targetname', strip(_target_));
1649292   +   run;
1649293   +
1649294   +   %let decmeta = ;
1649295   +   data _null_;
1649296   +       set &em_import_data_eminfo;
1649297   +       where (key='DECMETA' and TARGET="&targetname");
1649298   +       call symput('DECMETA', strip(data));
1649299   +   run;
1649300   +   %if "&decmeta" eq "" %then %do;
1649301   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1649302   +       %goto doendtg;
1649303   +   %end;
1649304   +
1649305   +   %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1649306   +
1649307   +   %doendtg:
1649308   +%mend trainbag;
1649309   +
1649310   +%macro traingroup(groupid=);
1649311   +   %let targetNum = 0;
1649312   +
1649313   +   data _temp1;
1649314   +      set &em_lib..&groupid._eminfo;
1649315   +      where key='MODEL';
1649316   +   run;
1649317   +   data _temp2;
1649318   +      set &em_import_data_eminfo;
1649319   +      where key='MODEL';
1649320   +   run;
1649321   +   proc sort data=_temp1; by TARGET DATA;
1649322   +   proc sort data=_temp2; by TARGET DATA;
1649323   +   data _temp2;
1649324   +      merge _temp1(in=_a) _temp2(in=_b);
1649325   +      by TARGET DATA;
1649326   +      if ^_a and _b then output;
1649327   +   run;
1649328   +   data _null_;
1649329   +      retain index 0;
1649330   +      set _temp2 end=eof;
1649331   +      index +1;
1649332   +      where key ='MODEL';
1649333   +      call symput('MODELID'!!strip(put(index, best.)), strip(data));
1649334   +      call symput('TARGET'!!strip(put(index, best.)), strip(target));
1649335   +      if eof then
1649336   +         call symput('targetnum', strip(put(index, best.)));
1649337   +   run;
1649338   +   proc datasets lib=work nolist;
1649339   +      delete _temp1 _temp2;
1649340   +   run;
1649341   +   %if "&targetNum" eq "0" %then %goto doendtgp;
1649342   +
1649343   +   %let modelString =;
1649344   +   %do i=1 %to &targetnum;
1649345   +        %if ^%sysfunc(indexw(&modelString, &&modelid&i)) %then %do;
1649346   +            %copyModelDs(model=&&modelid&i, key=EMRANK);
1649347   +            %copyModelDs(model=&&modelid&i, key=EMSCOREDIST);
1649348   +            %copyModelDs(model=&&modelid&i, key=EMOUTFIT);
1649349   +            %copyModelDs(model=&&modelid&i, key=EMCLASSIFICATION);
1649350   +            %copyModelDs(model=&&modelid&i, key=EMEVENREPORT);
1649351   +            %copyModelDs(model=&&modelid&i, key=EMRESIDUALS);
1649352   +            %let modelString = &modelString &&modelid&i;
1649353   +       %end;
1649354   +       %em_model(TARGET=&&target&i, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N, CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
1649355   +   %end;
1649356   +
1649357   +   %doendtgp:
1649358   +
1649359   +%mend traingroup;
1649360   +
1649361   +%macro getSize(data=, nobsvar=);
1649362   +
1649363   +   %if %sysfunc(exist(&data, DATA)) %then %do;
1649364   +       %let dsid = %sysfunc(open(&data));
1649365   +       %if &dsid %then %do;
1649366   +           %let &&nobsvar = %sysfunc(attrn(&dsid, NLOBS));
1649367   +           %let dsid = %sysfunc(close(&dsid));
1649368   +       %end;
1649369   +   %end;
1649370   +    %if %sysfunc(exist(&data, VIEW)) %then %do;
1649371   +        proc sql;
1649372   +           reset noprint;
1649373   +           select count(*) into :&nobsvar from &data;
1649374   +        quit;
1649375   +   %end;
1649376   +
1649377   +%mend getsize;
1649378   +
1649379   +%macro train;
1649380   +
1649381   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %do;
1649382   +      %let EM_TOOLTYPE=UTILITY;
1649383   +      %if %sysfunc(exist(&em_data_eminfo)) %then %do;
1649384   +          proc delete data=&em_data_eminfo;
1649385   +          run;
1649386   +      %end;
1649387   +      %goto doendtr;
1649388   +   %end;
1649389   +
1649390   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1649391   +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
1649392   +       %goto doendtr;
1649393   +   %end;
1649394   +
1649395   +   %let xgroupid = ;
1649396   +   data _null_;
1649397   +      set &em_import_data_eminfo;
1649398   +      where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1649399   +      call symput('XGROUPID',  strip(data));
1649400   +      call symput('LOOPTYPE', strip(key));
1649401   +   run;
1649402   +
1649403   +   %if "&looptype" eq "BOOSTINFO" %then %do;
1649404   +       %let nDataObs=0;
1649405   +       %getSize(data=&em_import_data, nobsvar=nDataObs);
1649406   +
1649407   +       %let nStartObs=0;
1649408   +       %getsize(data=&em_lib..&xgroupid._train, nobsvar=nStartObs);
1649409   +
1649410   +       %if &nDataObs ne &nStartObs %then %do;
1649411   +           %let emexceptionstring = EMTOOL.BOOSTERRORNOBSCHANGED;
1649412   +           %goto doendtr;
1649413   +       %end;
1649414   +
1649415   +       %trainboost(groupid=&xgroupid);
1649416   +   %end;
1649417   +   %else
1649418   +   %if "&looptype" eq "BAGINFO" %then %do;
1649419   +       %trainbag(groupid=&xgroupid);
1649420   +   %end;
1649421   +   %else
1649422   +   %if "&looptype" eq "GROUPINFO" %then %do;
1649423   +       %traingroup(groupid=&xgroupid);
1649424   +   %end;
1649425   +   %else
1649426   +   %if "&looptype" eq "TARGETINFO" %then %do;
1649427   +       %traintarget(groupid=&xgroupid);
1649428   +   %end;
1649429   +
1649430   +   data &em_data_eminfo;
1649431   +      length TARGET KEY $32  DATA $43;
1649432   +      TARGET=''; KEY='ENDGROUP'; DATA="&em_nodeid"; output;
1649433   +   run;
1649434   +
1649435   +   %let EM_TOOLTYPE=MODEL;
1649436   +
1649437   +   %doendtr:
1649438   +
1649439   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.Neural_EMINFO;
MPRINT(TRAIN):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(TRAIN):   call symput('XGROUPID', strip(data));
MPRINT(TRAIN):   call symput('LOOPTYPE', strip(key));
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp1;
MPRINT(TRAINGROUP):   set EMWS1.Grp9_eminfo;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRP9_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   set EMWS1.Neural_EMINFO;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp1;
MPRINT(TRAINGROUP):   by TARGET DATA;
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp2;
MPRINT(TRAINGROUP):   by TARGET DATA;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   merge _temp1(in=_a) _temp2(in=_b);
MPRINT(TRAINGROUP):   by TARGET DATA;
MPRINT(TRAINGROUP):   if ^_a and _b then output;
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP1.
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _null_;
MPRINT(TRAINGROUP):   retain index 0;
MPRINT(TRAINGROUP):   set _temp2 end=eof;
MPRINT(TRAINGROUP):   index +1;
MPRINT(TRAINGROUP):   where key ='MODEL';
MPRINT(TRAINGROUP):   call symput('MODELID'!!strip(put(index, best.)), strip(data));
MPRINT(TRAINGROUP):   call symput('TARGET'!!strip(put(index, best.)), strip(target));
MPRINT(TRAINGROUP):   if eof then call symput('targetnum', strip(put(index, best.)));
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc datasets lib=work nolist;
MPRINT(TRAINGROUP):   delete _temp1 _temp2;
MPRINT(TRAINGROUP):   run;
 
NOTE: Deleting WORK._TEMP1 (memtype=DATA).
NOTE: Deleting WORK._TEMP2 (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMRANK;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMRANK;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The data set EMWS1.ENDGRP10_EMRANK has 20 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMSCOREDIST;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP10_EMSCOREDIST has 20 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMOUTFIT;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural";
MPRINT(COPYMODELDS):   set EMWS1.Neural_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.EndGrp10_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET='';
MPRINT(TRAIN):   KEY='ENDGROUP';
MPRINT(TRAIN):   DATA="EndGrp10";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EndGrp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649440    *------------------------------------------------------------*;
1649441    * End TRAIN: EndGrp10;
1649442    *------------------------------------------------------------*;
1649443
 
1649444    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1649445    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
1649446    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649447    ;
MPRINT(EM_DIAGRAM):   ;
1649448    ;
MPRINT(EM_DIAGRAM):   ;
1649449    ;
MPRINT(EM_DIAGRAM):   ;
1649450    ;
MPRINT(EM_DIAGRAM):   ;
1649451    quit;
MPRINT(EM_DIAGRAM):   quit;
1649452    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649453    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
1649454    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649455    /*; *"; *'; */
1649456    ;
MPRINT(EM_DIAGRAM):   ;
1649457    run;
MPRINT(EM_DIAGRAM):   run;
1649458    quit;
MPRINT(EM_DIAGRAM):   quit;
1649459    /* Reset EM Options */
1649460    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
1649461    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
1649462    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:43:35 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:43:35 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O37HUJ9C "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O37HUJ9C new;
MPRINT(EM_DIAGRAM):   run;
1649564    %let EMEXCEPTIONSTRING=;
1649565    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1649566    * SCORE: EndGrp10;
MPRINT(EM_DIAGRAM):   * SCORE: EndGrp10;
1649567    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1649568    %let EM_ACTION = SCORE;
1649569    %let syscc = 0;
1649570    %macro main;
1649571       %if %upcase(&EM_ACTION) = TRAIN %then %do;
1649572
1649573           filename temp catalog 'sashelp.emutil.endgp_train.source';
1649574           %include temp;
1649575           filename temp;
1649576
1649577           %train;
1649578
1649579       %end;
1649580       %else
1649581          %if %upcase(&EM_ACTION) = SCORE %then %do;
1649582
1649583           filename temp catalog 'sashelp.emutil.endgp_score.source';
1649584           %include temp;
1649585           filename temp;
1649586
1649587           %score;
1649588       %end;
1649589       %else
1649590       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
1649591
1649592           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
1649593           %include temp;
1649594           filename temp;
1649595
1649596           %postloop;
1649597
1649598       %end;
1649599
1649600       %doendm:
1649601    %mend main;
1649602
1649603    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_SCORE.SOURCE.
1649604   +%macro scoreTables(data=, out=, scoreref=, prescore=);
1649606   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
1649607   +       data &out / view=&out;
1649608   +          set &data
1649610   +          %if "&prescore" = "Y" %then %do;
1649611   +              (obs=1)
1649612   +          %end;
1649614   +          ;
1649616   +          %inc &scoreref;
1649618   +          %if "&prescore" eq "Y" %then %do;
1649619   +              drop I_: R_:;
1649620   +          %end;
1649622   +       run;
1649623   +   %end;
1649625   +%mend scoretables;
1649627   +%macro boostbagcode(groupid=, type=, EnsembleIndex=);
1649628   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
1649629   +   data _null_;
1649630   +      retain index 0;
1649631   +      set &infoDs;
1649632   +      call symput('targetname', strip(_target_));
1649633   +      call symput('endloopnum', strip(_loop_));
1649634   +   run;
1649636   +   %let endgrp_decmeta=;
1649637   +   %let endgrp_decdata=;
1649639   +   data _null_;
1649640   +      set &em_import_data_eminfo;
1649641   +      where key in('MODEL', 'DECMETA', 'DECDATA') and TARGET="&targetname";
1649642   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
1649643   +      else
1649644   +      if key='DECDATA' then call symput('ENDGRP_DECDATA', strip(data));
1649645   +      else call symput('MODELID', strip(data));
1649646   +   run;
1649648   +   %let headerString= Boosting;
1649649   +   %let prefixString= _BoostVar;
1649651   +   %if "&type" = "BAGINFO" %then %do;
1649652   +        %let headerString = Bagging;
1649653   +        %let prefixString= _BagVar;
1649654   +   %end;
1649656   +   %let targetType=;
1649657   +   %let predictedVars=;
1649658   +   data _null_;
1649659   +      retain index;
1649660   +      set &endgrp_decmeta end=eof;
1649661   +      length tempvar $200;
1649662   +      if _TYPE_='TARGET' then call symput('TARGETTYPE', strip(level));
1649663   +      else
1649664   +      if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
1649665   +      else
1649666   +      if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
1649667   +      else
1649668   +      if _TYPE_ = 'PREDICTED' then do;
1649669   +         index+1;
1649670   +         call symput('predvars'!!strip(put(index, best.)), strip(variable));
1649671   +         tempvar = strip("&em_nodeid")!!'_'!!strip(variable);
1649672   +         if length(tempvar)<=32 then call symput('tempvars'!!strip(put(index, best.)), strip(tempvar));
1649673   +         else call symput('tempvars'!!strip(put(index, best.)), strip("&prefixString")!!strip(put(index, best.)));
1649674   +      end;
1649675   +      if eof then
1649676   +         call symput('prednum', strip(put(index, best.)));
1649677   +   run;
1649679   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
1649680   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
1649682   +   filename loopflow "&em_user_loopflowcode";
1649683   +   filename looppub "&em_user_looppubcode";
1649685   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
1649686   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
1649688   +   %if "&emloopnumber" = "1" %then %do;
1649689   +       data _null_;
1649690   +          rc = fdelete('loopflow');
1649691   +          rc = fdelete('looppub');
1649692   +       run;
1649693   +       data _null_;
1649694   +          file loopflow;
1649695   +          put "&em_codebar;";
1649696   +          put "* &em_nodeid: ;" ;
1649697   +          put "* User: &sysuserid;";
1649698   +          put "* Date: &sysdate: &systime;";
1649699   +          put "&em_codebar ;";
1649700   +          put "* Ensemble Code;";
1649701   +          put "&em_codebar ;";
1649702   +          put "* &headerString: Loop=1;";
1649703   +          put "* Temporary Variables;";
1649704   +          %do i= 1 %to &prednum;
1649705   +              put "drop &&tempvars&i;";
1649706   +              put "&&tempvars&i = 0;";
1649707   +          %end;
1649708   +       run;
1649709   +       %em_copyfile(infref=loopflow, outfref=looppub);
1649710   +   %end;
1649712   +   %let j=&emloopnumber;
1649713   +   %do i = 1 %to &loopcodenum;
1649714   +       %let fsourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
1649715   +       %let psourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
1649717   +       %if (&&loopnode&i eq &em_nodeid ) or
1649718   +           ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex )) %then %do;
1649719   +           data _null_;
1649720   +              file loopflow mod;
1649721   +              put "&em_codebar;";
1649722   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1649723   +              put "* User: &sysuserid;";
1649724   +              put "* Date: &sysdate: &systime;";
1649725   +              put "* &headerString: Loop=&j;";
1649726   +              put "&em_codebar;";
1649727   +           run;
1649728   +           data _null_;
1649729   +              file looppub mod;
1649730   +              put "&em_codebar;";
1649731   +              put "* &&loopnode&i: &&loopdesc&i;" ;
1649732   +              put "* User: &sysuserid;";
1649733   +              put "* Date: &sysdate: &systime;";
1649734   +              put "* &headerString: Loop=&j;";
1649735   +              put "&em_codebar;";
1649736   +           run;
1649737   +       %end;
1649739   +       %if &&loopnode&i ne &em_nodeid %then %do;
1649740   +           %if (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex ) %then %do;
1649741   +               filename x catalog "&fsourceEntry";
1649742   +               %em_copyfile(infref=x, outfref=loopflow, append=Y);
1649743   +               filename x;
1649745   +               filename y catalog "&psourceEntry";
1649746   +               %em_copyfile(infref=y, outfref=looppub, append=Y);
1649747   +               filename y;
1649748   +           %end;
1649749   +       %end;
1649750   +       %else %do;
1649751   +           %if "&j" ne "1" %then %do;
1649752   +               %let weight = %eval(&j-1);
1649753   +               data _null_;
1649754   +                  file loopflow mod;
1649755   +                  put "&em_codebar;";
1649756   +                  %if "&j" ne "&endloopnum" %then %do;
1649757   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1649758   +                  %end;
1649759   +                  %else %do;
1649760   +                      put "* &headerString: accumulate final probabilities;";
1649761   +                  %end;
1649762   +                  put "&em_codebar;";
1649763   +                  %do k=1 %to &prednum;
1649764   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1649765   +                  %end;
1649766   +               run;
1649767   +               data _null_;
1649768   +                  file looppub mod;
1649769   +                  put "&em_codebar;";
1649770   +                  %if "&j" ne "&endloopnum" %then %do;
1649771   +                      put "* &headerString: accumulate probabilities for iteration: &j;";
1649772   +                  %end;
1649773   +                  %else %do;
1649774   +                      put "* &headerString: accumulate final probabilities;";
1649775   +                  %end;
1649776   +                  %do k=1 %to &prednum;
1649777   +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
1649778   +                  %end;
1649779   +               run;
1649780   +           %end;
1649781   +           %if "&j" ne "&endloopnum" %then %do;
1649782   +               data _null_;
1649783   +                  file loopflow mod;
1649784   +                  put "&em_codebar;";
1649785   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1649786   +                  put "&em_codebar;";
1649787   +               %do k=1 %to &prednum;
1649788   +                  put "&&tempvars&k = &&predvars&k;";
1649789   +               %end;
1649790   +               run;
1649791   +               data _null_;
1649792   +                  file looppub mod;
1649793   +                  put "&em_codebar;";
1649794   +                  put "* &headerString: Saving Probabilities for Next Iteration;";
1649795   +                  put "&em_codebar;";
1649796   +               %do k=1 %to &prednum;
1649797   +                   put "&&tempvars&k = &&predvars&k;";
1649798   +               %end;
1649799   +               run;
1649800   +           %end;
1649802   +       %end;
1649803   +   %end;
1649805   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
1649806   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
1649808   +   filename loopflow;
1649809   +   filename looppub;
1649810   +   filename empub;
1649812   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
1649813   +   %let gpTrain=;
1649814   +   %let gpValidate=;
1649815   +   %let gpTest=;
1649817   +   data _null_;
1649818   +      set &groupImportDs;
1649819   +      select(upcase(port));
1649820   +          when('DATA')     call symput('gpTrain',    strip(dataset));
1649821   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
1649822   +          when('TEST')     call symput('gpTest',     strip(dataset));
1649823   +       otherwise;
1649824   +      end;
1649825   +   run;
1649827   +   %if "&gpTrain" ne "" %then %do;
1649829   +       %scoreTables(data=&em_lib..&gpTrain,     out=&em_export_train,    scoreref=emflow, prescore=Y);
1649831   +       %if &targetType ne INTERVAL %then %do;
1649832   +           %makeClassificationVars(target=&targetname, data=&em_export_train, decmeta=&endgrp_decmeta, publish=N, fref=emflow);
1649833   +       %end;
1649835   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
1649837   +       %let decflow = %sysfunc(Pathname(WORK))&em_dsep._decflow.sas;
1649839   +       %em_decidecode(data=&em_export_train , decdata=&ENDGRP_DECDATA , decmeta=&ENDGRP_DECMETA ,
1649840   +                                                           noresfile=, resfile=%nrbquote(&decflow));
1649842   +       filename _decflow "&decflow";
1649843   +       %em_copyfile(infref=_decflow, outfref=emflow, append=Y);
1649844   +       filename _decflow;
1649846   +   %end;
1649848   +   %if "&gpTrain" ne "" %then
1649849   +        %scoreTables(data=&em_lib..%sysfunc(strip(&gpTrain)),     out=&em_export_train,    scoreref=emflow);
1649850   +   %if "&gpValidate" ne "" %then
1649851   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),  out=&em_export_validate, scoreref=emflow);
1649852   +   %if "&gpTest" ne "" %then
1649853   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),      out=&em_export_test,     scoreref=emflow);
1649855   +   filename emflow;
1649857   +%mend boostbagcode;
1649859   +%macro score;
1649861   +   filename _dec catalog "sashelp.emutil.em_decidecode.source";
1649862   +   %inc _dec;
1649863   +   filename _dec;
1649865   +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %goto doendpl;
1649867   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
1649868   +       %let emexceptionstring = nomodeltarget;
1649869   +       %goto doendpl;
1649870   +   %end;
1649872   +   %LET GROUPID=;
1649873   +   %let LOOPTYPE=;
1649874   +   data _null_;
1649875   +      set &em_import_data_eminfo;
1649876   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
1649877   +      call symput('GROUPID',   strip(data));
1649878   +      call symput('LOOPTYPE', strip(key));
1649879   +   run;
1649881   +   %em_getname(key=PATH, type=DATA);
1649883   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
1649884   +   %include temp;
1649885   +   filename temp;
1649887   +   %em_gettrainpath(NODEID=&em_nodeid, OUTPATH= score_path);
1649889   +   %if &emloopnumber = 1 and %sysfunc(exist(&em_user_path)) %then %do;
1649890   +       %let deleteString = &em_nodeid._path;
1649891   +       proc datasets lib=&em_lib nolist;
1649892   +          delete &deleteString;
1649893   +       run;
1649894   +       quit;
1649895   +   %end;
1649897   +   %if ^%sysfunc(exist(WORK.score_path)) %then %goto doendpl;
1649899   +   data score_path;
1649900   +      retain LOOPID &emloopnumber;
1649901   +      set score_path;
1649902   +   run;
1649904   +   proc append base=&em_user_path  data=score_path;
1649905   +   run;
1649907   +   %let EnsembleIndex=0;
1649908   +   data _null_;
1649909   +      retain index 0 ensembleIndex 0;
1649910   +      set score_Path end=eof;
1649911   +      if nodelabel = "&groupid" or index then do;
1649912   +         index + 1;
1649913   +         call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
1649914   +         call symput('loopdesc'!!strip(put(index, best.)), strip(component));
1649915   +      end;
1649916   +      if component='Ensemble' then ensembleIndex = index;
1649917   +      if eof then do;
1649918   +         call symput('loopcodenum', strip(put(index, best.)));
1649919   +         call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
1649920   +      end;
1649921   +   run;
1649923   +   proc datasets lib=work nolist;
1649924   +      delete score_Path;
1649925   +   run;
1649926   +   quit;
1649928   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
1649929   +       %boostbagcode(groupid=&groupid, type=&looptype, EnsembleIndex=&EnsembleIndex);
1649931   +   %doendpl:
1649933   +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename _dec catalog "sashelp.emutil.em_decidecode.source";
NOTE: %INCLUDE (level 1) file _DEC is file SASHELP.EMUTIL.EM_DECIDECODE.SOURCE.
1649934   +/*
1649935   +       MACRO: EM_DECIDECODE
1649936   +
1649937   +       PURPOSE: Generate EM Decide Score Code for non-interval target.
1649938   +       SUPPORT: Taiyeong Lee
1649939   +
1649940   +       HISTORY: 01OCT04 Initial code
1649941   +       NOTE:    All parameters are optional, call %EM_DECIDECODE()
1649942   +                to add the corresponding decision code
1649943   +
1649944   +*/
1649945   +
1649946   +
1649947   +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
1649948   + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
1649949   +
1649950   +    %do;
1649951   +    %let m_data      = &data;
1649952   +    %let m_decdata   = &decdata;
1649953   +    %let m_decmeta   = &decmeta;
1649954   +    %let m_noresfile = &noresfile;
1649955   +    %let m_resfile   = &resfile;
1649956   +    dm "afa c=sashelp.emutil.decidecode.scl";
1649957   +  %end;
1649958   +%mend EM_DECIDECODE;
1649959   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename _dec;
NOTE: Fileref _DEC has been deassigned.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Neural_EMINFO;
MPRINT(SCORE):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(SCORE):   call symput('GROUPID', strip(data));
MPRINT(SCORE):   call symput('LOOPTYPE', strip(key));
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
1649960   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
1649961   +   proc display c=sashelp.emcore.pathscorecode.scl;
1649962   +   run;
1649963   +%mend EM_GETTRAINPATH;
1649964   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
1649965    data score_path;
MPRINT(EM_GETTRAINPATH):   data score_path;
1649966    length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
1649967    nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
1649968    parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
1649969    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1649970    component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
1649971    tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
1649972    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1649973    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1649974    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1649975    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1649976    output;
MPRINT(EM_GETTRAINPATH):   output;
1649977    nodelabel="Filter";
MPRINT(EM_GETTRAINPATH):   nodelabel="Filter";
1649978    parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
1649979    description="Filtering";
MPRINT(EM_GETTRAINPATH):   description="Filtering";
1649980    component="Filter";
MPRINT(EM_GETTRAINPATH):   component="Filter";
1649981    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1649982    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1649983    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1649984    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1649985    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1649986    output;
MPRINT(EM_GETTRAINPATH):   output;
1649987    nodelabel="Impt";
MPRINT(EM_GETTRAINPATH):   nodelabel="Impt";
1649988    parent="Filter";
MPRINT(EM_GETTRAINPATH):   parent="Filter";
1649989    description="Imputation";
MPRINT(EM_GETTRAINPATH):   description="Imputation";
1649990    component="Impute";
MPRINT(EM_GETTRAINPATH):   component="Impute";
1649991    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1649992    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1649993    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1649994    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1649995    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1649996    output;
MPRINT(EM_GETTRAINPATH):   output;
1649997    nodelabel="EMCODE2";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE2";
1649998    parent="Impt";
MPRINT(EM_GETTRAINPATH):   parent="Impt";
1649999    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1650000    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1650001    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1650002    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650003    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650004    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650005    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650006    output;
MPRINT(EM_GETTRAINPATH):   output;
1650007    nodelabel="Meta2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta2";
1650008    parent="EMCODE2";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE2";
1650009    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1650010    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1650011    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1650012    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650013    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650014    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650015    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650016    output;
MPRINT(EM_GETTRAINPATH):   output;
1650017    nodelabel="EMCODE3";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE3";
1650018    parent="Meta2";
MPRINT(EM_GETTRAINPATH):   parent="Meta2";
1650019    description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
1650020    component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
1650021    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1650022    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650023    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650024    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650025    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650026    output;
MPRINT(EM_GETTRAINPATH):   output;
1650027    nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
1650028    parent="EMCODE3";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE3";
1650029    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1650030    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1650031    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1650032    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650033    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650034    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650035    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650036    output;
MPRINT(EM_GETTRAINPATH):   output;
1650037    nodelabel="Meta";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta";
1650038    parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
1650039    description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
1650040    component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
1650041    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1650042    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650043    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650044    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650045    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650046    output;
MPRINT(EM_GETTRAINPATH):   output;
1650047    nodelabel="Trans2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans2";
1650048    parent="Meta";
MPRINT(EM_GETTRAINPATH):   parent="Meta";
1650049    description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
1650050    component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
1650051    tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
1650052    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650053    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650054    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650055    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650056    output;
MPRINT(EM_GETTRAINPATH):   output;
1650057    nodelabel="Grp9";
MPRINT(EM_GETTRAINPATH):   nodelabel="Grp9";
1650058    parent="Trans2";
MPRINT(EM_GETTRAINPATH):   parent="Trans2";
1650059    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1650060    component="StartGroup";
MPRINT(EM_GETTRAINPATH):   component="StartGroup";
1650061    tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
1650062    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650063    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650064    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650065    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650066    output;
MPRINT(EM_GETTRAINPATH):   output;
1650067    nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
1650068    parent="Grp9";
MPRINT(EM_GETTRAINPATH):   parent="Grp9";
1650069    description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
1650070    component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
1650071    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1650072    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650073    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650074    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650075    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650076    output;
MPRINT(EM_GETTRAINPATH):   output;
1650077    nodelabel="EndGrp10";
MPRINT(EM_GETTRAINPATH):   nodelabel="EndGrp10";
1650078    parent="Neural";
MPRINT(EM_GETTRAINPATH):   parent="Neural";
1650079    description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
1650080    component="EndGroup";
MPRINT(EM_GETTRAINPATH):   component="EndGroup";
1650081    tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
1650082    FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
1650083    PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
1650084    PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
1650085    accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
1650086    output;
MPRINT(EM_GETTRAINPATH):   output;
1650087    run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK.SCORE_PATH has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(SCORE):  ;
MPRINT(SCORE):   data score_path;
MPRINT(SCORE):   retain LOOPID 5;
MPRINT(SCORE):   set score_path;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: The data set WORK.SCORE_PATH has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc append base=EMWS1.EndGrp10_PATH data=score_path;
MPRINT(SCORE):   run;
 
NOTE: Appending WORK.SCORE_PATH to EMWS1.ENDGRP10_PATH.
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: 12 observations added.
NOTE: The data set EMWS1.ENDGRP10_PATH has 60 observations and 10 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   retain index 0 ensembleIndex 0;
MPRINT(SCORE):   set score_Path end=eof;
MPRINT(SCORE):   if nodelabel = "Grp9" or index then do;
MPRINT(SCORE):   index + 1;
MPRINT(SCORE):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(SCORE):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(SCORE):   end;
MPRINT(SCORE):   if component='Ensemble' then ensembleIndex = index;
MPRINT(SCORE):   if eof then do;
MPRINT(SCORE):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(SCORE):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete score_Path;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.SCORE_PATH (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: EndGrp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1650088    *------------------------------------------------------------*;
1650089    * End SCORE: EndGrp10;
1650090    *------------------------------------------------------------*;
1650091
 
1650092    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1650093    * EndGrp10: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * EndGrp10: Scoring DATA data;
1650094    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1650095    data EMWS1.EndGrp10_TRAIN
1650096    / view=EMWS1.EndGrp10_TRAIN
1650097    ;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_TRAIN / view=EMWS1.EndGrp10_TRAIN ;
1650098    set EMWS1.Neural_TRAIN
1650099    ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN ;
1650100    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP10_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
1650101    quit;
 
1650103    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
1650104    * EndGrp10: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp10: Computing metadata for TRAIN data;
1650105    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp10_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp10_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp10_TRAIN out=WORK.M10_MWL5 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10_MWL5;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M10_MWL5(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10_MWL5;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M10_MWL5;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1301NF3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21QXP6T(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   set WORK.M1301NF3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp10";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp10";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp10";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp10: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1650451    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1650452    set EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO;
1650453    where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp10' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
1650454    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMINFO.
      WHERE (DATA='EndGrp10') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1650455    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMINFO;
1650456    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1650457    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1650458    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
1650462    run;
1650463    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
1650464    set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMINFO WORK.MODELTEMP_INFO;
1650465    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1650466    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp10_EMINFO NOTHREADS;
1650467    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1650468    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1650469    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1650470    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1650471    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1650472    proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp10_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1650473    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1650474    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1650475    data EMWS1.EndGrp10_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp10_EMINFO;
1650476    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1650477    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1650478    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP10_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1650479    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1650480    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1650481    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1650482    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:43:37 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:43:37 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O21SLV60 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O21SLV60 new;
MPRINT(EM_DIAGRAM):   run;
1650506    data EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT;
1650507    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1650508    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
1650509    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
1650510    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
1650511    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1650512    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMREPORTFIT nothreads;
1650513    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
1650514    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1650515    %let _EMwarndup = 0;
1650516    %let _EMtargetdup =;
1650517    %let _EMASEtargetdup =;
1650518    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1650519    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1650520    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
1650521    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
1650522    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
1650523    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
1650524    end;
MPRINT(EM_DIAGRAM):   end;
1650525    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1650526    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_CMeta_TRAIN out=WORK.SUBSETINMETA;
1650527    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1650528    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 20 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
1650529    proc sort data=EMWS1.EndGrp10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp10_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
1650530    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1650531    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 20 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1650532    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
1650533    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
1650534    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
1650535    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 20 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1650536    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
1650537    set EMWS1.EndGrp10_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_CMeta_TRAIN;
1650538    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
1650539    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP10_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1650540    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
1650541    set EMWS1.EndGrp10_TRAIN(keep=
1650542    F_DepVar
1650543    I_DepVar
1650544    P_DepVar0
1650545    P_DepVar1
1650546    R_DepVar0
1650547    R_DepVar1
1650548    U_DepVar
1650549    _WARN_
1650550    DepVar
1650551    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
1650552    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2182 observations read from the data set EMWS1.GRP9_TRAIN.
NOTE: View EMWS1.ENDGRP10_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2182 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: There were 2182 observations read from the data set EMWS1.ENDGRP10_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2182 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
1654739    %let _cn = %sysfunc(getoption(CENTER));
1654740    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1654741    proc print data=EMWS1.EndGrp10_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMREPORTFIT noobs label;
1654742    var STAT LABEL TRAIN
1654743    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
1654744    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
1654745    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1654746    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
1654747    run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 1103.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
1654748    title10;
MPRINT(EM_DIAGRAM):   title10;
1654749    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1654750    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp10_EMCLASSIFICATION nothreads;
1654751    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1654752    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1654753    %let _cn = %sysfunc(getoption(CENTER));
1654754    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
1654755    proc print data=EMWS1.EndGrp10_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMCLASSIFICATION noobs label;
1654756    var from into pct_row pct_col count percent
1654757    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
1654758    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
1654759    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
1654760    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
1654761    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
1654762    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
1654763    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
1654764    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
1654765    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
1654766    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1654767    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
1654768    run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 1104.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1654769    title9;
MPRINT(EM_DIAGRAM):   title9;
1654770    title10;
MPRINT(EM_DIAGRAM):   title10;
1654771    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1654772    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1654773    modify EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1654774    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1654775    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1654776    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMRANK.DATA.
1654777    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
1654778    %let _cn = %sysfunc(getoption(CENTER));
1654779    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
1654780    proc print data=EMWS1.EndGrp10_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp10_EMRANK label noobs;
1654781    var
1654782    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
1654783    by
1654784    notsorted DATAROLE
1654785    notsorted TARGET
1654786    notsorted TARGETLABEL
1654787    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
1654788    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
1654789    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
1654790    run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMRANK.
NOTE: The PROCEDURE PRINT printed page 1105.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1654791    title10;
MPRINT(EM_DIAGRAM):   title10;
1654792    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
1654793    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
1654794    modify EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
1654795    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
1654796    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
1654797    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP10_EMSCOREDIST.DATA.
1654798    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
1654799    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
1654800    set EMWS1.Grp9_GROUPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp9_GROUPINFO;
1654801    where _LOOP_=5;
MPRINT(EM_DIAGRAM):   where _LOOP_=5;
1654802    call symput('LOOP_WHERE', strip(_wheredesc_));
MPRINT(EM_DIAGRAM):   call symput('LOOP_WHERE', strip(_wheredesc_));
1654803    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP9_GROUPINFO.
      WHERE _LOOP_=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1654804    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1654805    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1654806    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1654807    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1654808    set EMWS1.EndGrp10_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK;
1654809    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1654810    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1654811    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMRANK.
NOTE: The data set WORK.TEMP has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654812    data EMWS1.EndGrp10_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMRANK_LOOP;
1654813    set EMWS1.EndGrp10_EMRANK_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMRANK_LOOP temp;
1654814    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 80 observations read from the data set EMWS1.ENDGRP10_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMRANK_LOOP has 100 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654815    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1654816    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1654817    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1654818    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1654819    set EMWS1.EndGrp10_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST;
1654820    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1654821    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1654822    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST.
NOTE: The data set WORK.TEMP has 20 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654823    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMSCOREDIST_LOOP;
1654824    set EMWS1.EndGrp10_EMSCOREDIST_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMSCOREDIST_LOOP temp;
1654825    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 80 observations read from the data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMSCOREDIST_LOOP has 100 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1654826    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1654827    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1654828    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1654829    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1654830    set EMWS1.EndGrp10_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT;
1654831    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1654832    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1654833    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT.
NOTE: The data set WORK.TEMP has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654834    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMOUTFIT_LOOP;
1654835    set EMWS1.EndGrp10_EMOUTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMOUTFIT_LOOP temp;
1654836    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMOUTFIT_LOOP has 5 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654837    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1654838    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1654839    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1654840    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1654841    set EMWS1.EndGrp10_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT;
1654842    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1654843    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1654844    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT.
NOTE: The data set WORK.TEMP has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
1654845    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMREPORTFIT_LOOP;
1654846    set EMWS1.EndGrp10_EMREPORTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMREPORTFIT_LOOP temp;
1654847    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP.
NOTE: There were 21 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMREPORTFIT_LOOP has 105 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
1654848    data temp;
MPRINT(EM_DIAGRAM):    data temp;
1654849    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
1654850    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
1654851    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
1654852    set EMWS1.EndGrp10_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION;
1654853    _LOOP_ =5;
MPRINT(EM_DIAGRAM):   _LOOP_ =5;
1654854    _WHERE_ ="^(cv_var =5)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =5)";
1654855    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION.
NOTE: The data set WORK.TEMP has 4 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
1654856    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp10_EMCLASSIFICATION_LOOP;
1654857    set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp10_EMCLASSIFICATION_LOOP temp;
1654858    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP10_EMCLASSIFICATION_LOOP has 20 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
