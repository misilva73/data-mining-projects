*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:08:09 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:55 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Post Grouping Log
Date:                02 June 2018
Time:                17:07:55 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TX8NSG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TX8NSG new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:55 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:55 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
3655776    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3655777    set EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO;
3655778    where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
3655779    call symput('EMGROUPMODE', strip(key));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPMODE', strip(key));
3655780    call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
3655781    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3655782    data WORK.M0AIS9HW;
MPRINT(EM_DIAGRAM):    data WORK.M0AIS9HW;
3655783    set WORK.M0AIS9HW;
MPRINT(EM_DIAGRAM):   set WORK.M0AIS9HW;
3655784    where upcase(NAME) in(
3655785    "DEPVAR"
3655786    );
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "DEPVAR" );
3655787    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M0AIS9HW.
      WHERE UPCASE(NAME)='DEPVAR';
NOTE: The data set WORK.M0AIS9HW has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3655788    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural5_TRAIN EMWS1.Neural5_TRAIN
EMWS1.Neural5_TRAIN EMWS1.Neural5_TRAIN EMWS1 Neural5_TRAIN
EMWS1.Neural5_TRAIN EMWS1.Neural5_TRAIN
EMWS1.Neural5_TRAIN EMWS1.Neural5_TRAIN EMWS1 Neural5_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural5_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural5_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3655817    data WORK.EndGrp13_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp13_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
3655818    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3655819    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3655819  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3655819  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3655820       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3655820  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3655820  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3655821    set EMWS1.NEURAL5_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL5_DEPVAR_DM( where=(_TYPE_="TARGET"));
3655822    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3655823    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3655824    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3655825    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3655826    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3655827    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3655828    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3655829    end;
MPRINT(EM_DIAGRAM):   end;
3655830    output;
MPRINT(EM_DIAGRAM):   output;
3655831    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP13_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3655832    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3655833    proc print data=WORK.EndGrp13_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp13_EVENT noobs label;
3655834    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3655835    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3655836    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3655837    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP13_EVENT.
NOTE: The PROCEDURE PRINT printed page 2402.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3655838    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
3655839    proc print data = EMWS1.Neural5_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural5_DepVar_DM noobs label;
3655840    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3655841    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
3655842    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3655842  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3655842  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3655843    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3655844    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3655845    run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL5_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2403.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3655846    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp13: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp13: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp13: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.1366568914956;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86334310850439;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3656308    %let EMEXCEPTIONSTRING=;
3656309    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3656310    * POSTLOOP: EndGrp13;
MPRINT(EM_DIAGRAM):   * POSTLOOP: EndGrp13;
3656311    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3656312    %let EM_ACTION = POSTLOOP;
3656313    %let syscc = 0;
3656314    %macro main;
3656315       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3656316
3656317           filename temp catalog 'sashelp.emutil.endgp_train.source';
3656318           %include temp;
3656319           filename temp;
3656320
3656321           %train;
3656322
3656323       %end;
3656324       %else
3656325          %if %upcase(&EM_ACTION) = SCORE %then %do;
3656326
3656327           filename temp catalog 'sashelp.emutil.endgp_score.source';
3656328           %include temp;
3656329           filename temp;
3656330
3656331           %score;
3656332       %end;
3656333       %else
3656334       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3656335
3656336           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3656337           %include temp;
3656338           filename temp;
3656339
3656340           %postloop;
3656341
3656342       %end;
3656343
3656344       %doendm:
3656345    %mend main;
3656346
3656347    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_POSTLOOP.SOURCE.
3656348   +%macro scoreTables(data=, out=, scoreref=, prescore=);
3656350   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW)))
3656350  !+%then %do;
3656351   +       data &out / view=&out;
3656352   +          set &data
3656355   +          %if "&prescore" = "Y" %then %do;
3656356   +              (obs=1)
3656357   +          %end;
3656359   +          ;
3656361   +       %let fexist = %sysfunc(fexist(&scoreref));
3656362   +       %if &fexist %then %do;
3656363   +          %inc &scoreref;
3656364   +       %end;
3656366   +       %if "&prescore" eq "Y" %then %do;
3656367   +          drop I_: R_:;
3656368   +       %end;
3656370   +       run;
3656371   +   %end;
3656373   +%mend scoretables;
3656375   +%macro postboostbag(groupid=, type=);
3656376   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3656377   +   data _null_;
3656378   +      retain index 0;
3656379   +      set &infoDs;
3656380   +      call symput('targetname', strip(_target_));
3656381   +   run;
3656383   +   data _null_;
3656384   +      set &em_import_data_eminfo;
3656385   +      where key in('MODEL', 'DECMETA') and TARGET="&targetname";
3656386   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
3656387   +      else call symput('MODELID', strip(data));
3656388   +   run;
3656390   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
3656391   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
3656393   +   filename loopflow "&em_user_loopflowcode";
3656394   +   filename looppub "&em_user_looppubcode";
3656396   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3656397   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3656399   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
3656400   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
3656402   +   filename loopflow;
3656403   +   filename looppub;
3656404   +   filename emflow;
3656405   +   filename empub;
3656407   +   %let EMGROUPASSMT = Y;
3656409   +   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y, DECSCORECODE=Y,
3656409  !+FITSTATISTICS=N, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3656411   +   %em_getname(key=emoutfit, type=DATA);
3656412   +   %em_getname(key=emoutfit_loop, type=DATA);
3656414   +   data &em_user_emoutfit;
3656415   +      set &em_user_emoutfit_loop end=eof;
3656416   +      drop _LOOP_ _WHERE_;
3656417   +      if eof then output;
3656418   +   run;
3656420   +%mend postboostbag;
3656422   +%macro postgroup(groupid=, type=);
3656423   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3656424   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3656426   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3656427   +   %let _XValidation = 0;
3656429   +   data _null_;
3656430   +      retain index 0;
3656431   +      set &infoDs end=eof;
3656432   +      index + 1;
3656433   +      call symput('loopwhere'!!strip(put(index, best.)), tranwrd(strip(_wheredesc_),
3656433  !+ '"', '""'));
3656434   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3656435   +      if eof and substr(_WHERE_, 1, 2)='^(' then
3656436   +         call symput('_XValidation', '1');
3656437   +   run;
3656439   +   %let grouptarget=;
3656440   +   /* Looping Over Groups Only.  Retrieve targets from EMINFO */
3656441   +   %if "&looptarget1" eq "" %then %do;
3656442   +      data _null_;
3656443   +         set &em_import_data_eminfo;
3656444   +         where key in('MODEL');
3656445   +         call symput('grouptarget', strip(symget('grouptarget'))!!'
3656445  !+'!!strip(target));
3656446   +      run;
3656447   +   %end;
3656449   +   %do j=1 %to &emloopnumber;
3656450   +       %let EnsembleIndex=0;
3656451   +       data _null_;
3656452   +          retain index 0 ensembleIndex 0;
3656453   +          set &em_user_path end=eof;
3656454   +          where LOOPID=&j;
3656455   +          if nodelabel = "&groupid" or index then do;
3656456   +             index + 1;
3656457   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3656458   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3656459   +             call symput('loopaccum'!!strip(put(index, best.)),
3656459  !+strip(accumulatedScoreCode));
3656460   +          end;
3656461   +          if component='Ensemble' then ensembleIndex = index;
3656462   +          if eof then do;
3656463   +             call symput('loopcodenum', strip(put(index, best.)));
3656464   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3656465   +          end;
3656466   +       run;
3656468   +       %do i = 1 %to &loopcodenum;
3656469   +           %let fsourceEntry =
3656469  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3656470   +           %let psourceEntry =
3656470  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3656472   +           %if (&&loopnode&i eq &em_nodeid ) or
3656473   +               ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or
3656473  !+&i>&ensembleIndex or &i=&ensembleIndex) ) %then %do;
3656475   +               data _null_;
3656476   +                  file emflow mod;
3656477   +                  put "&em_codebar;";
3656478   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3656479   +                  put "* User: &sysuserid;";
3656480   +                  put "* Date: &sysdate: &systime;";
3656481   +                  %if "&&loopwhere&j" ne "" %then %do;
3656482   +                      put "* Group: &&loopwhere&j;";
3656483   +                  %end;
3656484   +                  %if "&&looptarget&j" ne "" %then %do;
3656485   +                       put "* Target: &&looptarget&j;";
3656486   +                  %end;
3656487   +                  put "&em_codebar ;";
3656488   +               run;
3656489   +               data _null_;
3656490   +                   file empub mod;
3656491   +                   put "&em_codebar ;";
3656492   +                   put "* &&loopnode&i: &&loopdesc&i;" ;
3656493   +                   put "* User: &sysuserid;";
3656494   +                   put "* Date: &sysdate: &systime;";
3656495   +                   %if "&&loopwhere&j" ne "" %then %do;
3656496   +                       put "* Group: &&loopwhere&j;";
3656497   +                   %end;
3656498   +                   %if "&&looptarget&j" ne "" %then %do;
3656499   +                       put "* Target: &&looptarget&j;";
3656500   +                   %end;
3656501   +                   put "&em_codebar;";
3656502   +               run;
3656503   +           %end;
3656505   +           %if ("&&loopnode&i" ne "&em_nodeid" ) %then %do;
3656506   +               %if (&ensembleIndex = 0) or (&i=1 or &i>&ensembleIndex or
3656506  !+&i=&ensembleIndex) %then %do;
3656507   +                   %if "&&loopnode&i" eq "&groupid" and "&_XValidation" eq "1" %then
3656507  !+ %do;
3656508   +                       filename y catalog "&psourceEntry";
3656509   +                       %em_copyfile(infref=y, outfref=emflow, append=Y);
3656510   +                       filename y;
3656511   +                   %end;
3656512   +                   %else %do;
3656513   +                       filename x catalog "&fsourceEntry";
3656514   +                       %em_copyfile(infref=x, outfref=emflow, append=Y);
3656515   +                       filename x;
3656516   +                   %end;
3656518   +                   filename y catalog "&psourceEntry";
3656519   +                   %em_copyfile(infref=y, outfref=empub, append=Y);
3656520   +                   filename y;
3656521   +               %end;
3656522   +           %end;
3656523   +           %else %do;
3656524   +              %if "&&loopwhere&j" ne "" %then %do;
3656525   +                  data _null_;
3656526   +                     file emflow mod;
3656527   +                     put 'end;';
3656528   +                  run;
3656529   +                  data _null_;
3656530   +                     file empub mod;
3656531   +                     put 'end;';
3656532   +                  run;
3656533   +               %end;
3656534   +           %end;
3656535   +       %end;
3656536   +   %end;
3656537   +   filename emflow;
3656538   +   filename empub;
3656540   +   /* Stratify Model Need to Recompute All Assessment Reports */
3656541   +   %if "&grouptarget" eq "" %then %do;
3656542   +       %let assessTarget=;
3656543   +       %do j=1 %to &emloopnumber;
3656544   +           %let targetname = &&looptarget&j;
3656545   +           %if ^%index(&assesstarget, &targetname) and ("&targetname" ne "") %then
3656545  !+%do;
3656546   +               %let assesstarget = &assesstarget &targetname;
3656547   +               %let index = 1;
3656548   +               %do %while( %scan(%sysfunc(strip(&targetname)), &index) ne
3656548  !+%sysfunc(strip(&targetname)));
3656549   +                   %let index = %eval(&index + 1);
3656550   +               %end;
3656551   +               %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &index
3656551  !+,%str( ));
3656553   +               %if "&targetlevel" ne "INTERVAL" %then
3656554   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3656554  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3656555   +               %else
3656556   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3656556  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3656557   +           %end;
3656558   +       %end;
3656559   +   %end;
3656560   +   %else %do;
3656561   +       %do i=1 %to &em_num_target;
3656562   +           %let targetname = %scan(%em_target, &i, %str( )) ;
3656563   +           %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &i ,%str( ));
3656565   +           %if %sysfunc(indexw(&grouptarget, &targetname)) %then %do;
3656566   +              %if "&targetlevel" ne "INTERVAL" %then
3656567   +                  %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3656567  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3656568   +              %else
3656569   +                 %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3656569  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3656570   +           %end;
3656571   +           %else %do;
3656572   +               %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N,
3656572  !+DECSCORECODE=N, FITSTATISTICS=N, RESIDUALS=N, PREDICTED=N);
3656573   +           %end;
3656574   +       %end;
3656575   +   %end;
3656576   +   %let EMGROUPASSMT = N;
3656577   +%mend postgroup;
3656579   +%macro posttarget(groupid=, type=);
3656580   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3656581   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3656583   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3656584   +   data _null_;
3656585   +      retain index 0;
3656586   +      set &infoDs end=eof;
3656587   +      index + 1;
3656588   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3656589   +   run;
3656591   +   %do j=1 %to &emloopnumber;
3656592   +       %let EnsembleIndex=0;
3656593   +       data _null_;
3656594   +          retain index 0 ensembleIndex 0;
3656595   +          set &em_user_path end=eof;
3656596   +          where LOOPID=&j;
3656597   +          if nodelabel = "&groupid" or index then do;
3656598   +             index + 1;
3656599   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3656600   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3656601   +             call symput('loopaccum'!!strip(put(index, best.)),
3656601  !+strip(accumulatedScoreCode));
3656602   +          end;
3656603   +          if component='Ensemble' then ensembleIndex = index;
3656604   +          if eof then do;
3656605   +             call symput('loopcodenum', strip(put(index, best.)));
3656606   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3656607   +          end;
3656608   +       run;
3656610   +       %do i = 1 %to &loopcodenum;
3656611   +           %let fsourceEntry =
3656611  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3656612   +           %let psourceEntry =
3656612  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3656614   +           %if (&&loopnode&i ne &em_nodeid ) and
3656615   +               ( (&ensembleIndex = 0) or (&i>=&ensembleIndex) ) %then %do;
3656616   +               data _null_;
3656617   +                  file emflow mod;
3656618   +                  put "&em_codebar;";
3656619   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3656620   +                  put "* User: &sysuserid;";
3656621   +                  put "* Date: &sysdate: &systime;";
3656622   +                  put "* Target: &&looptarget&j;";
3656623   +                  put "&em_codebar ;";
3656624   +               run;
3656625   +               data _null_;
3656626   +                  file empub mod;
3656627   +                  put "&em_codebar ;";
3656628   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3656629   +                  put "* User: &sysuserid;";
3656630   +                  put "* Date: &sysdate: &systime;";
3656631   +                  put "* Target: &&looptarget&j;";
3656632   +                  put "&em_codebar;";
3656633   +               run;
3656635   +               filename x catalog "&fsourceEntry";
3656636   +               %em_copyfile(infref=x, outfref=emflow, append=Y);
3656637   +               filename x;
3656639   +               filename y catalog "&psourceEntry";
3656640   +               %em_copyfile(infref=y, outfref=empub, append=Y);
3656641   +               filename y;
3656642   +           %end;
3656643   +       %end;
3656644   +   %end;
3656645   +   filename emflow;
3656646   +   filename empub;
3656648   +   %do j=1 %to &emloopnumber;
3656649   +       %let targetname = &&looptarget&j;
3656650   +       %let k = 1;
3656651   +       %do %while( %scan(%sysfunc(strip(&targetname)), &k) ne
3656651  !+%sysfunc(strip(&targetname)));
3656652   +           %let k = %eval(&k + 1);
3656653   +       %end;
3656654   +       %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &k ,%str( ));
3656655   +       %if "&targetlevel" ne "INTERVAL" %then
3656656   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3656656  !+FITSTATISTICS=N, CLASSIFICATION=N, PREDICTED=Y);
3656657   +       %else
3656658   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3656658  !+FITSTATISTICS=N, RESIDUALS=N, PREDICTED=Y);
3656659   +       %let EMGROUPASSMT = N;
3656660   +   %end;
3656662   +%mend posttarget;
3656664   +%macro postloop;
3656666   +   %if ^%symexist(em_import_data_eminfo) %then %goto doendpl;
3656668   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
3656668  !+%then %do;
3656669   +       %let emexceptionstring = nomodeltarget;
3656670   +       %goto doendpl;
3656671   +   %end;
3656673   +   %let targetName=;
3656674   +   %let endgrp_decmeta=;
3656676   +   data _null_;
3656677   +      set &em_import_data_eminfo;
3656678   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
3656679   +      call symput('GROUPID',   strip(data));
3656680   +      call symput('LOOPTYPE', strip(key));
3656681   +   run;
3656683   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
3656684   +   %include temp;
3656685   +   filename temp;
3656687   +   %em_getname(key=PATH, type=DATA);
3656689   +   %if ^%sysfunc(exist(&em_user_path)) %then %goto doendpl;
3656691   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
3656693   +   %let gptrain=;
3656694   +   %let gpvalidate=;
3656695   +   %let gptest=;
3656697   +   data _null_;
3656698   +      set &groupImportDs;
3656699   +      select(upcase(port));
3656700   +          when('DATA')     call symput('gpTrain',    strip(dataset));
3656701   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
3656702   +          when('TEST')     call symput('gpTest',     strip(dataset));
3656703   +       otherwise;
3656704   +      end;
3656705   +   run;
3656706   +   %let gpTrain =&em_lib..%sysfunc(strip(&gpTrain));
3656708   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
3656708  !+%postboostbag(groupid=&groupid, type=&looptype);
3656709   +   %else
3656710   +   %if ("&looptype" eq "GROUPINFO") %then %postgroup(groupid=&groupid,
3656710  !+type=&looptype);
3656711   +   %else
3656712   +   %if ("&looptype" eq "TARGETINFO") %then %posttarget(groupid=&groupid,
3656712  !+type=&looptype);
3656714   +   %let deleteString = &em_nodeid._path;
3656716   +   proc sort data=&em_user_path nodupkey;
3656717   +      by nodelabel;
3656718   +   run;
3656719   +   %let loopnodenum=0;
3656720   +   data _null_;
3656721   +      retain index 0;
3656722   +      set &em_user_path end=eof;
3656723   +      if nodelabel = "&groupid" or index then do;
3656724   +         index + 1;
3656725   +         call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3656726   +      end;
3656727   +      if eof then do;
3656728   +         call symput('loopnodenum', strip(put(index, best.)));
3656729   +      end;
3656730   +   run;
3656731   +   proc datasets lib=&em_lib nolist;
3656732   +      delete &deleteString;
3656733   +      delete
3656734   +      %do i = 1 %to &loopnodenum;
3656735   +          %let loopcatalog = %sysfunc(strip(&&loopnode&i))_LOOP;
3656736   +          %if %sysfunc(cexist(&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP)) %then
3656736  !+%do;
3656738   +              &loopcatalog
3656739   +          %end;
3656740   +          %if &i = &loopnodenum %then %do;
3656741   +              / mt=catalog;
3656742   +          %end;
3656743   +      %end;
3656744   +   run;
3656745   +   quit;
3656747   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
3656749   +   %if "&gpTrain" ne "" and (("&looptype" eq "BOOSTINFO") or ("&looptype" eq
3656749  !+"BAGINFO")) %then %do;
3656751   +       %let targetType = ;
3656752   +       data _null_;
3656753   +          set &endgrp_decmeta;
3656754   +          where _TYPE_='TARGET';
3656755   +          call symput('TARGETTYPE', strip(level));
3656756   +       run;
3656758   +       filename empub "&EM_FILE_EMPUBLISHSCORECODE" MOD;
3656760   +       %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow,
3656760  !+prescore=Y);
3656762   +       %if &targetType ne 'INTERVAL' %then %do;
3656763   +           %makeClassificationVars(target=&target, data=&em_export_train,
3656763  !+decmeta=&endgrp_decmeta, publish=Y, fref=empub);
3656764   +       %end;
3656766   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
3656768   +       %em_model(TARGET=&targetname, ASSESS=Y, DECSCORECODE=Y, FITSTATISTICS=Y,
3656768  !+CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3656770   +       filename empub;
3656772   +   %end;
3656774   +   %if "&gpTrain" ne "" %then
3656775   +        %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow);
3656776   +   %if "&gpValidate" ne "" %then
3656777   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),
3656777  !+out=&em_export_validate, scoreref=emflow);
3656778   +   %if "&gpTest" ne "" %then
3656779   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),
3656779  !+out=&em_export_test,     scoreref=emflow);
3656781   +   filename emflow;
3656783   +   %doendpl:
3656785   +%mend postloop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Neural5_EMINFO;
MPRINT(POSTLOOP):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO',
'INDEXINFO');
MPRINT(POSTLOOP):   call symput('GROUPID', strip(data));
MPRINT(POSTLOOP):   call symput('LOOPTYPE', strip(key));
MPRINT(POSTLOOP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
3656786   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
3656787   +   proc display c=sashelp.emcore.pathscorecode.scl;
3656788   +   run;
3656789   +%mend EM_GETTRAINPATH;
3656790   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(POSTLOOP):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Grp13_importset;
MPRINT(POSTLOOP):   select(upcase(port));
MPRINT(POSTLOOP):   when('DATA') call symput('gpTrain', strip(dataset));
MPRINT(POSTLOOP):   when('VALIDATE') call symput('gpValidate', strip(dataset));
MPRINT(POSTLOOP):   when('TEST') call symput('gpTest', strip(dataset));
MPRINT(POSTLOOP):   otherwise;
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.GRP13_IMPORTSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas";
MPRINT(POSTGROUP):   filename empub "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas";
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0;
MPRINT(POSTGROUP):   set EMWS1.Grp13_GROUPINFO end=eof;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopwhere'!!strip(put(index, best.)),
tranwrd(strip(_wheredesc_), '"', '""'));
MPRINT(POSTGROUP):   call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
MPRINT(POSTGROUP):   if eof and substr(_WHERE_, 1, 2)='^(' then call symput('_XValidation',
'1');
MPRINT(POSTGROUP):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.GRP13_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   set EMWS1.Neural5_EMINFO;
MPRINT(POSTGROUP):   where key in('MODEL');
MPRINT(POSTGROUP):   call symput('grouptarget', strip(symget('grouptarget'))!!'
'!!strip(target));
MPRINT(POSTGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=1;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11896,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10930,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12115,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11149,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=2;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12121,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11155,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12339,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=11373,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12376,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11410,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12599,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=11633,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24017,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22085,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24236,
      Last Modified=02 June 2018 17:07:58 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22304,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=3;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24242,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22310,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=24460,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=22528,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24497,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=22565,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=24720,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=22788,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36138,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33240,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36357,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33459,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=4;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36363,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33465,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=36581,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=33683,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36618,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33720,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=36841,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=33943,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48259,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44395,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48478,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44614,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=5;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48484,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44620,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=48702,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=44838,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48739,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44875,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=48962,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=45098,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60380,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55550,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60599,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55769,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=6;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60605,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55775,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=60823,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=55993,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60860,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=56030,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=61083,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=56253,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72501,
      Last Modified=02 June 2018 17:07:59 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=66705,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72720,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=66924,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=7;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72726,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=66930,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=72944,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=67148,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72981,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=67185,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=73204,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=67408,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84622,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77860,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84841,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78079,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=8;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84847,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78085,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=85065,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=78303,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=85102,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78340,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=85325,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=78563,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96743,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89015,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96962,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89234,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=9;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96968,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89240,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=97186,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=89458,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=97223,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=89495,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=97446,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=89718,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108864,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=100170,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=109083,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=100389,
      Last Modified=02 June 2018 17:08:00 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=10;
MPRINT(POSTGROUP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
      WHERE LOOPID=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=109089,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp13: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=100395,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=109308,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp13_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=100614,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=109347,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural5: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=100653,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural5_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=109571,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 340 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural5_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=100877,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 301 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=120989,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp13: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=111329,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=121209,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=111549,
      Last Modified=02 June 2018 17:08:01 o'clock,
      Create Time=02 June 2018 17:07:58 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(POSTGROUP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(POSTGROUP):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   set WORK.EM_USER_MODEL end=eof;
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   if eof then do;
MPRINT(EM_MODEL):   data = "EMWS1.TRANS2_TRAIN";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   end;
MPRINT(EM_MODEL):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_MODEL.
NOTE: The data set WORK.EM_USER_MODEL has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   proc sort data=EMWS1.EndGrp13_PATH nodupkey;
MPRINT(POSTLOOP):   by nodelabel;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 120 observations read from the data set EMWS1.ENDGRP13_PATH.
NOTE: 108 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.ENDGRP13_PATH has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   retain index 0;
MPRINT(POSTLOOP):   set EMWS1.EndGrp13_PATH end=eof;
MPRINT(POSTLOOP):   if nodelabel = "Grp13" or index then do;
MPRINT(POSTLOOP):   index + 1;
MPRINT(POSTLOOP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   if eof then do;
MPRINT(POSTLOOP):   call symput('loopnodenum', strip(put(index, best.)));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP13_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   proc datasets lib=EMWS1 nolist;
MPRINT(POSTLOOP):   delete EndGrp13_path;
MPRINT(POSTLOOP):   delete Grp13_LOOP Neural5_LOOP / mt=catalog;
MPRINT(POSTLOOP):   run;
 
NOTE: Deleting EMWS1.ENDGRP13_PATH (memtype=DATA).
NOTE: Deleting EMWS1.GRP13_LOOP (memtype=CATALOG).
NOTE: Deleting EMWS1.NEURAL5_LOOP (memtype=CATALOG).
MPRINT(POSTLOOP):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(POSTLOOP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas" MOD;
MPRINT(SCORETABLES):   data EMWS1.EndGrp13_TRAIN / view=EMWS1.EndGrp13_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN ;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMFLOWSCORE.sas.
3656791   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3656792   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3656793   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3656794   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3656795   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3656796   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3656797   +if (cv_var =1)  then do;
MPRINT(SCORETABLES):   if (cv_var =1) then do;
3656798   +_XVAL_=1;
MPRINT(SCORETABLES):   _XVAL_=1;
3656799   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3656800   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3656801   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3656802   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3656803   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3656804   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3656805   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3656806   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3656807   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3656808   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3656809   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3656810   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3656811   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3656812   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3656813   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3656814   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3656815   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3656816   +LENGTH _WARN_ $4
3656817   +      F_DepVar  $ 12
3656818   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3656819   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3656820   +
3656821   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3656822   +
3656823   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3656824   +
3656825   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3656826   +
3656827   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3656828   +
3656829   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3656830   +
3656831   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3656832   +
3656833   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3656834   +
3656835   +      label S_RANGE_campaign_acceptance =
3656836   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3656837   +
3656838   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3656839   +
3656840   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3656841   +
3656842   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3656843   +
3656844   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3656845   +
3656846   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3656847   +
3656848   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3656849   +
3656850   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3656851   +
3656852   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3656853   +
3656854   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3656855   +
3656856   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3656857   +
3656858   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3656859   +
3656860   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3656861   +
3656862   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3656863   +
3656864   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3656865   +
3656866   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3656867   +
3656868   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3656869   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3656870   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3656871   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3656872   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3656873   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3656874   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3656875   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3656876   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3656877   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3656878   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3656879   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3656880   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3656881   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3656882   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3656883   +end;
MPRINT(SCORETABLES):   end;
3656884   +else do;
MPRINT(SCORETABLES):   else do;
3656885   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3656886   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3656887   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3656888   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3656889   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3656890   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3656891   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3656892   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3656893   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3656894   +         end;
MPRINT(SCORETABLES):   end;
3656895   +         else do;
MPRINT(SCORETABLES):   else do;
3656896   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3656897   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3656898   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3656899   +            end;
MPRINT(SCORETABLES):   end;
3656900   +         end;
MPRINT(SCORETABLES):   end;
3656901   +      end;
MPRINT(SCORETABLES):   end;
3656902   +      else do;
MPRINT(SCORETABLES):   else do;
3656903   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3656904   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3656905   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3656906   +         end;
MPRINT(SCORETABLES):   end;
3656907   +      end;
MPRINT(SCORETABLES):   end;
3656908   +   end;
MPRINT(SCORETABLES):   end;
3656909   +   else do;
MPRINT(SCORETABLES):   else do;
3656910   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3656911   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3656912   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3656913   +      end;
MPRINT(SCORETABLES):   end;
3656914   +      else do;
MPRINT(SCORETABLES):   else do;
3656915   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3656916   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3656917   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3656918   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3656919   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3656920   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3656921   +         end;
MPRINT(SCORETABLES):   end;
3656922   +      end;
MPRINT(SCORETABLES):   end;
3656923   +   end;
MPRINT(SCORETABLES):   end;
3656924   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3656925   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3656926   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3656927   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3656928   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3656929   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3656930   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3656931   +   end;
MPRINT(SCORETABLES):   end;
3656932   +end;
MPRINT(SCORETABLES):   end;
3656933   +
3656934   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3656935   +*** Checking missing input Interval
3656936   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3656937   +
3656938   +IF NMISS(
3656939   +   MntCard_Games ,
3656940   +   MntMagazines ,
3656941   +   NumCatalogPurchases ,
3656942   +   NumDealsPurchases ,
3656943   +   NumWebPurchases ,
3656944   +   RANGE_Frq ,
3656945   +   RANGE_Recency ,
3656946   +   RANGE_average_purchase ,
3656947   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3656948   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3656949   +
3656950   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3656951   +END;
MPRINT(SCORETABLES):   END;
3656952   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3656953   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3656954   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3656955   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3656956   +   S_MntCard_Games  =    -2.28983962932209 +     6.58165118407799 *
3656957   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.28983962932209 + 6.58165118407799 * MntCard_Games ;
3656958   +   S_MntMagazines  =    -0.83314365520749 +     17.3433007723932 *
3656959   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83314365520749 + 17.3433007723932 * MntMagazines ;
3656960   +   S_NumCatalogPurchases  =    -3.10981122491491 +     13.4479395823894 *
3656961   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10981122491491 + 13.4479395823894 *
NumCatalogPurchases ;
3656962   +   S_NumDealsPurchases  =    -1.40177475658398 +     11.0975611291385 *
3656963   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40177475658398 + 11.0975611291385 *
NumDealsPurchases ;
3656964   +   S_NumWebPurchases  =    -5.21165776018221 +     12.2315311135602 *
3656965   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21165776018221 + 12.2315311135602 *
NumWebPurchases ;
3656966   +   S_RANGE_Frq  =    -1.37337343159936 +     4.23346160784445 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37337343159936 + 4.23346160784445 * RANGE_Frq ;
3656967   +   S_RANGE_Recency  =    -1.66024541228104 +     3.35465345710505 *
3656968   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66024541228104 + 3.35465345710505 * RANGE_Recency ;
3656969   +   S_RANGE_average_purchase  =    -1.04109544381139 +     5.11777957397942 *
3656970   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04109544381139 + 5.11777957397942 *
RANGE_average_purchase ;
3656971   +   S_RANGE_campaign_acceptance
3656972   +          =    -0.47849192521482 +     5.73668793173089 *
3656973   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47849192521482 + 5.73668793173089 *
RANGE_campaign_acceptance ;
3656974   +END;
MPRINT(SCORETABLES):   END;
3656975   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3656976   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3656977   +   ELSE S_MntCard_Games  =    -2.28983962932209 +     6.58165118407799 *
3656978   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.28983962932209 + 6.58165118407799 *
MntCard_Games ;
3656979   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3656980   +   ELSE S_MntMagazines  =    -0.83314365520749 +     17.3433007723932 *
3656981   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83314365520749 + 17.3433007723932 *
MntMagazines ;
3656982   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3656983   +   ELSE S_NumCatalogPurchases
3656984   +          =    -3.10981122491491 +     13.4479395823894 * NumCatalogPurchases
3656985   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10981122491491 + 13.4479395823894 *
NumCatalogPurchases ;
3656986   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3656987   +   ELSE S_NumDealsPurchases  =    -1.40177475658398 +     11.0975611291385 *
3656988   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40177475658398 + 11.0975611291385 *
NumDealsPurchases ;
3656989   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3656990   +   ELSE S_NumWebPurchases  =    -5.21165776018221 +     12.2315311135602 *
3656991   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21165776018221 + 12.2315311135602 *
NumWebPurchases ;
3656992   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3656993   +   ELSE S_RANGE_Frq  =    -1.37337343159936 +     4.23346160784445 * RANGE_Frq
3656994   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37337343159936 + 4.23346160784445 * RANGE_Frq ;
3656995   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3656996   +   ELSE S_RANGE_Recency  =    -1.66024541228104 +     3.35465345710505 *
3656997   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66024541228104 + 3.35465345710505 *
RANGE_Recency ;
3656998   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3656999   +   ELSE S_RANGE_average_purchase
3657000   +          =    -1.04109544381139 +     5.11777957397942 *
3657001   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04109544381139 + 5.11777957397942 *
RANGE_average_purchase ;
3657002   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3657003   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3657004   +   ELSE S_RANGE_campaign_acceptance
3657005   +          =    -0.47849192521482 +     5.73668793173089 *
3657006   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47849192521482 + 5.73668793173089
* RANGE_campaign_acceptance ;
3657007   +END;
MPRINT(SCORETABLES):   END;
3657008   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657009   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3657010   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657011   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657012   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3657013   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657014   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657015   +   H11  =    -0.06140043419447 * S_MntCard_Games  +     0.03598986021643 *
3657016   +        S_MntMagazines  +     0.17833091495305 * S_NumCatalogPurchases
3657017   +          +     0.19579417737467 * S_NumDealsPurchases
3657018   +          +    -0.15138495928525 * S_NumWebPurchases
3657019   +          +     0.26489047113139 * S_RANGE_Frq  +     -0.3115204165276 *
3657020   +        S_RANGE_Recency  +      0.1893750645733 * S_RANGE_average_purchase
3657021   +          +     0.16334171081273 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.06140043419447 * S_MntCard_Games + 0.03598986021643 *
S_MntMagazines + 0.17833091495305 * S_NumCatalogPurchases + 0.19579417737467 *
S_NumDealsPurchases + -0.15138495928525 * S_NumWebPurchases + 0.26489047113139 * S_RANGE_Frq +
-0.3115204165276 * S_RANGE_Recency + 0.1893750645733 * S_RANGE_average_purchase +
0.16334171081273 * S_RANGE_campaign_acceptance ;
3657022   +   H12  =     1.28977822634075 * S_MntCard_Games  +    -0.32527262210761 *
3657023   +        S_MntMagazines  +     0.45913124648718 * S_NumCatalogPurchases
3657024   +          +     0.89980313737262 * S_NumDealsPurchases
3657025   +          +     0.61217487431714 * S_NumWebPurchases
3657026   +          +    -0.03481713697397 * S_RANGE_Frq  +    -1.43231435096364 *
3657027   +        S_RANGE_Recency  +    -0.19580428882863 * S_RANGE_average_purchase
3657028   +          +      0.9460419269426 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.28977822634075 * S_MntCard_Games + -0.32527262210761 *
S_MntMagazines + 0.45913124648718 * S_NumCatalogPurchases + 0.89980313737262 *
S_NumDealsPurchases + 0.61217487431714 * S_NumWebPurchases + -0.03481713697397 * S_RANGE_Frq +
-1.43231435096364 * S_RANGE_Recency + -0.19580428882863 * S_RANGE_average_purchase +
0.9460419269426 * S_RANGE_campaign_acceptance ;
3657029   +   H13  =    -0.64474338741821 * S_MntCard_Games  +    -0.55362637922882 *
3657030   +        S_MntMagazines  +    -1.10732477574103 * S_NumCatalogPurchases
3657031   +          +     -0.3243024933742 * S_NumDealsPurchases
3657032   +          +    -0.96174416971968 * S_NumWebPurchases
3657033   +          +     1.03932216233991 * S_RANGE_Frq  +     1.39167457616833 *
3657034   +        S_RANGE_Recency  +     -3.3500997717423 * S_RANGE_average_purchase
3657035   +          +    -0.86461623275062 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.64474338741821 * S_MntCard_Games + -0.55362637922882 *
S_MntMagazines + -1.10732477574103 * S_NumCatalogPurchases + -0.3243024933742 *
S_NumDealsPurchases + -0.96174416971968 * S_NumWebPurchases + 1.03932216233991 * S_RANGE_Frq +
1.39167457616833 * S_RANGE_Recency + -3.3500997717423 * S_RANGE_average_purchase +
-0.86461623275062 * S_RANGE_campaign_acceptance ;
3657036   +   H11  = H11  +     0.37871470780857 * Marital_StatusDivorced
3657037   +          +     -0.2239323630089 * Marital_StatusMarried
3657038   +          +     0.21408448910216 * Marital_StatusSingle
3657039   +          +    -0.61014750819324 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.37871470780857 * Marital_StatusDivorced +
-0.2239323630089 * Marital_StatusMarried + 0.21408448910216 * Marital_StatusSingle +
-0.61014750819324 * Marital_StatusTogether ;
3657040   +   H12  = H12  +     0.26249810191639 * Marital_StatusDivorced
3657041   +          +    -0.52738403737846 * Marital_StatusMarried
3657042   +          +     0.41916715295256 * Marital_StatusSingle
3657043   +          +    -0.40931218879187 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.26249810191639 * Marital_StatusDivorced +
-0.52738403737846 * Marital_StatusMarried + 0.41916715295256 * Marital_StatusSingle +
-0.40931218879187 * Marital_StatusTogether ;
3657044   +   H13  = H13  +     0.20233052555225 * Marital_StatusDivorced
3657045   +          +    -0.26838447292632 * Marital_StatusMarried
3657046   +          +     0.06981799690351 * Marital_StatusSingle
3657047   +          +    -0.39347008643125 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.20233052555225 * Marital_StatusDivorced +
-0.26838447292632 * Marital_StatusMarried + 0.06981799690351 * Marital_StatusSingle +
-0.39347008643125 * Marital_StatusTogether ;
3657048   +   H11  =    -1.46845465152302 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.46845465152302 + H11 ;
3657049   +   H12  =    -2.05328175036776 + H12 ;
MPRINT(SCORETABLES):   H12 = -2.05328175036776 + H12 ;
3657050   +   H13  =     0.10804508832877 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.10804508832877 + H13 ;
3657051   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3657052   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3657053   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3657054   +END;
MPRINT(SCORETABLES):   END;
3657055   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657056   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3657057   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3657058   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3657059   +END;
MPRINT(SCORETABLES):   END;
3657060   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657061   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3657062   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657063   +
3657064   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3657065   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3657066   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657067   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3657068   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3657069   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657070   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3657071   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657072   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657073   +end;
MPRINT(SCORETABLES):   end;
3657074   +else do;
MPRINT(SCORETABLES):   else do;
3657075   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3657076   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3657077   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3657078   +   end;
MPRINT(SCORETABLES):   end;
3657079   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3657080   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3657081   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3657082   +   end;
MPRINT(SCORETABLES):   end;
3657083   +   else do;
MPRINT(SCORETABLES):   else do;
3657084   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657085   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657086   +   end;
MPRINT(SCORETABLES):   end;
3657087   +end;
MPRINT(SCORETABLES):   end;
3657088   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657089   +   P_DepVar1  =     7.55084057414187 * H11  +     4.39104563131069 * H12
3657090   +          +      -3.434354588888 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 7.55084057414187 * H11 + 4.39104563131069 * H12 +
-3.434354588888 * H13 ;
3657091   +   P_DepVar1  =     2.10866837839396 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 2.10866837839396 + P_DepVar1 ;
3657092   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3657093   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3657094   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3657095   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3657096   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3657097   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3657098   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3657099   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3657100   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3657101   +END;
MPRINT(SCORETABLES):   END;
3657102   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657103   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3657104   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3657105   +END;
MPRINT(SCORETABLES):   END;
3657106   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3657107   +   P_DepVar1  =     0.13954545454545;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13954545454545;
3657108   +   P_DepVar0  =     0.86045454545454;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86045454545454;
3657109   +END;
MPRINT(SCORETABLES):   END;
3657110   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3657111   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3657112   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3657113   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3657114   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3657115   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3657116   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3657117   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657118   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3657119   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657120   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3657121   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3657122   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3657123   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3657124   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3657125   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3657126   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3657127   +END;
MPRINT(SCORETABLES):   END;
3657128   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657129   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3657130   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657131   +drop
3657132   +S_MntCard_Games
3657133   +S_MntMagazines
3657134   +S_NumCatalogPurchases
3657135   +S_NumDealsPurchases
3657136   +S_NumWebPurchases
3657137   +S_RANGE_Frq
3657138   +S_RANGE_Recency
3657139   +S_RANGE_average_purchase
3657140   +S_RANGE_campaign_acceptance
3657141   +H11
3657142   +H12
3657143   +H13
3657144   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3657145   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657146   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3657147   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657148   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657149   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3657150   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657151   +end;
MPRINT(SCORETABLES):   end;
3657152   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657153   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3657154   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657155   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657156   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3657157   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657158   +if (cv_var =2)  then do;
MPRINT(SCORETABLES):   if (cv_var =2) then do;
3657159   +_XVAL_=2;
MPRINT(SCORETABLES):   _XVAL_=2;
3657160   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657161   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3657162   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657163   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657164   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3657165   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657166   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657167   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3657168   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657169   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3657170   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3657171   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3657172   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3657173   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3657174   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3657175   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3657176   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3657177   +LENGTH _WARN_ $4
3657178   +      F_DepVar  $ 12
3657179   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3657180   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3657181   +
3657182   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3657183   +
3657184   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3657185   +
3657186   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3657187   +
3657188   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3657189   +
3657190   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3657191   +
3657192   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3657193   +
3657194   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3657195   +
3657196   +      label S_RANGE_campaign_acceptance =
3657197   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3657198   +
3657199   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3657200   +
3657201   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3657202   +
3657203   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3657204   +
3657205   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3657206   +
3657207   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3657208   +
3657209   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3657210   +
3657211   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3657212   +
3657213   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3657214   +
3657215   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657216   +
3657217   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3657218   +
3657219   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3657220   +
3657221   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3657222   +
3657223   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3657224   +
3657225   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3657226   +
3657227   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3657228   +
3657229   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3657230   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3657231   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3657232   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3657233   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3657234   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3657235   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3657236   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3657237   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3657238   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3657239   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3657240   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3657241   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3657242   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3657243   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657244   +end;
MPRINT(SCORETABLES):   end;
3657245   +else do;
MPRINT(SCORETABLES):   else do;
3657246   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3657247   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3657248   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657249   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3657250   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3657251   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3657252   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3657253   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3657254   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657255   +         end;
MPRINT(SCORETABLES):   end;
3657256   +         else do;
MPRINT(SCORETABLES):   else do;
3657257   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3657258   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3657259   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657260   +            end;
MPRINT(SCORETABLES):   end;
3657261   +         end;
MPRINT(SCORETABLES):   end;
3657262   +      end;
MPRINT(SCORETABLES):   end;
3657263   +      else do;
MPRINT(SCORETABLES):   else do;
3657264   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3657265   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3657266   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657267   +         end;
MPRINT(SCORETABLES):   end;
3657268   +      end;
MPRINT(SCORETABLES):   end;
3657269   +   end;
MPRINT(SCORETABLES):   end;
3657270   +   else do;
MPRINT(SCORETABLES):   else do;
3657271   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3657272   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3657273   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657274   +      end;
MPRINT(SCORETABLES):   end;
3657275   +      else do;
MPRINT(SCORETABLES):   else do;
3657276   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3657277   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3657278   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3657279   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3657280   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3657281   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657282   +         end;
MPRINT(SCORETABLES):   end;
3657283   +      end;
MPRINT(SCORETABLES):   end;
3657284   +   end;
MPRINT(SCORETABLES):   end;
3657285   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3657286   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3657287   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3657288   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3657289   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3657290   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3657291   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657292   +   end;
MPRINT(SCORETABLES):   end;
3657293   +end;
MPRINT(SCORETABLES):   end;
3657294   +
3657295   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657296   +*** Checking missing input Interval
3657297   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3657298   +
3657299   +IF NMISS(
3657300   +   MntCard_Games ,
3657301   +   MntMagazines ,
3657302   +   NumCatalogPurchases ,
3657303   +   NumDealsPurchases ,
3657304   +   NumWebPurchases ,
3657305   +   RANGE_Frq ,
3657306   +   RANGE_Recency ,
3657307   +   RANGE_average_purchase ,
3657308   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3657309   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3657310   +
3657311   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657312   +END;
MPRINT(SCORETABLES):   END;
3657313   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657314   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3657315   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657316   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657317   +   S_MntCard_Games  =    -2.33199235794733 +     6.67696061329134 *
3657318   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33199235794733 + 6.67696061329134 * MntCard_Games ;
3657319   +   S_MntMagazines  =    -0.82878323377679 +     17.1959946545244 *
3657320   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82878323377679 + 17.1959946545244 * MntMagazines ;
3657321   +   S_NumCatalogPurchases  =    -3.13623627598254 +     13.6111660047523 *
3657322   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.13623627598254 + 13.6111660047523 *
NumCatalogPurchases ;
3657323   +   S_NumDealsPurchases  =    -1.41193477849919 +     11.0768482210704 *
3657324   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41193477849919 + 11.0768482210704 *
NumDealsPurchases ;
3657325   +   S_NumWebPurchases  =    -5.23390360027334 +     12.2613090384738 *
3657326   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23390360027334 + 12.2613090384738 *
NumWebPurchases ;
3657327   +   S_RANGE_Frq  =    -1.37876960327716 +     4.21396505931612 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37876960327716 + 4.21396505931612 * RANGE_Frq ;
3657328   +   S_RANGE_Recency  =     -1.6599232375281 +     3.35939370487067 *
3657329   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6599232375281 + 3.35939370487067 * RANGE_Recency ;
3657330   +   S_RANGE_average_purchase  =    -1.04438291835965 +     5.17863614060588 *
3657331   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04438291835965 + 5.17863614060588 *
RANGE_average_purchase ;
3657332   +   S_RANGE_campaign_acceptance
3657333   +          =     -0.4731686687773 +     5.74401686616129 *
3657334   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.4731686687773 + 5.74401686616129 *
RANGE_campaign_acceptance ;
3657335   +END;
MPRINT(SCORETABLES):   END;
3657336   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657337   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3657338   +   ELSE S_MntCard_Games  =    -2.33199235794733 +     6.67696061329134 *
3657339   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33199235794733 + 6.67696061329134 *
MntCard_Games ;
3657340   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3657341   +   ELSE S_MntMagazines  =    -0.82878323377679 +     17.1959946545244 *
3657342   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82878323377679 + 17.1959946545244 *
MntMagazines ;
3657343   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3657344   +   ELSE S_NumCatalogPurchases
3657345   +          =    -3.13623627598254 +     13.6111660047523 * NumCatalogPurchases
3657346   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.13623627598254 + 13.6111660047523 *
NumCatalogPurchases ;
3657347   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3657348   +   ELSE S_NumDealsPurchases  =    -1.41193477849919 +     11.0768482210704 *
3657349   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41193477849919 + 11.0768482210704 *
NumDealsPurchases ;
3657350   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3657351   +   ELSE S_NumWebPurchases  =    -5.23390360027334 +     12.2613090384738 *
3657352   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23390360027334 + 12.2613090384738 *
NumWebPurchases ;
3657353   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3657354   +   ELSE S_RANGE_Frq  =    -1.37876960327716 +     4.21396505931612 * RANGE_Frq
3657355   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37876960327716 + 4.21396505931612 * RANGE_Frq ;
3657356   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3657357   +   ELSE S_RANGE_Recency  =     -1.6599232375281 +     3.35939370487067 *
3657358   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6599232375281 + 3.35939370487067 *
RANGE_Recency ;
3657359   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3657360   +   ELSE S_RANGE_average_purchase
3657361   +          =    -1.04438291835965 +     5.17863614060588 *
3657362   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04438291835965 + 5.17863614060588 *
RANGE_average_purchase ;
3657363   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3657364   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3657365   +   ELSE S_RANGE_campaign_acceptance
3657366   +          =     -0.4731686687773 +     5.74401686616129 *
3657367   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.4731686687773 + 5.74401686616129
* RANGE_campaign_acceptance ;
3657368   +END;
MPRINT(SCORETABLES):   END;
3657369   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657370   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3657371   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657372   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657373   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3657374   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657375   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657376   +   H11  =    -2.66196306639925 * S_MntCard_Games  +    -2.75536273761879 *
3657377   +        S_MntMagazines  +    -3.38135570185845 * S_NumCatalogPurchases
3657378   +          +     4.05454553396371 * S_NumDealsPurchases
3657379   +          +     2.07480469587813 * S_NumWebPurchases
3657380   +          +      4.3742994931991 * S_RANGE_Frq  +     5.67809892434642 *
3657381   +        S_RANGE_Recency  +    -0.10571936977414 * S_RANGE_average_purchase
3657382   +          +    -4.96676410652301 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -2.66196306639925 * S_MntCard_Games + -2.75536273761879 *
S_MntMagazines + -3.38135570185845 * S_NumCatalogPurchases + 4.05454553396371 *
S_NumDealsPurchases + 2.07480469587813 * S_NumWebPurchases + 4.3742994931991 * S_RANGE_Frq +
5.67809892434642 * S_RANGE_Recency + -0.10571936977414 * S_RANGE_average_purchase +
-4.96676410652301 * S_RANGE_campaign_acceptance ;
3657383   +   H12  =     0.70089736015068 * S_MntCard_Games  +    -0.13925378822215 *
3657384   +        S_MntMagazines  +     0.53220589430737 * S_NumCatalogPurchases
3657385   +          +     0.45611777366582 * S_NumDealsPurchases
3657386   +          +     0.75717660364126 * S_NumWebPurchases
3657387   +          +     0.29744807183989 * S_RANGE_Frq  +    -1.01617720928806 *
3657388   +        S_RANGE_Recency  +    -0.19382419816816 * S_RANGE_average_purchase
3657389   +          +     0.60680698769474 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.70089736015068 * S_MntCard_Games + -0.13925378822215 *
S_MntMagazines + 0.53220589430737 * S_NumCatalogPurchases + 0.45611777366582 *
S_NumDealsPurchases + 0.75717660364126 * S_NumWebPurchases + 0.29744807183989 * S_RANGE_Frq +
-1.01617720928806 * S_RANGE_Recency + -0.19382419816816 * S_RANGE_average_purchase +
0.60680698769474 * S_RANGE_campaign_acceptance ;
3657390   +   H13  =     0.00628380844996 * S_MntCard_Games  +      0.0183903495273 *
3657391   +        S_MntMagazines  +     0.07729640525151 * S_NumCatalogPurchases
3657392   +          +     0.33267996942498 * S_NumDealsPurchases
3657393   +          +    -0.35698051729797 * S_NumWebPurchases
3657394   +          +     0.17214986292074 * S_RANGE_Frq  +    -0.31611267319821 *
3657395   +        S_RANGE_Recency  +     0.42226611529287 * S_RANGE_average_purchase
3657396   +          +     0.14535054136872 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.00628380844996 * S_MntCard_Games + 0.0183903495273 *
S_MntMagazines + 0.07729640525151 * S_NumCatalogPurchases + 0.33267996942498 *
S_NumDealsPurchases + -0.35698051729797 * S_NumWebPurchases + 0.17214986292074 * S_RANGE_Frq +
-0.31611267319821 * S_RANGE_Recency + 0.42226611529287 * S_RANGE_average_purchase +
0.14535054136872 * S_RANGE_campaign_acceptance ;
3657397   +   H11  = H11  +    -6.85769595538931 * Marital_StatusDivorced
3657398   +          +     2.51842275958696 * Marital_StatusMarried
3657399   +          +    -2.10202448549333 * Marital_StatusSingle
3657400   +          +     -1.3522118469644 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -6.85769595538931 * Marital_StatusDivorced +
2.51842275958696 * Marital_StatusMarried + -2.10202448549333 * Marital_StatusSingle +
-1.3522118469644 * Marital_StatusTogether ;
3657401   +   H12  = H12  +    -0.05460887899266 * Marital_StatusDivorced
3657402   +          +    -0.12130750461863 * Marital_StatusMarried
3657403   +          +     0.09796399809087 * Marital_StatusSingle
The SAS System
 
3657404   +          +    -0.10287372972713 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.05460887899266 * Marital_StatusDivorced +
-0.12130750461863 * Marital_StatusMarried + 0.09796399809087 * Marital_StatusSingle +
-0.10287372972713 * Marital_StatusTogether ;
3657405   +   H13  = H13  +     0.32631221941723 * Marital_StatusDivorced
3657406   +          +    -0.32341295170572 * Marital_StatusMarried
3657407   +          +     0.42690013974792 * Marital_StatusSingle
3657408   +          +    -0.90125669940063 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.32631221941723 * Marital_StatusDivorced +
-0.32341295170572 * Marital_StatusMarried + 0.42690013974792 * Marital_StatusSingle +
-0.90125669940063 * Marital_StatusTogether ;
3657409   +   H11  =     12.0924052286905 + H11 ;
MPRINT(SCORETABLES):   H11 = 12.0924052286905 + H11 ;
3657410   +   H12  =    -1.70867510018063 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.70867510018063 + H12 ;
3657411   +   H13  =     -1.5464424582156 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.5464424582156 + H13 ;
3657412   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3657413   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3657414   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3657415   +END;
MPRINT(SCORETABLES):   END;
3657416   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657417   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3657418   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3657419   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3657420   +END;
MPRINT(SCORETABLES):   END;
3657421   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657422   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3657423   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657424   +
3657425   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3657426   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3657427   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657428   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3657429   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3657430   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657431   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3657432   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657433   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657434   +end;
MPRINT(SCORETABLES):   end;
3657435   +else do;
MPRINT(SCORETABLES):   else do;
3657436   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3657437   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3657438   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3657439   +   end;
MPRINT(SCORETABLES):   end;
3657440   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3657441   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3657442   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3657443   +   end;
MPRINT(SCORETABLES):   end;
3657444   +   else do;
MPRINT(SCORETABLES):   else do;
3657445   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657446   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657447   +   end;
MPRINT(SCORETABLES):   end;
3657448   +end;
MPRINT(SCORETABLES):   end;
3657449   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657450   +   P_DepVar1  =    -1.10499759960773 * H11  +     5.20870475172209 * H12
3657451   +          +       4.983439526308 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.10499759960773 * H11 + 5.20870475172209 * H12 +
4.983439526308 * H13 ;
3657452   +   P_DepVar1  =     3.35192603200583 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 3.35192603200583 + P_DepVar1 ;
3657453   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3657454   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3657455   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3657456   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3657457   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3657458   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3657459   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3657460   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3657461   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3657462   +END;
MPRINT(SCORETABLES):   END;
3657463   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657464   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3657465   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3657466   +END;
MPRINT(SCORETABLES):   END;
3657467   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3657468   +   P_DepVar1  =     0.13694852941176;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13694852941176;
3657469   +   P_DepVar0  =     0.86305147058823;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86305147058823;
3657470   +END;
MPRINT(SCORETABLES):   END;
3657471   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3657472   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3657473   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3657474   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3657475   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3657476   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3657477   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3657478   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657479   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3657480   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657481   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3657482   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3657483   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3657484   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3657485   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3657486   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3657487   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3657488   +END;
MPRINT(SCORETABLES):   END;
3657489   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657490   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3657491   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657492   +drop
3657493   +S_MntCard_Games
3657494   +S_MntMagazines
3657495   +S_NumCatalogPurchases
3657496   +S_NumDealsPurchases
3657497   +S_NumWebPurchases
3657498   +S_RANGE_Frq
3657499   +S_RANGE_Recency
3657500   +S_RANGE_average_purchase
3657501   +S_RANGE_campaign_acceptance
3657502   +H11
3657503   +H12
3657504   +H13
3657505   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3657506   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657507   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3657508   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657509   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657510   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3657511   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657512   +end;
MPRINT(SCORETABLES):   end;
3657513   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657514   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3657515   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657516   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657517   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3657518   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657519   +if (cv_var =3)  then do;
MPRINT(SCORETABLES):   if (cv_var =3) then do;
3657520   +_XVAL_=3;
MPRINT(SCORETABLES):   _XVAL_=3;
3657521   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657522   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3657523   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657524   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657525   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3657526   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657527   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657528   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3657529   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657530   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3657531   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3657532   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3657533   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3657534   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3657535   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3657536   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3657537   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3657538   +LENGTH _WARN_ $4
3657539   +      F_DepVar  $ 12
3657540   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3657541   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3657542   +
3657543   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3657544   +
3657545   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3657546   +
3657547   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3657548   +
3657549   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3657550   +
3657551   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3657552   +
3657553   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3657554   +
3657555   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3657556   +
3657557   +      label S_RANGE_campaign_acceptance =
3657558   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3657559   +
3657560   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3657561   +
3657562   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3657563   +
3657564   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3657565   +
3657566   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3657567   +
3657568   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3657569   +
3657570   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3657571   +
3657572   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3657573   +
3657574   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3657575   +
3657576   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657577   +
3657578   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3657579   +
3657580   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3657581   +
3657582   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3657583   +
3657584   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3657585   +
3657586   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3657587   +
3657588   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3657589   +
3657590   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3657591   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3657592   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3657593   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3657594   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3657595   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3657596   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3657597   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3657598   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3657599   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3657600   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3657601   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3657602   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3657603   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3657604   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657605   +end;
MPRINT(SCORETABLES):   end;
3657606   +else do;
MPRINT(SCORETABLES):   else do;
3657607   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3657608   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3657609   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657610   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3657611   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3657612   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3657613   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3657614   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3657615   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657616   +         end;
MPRINT(SCORETABLES):   end;
3657617   +         else do;
MPRINT(SCORETABLES):   else do;
3657618   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3657619   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3657620   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657621   +            end;
MPRINT(SCORETABLES):   end;
3657622   +         end;
MPRINT(SCORETABLES):   end;
3657623   +      end;
MPRINT(SCORETABLES):   end;
3657624   +      else do;
MPRINT(SCORETABLES):   else do;
3657625   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3657626   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3657627   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657628   +         end;
MPRINT(SCORETABLES):   end;
3657629   +      end;
MPRINT(SCORETABLES):   end;
3657630   +   end;
MPRINT(SCORETABLES):   end;
3657631   +   else do;
MPRINT(SCORETABLES):   else do;
3657632   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3657633   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3657634   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657635   +      end;
MPRINT(SCORETABLES):   end;
3657636   +      else do;
MPRINT(SCORETABLES):   else do;
3657637   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3657638   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3657639   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3657640   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3657641   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3657642   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657643   +         end;
MPRINT(SCORETABLES):   end;
3657644   +      end;
MPRINT(SCORETABLES):   end;
3657645   +   end;
MPRINT(SCORETABLES):   end;
3657646   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3657647   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3657648   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3657649   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3657650   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3657651   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3657652   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657653   +   end;
MPRINT(SCORETABLES):   end;
3657654   +end;
MPRINT(SCORETABLES):   end;
3657655   +
3657656   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657657   +*** Checking missing input Interval
3657658   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3657659   +
3657660   +IF NMISS(
3657661   +   MntCard_Games ,
3657662   +   MntMagazines ,
3657663   +   NumCatalogPurchases ,
3657664   +   NumDealsPurchases ,
3657665   +   NumWebPurchases ,
3657666   +   RANGE_Frq ,
3657667   +   RANGE_Recency ,
3657668   +   RANGE_average_purchase ,
3657669   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3657670   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3657671   +
3657672   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657673   +END;
MPRINT(SCORETABLES):   END;
3657674   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657675   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3657676   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657677   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657678   +   S_MntCard_Games  =    -2.31477754696053 +     6.61701361908211 *
3657679   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31477754696053 + 6.61701361908211 * MntCard_Games ;
3657680   +   S_MntMagazines  =    -0.84216986551912 +     17.4993139013623 *
3657681   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84216986551912 + 17.4993139013623 * MntMagazines ;
3657682   +   S_NumCatalogPurchases  =    -3.12626823822056 +      13.521931819677 *
3657683   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12626823822056 + 13.521931819677 *
NumCatalogPurchases ;
3657684   +   S_NumDealsPurchases  =    -1.40486078440338 +     11.1762017659584 *
3657685   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40486078440338 + 11.1762017659584 *
NumDealsPurchases ;
3657686   +   S_NumWebPurchases  =    -5.24658249019259 +     12.3041974600148 *
3657687   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.24658249019259 + 12.3041974600148 *
NumWebPurchases ;
3657688   +   S_RANGE_Frq  =    -1.36877299600845 +     4.20956162406265 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36877299600845 + 4.20956162406265 * RANGE_Frq ;
3657689   +   S_RANGE_Recency  =    -1.65749826807551 +     3.34866869497377 *
3657690   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65749826807551 + 3.34866869497377 * RANGE_Recency ;
3657691   +   S_RANGE_average_purchase  =    -1.04247520728677 +     5.13664761410314 *
3657692   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04247520728677 + 5.13664761410314 *
RANGE_average_purchase ;
3657693   +   S_RANGE_campaign_acceptance
3657694   +          =    -0.47561380144757 +     5.74629717001332 *
3657695   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47561380144757 + 5.74629717001332 *
RANGE_campaign_acceptance ;
3657696   +END;
MPRINT(SCORETABLES):   END;
3657697   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657698   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3657699   +   ELSE S_MntCard_Games  =    -2.31477754696053 +     6.61701361908211 *
3657700   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31477754696053 + 6.61701361908211 *
MntCard_Games ;
3657701   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3657702   +   ELSE S_MntMagazines  =    -0.84216986551912 +     17.4993139013623 *
3657703   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84216986551912 + 17.4993139013623 *
MntMagazines ;
3657704   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3657705   +   ELSE S_NumCatalogPurchases
3657706   +          =    -3.12626823822056 +      13.521931819677 * NumCatalogPurchases
3657707   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12626823822056 + 13.521931819677 *
NumCatalogPurchases ;
3657708   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3657709   +   ELSE S_NumDealsPurchases  =    -1.40486078440338 +     11.1762017659584 *
3657710   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40486078440338 + 11.1762017659584 *
NumDealsPurchases ;
3657711   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3657712   +   ELSE S_NumWebPurchases  =    -5.24658249019259 +     12.3041974600148 *
3657713   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.24658249019259 + 12.3041974600148 *
NumWebPurchases ;
3657714   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3657715   +   ELSE S_RANGE_Frq  =    -1.36877299600845 +     4.20956162406265 * RANGE_Frq
3657716   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36877299600845 + 4.20956162406265 * RANGE_Frq ;
3657717   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3657718   +   ELSE S_RANGE_Recency  =    -1.65749826807551 +     3.34866869497377 *
3657719   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65749826807551 + 3.34866869497377 *
RANGE_Recency ;
3657720   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3657721   +   ELSE S_RANGE_average_purchase
3657722   +          =    -1.04247520728677 +     5.13664761410314 *
3657723   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04247520728677 + 5.13664761410314 *
RANGE_average_purchase ;
3657724   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3657725   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3657726   +   ELSE S_RANGE_campaign_acceptance
3657727   +          =    -0.47561380144757 +     5.74629717001332 *
3657728   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47561380144757 + 5.74629717001332
* RANGE_campaign_acceptance ;
3657729   +END;
MPRINT(SCORETABLES):   END;
3657730   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657731   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3657732   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657733   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657734   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3657735   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657736   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657737   +   H11  =     0.84193898000692 * S_MntCard_Games  +    -0.22257651541824 *
3657738   +        S_MntMagazines  +     0.60323282757696 * S_NumCatalogPurchases
3657739   +          +     0.32361164653419 * S_NumDealsPurchases
3657740   +          +     0.89439025630432 * S_NumWebPurchases
3657741   +          +     0.28157916379497 * S_RANGE_Frq  +     -1.1380562170367 *
3657742   +        S_RANGE_Recency  +    -0.23926284593473 * S_RANGE_average_purchase
3657743   +          +     0.75329840032164 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.84193898000692 * S_MntCard_Games + -0.22257651541824 *
S_MntMagazines + 0.60323282757696 * S_NumCatalogPurchases + 0.32361164653419 *
S_NumDealsPurchases + 0.89439025630432 * S_NumWebPurchases + 0.28157916379497 * S_RANGE_Frq +
-1.1380562170367 * S_RANGE_Recency + -0.23926284593473 * S_RANGE_average_purchase +
0.75329840032164 * S_RANGE_campaign_acceptance ;
3657744   +   H12  =     0.09358631590681 * S_MntCard_Games  +     -0.0509595814614 *
3657745   +        S_MntMagazines  +     0.07951241046058 * S_NumCatalogPurchases
3657746   +          +     0.49189360874376 * S_NumDealsPurchases
3657747   +          +    -0.45037377700777 * S_NumWebPurchases
3657748   +          +    -0.05689471833226 * S_RANGE_Frq  +    -0.37447317482749 *
3657749   +        S_RANGE_Recency  +     0.18435554322326 * S_RANGE_average_purchase
3657750   +          +     0.21609421177875 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.09358631590681 * S_MntCard_Games + -0.0509595814614 *
S_MntMagazines + 0.07951241046058 * S_NumCatalogPurchases + 0.49189360874376 *
S_NumDealsPurchases + -0.45037377700777 * S_NumWebPurchases + -0.05689471833226 * S_RANGE_Frq
+ -0.37447317482749 * S_RANGE_Recency + 0.18435554322326 * S_RANGE_average_purchase +
0.21609421177875 * S_RANGE_campaign_acceptance ;
3657751   +   H13  =    -1.00588290179623 * S_MntCard_Games  +    -0.79866075670228 *
3657752   +        S_MntMagazines  +    -1.49682867882767 * S_NumCatalogPurchases
3657753   +          +    -0.51682119752508 * S_NumDealsPurchases
3657754   +          +    -1.12882463431466 * S_NumWebPurchases
3657755   +          +     0.78927498632692 * S_RANGE_Frq  +     1.94537508216435 *
3657756   +        S_RANGE_Recency  +    -3.42308097484112 * S_RANGE_average_purchase
3657757   +          +    -1.17912870762165 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.00588290179623 * S_MntCard_Games + -0.79866075670228 *
S_MntMagazines + -1.49682867882767 * S_NumCatalogPurchases + -0.51682119752508 *
S_NumDealsPurchases + -1.12882463431466 * S_NumWebPurchases + 0.78927498632692 * S_RANGE_Frq +
1.94537508216435 * S_RANGE_Recency + -3.42308097484112 * S_RANGE_average_purchase +
-1.17912870762165 * S_RANGE_campaign_acceptance ;
3657758   +   H11  = H11  +    -0.67403238007953 * Marital_StatusDivorced
3657759   +          +    -0.42166616956445 * Marital_StatusMarried
3657760   +          +     1.17073814998563 * Marital_StatusSingle
3657761   +          +    -0.08148594406503 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.67403238007953 * Marital_StatusDivorced +
-0.42166616956445 * Marital_StatusMarried + 1.17073814998563 * Marital_StatusSingle +
-0.08148594406503 * Marital_StatusTogether ;
3657762   +   H12  = H12  +     0.85434553263546 * Marital_StatusDivorced
3657763   +          +    -0.11117193343789 * Marital_StatusMarried
3657764   +          +    -0.34239790581377 * Marital_StatusSingle
3657765   +          +    -0.87404606983261 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.85434553263546 * Marital_StatusDivorced +
-0.11117193343789 * Marital_StatusMarried + -0.34239790581377 * Marital_StatusSingle +
-0.87404606983261 * Marital_StatusTogether ;
3657766   +   H13  = H13  +     0.40433528801222 * Marital_StatusDivorced
3657767   +          +     -0.1614639922526 * Marital_StatusMarried
3657768   +          +     0.77660636233282 * Marital_StatusSingle
3657769   +          +    -2.36645880766925 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.40433528801222 * Marital_StatusDivorced +
-0.1614639922526 * Marital_StatusMarried + 0.77660636233282 * Marital_StatusSingle +
-2.36645880766925 * Marital_StatusTogether ;
3657770   +   H11  =    -1.70027011261133 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.70027011261133 + H11 ;
3657771   +   H12  =     -0.9688510867078 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.9688510867078 + H12 ;
3657772   +   H13  =     0.03243742784941 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.03243742784941 + H13 ;
3657773   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3657774   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3657775   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3657776   +END;
MPRINT(SCORETABLES):   END;
3657777   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657778   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3657779   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3657780   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3657781   +END;
MPRINT(SCORETABLES):   END;
3657782   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657783   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3657784   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657785   +
3657786   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3657787   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3657788   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657789   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3657790   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3657791   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657792   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3657793   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657794   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657795   +end;
MPRINT(SCORETABLES):   end;
3657796   +else do;
MPRINT(SCORETABLES):   else do;
3657797   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3657798   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3657799   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3657800   +   end;
MPRINT(SCORETABLES):   end;
3657801   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3657802   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3657803   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3657804   +   end;
MPRINT(SCORETABLES):   end;
3657805   +   else do;
MPRINT(SCORETABLES):   else do;
3657806   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3657807   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3657808   +   end;
MPRINT(SCORETABLES):   end;
3657809   +end;
MPRINT(SCORETABLES):   end;
3657810   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3657811   +   P_DepVar1  =     4.91493733417401 * H11  +     5.24854976874558 * H12
3657812   +          +    -3.25831635408183 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.91493733417401 * H11 + 5.24854976874558 * H12 +
-3.25831635408183 * H13 ;
3657813   +   P_DepVar1  =    -1.46703632550093 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.46703632550093 + P_DepVar1 ;
3657814   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3657815   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3657816   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3657817   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3657818   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3657819   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3657820   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3657821   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3657822   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3657823   +END;
MPRINT(SCORETABLES):   END;
3657824   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3657825   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3657826   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3657827   +END;
MPRINT(SCORETABLES):   END;
3657828   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3657829   +   P_DepVar1  =     0.13911472448057;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13911472448057;
3657830   +   P_DepVar0  =     0.86088527551942;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86088527551942;
3657831   +END;
MPRINT(SCORETABLES):   END;
3657832   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3657833   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3657834   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3657835   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3657836   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3657837   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3657838   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3657839   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657840   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3657841   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3657842   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3657843   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3657844   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3657845   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3657846   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3657847   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3657848   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3657849   +END;
MPRINT(SCORETABLES):   END;
3657850   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657851   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3657852   +********************************;
MPRINT(SCORETABLES):   ********************************;
3657853   +drop
3657854   +S_MntCard_Games
3657855   +S_MntMagazines
3657856   +S_NumCatalogPurchases
3657857   +S_NumDealsPurchases
3657858   +S_NumWebPurchases
3657859   +S_RANGE_Frq
3657860   +S_RANGE_Recency
3657861   +S_RANGE_average_purchase
3657862   +S_RANGE_campaign_acceptance
3657863   +H11
3657864   +H12
3657865   +H13
3657866   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3657867   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657868   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3657869   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657870   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657871   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3657872   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657873   +end;
MPRINT(SCORETABLES):   end;
3657874   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657875   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3657876   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657877   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657878   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3657879   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657880   +if (cv_var =4)  then do;
MPRINT(SCORETABLES):   if (cv_var =4) then do;
3657881   +_XVAL_=4;
MPRINT(SCORETABLES):   _XVAL_=4;
3657882   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3657883   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3657884   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3657885   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3657886   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3657887   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3657888   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657889   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3657890   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3657891   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3657892   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3657893   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3657894   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3657895   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3657896   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3657897   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3657898   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3657899   +LENGTH _WARN_ $4
3657900   +      F_DepVar  $ 12
3657901   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3657902   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3657903   +
3657904   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3657905   +
3657906   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3657907   +
3657908   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3657909   +
3657910   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3657911   +
3657912   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3657913   +
3657914   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3657915   +
3657916   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3657917   +
3657918   +      label S_RANGE_campaign_acceptance =
3657919   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3657920   +
3657921   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3657922   +
3657923   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3657924   +
3657925   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3657926   +
3657927   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3657928   +
3657929   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3657930   +
3657931   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3657932   +
3657933   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3657934   +
3657935   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3657936   +
3657937   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3657938   +
3657939   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3657940   +
3657941   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3657942   +
3657943   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3657944   +
3657945   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3657946   +
3657947   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3657948   +
3657949   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3657950   +
3657951   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3657952   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3657953   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3657954   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3657955   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3657956   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3657957   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3657958   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3657959   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3657960   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3657961   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3657962   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3657963   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3657964   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3657965   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3657966   +end;
MPRINT(SCORETABLES):   end;
3657967   +else do;
MPRINT(SCORETABLES):   else do;
3657968   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3657969   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3657970   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3657971   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3657972   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3657973   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3657974   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3657975   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3657976   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657977   +         end;
MPRINT(SCORETABLES):   end;
3657978   +         else do;
MPRINT(SCORETABLES):   else do;
3657979   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3657980   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3657981   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657982   +            end;
MPRINT(SCORETABLES):   end;
3657983   +         end;
MPRINT(SCORETABLES):   end;
3657984   +      end;
MPRINT(SCORETABLES):   end;
3657985   +      else do;
MPRINT(SCORETABLES):   else do;
3657986   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3657987   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3657988   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657989   +         end;
MPRINT(SCORETABLES):   end;
3657990   +      end;
MPRINT(SCORETABLES):   end;
3657991   +   end;
MPRINT(SCORETABLES):   end;
3657992   +   else do;
MPRINT(SCORETABLES):   else do;
3657993   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3657994   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3657995   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3657996   +      end;
MPRINT(SCORETABLES):   end;
3657997   +      else do;
MPRINT(SCORETABLES):   else do;
3657998   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3657999   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3658000   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3658001   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3658002   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3658003   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658004   +         end;
MPRINT(SCORETABLES):   end;
3658005   +      end;
MPRINT(SCORETABLES):   end;
3658006   +   end;
MPRINT(SCORETABLES):   end;
3658007   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3658008   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3658009   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3658010   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3658011   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3658012   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3658013   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658014   +   end;
MPRINT(SCORETABLES):   end;
3658015   +end;
MPRINT(SCORETABLES):   end;
3658016   +
3658017   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658018   +*** Checking missing input Interval
3658019   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3658020   +
3658021   +IF NMISS(
3658022   +   MntCard_Games ,
3658023   +   MntMagazines ,
3658024   +   NumCatalogPurchases ,
3658025   +   NumDealsPurchases ,
3658026   +   NumWebPurchases ,
3658027   +   RANGE_Frq ,
3658028   +   RANGE_Recency ,
3658029   +   RANGE_average_purchase ,
3658030   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3658031   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3658032   +
3658033   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658034   +END;
MPRINT(SCORETABLES):   END;
3658035   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658036   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3658037   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658038   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658039   +   S_MntCard_Games  =    -2.32188489290036 +     6.64744953941408 *
3658040   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32188489290036 + 6.64744953941408 * MntCard_Games ;
3658041   +   S_MntMagazines  =    -0.82865241731119 +     17.2138976988378 *
3658042   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82865241731119 + 17.2138976988378 * MntMagazines ;
3658043   +   S_NumCatalogPurchases  =    -3.10620484441216 +     13.4871225063932 *
3658044   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10620484441216 + 13.4871225063932 *
NumCatalogPurchases ;
3658045   +   S_NumDealsPurchases  =    -1.41637372469605 +     11.1762971014097 *
3658046   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41637372469605 + 11.1762971014097 *
NumDealsPurchases ;
3658047   +   S_NumWebPurchases  =    -5.26636507461154 +     12.3251048706441 *
3658048   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.26636507461154 + 12.3251048706441 *
NumWebPurchases ;
3658049   +   S_RANGE_Frq  =    -1.35566667764449 +     4.22295714800789 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35566667764449 + 4.22295714800789 * RANGE_Frq ;
3658050   +   S_RANGE_Recency  =    -1.68519250318486 +     3.36357752302017 *
3658051   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.68519250318486 + 3.36357752302017 * RANGE_Recency ;
3658052   +   S_RANGE_average_purchase  =    -1.03130235446549 +     5.17228178233173 *
3658053   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03130235446549 + 5.17228178233173 *
RANGE_average_purchase ;
3658054   +   S_RANGE_campaign_acceptance
3658055   +          =    -0.46983906920481 +     5.88739855049229 *
3658056   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.46983906920481 + 5.88739855049229 *
RANGE_campaign_acceptance ;
3658057   +END;
MPRINT(SCORETABLES):   END;
3658058   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658059   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3658060   +   ELSE S_MntCard_Games  =    -2.32188489290036 +     6.64744953941408 *
3658061   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32188489290036 + 6.64744953941408 *
MntCard_Games ;
3658062   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3658063   +   ELSE S_MntMagazines  =    -0.82865241731119 +     17.2138976988378 *
3658064   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82865241731119 + 17.2138976988378 *
MntMagazines ;
3658065   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3658066   +   ELSE S_NumCatalogPurchases
3658067   +          =    -3.10620484441216 +     13.4871225063932 * NumCatalogPurchases
3658068   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10620484441216 + 13.4871225063932 *
NumCatalogPurchases ;
3658069   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3658070   +   ELSE S_NumDealsPurchases  =    -1.41637372469605 +     11.1762971014097 *
3658071   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41637372469605 + 11.1762971014097 *
NumDealsPurchases ;
3658072   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3658073   +   ELSE S_NumWebPurchases  =    -5.26636507461154 +     12.3251048706441 *
3658074   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.26636507461154 + 12.3251048706441 *
NumWebPurchases ;
3658075   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3658076   +   ELSE S_RANGE_Frq  =    -1.35566667764449 +     4.22295714800789 * RANGE_Frq
3658077   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35566667764449 + 4.22295714800789 * RANGE_Frq ;
3658078   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3658079   +   ELSE S_RANGE_Recency  =    -1.68519250318486 +     3.36357752302017 *
3658080   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.68519250318486 + 3.36357752302017 *
RANGE_Recency ;
3658081   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3658082   +   ELSE S_RANGE_average_purchase
3658083   +          =    -1.03130235446549 +     5.17228178233173 *
3658084   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03130235446549 + 5.17228178233173 *
RANGE_average_purchase ;
3658085   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3658086   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3658087   +   ELSE S_RANGE_campaign_acceptance
3658088   +          =    -0.46983906920481 +     5.88739855049229 *
3658089   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.46983906920481 + 5.88739855049229
* RANGE_campaign_acceptance ;
3658090   +END;
MPRINT(SCORETABLES):   END;
3658091   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658092   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3658093   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658094   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658095   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3658096   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658097   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658098   +   H11  =    -0.40675319431836 * S_MntCard_Games  +     0.01598346967712 *
3658099   +        S_MntMagazines  +    -0.31950725288453 * S_NumCatalogPurchases
3658100   +          +    -0.41287776040332 * S_NumDealsPurchases
3658101   +          +    -0.14923611263934 * S_NumWebPurchases
3658102   +          +     0.03517916415374 * S_RANGE_Frq  +     0.75006651125758 *
3658103   +        S_RANGE_Recency  +    -0.01950089270188 * S_RANGE_average_purchase
3658104   +          +    -0.45968119054995 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.40675319431836 * S_MntCard_Games + 0.01598346967712 *
S_MntMagazines + -0.31950725288453 * S_NumCatalogPurchases + -0.41287776040332 *
S_NumDealsPurchases + -0.14923611263934 * S_NumWebPurchases + 0.03517916415374 * S_RANGE_Frq +
0.75006651125758 * S_RANGE_Recency + -0.01950089270188 * S_RANGE_average_purchase +
-0.45968119054995 * S_RANGE_campaign_acceptance ;
3658105   +   H12  =     1.40658588591847 * S_MntCard_Games  +    -0.91893027852957 *
3658106   +        S_MntMagazines  +     0.77673852652843 * S_NumCatalogPurchases
3658107   +          +     0.68683270630235 * S_NumDealsPurchases
3658108   +          +     1.64500661711228 * S_NumWebPurchases
3658109   +          +     0.38257084767676 * S_RANGE_Frq  +    -1.23110911909406 *
3658110   +        S_RANGE_Recency  +       4.006344626003 * S_RANGE_average_purchase
3658111   +          +     0.93185060777407 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.40658588591847 * S_MntCard_Games + -0.91893027852957 *
S_MntMagazines + 0.77673852652843 * S_NumCatalogPurchases + 0.68683270630235 *
S_NumDealsPurchases + 1.64500661711228 * S_NumWebPurchases + 0.38257084767676 * S_RANGE_Frq +
-1.23110911909406 * S_RANGE_Recency + 4.006344626003 * S_RANGE_average_purchase +
0.93185060777407 * S_RANGE_campaign_acceptance ;
3658112   +   H13  =    -0.81954944204034 * S_MntCard_Games  +    -0.67285989608477 *
3658113   +        S_MntMagazines  +    -1.04668403325653 * S_NumCatalogPurchases
3658114   +          +     4.82593876234078 * S_NumDealsPurchases
3658115   +          +    -0.74502439003326 * S_NumWebPurchases
3658116   +          +    -0.13331219061349 * S_RANGE_Frq  +     0.16064125498478 *
3658117   +        S_RANGE_Recency  +     1.03458528885397 * S_RANGE_average_purchase
3658118   +          +    -0.17178770989983 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.81954944204034 * S_MntCard_Games + -0.67285989608477 *
S_MntMagazines + -1.04668403325653 * S_NumCatalogPurchases + 4.82593876234078 *
S_NumDealsPurchases + -0.74502439003326 * S_NumWebPurchases + -0.13331219061349 * S_RANGE_Frq
+ 0.16064125498478 * S_RANGE_Recency + 1.03458528885397 * S_RANGE_average_purchase +
-0.17178770989983 * S_RANGE_campaign_acceptance ;
3658119   +   H11  = H11  +    -0.06991719918298 * Marital_StatusDivorced
3658120   +          +     0.10865038806807 * Marital_StatusMarried
3658121   +          +    -0.42880467963931 * Marital_StatusSingle
3658122   +          +     0.19675714204592 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.06991719918298 * Marital_StatusDivorced +
0.10865038806807 * Marital_StatusMarried + -0.42880467963931 * Marital_StatusSingle +
0.19675714204592 * Marital_StatusTogether ;
3658123   +   H12  = H12  +    -0.10353697700739 * Marital_StatusDivorced
3658124   +          +     1.01777873042803 * Marital_StatusMarried
3658125   +          +     -2.4459677125496 * Marital_StatusSingle
3658126   +          +     2.30081930790399 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.10353697700739 * Marital_StatusDivorced +
1.01777873042803 * Marital_StatusMarried + -2.4459677125496 * Marital_StatusSingle +
2.30081930790399 * Marital_StatusTogether ;
3658127   +   H13  = H13  +    -1.72572670910649 * Marital_StatusDivorced
3658128   +          +     5.41261592091147 * Marital_StatusMarried
3658129   +          +     2.85130134759246 * Marital_StatusSingle
3658130   +          +     6.42608688868014 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.72572670910649 * Marital_StatusDivorced +
5.41261592091147 * Marital_StatusMarried + 2.85130134759246 * Marital_StatusSingle +
6.42608688868014 * Marital_StatusTogether ;
3658131   +   H11  =     1.10584008164955 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.10584008164955 + H11 ;
3658132   +   H12  =    -0.46512917708835 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.46512917708835 + H12 ;
3658133   +   H13  =     1.92329980127888 + H13 ;
MPRINT(SCORETABLES):   H13 = 1.92329980127888 + H13 ;
3658134   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3658135   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3658136   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3658137   +END;
MPRINT(SCORETABLES):   END;
3658138   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658139   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3658140   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3658141   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3658142   +END;
MPRINT(SCORETABLES):   END;
3658143   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658144   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3658145   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658146   +
3658147   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3658148   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3658149   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3658150   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3658151   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3658152   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3658153   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3658154   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658155   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658156   +end;
MPRINT(SCORETABLES):   end;
3658157   +else do;
MPRINT(SCORETABLES):   else do;
3658158   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3658159   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3658160   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3658161   +   end;
MPRINT(SCORETABLES):   end;
3658162   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3658163   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3658164   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3658165   +   end;
MPRINT(SCORETABLES):   end;
3658166   +   else do;
MPRINT(SCORETABLES):   else do;
3658167   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658168   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658169   +   end;
MPRINT(SCORETABLES):   end;
3658170   +end;
MPRINT(SCORETABLES):   end;
3658171   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658172   +   P_DepVar1  =    -6.90819445353268 * H11  +     1.90668068315724 * H12
3658173   +          +    -1.96068978658102 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = -6.90819445353268 * H11 + 1.90668068315724 * H12 +
-1.96068978658102 * H13 ;
3658174   +   P_DepVar1  =    -0.62058494918737 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.62058494918737 + P_DepVar1 ;
3658175   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3658176   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3658177   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3658178   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3658179   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3658180   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3658181   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3658182   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3658183   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3658184   +END;
MPRINT(SCORETABLES):   END;
3658185   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658186   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3658187   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3658188   +END;
MPRINT(SCORETABLES):   END;
3658189   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3658190   +   P_DepVar1  =     0.13023679417122;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13023679417122;
3658191   +   P_DepVar0  =     0.86976320582877;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86976320582877;
3658192   +END;
MPRINT(SCORETABLES):   END;
3658193   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3658194   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3658195   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3658196   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3658197   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3658198   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3658199   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3658200   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658201   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3658202   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658203   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3658204   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3658205   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3658206   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3658207   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3658208   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3658209   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3658210   +END;
MPRINT(SCORETABLES):   END;
3658211   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658212   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3658213   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658214   +drop
3658215   +S_MntCard_Games
3658216   +S_MntMagazines
3658217   +S_NumCatalogPurchases
3658218   +S_NumDealsPurchases
3658219   +S_NumWebPurchases
3658220   +S_RANGE_Frq
3658221   +S_RANGE_Recency
3658222   +S_RANGE_average_purchase
3658223   +S_RANGE_campaign_acceptance
3658224   +H11
3658225   +H12
3658226   +H13
3658227   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3658228   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658229   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3658230   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658231   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658232   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3658233   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658234   +end;
MPRINT(SCORETABLES):   end;
3658235   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658236   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3658237   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658238   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658239   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3658240   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658241   +if (cv_var =5)  then do;
MPRINT(SCORETABLES):   if (cv_var =5) then do;
3658242   +_XVAL_=5;
MPRINT(SCORETABLES):   _XVAL_=5;
3658243   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658244   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3658245   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658246   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658247   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3658248   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658249   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658250   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3658251   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658252   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3658253   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3658254   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3658255   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3658256   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3658257   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3658258   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3658259   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3658260   +LENGTH _WARN_ $4
3658261   +      F_DepVar  $ 12
3658262   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3658263   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3658264   +
3658265   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3658266   +
3658267   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3658268   +
3658269   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3658270   +
3658271   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3658272   +
3658273   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3658274   +
3658275   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3658276   +
3658277   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3658278   +
3658279   +      label S_RANGE_campaign_acceptance =
3658280   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3658281   +
3658282   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3658283   +
3658284   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3658285   +
3658286   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3658287   +
3658288   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3658289   +
3658290   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3658291   +
3658292   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3658293   +
3658294   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3658295   +
3658296   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3658297   +
3658298   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3658299   +
3658300   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3658301   +
3658302   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3658303   +
3658304   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3658305   +
3658306   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3658307   +
3658308   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3658309   +
3658310   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3658311   +
3658312   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3658313   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3658314   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3658315   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3658316   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3658317   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3658318   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3658319   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3658320   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3658321   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3658322   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3658323   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3658324   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3658325   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3658326   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658327   +end;
MPRINT(SCORETABLES):   end;
3658328   +else do;
MPRINT(SCORETABLES):   else do;
3658329   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3658330   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3658331   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3658332   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3658333   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3658334   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3658335   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3658336   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3658337   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658338   +         end;
MPRINT(SCORETABLES):   end;
3658339   +         else do;
MPRINT(SCORETABLES):   else do;
3658340   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3658341   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3658342   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658343   +            end;
MPRINT(SCORETABLES):   end;
3658344   +         end;
MPRINT(SCORETABLES):   end;
3658345   +      end;
MPRINT(SCORETABLES):   end;
3658346   +      else do;
MPRINT(SCORETABLES):   else do;
3658347   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3658348   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3658349   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658350   +         end;
MPRINT(SCORETABLES):   end;
3658351   +      end;
MPRINT(SCORETABLES):   end;
3658352   +   end;
MPRINT(SCORETABLES):   end;
3658353   +   else do;
MPRINT(SCORETABLES):   else do;
3658354   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3658355   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3658356   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658357   +      end;
MPRINT(SCORETABLES):   end;
3658358   +      else do;
MPRINT(SCORETABLES):   else do;
3658359   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3658360   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3658361   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3658362   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3658363   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3658364   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658365   +         end;
MPRINT(SCORETABLES):   end;
3658366   +      end;
MPRINT(SCORETABLES):   end;
3658367   +   end;
MPRINT(SCORETABLES):   end;
3658368   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3658369   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3658370   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3658371   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3658372   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3658373   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3658374   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658375   +   end;
MPRINT(SCORETABLES):   end;
3658376   +end;
MPRINT(SCORETABLES):   end;
3658377   +
3658378   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658379   +*** Checking missing input Interval
3658380   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3658381   +
3658382   +IF NMISS(
3658383   +   MntCard_Games ,
3658384   +   MntMagazines ,
3658385   +   NumCatalogPurchases ,
3658386   +   NumDealsPurchases ,
3658387   +   NumWebPurchases ,
3658388   +   RANGE_Frq ,
3658389   +   RANGE_Recency ,
3658390   +   RANGE_average_purchase ,
3658391   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3658392   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3658393   +
3658394   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658395   +END;
MPRINT(SCORETABLES):   END;
3658396   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658397   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3658398   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658399   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658400   +   S_MntCard_Games  =    -2.32272337324185 +     6.63068741439965 *
3658401   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32272337324185 + 6.63068741439965 * MntCard_Games ;
3658402   +   S_MntMagazines  =    -0.83258266394378 +      17.217491799959 *
3658403   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83258266394378 + 17.217491799959 * MntMagazines ;
3658404   +   S_NumCatalogPurchases  =    -3.10404552156333 +     13.4145173693012 *
3658405   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10404552156333 + 13.4145173693012 *
NumCatalogPurchases ;
3658406   +   S_NumDealsPurchases  =    -1.40963503574269 +     11.2025269533909 *
3658407   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40963503574269 + 11.2025269533909 *
NumDealsPurchases ;
3658408   +   S_NumWebPurchases  =     -5.1938572210145 +     12.1697648143945 *
3658409   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.1938572210145 + 12.1697648143945 *
NumWebPurchases ;
3658410   +   S_RANGE_Frq  =     -1.3670753781431 +     4.21388982517033 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3670753781431 + 4.21388982517033 * RANGE_Frq ;
3658411   +   S_RANGE_Recency  =    -1.66831747386179 +     3.35097010643417 *
3658412   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66831747386179 + 3.35097010643417 * RANGE_Recency ;
3658413   +   S_RANGE_average_purchase  =    -1.04072152016298 +     5.18011758973657 *
3658414   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04072152016298 + 5.18011758973657 *
RANGE_average_purchase ;
3658415   +   S_RANGE_campaign_acceptance
3658416   +          =    -0.47562035447319 +     5.83727933651499 *
3658417   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47562035447319 + 5.83727933651499 *
RANGE_campaign_acceptance ;
3658418   +END;
MPRINT(SCORETABLES):   END;
3658419   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658420   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3658421   +   ELSE S_MntCard_Games  =    -2.32272337324185 +     6.63068741439965 *
3658422   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32272337324185 + 6.63068741439965 *
MntCard_Games ;
3658423   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3658424   +   ELSE S_MntMagazines  =    -0.83258266394378 +      17.217491799959 *
3658425   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83258266394378 + 17.217491799959 *
MntMagazines ;
3658426   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3658427   +   ELSE S_NumCatalogPurchases
3658428   +          =    -3.10404552156333 +     13.4145173693012 * NumCatalogPurchases
3658429   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10404552156333 + 13.4145173693012 *
NumCatalogPurchases ;
3658430   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3658431   +   ELSE S_NumDealsPurchases  =    -1.40963503574269 +     11.2025269533909 *
3658432   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40963503574269 + 11.2025269533909 *
NumDealsPurchases ;
3658433   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3658434   +   ELSE S_NumWebPurchases  =     -5.1938572210145 +     12.1697648143945 *
3658435   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.1938572210145 + 12.1697648143945 *
NumWebPurchases ;
3658436   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3658437   +   ELSE S_RANGE_Frq  =     -1.3670753781431 +     4.21388982517033 * RANGE_Frq
3658438   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3670753781431 + 4.21388982517033 * RANGE_Frq ;
3658439   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3658440   +   ELSE S_RANGE_Recency  =    -1.66831747386179 +     3.35097010643417 *
3658441   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66831747386179 + 3.35097010643417 *
RANGE_Recency ;
3658442   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3658443   +   ELSE S_RANGE_average_purchase
3658444   +          =    -1.04072152016298 +     5.18011758973657 *
3658445   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04072152016298 + 5.18011758973657 *
RANGE_average_purchase ;
3658446   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3658447   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3658448   +   ELSE S_RANGE_campaign_acceptance
3658449   +          =    -0.47562035447319 +     5.83727933651499 *
3658450   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47562035447319 + 5.83727933651499
* RANGE_campaign_acceptance ;
3658451   +END;
MPRINT(SCORETABLES):   END;
3658452   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658453   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3658454   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658455   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658456   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3658457   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658458   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658459   +   H11  =      0.8749992742945 * S_MntCard_Games  +    -0.11793440695834 *
3658460   +        S_MntMagazines  +     0.64111352713906 * S_NumCatalogPurchases
3658461   +          +     0.39519646496174 * S_NumDealsPurchases
3658462   +          +     1.00207258461145 * S_NumWebPurchases
3658463   +          +      0.1908540697556 * S_RANGE_Frq  +    -1.39774413543377 *
3658464   +        S_RANGE_Recency  +    -0.24305921127135 * S_RANGE_average_purchase
3658465   +          +     0.88160715211614 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.8749992742945 * S_MntCard_Games + -0.11793440695834 *
S_MntMagazines + 0.64111352713906 * S_NumCatalogPurchases + 0.39519646496174 *
S_NumDealsPurchases + 1.00207258461145 * S_NumWebPurchases + 0.1908540697556 * S_RANGE_Frq +
-1.39774413543377 * S_RANGE_Recency + -0.24305921127135 * S_RANGE_average_purchase +
0.88160715211614 * S_RANGE_campaign_acceptance ;
3658466   +   H12  =     0.26819947493666 * S_MntCard_Games  +    -0.02366193521279 *
3658467   +        S_MntMagazines  +     0.24986470288141 * S_NumCatalogPurchases
3658468   +          +     0.53416595685143 * S_NumDealsPurchases
3658469   +          +    -0.28235201582405 * S_NumWebPurchases
3658470   +          +    -0.00386993325486 * S_RANGE_Frq  +    -0.45199939056911 *
3658471   +        S_RANGE_Recency  +     0.13690082286508 * S_RANGE_average_purchase
3658472   +          +     0.32202763336965 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.26819947493666 * S_MntCard_Games + -0.02366193521279 *
S_MntMagazines + 0.24986470288141 * S_NumCatalogPurchases + 0.53416595685143 *
S_NumDealsPurchases + -0.28235201582405 * S_NumWebPurchases + -0.00386993325486 * S_RANGE_Frq
+ -0.45199939056911 * S_RANGE_Recency + 0.13690082286508 * S_RANGE_average_purchase +
0.32202763336965 * S_RANGE_campaign_acceptance ;
3658473   +   H13  =    -1.27642509088568 * S_MntCard_Games  +    -0.05227120446046 *
3658474   +        S_MntMagazines  +    -2.02935275591284 * S_NumCatalogPurchases
3658475   +          +    -0.19495745715858 * S_NumDealsPurchases
3658476   +          +    -1.26352191040993 * S_NumWebPurchases
3658477   +          +     1.09213494343578 * S_RANGE_Frq  +     2.22629565283368 *
3658478   +        S_RANGE_Recency  +    -5.57693828979226 * S_RANGE_average_purchase
3658479   +          +     -1.1996287030288 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.27642509088568 * S_MntCard_Games + -0.05227120446046 *
S_MntMagazines + -2.02935275591284 * S_NumCatalogPurchases + -0.19495745715858 *
S_NumDealsPurchases + -1.26352191040993 * S_NumWebPurchases + 1.09213494343578 * S_RANGE_Frq +
2.22629565283368 * S_RANGE_Recency + -5.57693828979226 * S_RANGE_average_purchase +
-1.1996287030288 * S_RANGE_campaign_acceptance ;
3658480   +   H11  = H11  +     -0.8028305884844 * Marital_StatusDivorced
3658481   +          +    -0.90454459184155 * Marital_StatusMarried
3658482   +          +      1.5283672651439 * Marital_StatusSingle
3658483   +          +    -0.25796304381221 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.8028305884844 * Marital_StatusDivorced +
-0.90454459184155 * Marital_StatusMarried + 1.5283672651439 * Marital_StatusSingle +
-0.25796304381221 * Marital_StatusTogether ;
3658484   +   H12  = H12  +     0.85532756201849 * Marital_StatusDivorced
3658485   +          +    -0.02826858345652 * Marital_StatusMarried
3658486   +          +    -0.45373711596982 * Marital_StatusSingle
3658487   +          +    -0.90666998228782 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.85532756201849 * Marital_StatusDivorced +
-0.02826858345652 * Marital_StatusMarried + -0.45373711596982 * Marital_StatusSingle +
-0.90666998228782 * Marital_StatusTogether ;
3658488   +   H13  = H13  +     0.65628815018069 * Marital_StatusDivorced
3658489   +          +    -0.69919500549826 * Marital_StatusMarried
3658490   +          +    -0.00175291872482 * Marital_StatusSingle
3658491   +          +    -3.58619571336651 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.65628815018069 * Marital_StatusDivorced +
-0.69919500549826 * Marital_StatusMarried + -0.00175291872482 * Marital_StatusSingle +
-3.58619571336651 * Marital_StatusTogether ;
3658492   +   H11  =     -1.6577549584553 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.6577549584553 + H11 ;
3658493   +   H12  =    -1.01330663475009 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.01330663475009 + H12 ;
3658494   +   H13  =     -0.5189778972746 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.5189778972746 + H13 ;
3658495   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3658496   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3658497   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3658498   +END;
MPRINT(SCORETABLES):   END;
3658499   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658500   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3658501   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3658502   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3658503   +END;
MPRINT(SCORETABLES):   END;
3658504   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658505   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3658506   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658507   +
3658508   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3658509   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3658510   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3658511   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3658512   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3658513   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3658514   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3658515   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658516   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658517   +end;
MPRINT(SCORETABLES):   end;
3658518   +else do;
MPRINT(SCORETABLES):   else do;
3658519   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3658520   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3658521   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3658522   +   end;
MPRINT(SCORETABLES):   end;
3658523   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3658524   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3658525   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3658526   +   end;
MPRINT(SCORETABLES):   end;
3658527   +   else do;
MPRINT(SCORETABLES):   else do;
3658528   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658529   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658530   +   end;
MPRINT(SCORETABLES):   end;
3658531   +end;
MPRINT(SCORETABLES):   end;
3658532   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658533   +   P_DepVar1  =     4.47654234890244 * H11  +     5.27031353345351 * H12
3658534   +          +    -2.71661656855895 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.47654234890244 * H11 + 5.27031353345351 * H12 +
-2.71661656855895 * H13 ;
3658535   +   P_DepVar1  =    -1.83566201953156 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.83566201953156 + P_DepVar1 ;
3658536   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3658537   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3658538   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3658539   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3658540   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3658541   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3658542   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3658543   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3658544   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3658545   +END;
MPRINT(SCORETABLES):   END;
3658546   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658547   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3658548   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3658549   +END;
MPRINT(SCORETABLES):   END;
3658550   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3658551   +   P_DepVar1  =     0.13527008624602;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13527008624602;
3658552   +   P_DepVar0  =     0.86472991375397;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86472991375397;
3658553   +END;
MPRINT(SCORETABLES):   END;
3658554   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3658555   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3658556   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3658557   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3658558   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3658559   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3658560   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3658561   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658562   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3658563   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658564   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3658565   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3658566   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3658567   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3658568   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3658569   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3658570   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3658571   +END;
MPRINT(SCORETABLES):   END;
3658572   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658573   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3658574   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658575   +drop
3658576   +S_MntCard_Games
3658577   +S_MntMagazines
3658578   +S_NumCatalogPurchases
3658579   +S_NumDealsPurchases
3658580   +S_NumWebPurchases
3658581   +S_RANGE_Frq
3658582   +S_RANGE_Recency
3658583   +S_RANGE_average_purchase
3658584   +S_RANGE_campaign_acceptance
3658585   +H11
3658586   +H12
3658587   +H13
3658588   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3658589   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658590   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3658591   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658592   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658593   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3658594   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658595   +end;
MPRINT(SCORETABLES):   end;
3658596   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658597   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3658598   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658599   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658600   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3658601   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658602   +if (cv_var =6)  then do;
MPRINT(SCORETABLES):   if (cv_var =6) then do;
3658603   +_XVAL_=6;
MPRINT(SCORETABLES):   _XVAL_=6;
3658604   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658605   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3658606   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658607   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658608   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3658609   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658610   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658611   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3658612   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658613   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3658614   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3658615   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3658616   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3658617   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3658618   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3658619   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3658620   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3658621   +LENGTH _WARN_ $4
3658622   +      F_DepVar  $ 12
3658623   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3658624   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3658625   +
3658626   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3658627   +
3658628   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3658629   +
3658630   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3658631   +
3658632   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3658633   +
3658634   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3658635   +
3658636   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3658637   +
3658638   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3658639   +
3658640   +      label S_RANGE_campaign_acceptance =
3658641   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3658642   +
3658643   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3658644   +
3658645   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3658646   +
3658647   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3658648   +
3658649   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3658650   +
3658651   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3658652   +
3658653   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3658654   +
3658655   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3658656   +
3658657   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3658658   +
3658659   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3658660   +
3658661   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3658662   +
3658663   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3658664   +
3658665   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3658666   +
3658667   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3658668   +
3658669   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3658670   +
3658671   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3658672   +
3658673   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3658674   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3658675   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3658676   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3658677   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3658678   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3658679   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3658680   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3658681   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3658682   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3658683   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3658684   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3658685   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3658686   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3658687   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658688   +end;
MPRINT(SCORETABLES):   end;
3658689   +else do;
MPRINT(SCORETABLES):   else do;
3658690   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3658691   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3658692   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3658693   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3658694   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3658695   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3658696   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3658697   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3658698   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658699   +         end;
MPRINT(SCORETABLES):   end;
3658700   +         else do;
MPRINT(SCORETABLES):   else do;
3658701   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3658702   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3658703   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658704   +            end;
MPRINT(SCORETABLES):   end;
3658705   +         end;
MPRINT(SCORETABLES):   end;
3658706   +      end;
MPRINT(SCORETABLES):   end;
3658707   +      else do;
MPRINT(SCORETABLES):   else do;
3658708   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3658709   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3658710   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658711   +         end;
MPRINT(SCORETABLES):   end;
3658712   +      end;
MPRINT(SCORETABLES):   end;
3658713   +   end;
MPRINT(SCORETABLES):   end;
3658714   +   else do;
MPRINT(SCORETABLES):   else do;
3658715   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3658716   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3658717   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658718   +      end;
MPRINT(SCORETABLES):   end;
3658719   +      else do;
MPRINT(SCORETABLES):   else do;
3658720   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3658721   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3658722   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3658723   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3658724   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3658725   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3658726   +         end;
MPRINT(SCORETABLES):   end;
3658727   +      end;
MPRINT(SCORETABLES):   end;
3658728   +   end;
MPRINT(SCORETABLES):   end;
3658729   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3658730   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3658731   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3658732   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3658733   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3658734   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3658735   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658736   +   end;
MPRINT(SCORETABLES):   end;
3658737   +end;
MPRINT(SCORETABLES):   end;
3658738   +
3658739   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658740   +*** Checking missing input Interval
3658741   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3658742   +
3658743   +IF NMISS(
3658744   +   MntCard_Games ,
3658745   +   MntMagazines ,
3658746   +   NumCatalogPurchases ,
3658747   +   NumDealsPurchases ,
3658748   +   NumWebPurchases ,
3658749   +   RANGE_Frq ,
3658750   +   RANGE_Recency ,
3658751   +   RANGE_average_purchase ,
3658752   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3658753   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3658754   +
3658755   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3658756   +END;
MPRINT(SCORETABLES):   END;
3658757   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658758   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3658759   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658760   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658761   +   S_MntCard_Games  =    -2.30130897437822 +     6.58322736665233 *
3658762   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30130897437822 + 6.58322736665233 * MntCard_Games ;
3658763   +   S_MntMagazines  =    -0.83583233839969 +     17.5264758755453 *
3658764   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83583233839969 + 17.5264758755453 * MntMagazines ;
3658765   +   S_NumCatalogPurchases  =     -3.1204589230829 +     13.5183764610246 *
3658766   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.1204589230829 + 13.5183764610246 *
NumCatalogPurchases ;
3658767   +   S_NumDealsPurchases  =    -1.41575384085047 +     11.2495668992566 *
3658768   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41575384085047 + 11.2495668992566 *
NumDealsPurchases ;
3658769   +   S_NumWebPurchases  =    -5.21631900721869 +     12.2256877016862 *
3658770   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21631900721869 + 12.2256877016862 *
NumWebPurchases ;
3658771   +   S_RANGE_Frq  =     -1.3662905200641 +     4.21996452019232 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3662905200641 + 4.21996452019232 * RANGE_Frq ;
3658772   +   S_RANGE_Recency  =    -1.66143290677214 +      3.3460560568046 *
3658773   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66143290677214 + 3.3460560568046 * RANGE_Recency ;
3658774   +   S_RANGE_average_purchase  =    -1.04545429433739 +     5.21052259019565 *
3658775   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04545429433739 + 5.21052259019565 *
RANGE_average_purchase ;
3658776   +   S_RANGE_campaign_acceptance
3658777   +          =    -0.48074270957083 +     5.78210161524979 *
3658778   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.48074270957083 + 5.78210161524979 *
RANGE_campaign_acceptance ;
3658779   +END;
MPRINT(SCORETABLES):   END;
3658780   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658781   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3658782   +   ELSE S_MntCard_Games  =    -2.30130897437822 +     6.58322736665233 *
3658783   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30130897437822 + 6.58322736665233 *
MntCard_Games ;
3658784   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3658785   +   ELSE S_MntMagazines  =    -0.83583233839969 +     17.5264758755453 *
3658786   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83583233839969 + 17.5264758755453 *
MntMagazines ;
3658787   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3658788   +   ELSE S_NumCatalogPurchases
3658789   +          =     -3.1204589230829 +     13.5183764610246 * NumCatalogPurchases
3658790   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.1204589230829 + 13.5183764610246 *
NumCatalogPurchases ;
3658791   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3658792   +   ELSE S_NumDealsPurchases  =    -1.41575384085047 +     11.2495668992566 *
3658793   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41575384085047 + 11.2495668992566 *
NumDealsPurchases ;
3658794   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3658795   +   ELSE S_NumWebPurchases  =    -5.21631900721869 +     12.2256877016862 *
3658796   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21631900721869 + 12.2256877016862 *
NumWebPurchases ;
3658797   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3658798   +   ELSE S_RANGE_Frq  =     -1.3662905200641 +     4.21996452019232 * RANGE_Frq
3658799   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3662905200641 + 4.21996452019232 * RANGE_Frq ;
3658800   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3658801   +   ELSE S_RANGE_Recency  =    -1.66143290677214 +      3.3460560568046 *
3658802   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66143290677214 + 3.3460560568046 *
RANGE_Recency ;
3658803   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3658804   +   ELSE S_RANGE_average_purchase
3658805   +          =    -1.04545429433739 +     5.21052259019565 *
3658806   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04545429433739 + 5.21052259019565 *
RANGE_average_purchase ;
3658807   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3658808   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3658809   +   ELSE S_RANGE_campaign_acceptance
3658810   +          =    -0.48074270957083 +     5.78210161524979 *
3658811   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.48074270957083 + 5.78210161524979
* RANGE_campaign_acceptance ;
3658812   +END;
MPRINT(SCORETABLES):   END;
3658813   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658814   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3658815   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658816   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658817   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3658818   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658819   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658820   +   H11  =     1.37215403851385 * S_MntCard_Games  +     0.00408590389459 *
3658821   +        S_MntMagazines  +      0.6457974650956 * S_NumCatalogPurchases
3658822   +          +     1.03054362034612 * S_NumDealsPurchases
3658823   +          +     1.98924335951156 * S_NumWebPurchases
3658824   +          +     1.15247414496656 * S_RANGE_Frq  +    -1.46630966065953 *
3658825   +        S_RANGE_Recency  +     0.40965083285179 * S_RANGE_average_purchase
3658826   +          +     0.79060727033589 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.37215403851385 * S_MntCard_Games + 0.00408590389459 *
S_MntMagazines + 0.6457974650956 * S_NumCatalogPurchases + 1.03054362034612 *
S_NumDealsPurchases + 1.98924335951156 * S_NumWebPurchases + 1.15247414496656 * S_RANGE_Frq +
-1.46630966065953 * S_RANGE_Recency + 0.40965083285179 * S_RANGE_average_purchase +
0.79060727033589 * S_RANGE_campaign_acceptance ;
3658827   +   H12  =     0.26500697719493 * S_MntCard_Games  +    -0.04307155820084 *
3658828   +        S_MntMagazines  +     0.23613188440617 * S_NumCatalogPurchases
3658829   +          +     0.30854956795033 * S_NumDealsPurchases
3658830   +          +    -0.15244066846724 * S_NumWebPurchases
3658831   +          +    -0.10051313381774 * S_RANGE_Frq  +    -0.63918138364181 *
3658832   +        S_RANGE_Recency  +    -0.10318153433612 * S_RANGE_average_purchase
3658833   +          +     0.39572918184516 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.26500697719493 * S_MntCard_Games + -0.04307155820084 *
S_MntMagazines + 0.23613188440617 * S_NumCatalogPurchases + 0.30854956795033 *
S_NumDealsPurchases + -0.15244066846724 * S_NumWebPurchases + -0.10051313381774 * S_RANGE_Frq
+ -0.63918138364181 * S_RANGE_Recency + -0.10318153433612 * S_RANGE_average_purchase +
0.39572918184516 * S_RANGE_campaign_acceptance ;
3658834   +   H13  =    -1.05200577458724 * S_MntCard_Games  +    -0.18362589277947 *
3658835   +        S_MntMagazines  +    -1.37042551232048 * S_NumCatalogPurchases
3658836   +          +    -0.20745937220165 * S_NumDealsPurchases
3658837   +          +    -1.16224173832871 * S_NumWebPurchases
3658838   +          +     1.63952147800575 * S_RANGE_Frq  +     1.44524678551323 *
3658839   +        S_RANGE_Recency  +    -4.76791868530524 * S_RANGE_average_purchase
3658840   +          +    -1.34705207929118 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.05200577458724 * S_MntCard_Games + -0.18362589277947 *
S_MntMagazines + -1.37042551232048 * S_NumCatalogPurchases + -0.20745937220165 *
S_NumDealsPurchases + -1.16224173832871 * S_NumWebPurchases + 1.63952147800575 * S_RANGE_Frq +
1.44524678551323 * S_RANGE_Recency + -4.76791868530524 * S_RANGE_average_purchase +
-1.34705207929118 * S_RANGE_campaign_acceptance ;
3658841   +   H11  = H11  +    -0.64610284487915 * Marital_StatusDivorced
3658842   +          +    -0.00135421991867 * Marital_StatusMarried
3658843   +          +    -0.30878720509105 * Marital_StatusSingle
3658844   +          +     0.22990246163633 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.64610284487915 * Marital_StatusDivorced +
-0.00135421991867 * Marital_StatusMarried + -0.30878720509105 * Marital_StatusSingle +
0.22990246163633 * Marital_StatusTogether ;
3658845   +   H12  = H12  +     0.31643053433541 * Marital_StatusDivorced
3658846   +          +    -0.32557282849134 * Marital_StatusMarried
3658847   +          +     0.37757326513913 * Marital_StatusSingle
3658848   +          +    -0.57807077095004 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.31643053433541 * Marital_StatusDivorced +
-0.32557282849134 * Marital_StatusMarried + 0.37757326513913 * Marital_StatusSingle +
-0.57807077095004 * Marital_StatusTogether ;
3658849   +   H13  = H13  +      0.0809744891865 * Marital_StatusDivorced
3658850   +          +    -0.33686494581615 * Marital_StatusMarried
3658851   +          +     0.54050542087674 * Marital_StatusSingle
3658852   +          +    -2.11558545406345 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.0809744891865 * Marital_StatusDivorced +
-0.33686494581615 * Marital_StatusMarried + 0.54050542087674 * Marital_StatusSingle +
-2.11558545406345 * Marital_StatusTogether ;
3658853   +   H11  =    -3.93937662725973 + H11 ;
MPRINT(SCORETABLES):   H11 = -3.93937662725973 + H11 ;
3658854   +   H12  =    -0.45860889357006 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.45860889357006 + H12 ;
3658855   +   H13  =    -0.05547456938864 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.05547456938864 + H13 ;
3658856   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3658857   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3658858   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3658859   +END;
MPRINT(SCORETABLES):   END;
3658860   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658861   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3658862   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3658863   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3658864   +END;
MPRINT(SCORETABLES):   END;
3658865   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658866   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3658867   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658868   +
3658869   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3658870   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3658871   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3658872   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3658873   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3658874   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3658875   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3658876   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658877   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658878   +end;
MPRINT(SCORETABLES):   end;
3658879   +else do;
MPRINT(SCORETABLES):   else do;
3658880   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3658881   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3658882   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3658883   +   end;
MPRINT(SCORETABLES):   end;
3658884   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3658885   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3658886   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3658887   +   end;
MPRINT(SCORETABLES):   end;
3658888   +   else do;
MPRINT(SCORETABLES):   else do;
3658889   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3658890   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3658891   +   end;
MPRINT(SCORETABLES):   end;
3658892   +end;
MPRINT(SCORETABLES):   end;
3658893   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3658894   +   P_DepVar1  =     2.74008997196241 * H11  +     6.64876877128048 * H12
3658895   +          +    -2.46054625831103 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 2.74008997196241 * H11 + 6.64876877128048 * H12 +
-2.46054625831103 * H13 ;
3658896   +   P_DepVar1  =    -2.15161441935473 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.15161441935473 + P_DepVar1 ;
3658897   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3658898   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3658899   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3658900   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3658901   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3658902   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3658903   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3658904   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3658905   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3658906   +END;
MPRINT(SCORETABLES):   END;
3658907   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3658908   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3658909   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3658910   +END;
MPRINT(SCORETABLES):   END;
3658911   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3658912   +   P_DepVar1  =     0.13777372262773;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13777372262773;
3658913   +   P_DepVar0  =     0.86222627737226;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86222627737226;
3658914   +END;
MPRINT(SCORETABLES):   END;
3658915   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3658916   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3658917   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3658918   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3658919   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3658920   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3658921   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3658922   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658923   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3658924   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3658925   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3658926   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3658927   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3658928   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3658929   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3658930   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3658931   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3658932   +END;
MPRINT(SCORETABLES):   END;
3658933   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658934   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3658935   +********************************;
MPRINT(SCORETABLES):   ********************************;
3658936   +drop
3658937   +S_MntCard_Games
3658938   +S_MntMagazines
3658939   +S_NumCatalogPurchases
3658940   +S_NumDealsPurchases
3658941   +S_NumWebPurchases
3658942   +S_RANGE_Frq
3658943   +S_RANGE_Recency
3658944   +S_RANGE_average_purchase
3658945   +S_RANGE_campaign_acceptance
3658946   +H11
3658947   +H12
3658948   +H13
3658949   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3658950   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658951   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3658952   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658953   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658954   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3658955   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658956   +end;
MPRINT(SCORETABLES):   end;
3658957   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658958   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3658959   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658960   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658961   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3658962   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658963   +if (cv_var =7)  then do;
MPRINT(SCORETABLES):   if (cv_var =7) then do;
3658964   +_XVAL_=7;
MPRINT(SCORETABLES):   _XVAL_=7;
3658965   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3658966   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3658967   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3658968   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3658969   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3658970   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3658971   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658972   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3658973   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3658974   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3658975   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3658976   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3658977   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3658978   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3658979   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3658980   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3658981   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3658982   +LENGTH _WARN_ $4
3658983   +      F_DepVar  $ 12
3658984   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3658985   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3658986   +
3658987   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3658988   +
3658989   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3658990   +
3658991   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3658992   +
3658993   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3658994   +
3658995   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3658996   +
3658997   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3658998   +
3658999   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3659000   +
3659001   +      label S_RANGE_campaign_acceptance =
3659002   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3659003   +
3659004   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3659005   +
3659006   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3659007   +
3659008   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3659009   +
3659010   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3659011   +
3659012   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3659013   +
3659014   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3659015   +
3659016   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3659017   +
3659018   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3659019   +
3659020   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659021   +
3659022   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3659023   +
3659024   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3659025   +
3659026   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3659027   +
3659028   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3659029   +
3659030   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3659031   +
3659032   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3659033   +
3659034   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3659035   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3659036   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3659037   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3659038   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3659039   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3659040   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3659041   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3659042   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3659043   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659044   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659045   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659046   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659047   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3659048   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659049   +end;
MPRINT(SCORETABLES):   end;
3659050   +else do;
MPRINT(SCORETABLES):   else do;
3659051   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3659052   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3659053   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659054   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3659055   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3659056   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3659057   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3659058   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3659059   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659060   +         end;
MPRINT(SCORETABLES):   end;
3659061   +         else do;
MPRINT(SCORETABLES):   else do;
3659062   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3659063   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3659064   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659065   +            end;
MPRINT(SCORETABLES):   end;
3659066   +         end;
MPRINT(SCORETABLES):   end;
3659067   +      end;
MPRINT(SCORETABLES):   end;
3659068   +      else do;
MPRINT(SCORETABLES):   else do;
3659069   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3659070   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3659071   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659072   +         end;
MPRINT(SCORETABLES):   end;
3659073   +      end;
MPRINT(SCORETABLES):   end;
3659074   +   end;
MPRINT(SCORETABLES):   end;
3659075   +   else do;
MPRINT(SCORETABLES):   else do;
3659076   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3659077   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3659078   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659079   +      end;
MPRINT(SCORETABLES):   end;
3659080   +      else do;
MPRINT(SCORETABLES):   else do;
3659081   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3659082   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3659083   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3659084   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3659085   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3659086   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659087   +         end;
MPRINT(SCORETABLES):   end;
3659088   +      end;
MPRINT(SCORETABLES):   end;
3659089   +   end;
MPRINT(SCORETABLES):   end;
3659090   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3659091   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659092   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659093   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659094   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659095   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3659096   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659097   +   end;
MPRINT(SCORETABLES):   end;
3659098   +end;
MPRINT(SCORETABLES):   end;
3659099   +
3659100   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659101   +*** Checking missing input Interval
3659102   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3659103   +
3659104   +IF NMISS(
3659105   +   MntCard_Games ,
3659106   +   MntMagazines ,
3659107   +   NumCatalogPurchases ,
3659108   +   NumDealsPurchases ,
3659109   +   NumWebPurchases ,
3659110   +   RANGE_Frq ,
3659111   +   RANGE_Recency ,
3659112   +   RANGE_average_purchase ,
3659113   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3659114   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3659115   +
3659116   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659117   +END;
MPRINT(SCORETABLES):   END;
3659118   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659119   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3659120   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659121   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659122   +   S_MntCard_Games  =    -2.32778939562618 +     6.63285208254973 *
3659123   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32778939562618 + 6.63285208254973 * MntCard_Games ;
3659124   +   S_MntMagazines  =    -0.83098409983169 +        17.1943049178 *
3659125   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83098409983169 + 17.1943049178 * MntMagazines ;
3659126   +   S_NumCatalogPurchases  =    -3.09864310149069 +     13.3919949779773 *
3659127   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09864310149069 + 13.3919949779773 *
NumCatalogPurchases ;
3659128   +   S_NumDealsPurchases  =    -1.42078184595281 +     11.3301560548133 *
3659129   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42078184595281 + 11.3301560548133 *
NumDealsPurchases ;
3659130   +   S_NumWebPurchases  =    -5.23238637945202 +     12.2760353086253 *
3659131   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23238637945202 + 12.2760353086253 *
NumWebPurchases ;
3659132   +   S_RANGE_Frq  =     -1.3592604109501 +     4.20425377108718 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3592604109501 + 4.20425377108718 * RANGE_Frq ;
3659133   +   S_RANGE_Recency  =    -1.67964969243202 +     3.37240357451299 *
3659134   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67964969243202 + 3.37240357451299 * RANGE_Recency ;
3659135   +   S_RANGE_average_purchase  =    -1.03787032315359 +     5.14788735449515 *
3659136   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03787032315359 + 5.14788735449515 *
RANGE_average_purchase ;
3659137   +   S_RANGE_campaign_acceptance
3659138   +          =    -0.47389437764804 +     5.83295520089654 *
3659139   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47389437764804 + 5.83295520089654 *
RANGE_campaign_acceptance ;
3659140   +END;
MPRINT(SCORETABLES):   END;
3659141   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659142   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3659143   +   ELSE S_MntCard_Games  =    -2.32778939562618 +     6.63285208254973 *
3659144   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32778939562618 + 6.63285208254973 *
MntCard_Games ;
3659145   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3659146   +   ELSE S_MntMagazines  =    -0.83098409983169 +        17.1943049178 *
3659147   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83098409983169 + 17.1943049178 * MntMagazines ;
3659148   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3659149   +   ELSE S_NumCatalogPurchases
3659150   +          =    -3.09864310149069 +     13.3919949779773 * NumCatalogPurchases
3659151   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09864310149069 + 13.3919949779773 *
NumCatalogPurchases ;
3659152   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3659153   +   ELSE S_NumDealsPurchases  =    -1.42078184595281 +     11.3301560548133 *
3659154   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42078184595281 + 11.3301560548133 *
NumDealsPurchases ;
3659155   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3659156   +   ELSE S_NumWebPurchases  =    -5.23238637945202 +     12.2760353086253 *
3659157   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23238637945202 + 12.2760353086253 *
NumWebPurchases ;
3659158   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3659159   +   ELSE S_RANGE_Frq  =     -1.3592604109501 +     4.20425377108718 * RANGE_Frq
3659160   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3592604109501 + 4.20425377108718 * RANGE_Frq ;
3659161   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3659162   +   ELSE S_RANGE_Recency  =    -1.67964969243202 +     3.37240357451299 *
3659163   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67964969243202 + 3.37240357451299 *
RANGE_Recency ;
3659164   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3659165   +   ELSE S_RANGE_average_purchase
3659166   +          =    -1.03787032315359 +     5.14788735449515 *
3659167   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03787032315359 + 5.14788735449515 *
RANGE_average_purchase ;
3659168   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3659169   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3659170   +   ELSE S_RANGE_campaign_acceptance
3659171   +          =    -0.47389437764804 +     5.83295520089654 *
3659172   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47389437764804 + 5.83295520089654
* RANGE_campaign_acceptance ;
3659173   +END;
MPRINT(SCORETABLES):   END;
3659174   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659175   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3659176   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659177   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659178   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3659179   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659180   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659181   +   H11  =     0.14831547042484 * S_MntCard_Games  +     0.37204150146097 *
3659182   +        S_MntMagazines  +     0.24367214512756 * S_NumCatalogPurchases
3659183   +          +     0.43198137394583 * S_NumDealsPurchases
3659184   +          +     -0.4643581428992 * S_NumWebPurchases
3659185   +          +     0.12426998128504 * S_RANGE_Frq  +    -0.65433475387325 *
3659186   +        S_RANGE_Recency  +     0.03110172678973 * S_RANGE_average_purchase
3659187   +          +     0.34299903764434 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.14831547042484 * S_MntCard_Games + 0.37204150146097 *
S_MntMagazines + 0.24367214512756 * S_NumCatalogPurchases + 0.43198137394583 *
S_NumDealsPurchases + -0.4643581428992 * S_NumWebPurchases + 0.12426998128504 * S_RANGE_Frq +
-0.65433475387325 * S_RANGE_Recency + 0.03110172678973 * S_RANGE_average_purchase +
0.34299903764434 * S_RANGE_campaign_acceptance ;
3659188   +   H12  =     0.80851263098773 * S_MntCard_Games  +    -0.46640237680412 *
3659189   +        S_MntMagazines  +      0.4353532296927 * S_NumCatalogPurchases
3659190   +          +     0.28616760568856 * S_NumDealsPurchases
3659191   +          +     0.91819611771806 * S_NumWebPurchases
3659192   +          +    -0.04873838338126 * S_RANGE_Frq  +    -0.87782588445361 *
3659193   +        S_RANGE_Recency  +    -0.12855772091545 * S_RANGE_average_purchase
3659194   +          +     0.62455797332558 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.80851263098773 * S_MntCard_Games + -0.46640237680412 *
S_MntMagazines + 0.4353532296927 * S_NumCatalogPurchases + 0.28616760568856 *
S_NumDealsPurchases + 0.91819611771806 * S_NumWebPurchases + -0.04873838338126 * S_RANGE_Frq +
-0.87782588445361 * S_RANGE_Recency + -0.12855772091545 * S_RANGE_average_purchase +
0.62455797332558 * S_RANGE_campaign_acceptance ;
3659195   +   H13  =    -1.08886629806371 * S_MntCard_Games  +    -0.01575573771359 *
3659196   +        S_MntMagazines  +    -1.05370536451656 * S_NumCatalogPurchases
3659197   +          +    -0.55953407490871 * S_NumDealsPurchases
3659198   +          +    -1.31056475255581 * S_NumWebPurchases
3659199   +          +     1.69648563982767 * S_RANGE_Frq  +     1.67221649407186 *
3659200   +        S_RANGE_Recency  +    -5.76035091469345 * S_RANGE_average_purchase
3659201   +          +     -1.1581106770628 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.08886629806371 * S_MntCard_Games + -0.01575573771359 *
S_MntMagazines + -1.05370536451656 * S_NumCatalogPurchases + -0.55953407490871 *
S_NumDealsPurchases + -1.31056475255581 * S_NumWebPurchases + 1.69648563982767 * S_RANGE_Frq +
1.67221649407186 * S_RANGE_Recency + -5.76035091469345 * S_RANGE_average_purchase +
-1.1581106770628 * S_RANGE_campaign_acceptance ;
3659202   +   H11  = H11  +      0.8556140059582 * Marital_StatusDivorced
3659203   +          +    -0.38763940122924 * Marital_StatusMarried
3659204   +          +    -0.00477610178862 * Marital_StatusSingle
3659205   +          +    -0.91006195176535 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.8556140059582 * Marital_StatusDivorced +
-0.38763940122924 * Marital_StatusMarried + -0.00477610178862 * Marital_StatusSingle +
-0.91006195176535 * Marital_StatusTogether ;
3659206   +   H12  = H12  +    -0.78075673693947 * Marital_StatusDivorced
3659207   +          +     -0.2759078713732 * Marital_StatusMarried
3659208   +          +     0.91968539551972 * Marital_StatusSingle
3659209   +          +     -0.0812213033953 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.78075673693947 * Marital_StatusDivorced +
-0.2759078713732 * Marital_StatusMarried + 0.91968539551972 * Marital_StatusSingle +
-0.0812213033953 * Marital_StatusTogether ;
3659210   +   H13  = H13  +     -0.0885663218829 * Marital_StatusDivorced
3659211   +          +     -0.4217926257268 * Marital_StatusMarried
3659212   +          +     0.42801866421917 * Marital_StatusSingle
3659213   +          +    -1.31954363909804 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.0885663218829 * Marital_StatusDivorced +
-0.4217926257268 * Marital_StatusMarried + 0.42801866421917 * Marital_StatusSingle +
-1.31954363909804 * Marital_StatusTogether ;
3659214   +   H11  =    -1.12823200762359 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.12823200762359 + H11 ;
3659215   +   H12  =    -1.37408370163469 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.37408370163469 + H12 ;
3659216   +   H13  =     0.22820206841168 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.22820206841168 + H13 ;
3659217   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3659218   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3659219   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3659220   +END;
MPRINT(SCORETABLES):   END;
3659221   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659222   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3659223   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3659224   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3659225   +END;
MPRINT(SCORETABLES):   END;
3659226   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659227   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3659228   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659229   +
3659230   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3659231   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3659232   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659233   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3659234   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3659235   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659236   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3659237   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659238   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659239   +end;
MPRINT(SCORETABLES):   end;
3659240   +else do;
MPRINT(SCORETABLES):   else do;
3659241   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3659242   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3659243   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3659244   +   end;
MPRINT(SCORETABLES):   end;
3659245   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3659246   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3659247   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3659248   +   end;
MPRINT(SCORETABLES):   end;
3659249   +   else do;
MPRINT(SCORETABLES):   else do;
3659250   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659251   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659252   +   end;
MPRINT(SCORETABLES):   end;
3659253   +end;
MPRINT(SCORETABLES):   end;
3659254   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659255   +   P_DepVar1  =     5.44826491077681 * H11  +      4.9480210518596 * H12
3659256   +          +     -2.6992826593195 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.44826491077681 * H11 + 4.9480210518596 * H12 +
-2.6992826593195 * H13 ;
3659257   +   P_DepVar1  =    -1.01653046019131 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.01653046019131 + P_DepVar1 ;
3659258   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3659259   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3659260   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3659261   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3659262   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3659263   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3659264   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3659265   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3659266   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3659267   +END;
MPRINT(SCORETABLES):   END;
3659268   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659269   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3659270   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3659271   +END;
MPRINT(SCORETABLES):   END;
3659272   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3659273   +   P_DepVar1  =     0.13491340018231;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13491340018231;
3659274   +   P_DepVar0  =     0.86508659981768;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86508659981768;
3659275   +END;
MPRINT(SCORETABLES):   END;
3659276   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3659277   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3659278   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3659279   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3659280   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3659281   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3659282   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3659283   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659284   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3659285   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659286   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3659287   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3659288   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3659289   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3659290   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3659291   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3659292   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3659293   +END;
MPRINT(SCORETABLES):   END;
3659294   +********************************;
MPRINT(SCORETABLES):   ********************************;
3659295   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3659296   +********************************;
MPRINT(SCORETABLES):   ********************************;
3659297   +drop
3659298   +S_MntCard_Games
3659299   +S_MntMagazines
3659300   +S_NumCatalogPurchases
3659301   +S_NumDealsPurchases
3659302   +S_NumWebPurchases
3659303   +S_RANGE_Frq
3659304   +S_RANGE_Recency
3659305   +S_RANGE_average_purchase
3659306   +S_RANGE_campaign_acceptance
3659307   +H11
3659308   +H12
3659309   +H13
3659310   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3659311   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659312   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3659313   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659314   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659315   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3659316   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659317   +end;
MPRINT(SCORETABLES):   end;
3659318   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659319   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3659320   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659321   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659322   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3659323   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659324   +if (cv_var =8)  then do;
MPRINT(SCORETABLES):   if (cv_var =8) then do;
3659325   +_XVAL_=8;
MPRINT(SCORETABLES):   _XVAL_=8;
3659326   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659327   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3659328   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659329   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659330   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3659331   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659332   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3659333   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3659334   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3659335   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3659336   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3659337   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3659338   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3659339   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3659340   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3659341   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3659342   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3659343   +LENGTH _WARN_ $4
3659344   +      F_DepVar  $ 12
3659345   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3659346   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3659347   +
3659348   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3659349   +
3659350   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3659351   +
3659352   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3659353   +
3659354   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3659355   +
3659356   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3659357   +
3659358   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3659359   +
3659360   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3659361   +
3659362   +      label S_RANGE_campaign_acceptance =
3659363   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3659364   +
3659365   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3659366   +
3659367   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3659368   +
3659369   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3659370   +
3659371   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3659372   +
3659373   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3659374   +
3659375   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3659376   +
3659377   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3659378   +
3659379   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3659380   +
3659381   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659382   +
3659383   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3659384   +
3659385   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3659386   +
3659387   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3659388   +
3659389   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3659390   +
3659391   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3659392   +
3659393   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3659394   +
3659395   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3659396   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3659397   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3659398   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3659399   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3659400   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3659401   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3659402   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3659403   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3659404   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659405   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659406   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659407   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659408   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3659409   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659410   +end;
MPRINT(SCORETABLES):   end;
3659411   +else do;
MPRINT(SCORETABLES):   else do;
3659412   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3659413   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3659414   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659415   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3659416   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3659417   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3659418   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3659419   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3659420   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659421   +         end;
MPRINT(SCORETABLES):   end;
3659422   +         else do;
MPRINT(SCORETABLES):   else do;
3659423   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3659424   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3659425   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659426   +            end;
MPRINT(SCORETABLES):   end;
3659427   +         end;
MPRINT(SCORETABLES):   end;
3659428   +      end;
MPRINT(SCORETABLES):   end;
3659429   +      else do;
MPRINT(SCORETABLES):   else do;
3659430   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3659431   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3659432   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659433   +         end;
MPRINT(SCORETABLES):   end;
3659434   +      end;
MPRINT(SCORETABLES):   end;
3659435   +   end;
MPRINT(SCORETABLES):   end;
3659436   +   else do;
MPRINT(SCORETABLES):   else do;
3659437   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3659438   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3659439   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659440   +      end;
MPRINT(SCORETABLES):   end;
3659441   +      else do;
MPRINT(SCORETABLES):   else do;
3659442   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3659443   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3659444   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3659445   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3659446   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3659447   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659448   +         end;
MPRINT(SCORETABLES):   end;
3659449   +      end;
MPRINT(SCORETABLES):   end;
3659450   +   end;
MPRINT(SCORETABLES):   end;
3659451   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3659452   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659453   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659454   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659455   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659456   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3659457   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659458   +   end;
MPRINT(SCORETABLES):   end;
3659459   +end;
MPRINT(SCORETABLES):   end;
3659460   +
3659461   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659462   +*** Checking missing input Interval
3659463   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3659464   +
3659465   +IF NMISS(
3659466   +   MntCard_Games ,
3659467   +   MntMagazines ,
3659468   +   NumCatalogPurchases ,
3659469   +   NumDealsPurchases ,
3659470   +   NumWebPurchases ,
3659471   +   RANGE_Frq ,
3659472   +   RANGE_Recency ,
3659473   +   RANGE_average_purchase ,
3659474   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3659475   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3659476   +
3659477   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659478   +END;
MPRINT(SCORETABLES):   END;
3659479   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659480   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3659481   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659482   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659483   +   S_MntCard_Games  =     -2.3220779011842 +     6.65291175643999 *
3659484   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3220779011842 + 6.65291175643999 * MntCard_Games ;
3659485   +   S_MntMagazines  =    -0.82930226480491 +     17.2520110095081 *
3659486   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82930226480491 + 17.2520110095081 * MntMagazines ;
3659487   +   S_NumCatalogPurchases  =    -3.11123544244492 +     13.4465556668407 *
3659488   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11123544244492 + 13.4465556668407 *
NumCatalogPurchases ;
3659489   +   S_NumDealsPurchases  =    -1.41571531812675 +     11.1712446598207 *
3659490   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41571531812675 + 11.1712446598207 *
NumDealsPurchases ;
3659491   +   S_NumWebPurchases  =    -5.22663616969868 +      12.251236937933 *
3659492   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22663616969868 + 12.251236937933 *
NumWebPurchases ;
3659493   +   S_RANGE_Frq  =    -1.35896916923355 +     4.21755669126277 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35896916923355 + 4.21755669126277 * RANGE_Frq ;
3659494   +   S_RANGE_Recency  =    -1.66905575567851 +     3.35652906128383 *
3659495   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66905575567851 + 3.35652906128383 * RANGE_Recency ;
3659496   +   S_RANGE_average_purchase  =     -1.0345485466184 +     5.18701830207161 *
3659497   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.0345485466184 + 5.18701830207161 *
RANGE_average_purchase ;
3659498   +   S_RANGE_campaign_acceptance
3659499   +          =    -0.47670085796184 +     5.78090199062142 *
3659500   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47670085796184 + 5.78090199062142 *
RANGE_campaign_acceptance ;
3659501   +END;
MPRINT(SCORETABLES):   END;
3659502   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659503   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3659504   +   ELSE S_MntCard_Games  =     -2.3220779011842 +     6.65291175643999 *
3659505   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3220779011842 + 6.65291175643999 *
MntCard_Games ;
3659506   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3659507   +   ELSE S_MntMagazines  =    -0.82930226480491 +     17.2520110095081 *
3659508   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82930226480491 + 17.2520110095081 *
MntMagazines ;
3659509   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3659510   +   ELSE S_NumCatalogPurchases
3659511   +          =    -3.11123544244492 +     13.4465556668407 * NumCatalogPurchases
3659512   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11123544244492 + 13.4465556668407 *
NumCatalogPurchases ;
3659513   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3659514   +   ELSE S_NumDealsPurchases  =    -1.41571531812675 +     11.1712446598207 *
3659515   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41571531812675 + 11.1712446598207 *
NumDealsPurchases ;
3659516   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3659517   +   ELSE S_NumWebPurchases  =    -5.22663616969868 +      12.251236937933 *
3659518   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22663616969868 + 12.251236937933 *
NumWebPurchases ;
3659519   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3659520   +   ELSE S_RANGE_Frq  =    -1.35896916923355 +     4.21755669126277 * RANGE_Frq
3659521   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35896916923355 + 4.21755669126277 * RANGE_Frq ;
3659522   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3659523   +   ELSE S_RANGE_Recency  =    -1.66905575567851 +     3.35652906128383 *
3659524   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66905575567851 + 3.35652906128383 *
RANGE_Recency ;
3659525   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3659526   +   ELSE S_RANGE_average_purchase
3659527   +          =     -1.0345485466184 +     5.18701830207161 *
3659528   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.0345485466184 + 5.18701830207161 *
RANGE_average_purchase ;
3659529   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3659530   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3659531   +   ELSE S_RANGE_campaign_acceptance
3659532   +          =    -0.47670085796184 +     5.78090199062142 *
3659533   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47670085796184 + 5.78090199062142
* RANGE_campaign_acceptance ;
3659534   +END;
MPRINT(SCORETABLES):   END;
3659535   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659536   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3659537   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659538   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659539   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3659540   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659541   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659542   +   H11  =     0.96738008606441 * S_MntCard_Games  +    -0.12159696031549 *
3659543   +        S_MntMagazines  +     0.75805802509878 * S_NumCatalogPurchases
3659544   +          +     0.47589623502324 * S_NumDealsPurchases
3659545   +          +     0.97822889038306 * S_NumWebPurchases
3659546   +          +     0.27493304392277 * S_RANGE_Frq  +     -1.4605875948422 *
3659547   +        S_RANGE_Recency  +    -0.35872669708601 * S_RANGE_average_purchase
3659548   +          +     0.89504926519702 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.96738008606441 * S_MntCard_Games + -0.12159696031549 *
S_MntMagazines + 0.75805802509878 * S_NumCatalogPurchases + 0.47589623502324 *
S_NumDealsPurchases + 0.97822889038306 * S_NumWebPurchases + 0.27493304392277 * S_RANGE_Frq +
-1.4605875948422 * S_RANGE_Recency + -0.35872669708601 * S_RANGE_average_purchase +
0.89504926519702 * S_RANGE_campaign_acceptance ;
3659549   +   H12  =     0.07773930092435 * S_MntCard_Games  +     0.00483716172753 *
3659550   +        S_MntMagazines  +     0.11105630167766 * S_NumCatalogPurchases
3659551   +          +     0.47005537448765 * S_NumDealsPurchases
3659552   +          +    -0.39226067300932 * S_NumWebPurchases
3659553   +          +    -0.00718736575429 * S_RANGE_Frq  +    -0.40075773477864 *
3659554   +        S_RANGE_Recency  +     0.23395510339946 * S_RANGE_average_purchase
3659555   +          +     0.25687666438207 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.07773930092435 * S_MntCard_Games + 0.00483716172753 *
S_MntMagazines + 0.11105630167766 * S_NumCatalogPurchases + 0.47005537448765 *
S_NumDealsPurchases + -0.39226067300932 * S_NumWebPurchases + -0.00718736575429 * S_RANGE_Frq
+ -0.40075773477864 * S_RANGE_Recency + 0.23395510339946 * S_RANGE_average_purchase +
0.25687666438207 * S_RANGE_campaign_acceptance ;
3659556   +   H13  =    -1.35185127819689 * S_MntCard_Games  +    -0.06947628369577 *
3659557   +        S_MntMagazines  +    -1.62652543468603 * S_NumCatalogPurchases
3659558   +          +    -0.52760102888462 * S_NumDealsPurchases
3659559   +          +    -1.59942299291304 * S_NumWebPurchases
3659560   +          +     1.50046102827548 * S_RANGE_Frq  +     2.13399623832358 *
3659561   +        S_RANGE_Recency  +    -5.10735597890376 * S_RANGE_average_purchase
3659562   +          +    -1.44015293944041 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.35185127819689 * S_MntCard_Games + -0.06947628369577 *
S_MntMagazines + -1.62652543468603 * S_NumCatalogPurchases + -0.52760102888462 *
S_NumDealsPurchases + -1.59942299291304 * S_NumWebPurchases + 1.50046102827548 * S_RANGE_Frq +
2.13399623832358 * S_RANGE_Recency + -5.10735597890376 * S_RANGE_average_purchase +
-1.44015293944041 * S_RANGE_campaign_acceptance ;
3659563   +   H11  = H11  +    -0.82982124873275 * Marital_StatusDivorced
3659564   +          +    -0.73636575679674 * Marital_StatusMarried
3659565   +          +     1.70542956163859 * Marital_StatusSingle
3659566   +          +    -0.37232536673454 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.82982124873275 * Marital_StatusDivorced +
-0.73636575679674 * Marital_StatusMarried + 1.70542956163859 * Marital_StatusSingle +
-0.37232536673454 * Marital_StatusTogether ;
3659567   +   H12  = H12  +     0.89099171600571 * Marital_StatusDivorced
3659568   +          +    -0.06470721629419 * Marital_StatusMarried
3659569   +          +    -0.53997171345571 * Marital_StatusSingle
3659570   +          +    -0.70663551245599 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.89099171600571 * Marital_StatusDivorced +
-0.06470721629419 * Marital_StatusMarried + -0.53997171345571 * Marital_StatusSingle +
-0.70663551245599 * Marital_StatusTogether ;
3659571   +   H13  = H13  +     0.46892603366926 * Marital_StatusDivorced
3659572   +          +    -0.30798079953478 * Marital_StatusMarried
3659573   +          +      0.7448956541199 * Marital_StatusSingle
3659574   +          +    -2.79948076135136 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.46892603366926 * Marital_StatusDivorced +
-0.30798079953478 * Marital_StatusMarried + 0.7448956541199 * Marital_StatusSingle +
-2.79948076135136 * Marital_StatusTogether ;
3659575   +   H11  =     -1.9043745089916 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.9043745089916 + H11 ;
3659576   +   H12  =    -0.97340839912913 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.97340839912913 + H12 ;
3659577   +   H13  =     0.44236152197211 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.44236152197211 + H13 ;
3659578   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3659579   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3659580   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3659581   +END;
MPRINT(SCORETABLES):   END;
3659582   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659583   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3659584   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3659585   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3659586   +END;
MPRINT(SCORETABLES):   END;
3659587   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659588   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3659589   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659590   +
3659591   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3659592   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3659593   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659594   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3659595   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3659596   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659597   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3659598   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659599   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659600   +end;
MPRINT(SCORETABLES):   end;
3659601   +else do;
MPRINT(SCORETABLES):   else do;
3659602   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3659603   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3659604   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3659605   +   end;
MPRINT(SCORETABLES):   end;
3659606   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3659607   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3659608   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3659609   +   end;
MPRINT(SCORETABLES):   end;
3659610   +   else do;
MPRINT(SCORETABLES):   else do;
3659611   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659612   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659613   +   end;
MPRINT(SCORETABLES):   end;
3659614   +end;
MPRINT(SCORETABLES):   end;
3659615   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659616   +   P_DepVar1  =     4.84216602668946 * H11  +      5.2242888202027 * H12
3659617   +          +     -2.4442547825242 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.84216602668946 * H11 + 5.2242888202027 * H12 +
-2.4442547825242 * H13 ;
3659618   +   P_DepVar1  =    -1.02549391898506 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.02549391898506 + P_DepVar1 ;
3659619   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3659620   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3659621   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3659622   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3659623   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3659624   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3659625   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3659626   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3659627   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3659628   +END;
MPRINT(SCORETABLES):   END;
3659629   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659630   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3659631   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3659632   +END;
MPRINT(SCORETABLES):   END;
3659633   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3659634   +   P_DepVar1  =     0.13512283894449;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13512283894449;
3659635   +   P_DepVar0  =      0.8648771610555;
MPRINT(SCORETABLES):   P_DepVar0 = 0.8648771610555;
3659636   +END;
MPRINT(SCORETABLES):   END;
3659637   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3659638   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3659639   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3659640   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3659641   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3659642   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3659643   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3659644   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659645   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3659646   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659647   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3659648   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3659649   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3659650   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3659651   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3659652   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3659653   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3659654   +END;
MPRINT(SCORETABLES):   END;
3659655   +********************************;
MPRINT(SCORETABLES):   ********************************;
3659656   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3659657   +********************************;
MPRINT(SCORETABLES):   ********************************;
3659658   +drop
3659659   +S_MntCard_Games
3659660   +S_MntMagazines
3659661   +S_NumCatalogPurchases
3659662   +S_NumDealsPurchases
3659663   +S_NumWebPurchases
3659664   +S_RANGE_Frq
3659665   +S_RANGE_Recency
3659666   +S_RANGE_average_purchase
3659667   +S_RANGE_campaign_acceptance
3659668   +H11
3659669   +H12
3659670   +H13
3659671   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3659672   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659673   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3659674   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659675   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659676   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3659677   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659678   +end;
MPRINT(SCORETABLES):   end;
3659679   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659680   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3659681   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659682   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659683   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3659684   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659685   +if (cv_var =9)  then do;
MPRINT(SCORETABLES):   if (cv_var =9) then do;
3659686   +_XVAL_=9;
MPRINT(SCORETABLES):   _XVAL_=9;
3659687   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3659688   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3659689   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3659690   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3659691   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3659692   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3659693   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3659694   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3659695   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3659696   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3659697   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3659698   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3659699   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3659700   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3659701   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3659702   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3659703   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3659704   +LENGTH _WARN_ $4
3659705   +      F_DepVar  $ 12
3659706   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3659707   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3659708   +
3659709   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3659710   +
3659711   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3659712   +
3659713   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3659714   +
3659715   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3659716   +
3659717   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3659718   +
3659719   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3659720   +
3659721   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3659722   +
3659723   +      label S_RANGE_campaign_acceptance =
3659724   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3659725   +
3659726   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3659727   +
3659728   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3659729   +
3659730   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3659731   +
3659732   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3659733   +
3659734   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3659735   +
3659736   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3659737   +
3659738   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3659739   +
3659740   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3659741   +
3659742   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659743   +
3659744   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3659745   +
3659746   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3659747   +
3659748   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3659749   +
3659750   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3659751   +
3659752   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3659753   +
3659754   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3659755   +
3659756   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3659757   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3659758   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3659759   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3659760   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3659761   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3659762   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3659763   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3659764   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3659765   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659766   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659767   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659768   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659769   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3659770   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659771   +end;
MPRINT(SCORETABLES):   end;
3659772   +else do;
MPRINT(SCORETABLES):   else do;
3659773   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3659774   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3659775   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659776   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3659777   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3659778   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3659779   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3659780   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3659781   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659782   +         end;
MPRINT(SCORETABLES):   end;
3659783   +         else do;
MPRINT(SCORETABLES):   else do;
3659784   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3659785   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3659786   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659787   +            end;
MPRINT(SCORETABLES):   end;
3659788   +         end;
MPRINT(SCORETABLES):   end;
3659789   +      end;
MPRINT(SCORETABLES):   end;
3659790   +      else do;
MPRINT(SCORETABLES):   else do;
3659791   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3659792   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3659793   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659794   +         end;
MPRINT(SCORETABLES):   end;
3659795   +      end;
MPRINT(SCORETABLES):   end;
3659796   +   end;
MPRINT(SCORETABLES):   end;
3659797   +   else do;
MPRINT(SCORETABLES):   else do;
3659798   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3659799   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3659800   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659801   +      end;
MPRINT(SCORETABLES):   end;
3659802   +      else do;
MPRINT(SCORETABLES):   else do;
3659803   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3659804   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3659805   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3659806   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3659807   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3659808   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3659809   +         end;
MPRINT(SCORETABLES):   end;
3659810   +      end;
MPRINT(SCORETABLES):   end;
3659811   +   end;
MPRINT(SCORETABLES):   end;
3659812   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3659813   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3659814   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3659815   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3659816   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3659817   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3659818   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659819   +   end;
MPRINT(SCORETABLES):   end;
3659820   +end;
MPRINT(SCORETABLES):   end;
3659821   +
3659822   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659823   +*** Checking missing input Interval
3659824   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3659825   +
3659826   +IF NMISS(
3659827   +   MntCard_Games ,
3659828   +   MntMagazines ,
3659829   +   NumCatalogPurchases ,
3659830   +   NumDealsPurchases ,
3659831   +   NumWebPurchases ,
3659832   +   RANGE_Frq ,
3659833   +   RANGE_Recency ,
3659834   +   RANGE_average_purchase ,
3659835   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3659836   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3659837   +
3659838   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3659839   +END;
MPRINT(SCORETABLES):   END;
3659840   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659841   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3659842   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659843   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659844   +   S_MntCard_Games  =    -2.31160990778391 +     6.60673124746978 *
3659845   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31160990778391 + 6.60673124746978 * MntCard_Games ;
3659846   +   S_MntMagazines  =     -0.8313279178076 +     17.3781899787911 *
3659847   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8313279178076 + 17.3781899787911 * MntMagazines ;
3659848   +   S_NumCatalogPurchases  =    -3.10458665247157 +     13.4580416399331 *
3659849   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10458665247157 + 13.4580416399331 *
NumCatalogPurchases ;
3659850   +   S_NumDealsPurchases  =    -1.41080303640415 +     11.1572554145356 *
3659851   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41080303640415 + 11.1572554145356 *
NumDealsPurchases ;
3659852   +   S_NumWebPurchases  =    -5.15985895759176 +     12.1216692325881 *
3659853   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.15985895759176 + 12.1216692325881 *
NumWebPurchases ;
3659854   +   S_RANGE_Frq  =     -1.3685824581405 +     4.18353648826218 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3685824581405 + 4.18353648826218 * RANGE_Frq ;
3659855   +   S_RANGE_Recency  =    -1.66030424870568 +     3.33882485786727 *
3659856   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66030424870568 + 3.33882485786727 * RANGE_Recency ;
3659857   +   S_RANGE_average_purchase  =    -1.04083938460256 +      5.1470050168564 *
3659858   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04083938460256 + 5.1470050168564 *
RANGE_average_purchase ;
3659859   +   S_RANGE_campaign_acceptance
3659860   +          =    -0.46901655747043 +     5.73748410109466 *
3659861   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.46901655747043 + 5.73748410109466 *
RANGE_campaign_acceptance ;
3659862   +END;
MPRINT(SCORETABLES):   END;
3659863   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659864   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3659865   +   ELSE S_MntCard_Games  =    -2.31160990778391 +     6.60673124746978 *
3659866   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31160990778391 + 6.60673124746978 *
MntCard_Games ;
3659867   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3659868   +   ELSE S_MntMagazines  =     -0.8313279178076 +     17.3781899787911 *
3659869   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8313279178076 + 17.3781899787911 *
MntMagazines ;
3659870   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3659871   +   ELSE S_NumCatalogPurchases
3659872   +          =    -3.10458665247157 +     13.4580416399331 * NumCatalogPurchases
3659873   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10458665247157 + 13.4580416399331 *
NumCatalogPurchases ;
3659874   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3659875   +   ELSE S_NumDealsPurchases  =    -1.41080303640415 +     11.1572554145356 *
3659876   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41080303640415 + 11.1572554145356 *
NumDealsPurchases ;
3659877   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3659878   +   ELSE S_NumWebPurchases  =    -5.15985895759176 +     12.1216692325881 *
3659879   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.15985895759176 + 12.1216692325881 *
NumWebPurchases ;
3659880   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3659881   +   ELSE S_RANGE_Frq  =     -1.3685824581405 +     4.18353648826218 * RANGE_Frq
3659882   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3685824581405 + 4.18353648826218 * RANGE_Frq ;
3659883   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3659884   +   ELSE S_RANGE_Recency  =    -1.66030424870568 +     3.33882485786727 *
3659885   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66030424870568 + 3.33882485786727 *
RANGE_Recency ;
3659886   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3659887   +   ELSE S_RANGE_average_purchase
3659888   +          =    -1.04083938460256 +      5.1470050168564 *
3659889   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04083938460256 + 5.1470050168564 *
RANGE_average_purchase ;
3659890   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3659891   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3659892   +   ELSE S_RANGE_campaign_acceptance
3659893   +          =    -0.46901655747043 +     5.73748410109466 *
3659894   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.46901655747043 + 5.73748410109466
* RANGE_campaign_acceptance ;
3659895   +END;
MPRINT(SCORETABLES):   END;
3659896   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659897   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3659898   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659899   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659900   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3659901   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659902   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659903   +   H11  =     0.83750706305841 * S_MntCard_Games  +    -0.12306002642555 *
3659904   +        S_MntMagazines  +     0.60061317275045 * S_NumCatalogPurchases
3659905   +          +     0.23925360802617 * S_NumDealsPurchases
3659906   +          +     0.75892936345796 * S_NumWebPurchases
3659907   +          +     0.31372946509422 * S_RANGE_Frq  +    -1.09414966066647 *
3659908   +        S_RANGE_Recency  +     -0.4887613415943 * S_RANGE_average_purchase
3659909   +          +      0.6641380111464 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.83750706305841 * S_MntCard_Games + -0.12306002642555 *
S_MntMagazines + 0.60061317275045 * S_NumCatalogPurchases + 0.23925360802617 *
S_NumDealsPurchases + 0.75892936345796 * S_NumWebPurchases + 0.31372946509422 * S_RANGE_Frq +
-1.09414966066647 * S_RANGE_Recency + -0.4887613415943 * S_RANGE_average_purchase +
0.6641380111464 * S_RANGE_campaign_acceptance ;
3659910   +   H12  =     0.13579493424763 * S_MntCard_Games  +     0.00664992821397 *
3659911   +        S_MntMagazines  +     0.16750820848711 * S_NumCatalogPurchases
3659912   +          +     0.77821729259292 * S_NumDealsPurchases
3659913   +          +    -0.33109480708754 * S_NumWebPurchases
3659914   +          +    -0.03947077520375 * S_RANGE_Frq  +    -0.65324872465715 *
3659915   +        S_RANGE_Recency  +     0.50531094455534 * S_RANGE_average_purchase
3659916   +          +     0.44365497599197 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.13579493424763 * S_MntCard_Games + 0.00664992821397 *
S_MntMagazines + 0.16750820848711 * S_NumCatalogPurchases + 0.77821729259292 *
S_NumDealsPurchases + -0.33109480708754 * S_NumWebPurchases + -0.03947077520375 * S_RANGE_Frq
+ -0.65324872465715 * S_RANGE_Recency + 0.50531094455534 * S_RANGE_average_purchase +
0.44365497599197 * S_RANGE_campaign_acceptance ;
3659917   +   H13  =    -1.68494036495129 * S_MntCard_Games  +    -0.12083704199497 *
3659918   +        S_MntMagazines  +    -1.81372551734748 * S_NumCatalogPurchases
3659919   +          +    -0.65681393238395 * S_NumDealsPurchases
3659920   +          +    -1.58270270998426 * S_NumWebPurchases
3659921   +          +     1.78314426590867 * S_RANGE_Frq  +      2.5449332171427 *
3659922   +        S_RANGE_Recency  +    -5.73401680738782 * S_RANGE_average_purchase
3659923   +          +    -1.79015563179553 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.68494036495129 * S_MntCard_Games + -0.12083704199497 *
S_MntMagazines + -1.81372551734748 * S_NumCatalogPurchases + -0.65681393238395 *
S_NumDealsPurchases + -1.58270270998426 * S_NumWebPurchases + 1.78314426590867 * S_RANGE_Frq +
2.5449332171427 * S_RANGE_Recency + -5.73401680738782 * S_RANGE_average_purchase +
-1.79015563179553 * S_RANGE_campaign_acceptance ;
3659924   +   H11  = H11  +    -0.79100045872066 * Marital_StatusDivorced
3659925   +          +    -0.60445132278271 * Marital_StatusMarried
3659926   +          +     1.43374582900897 * Marital_StatusSingle
3659927   +          +    -0.32309171825454 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.79100045872066 * Marital_StatusDivorced +
-0.60445132278271 * Marital_StatusMarried + 1.43374582900897 * Marital_StatusSingle +
-0.32309171825454 * Marital_StatusTogether ;
3659928   +   H12  = H12  +     1.14004839111718 * Marital_StatusDivorced
3659929   +          +      0.0859807038843 * Marital_StatusMarried
3659930   +          +    -0.56072001449838 * Marital_StatusSingle
3659931   +          +    -0.81957015966934 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 1.14004839111718 * Marital_StatusDivorced + 0.0859807038843
* Marital_StatusMarried + -0.56072001449838 * Marital_StatusSingle + -0.81957015966934 *
Marital_StatusTogether ;
3659932   +   H13  = H13  +     0.44129969614884 * Marital_StatusDivorced
3659933   +          +    -0.02522320030818 * Marital_StatusMarried
3659934   +          +       1.069815904116 * Marital_StatusSingle
3659935   +          +    -3.05339971544429 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.44129969614884 * Marital_StatusDivorced +
-0.02522320030818 * Marital_StatusMarried + 1.069815904116 * Marital_StatusSingle +
-3.05339971544429 * Marital_StatusTogether ;
3659936   +   H11  =    -1.42395136529001 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.42395136529001 + H11 ;
3659937   +   H12  =    -1.53928203433104 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.53928203433104 + H12 ;
3659938   +   H13  =     0.62374640775038 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.62374640775038 + H13 ;
3659939   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3659940   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3659941   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3659942   +END;
MPRINT(SCORETABLES):   END;
3659943   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659944   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3659945   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3659946   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3659947   +END;
MPRINT(SCORETABLES):   END;
3659948   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659949   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3659950   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3659951   +
3659952   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3659953   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3659954   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3659955   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3659956   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3659957   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3659958   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3659959   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659960   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659961   +end;
MPRINT(SCORETABLES):   end;
3659962   +else do;
MPRINT(SCORETABLES):   else do;
3659963   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3659964   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3659965   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3659966   +   end;
MPRINT(SCORETABLES):   end;
3659967   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3659968   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3659969   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3659970   +   end;
MPRINT(SCORETABLES):   end;
3659971   +   else do;
MPRINT(SCORETABLES):   else do;
3659972   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3659973   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3659974   +   end;
MPRINT(SCORETABLES):   end;
3659975   +end;
MPRINT(SCORETABLES):   end;
3659976   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3659977   +   P_DepVar1  =       5.259592847362 * H11  +     4.99968859625792 * H12
3659978   +          +    -2.48935118566471 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.259592847362 * H11 + 4.99968859625792 * H12 +
-2.48935118566471 * H13 ;
3659979   +   P_DepVar1  =     -0.9753156712971 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.9753156712971 + P_DepVar1 ;
3659980   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3659981   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3659982   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3659983   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3659984   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3659985   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3659986   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3659987   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3659988   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3659989   +END;
MPRINT(SCORETABLES):   END;
3659990   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3659991   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3659992   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3659993   +END;
MPRINT(SCORETABLES):   END;
3659994   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3659995   +   P_DepVar1  =      0.1360544217687;
MPRINT(SCORETABLES):   P_DepVar1 = 0.1360544217687;
3659996   +   P_DepVar0  =     0.86394557823129;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86394557823129;
3659997   +END;
MPRINT(SCORETABLES):   END;
3659998   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3659999   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3660000   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3660001   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3660002   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3660003   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3660004   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3660005   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660006   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3660007   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660008   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3660009   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3660010   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3660011   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3660012   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3660013   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3660014   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3660015   +END;
MPRINT(SCORETABLES):   END;
3660016   +********************************;
MPRINT(SCORETABLES):   ********************************;
3660017   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3660018   +********************************;
MPRINT(SCORETABLES):   ********************************;
3660019   +drop
3660020   +S_MntCard_Games
3660021   +S_MntMagazines
3660022   +S_NumCatalogPurchases
3660023   +S_NumDealsPurchases
3660024   +S_NumWebPurchases
3660025   +S_RANGE_Frq
3660026   +S_RANGE_Recency
3660027   +S_RANGE_average_purchase
3660028   +S_RANGE_campaign_acceptance
3660029   +H11
3660030   +H12
3660031   +H13
3660032   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3660033   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3660034   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3660035   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3660036   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3660037   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3660038   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3660039   +end;
MPRINT(SCORETABLES):   end;
3660040   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3660041   +* Grp13: StartGroup;
MPRINT(SCORETABLES):   * Grp13: StartGroup;
3660042   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3660043   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3660044   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3660045   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3660046   +if (cv_var =10)  then do;
MPRINT(SCORETABLES):   if (cv_var =10) then do;
3660047   +_XVAL_=10;
MPRINT(SCORETABLES):   _XVAL_=10;
3660048   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3660049   +* Neural5: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural5: NeuralNetwork;
3660050   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3660051   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3660052   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3660053   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3660054   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3660055   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3660056   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3660057   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3660058   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3660059   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3660060   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3660061   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3660062   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3660063   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3660064   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3660065   +LENGTH _WARN_ $4
3660066   +      F_DepVar  $ 12
3660067   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3660068   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3660069   +
3660070   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3660071   +
3660072   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3660073   +
3660074   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3660075   +
3660076   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3660077   +
3660078   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3660079   +
3660080   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3660081   +
3660082   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3660083   +
3660084   +      label S_RANGE_campaign_acceptance =
3660085   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3660086   +
3660087   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3660088   +
3660089   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3660090   +
3660091   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3660092   +
3660093   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3660094   +
3660095   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3660096   +
3660097   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3660098   +
3660099   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3660100   +
3660101   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3660102   +
3660103   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3660104   +
3660105   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3660106   +
3660107   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3660108   +
3660109   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3660110   +
3660111   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3660112   +
3660113   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3660114   +
3660115   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3660116   +
3660117   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3660118   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3660119   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3660120   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3660121   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3660122   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3660123   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3660124   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3660125   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3660126   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3660127   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3660128   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3660129   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3660130   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3660131   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3660132   +end;
MPRINT(SCORETABLES):   end;
3660133   +else do;
MPRINT(SCORETABLES):   else do;
3660134   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3660135   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3660136   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3660137   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3660138   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3660139   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3660140   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3660141   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3660142   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3660143   +         end;
MPRINT(SCORETABLES):   end;
3660144   +         else do;
MPRINT(SCORETABLES):   else do;
3660145   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3660146   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3660147   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3660148   +            end;
MPRINT(SCORETABLES):   end;
3660149   +         end;
MPRINT(SCORETABLES):   end;
3660150   +      end;
MPRINT(SCORETABLES):   end;
3660151   +      else do;
MPRINT(SCORETABLES):   else do;
3660152   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3660153   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3660154   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3660155   +         end;
MPRINT(SCORETABLES):   end;
3660156   +      end;
MPRINT(SCORETABLES):   end;
3660157   +   end;
MPRINT(SCORETABLES):   end;
3660158   +   else do;
MPRINT(SCORETABLES):   else do;
3660159   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3660160   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3660161   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3660162   +      end;
MPRINT(SCORETABLES):   end;
3660163   +      else do;
MPRINT(SCORETABLES):   else do;
3660164   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3660165   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3660166   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3660167   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3660168   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3660169   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3660170   +         end;
MPRINT(SCORETABLES):   end;
3660171   +      end;
MPRINT(SCORETABLES):   end;
3660172   +   end;
MPRINT(SCORETABLES):   end;
3660173   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3660174   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3660175   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3660176   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3660177   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3660178   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3660179   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3660180   +   end;
MPRINT(SCORETABLES):   end;
3660181   +end;
MPRINT(SCORETABLES):   end;
3660182   +
3660183   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660184   +*** Checking missing input Interval
3660185   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3660186   +
3660187   +IF NMISS(
3660188   +   MntCard_Games ,
3660189   +   MntMagazines ,
3660190   +   NumCatalogPurchases ,
3660191   +   NumDealsPurchases ,
3660192   +   NumWebPurchases ,
3660193   +   RANGE_Frq ,
3660194   +   RANGE_Recency ,
3660195   +   RANGE_average_purchase ,
3660196   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3660197   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3660198   +
3660199   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3660200   +END;
MPRINT(SCORETABLES):   END;
3660201   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660202   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3660203   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660204   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3660205   +   S_MntCard_Games  =    -2.32515076805437 +     6.66411277179852 *
3660206   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32515076805437 + 6.66411277179852 * MntCard_Games ;
3660207   +   S_MntMagazines  =    -0.83422384899092 +     17.2983453953919 *
3660208   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83422384899092 + 17.2983453953919 * MntMagazines ;
3660209   +   S_NumCatalogPurchases  =    -3.13456754474558 +     13.6193005964789 *
3660210   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.13456754474558 + 13.6193005964789 *
NumCatalogPurchases ;
3660211   +   S_NumDealsPurchases  =    -1.42384362740717 +     11.2791203965929 *
3660212   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42384362740717 + 11.2791203965929 *
NumDealsPurchases ;
3660213   +   S_NumWebPurchases  =    -5.27669246426392 +     12.3414696712185 *
3660214   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.27669246426392 + 12.3414696712185 *
NumWebPurchases ;
3660215   +   S_RANGE_Frq  =    -1.36365277596795 +     4.20592806484111 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36365277596795 + 4.20592806484111 * RANGE_Frq ;
3660216   +   S_RANGE_Recency  =    -1.66812948690867 +     3.35606481009998 *
3660217   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66812948690867 + 3.35606481009998 * RANGE_Recency ;
3660218   +   S_RANGE_average_purchase  =    -1.03955846350372 +     5.17833970767657 *
3660219   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03955846350372 + 5.17833970767657 *
RANGE_average_purchase ;
3660220   +   S_RANGE_campaign_acceptance
3660221   +          =    -0.46821065808265 +     5.77724337430798 *
3660222   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.46821065808265 + 5.77724337430798 *
RANGE_campaign_acceptance ;
3660223   +END;
MPRINT(SCORETABLES):   END;
3660224   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3660225   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3660226   +   ELSE S_MntCard_Games  =    -2.32515076805437 +     6.66411277179852 *
3660227   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32515076805437 + 6.66411277179852 *
MntCard_Games ;
3660228   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3660229   +   ELSE S_MntMagazines  =    -0.83422384899092 +     17.2983453953919 *
3660230   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83422384899092 + 17.2983453953919 *
MntMagazines ;
3660231   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3660232   +   ELSE S_NumCatalogPurchases
3660233   +          =    -3.13456754474558 +     13.6193005964789 * NumCatalogPurchases
3660234   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.13456754474558 + 13.6193005964789 *
NumCatalogPurchases ;
3660235   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3660236   +   ELSE S_NumDealsPurchases  =    -1.42384362740717 +     11.2791203965929 *
3660237   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42384362740717 + 11.2791203965929 *
NumDealsPurchases ;
3660238   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3660239   +   ELSE S_NumWebPurchases  =    -5.27669246426392 +     12.3414696712185 *
3660240   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.27669246426392 + 12.3414696712185 *
NumWebPurchases ;
3660241   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3660242   +   ELSE S_RANGE_Frq  =    -1.36365277596795 +     4.20592806484111 * RANGE_Frq
3660243   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36365277596795 + 4.20592806484111 * RANGE_Frq ;
3660244   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3660245   +   ELSE S_RANGE_Recency  =    -1.66812948690867 +     3.35606481009998 *
3660246   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66812948690867 + 3.35606481009998 *
RANGE_Recency ;
3660247   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3660248   +   ELSE S_RANGE_average_purchase
3660249   +          =    -1.03955846350372 +     5.17833970767657 *
3660250   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03955846350372 + 5.17833970767657 *
RANGE_average_purchase ;
3660251   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3660252   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3660253   +   ELSE S_RANGE_campaign_acceptance
3660254   +          =    -0.46821065808265 +     5.77724337430798 *
3660255   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.46821065808265 + 5.77724337430798
* RANGE_campaign_acceptance ;
3660256   +END;
MPRINT(SCORETABLES):   END;
3660257   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660258   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3660259   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660260   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660261   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3660262   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660263   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3660264   +   H11  =     0.87001813312897 * S_MntCard_Games  +    -0.33848453449803 *
3660265   +        S_MntMagazines  +     0.55049108221365 * S_NumCatalogPurchases
3660266   +          +     0.33222299012994 * S_NumDealsPurchases
3660267   +          +     0.91828121990615 * S_NumWebPurchases
3660268   +          +     0.20111867016344 * S_RANGE_Frq  +    -1.19343312758587 *
3660269   +        S_RANGE_Recency  +    -0.10880259887038 * S_RANGE_average_purchase
3660270   +          +     0.75469908934892 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.87001813312897 * S_MntCard_Games + -0.33848453449803 *
S_MntMagazines + 0.55049108221365 * S_NumCatalogPurchases + 0.33222299012994 *
S_NumDealsPurchases + 0.91828121990615 * S_NumWebPurchases + 0.20111867016344 * S_RANGE_Frq +
-1.19343312758587 * S_RANGE_Recency + -0.10880259887038 * S_RANGE_average_purchase +
0.75469908934892 * S_RANGE_campaign_acceptance ;
3660271   +   H12  =       0.130218299814 * S_MntCard_Games  +     0.28333095702557 *
3660272   +        S_MntMagazines  +     0.11293648512122 * S_NumCatalogPurchases
3660273   +          +     0.52074890564042 * S_NumDealsPurchases
3660274   +          +    -0.59680157357676 * S_NumWebPurchases
3660275   +          +    -0.00212488934584 * S_RANGE_Frq  +    -0.42592641138012 *
3660276   +        S_RANGE_Recency  +     -0.0833994062201 * S_RANGE_average_purchase
3660277   +          +     0.28314715920496 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.130218299814 * S_MntCard_Games + 0.28333095702557 *
S_MntMagazines + 0.11293648512122 * S_NumCatalogPurchases + 0.52074890564042 *
S_NumDealsPurchases + -0.59680157357676 * S_NumWebPurchases + -0.00212488934584 * S_RANGE_Frq
+ -0.42592641138012 * S_RANGE_Recency + -0.0833994062201 * S_RANGE_average_purchase +
0.28314715920496 * S_RANGE_campaign_acceptance ;
3660278   +   H13  =    -1.08831753482605 * S_MntCard_Games  +    -0.00348425820564 *
3660279   +        S_MntMagazines  +    -1.66869089914579 * S_NumCatalogPurchases
3660280   +          +    -0.43590463585276 * S_NumDealsPurchases
3660281   +          +    -1.67924883044426 * S_NumWebPurchases
3660282   +          +     1.24759149808797 * S_RANGE_Frq  +     1.99779155631169 *
3660283   +        S_RANGE_Recency  +    -4.92065596716501 * S_RANGE_average_purchase
3660284   +          +    -1.12880617136423 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.08831753482605 * S_MntCard_Games + -0.00348425820564 *
S_MntMagazines + -1.66869089914579 * S_NumCatalogPurchases + -0.43590463585276 *
S_NumDealsPurchases + -1.67924883044426 * S_NumWebPurchases + 1.24759149808797 * S_RANGE_Frq +
1.99779155631169 * S_RANGE_Recency + -4.92065596716501 * S_RANGE_average_purchase +
-1.12880617136423 * S_RANGE_campaign_acceptance ;
3660285   +   H11  = H11  +     -0.3429438553579 * Marital_StatusDivorced
3660286   +          +    -0.58324772444407 * Marital_StatusMarried
3660287   +          +     1.21157089146838 * Marital_StatusSingle
3660288   +          +    -0.21830861815595 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.3429438553579 * Marital_StatusDivorced +
-0.58324772444407 * Marital_StatusMarried + 1.21157089146838 * Marital_StatusSingle +
-0.21830861815595 * Marital_StatusTogether ;
3660289   +   H12  = H12  +     0.69782615780998 * Marital_StatusDivorced
3660290   +          +      0.0010629040942 * Marital_StatusMarried
3660291   +          +    -0.29629270025047 * Marital_StatusSingle
3660292   +          +    -0.92523948084965 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.69782615780998 * Marital_StatusDivorced + 0.0010629040942
* Marital_StatusMarried + -0.29629270025047 * Marital_StatusSingle + -0.92523948084965 *
Marital_StatusTogether ;
3660293   +   H13  = H13  +     0.51129559987623 * Marital_StatusDivorced
3660294   +          +    -0.15740810021415 * Marital_StatusMarried
3660295   +          +     0.71579146822893 * Marital_StatusSingle
3660296   +          +    -2.61171238117809 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.51129559987623 * Marital_StatusDivorced +
-0.15740810021415 * Marital_StatusMarried + 0.71579146822893 * Marital_StatusSingle +
-2.61171238117809 * Marital_StatusTogether ;
3660297   +   H11  =    -1.71779577073371 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.71779577073371 + H11 ;
3660298   +   H12  =    -0.83288393401971 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.83288393401971 + H12 ;
3660299   +   H13  =     0.33367566413609 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.33367566413609 + H13 ;
3660300   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3660301   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3660302   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3660303   +END;
MPRINT(SCORETABLES):   END;
3660304   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3660305   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3660306   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3660307   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3660308   +END;
MPRINT(SCORETABLES):   END;
3660309   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660310   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3660311   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660312   +
3660313   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3660314   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3660315   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3660316   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3660317   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3660318   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3660319   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3660320   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3660321   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3660322   +end;
MPRINT(SCORETABLES):   end;
3660323   +else do;
MPRINT(SCORETABLES):   else do;
3660324   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3660325   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3660326   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3660327   +   end;
MPRINT(SCORETABLES):   end;
3660328   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3660329   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3660330   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3660331   +   end;
MPRINT(SCORETABLES):   end;
3660332   +   else do;
MPRINT(SCORETABLES):   else do;
3660333   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3660334   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3660335   +   end;
MPRINT(SCORETABLES):   end;
3660336   +end;
MPRINT(SCORETABLES):   end;
3660337   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3660338   +   P_DepVar1  =     4.70458363288169 * H11  +     4.69421850726771 * H12
3660339   +          +    -2.97648940345531 * H13 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.70458363288169 * H11 + 4.69421850726771 * H12 +
-2.97648940345531 * H13 ;
3660340   +   P_DepVar1  =    -1.76253226242947 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.76253226242947 + P_DepVar1 ;
3660341   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3660342   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3660343   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3660344   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3660345   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3660346   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3660347   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3660348   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3660349   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3660350   +END;
MPRINT(SCORETABLES):   END;
3660351   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3660352   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3660353   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3660354   +END;
MPRINT(SCORETABLES):   END;
3660355   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3660356   +   P_DepVar1  =     0.13003663003663;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13003663003663;
3660357   +   P_DepVar0  =     0.86996336996337;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86996336996337;
3660358   +END;
MPRINT(SCORETABLES):   END;
3660359   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3660360   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3660361   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3660362   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3660363   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3660364   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3660365   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3660366   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660367   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3660368   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3660369   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3660370   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3660371   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3660372   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3660373   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3660374   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3660375   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3660376   +END;
MPRINT(SCORETABLES):   END;
3660377   +********************************;
MPRINT(SCORETABLES):   ********************************;
3660378   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3660379   +********************************;
MPRINT(SCORETABLES):   ********************************;
3660380   +drop
3660381   +S_MntCard_Games
3660382   +S_MntMagazines
3660383   +S_NumCatalogPurchases
3660384   +S_NumDealsPurchases
3660385   +S_NumWebPurchases
3660386   +S_RANGE_Frq
3660387   +S_RANGE_Recency
3660388   +S_RANGE_average_purchase
3660389   +S_RANGE_campaign_acceptance
3660390   +H11
3660391   +H12
3660392   +H13
3660393   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 ;
3660394   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3660395   +* EndGrp13: EndGroup;
MPRINT(SCORETABLES):   * EndGrp13: EndGroup;
3660396   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3660397   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3660398   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3660399   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3660400   +end;
MPRINT(SCORETABLES):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP13_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
 
MPRINT(POSTLOOP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End POSTLOOP: EndGrp13;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3660401    *------------------------------------------------------------*;
3660402    * End POSTLOOP: EndGrp13;
3660403    *------------------------------------------------------------*;
3660404
 
NOTE: There were 10 observations read from the data set EMWS1.GRP13_EMLOOPINFO.
NOTE: The data set EMWS1.ENDGRP13_EMLOOPINFO has 10 observations and 3 variables.
3660405    proc print data=EMWS1.EndGrp13_EMLOOPINFO noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.EndGrp13_EMLOOPINFO noobs label;
3660406    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rptgroupsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Group Summary";
MPRINT(EM_DIAGRAM):   run;
3660407    run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP13_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2404.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3660408    title9;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.EndGrp13_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_DepVar) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
3660432    data EMWS1.EndGrp13_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMOUTFIT;
3660433    set WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set WORK.OUTFITDATA;
3660434    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.ENDGRP13_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3660435    data EMWS1.EndGrp13_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMOUTFIT;
3660436    set EMWS1.EndGrp13_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMOUTFIT;
3660437    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3660438    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3660438  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3660439    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3660440    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP13_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
3660441    proc sort data=EMWS1.EndGrp13_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp13_EMREPORTFIT nothreads;
3660442    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3660443    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP13_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP13_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3660444    %let _EMwarndup = 0;
3660445    %let _EMtargetdup =;
3660446    %let _EMASEtargetdup =;
3660447    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3660448    set EMWS1.EndGrp13_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMOUTFIT;
3660449    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3660450    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3660451    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3660452    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3660453    end;
MPRINT(EM_DIAGRAM):   end;
3660454    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3660455    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3660456    * EndGrp13: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp13: Computing metadata for TRAIN data;
3660457    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP13_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp13_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp13_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp13_TRAIN out=WORK.M2FAII_2 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FAII_2;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FAII_2(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FAII_2;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FAII_2;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M285911W NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2JJB5HY(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID',
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   set WORK.M285911W;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural5_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural5_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp13";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp13";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp13";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp13: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3660808    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3660809    set EMWS1.EndGrp13_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMINFO;
3660810    where DATA='EndGrp13' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp13' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
3660811    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMINFO.
      WHERE (DATA='EndGrp13') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3660812    data EMWS1.EndGrp13_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMINFO;
3660813    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3660814    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3660815    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP13_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
3660819    run;
3660820    data EMWS1.EndGrp13_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMINFO;
3660821    set EMWS1.EndGrp13_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMINFO WORK.MODELTEMP_INFO;
3660822    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP13_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP13_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3660823    proc sort data = EMWS1.EndGrp13_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp13_EMINFO NOTHREADS;
3660824    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3660825    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP13_EMINFO.
NOTE: The data set EMWS1.ENDGRP13_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3660826    proc sort data = EMWS1.Neural5_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural5_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3660827    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3660828    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL5_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3660829    proc sort data = EMWS1.EndGrp13_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp13_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3660830    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3660831    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP13_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3660832    data EMWS1.EndGrp13_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMINFO;
3660833    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3660834    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3660835    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP13_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3660836    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3660837    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3660838    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3660839    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.ENDGRP13_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp13: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp13: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp13: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.1366568914956;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86334310850439;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3661301    %let EMEXCEPTIONSTRING=;
3661302    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3661303    * POSTLOOPREPORT: EndGrp13;
MPRINT(EM_DIAGRAM):   * POSTLOOPREPORT: EndGrp13;
3661304    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3661305    %let EM_ACTION = POSTLOOPREPORT;
3661306    %let syscc = 0;
3661307    %macro main;
3661308       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3661309
3661310           filename temp catalog 'sashelp.emutil.endgp_train.source';
3661311           %include temp;
3661312           filename temp;
3661313
3661314           %train;
3661315
3661316       %end;
3661317       %else
3661318          %if %upcase(&EM_ACTION) = SCORE %then %do;
3661319
3661320           filename temp catalog 'sashelp.emutil.endgp_score.source';
3661321           %include temp;
3661322           filename temp;
3661323
3661324           %score;
3661325       %end;
3661326       %else
3661327       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3661328
3661329           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3661330           %include temp;
3661331           filename temp;
3661332
3661333           %postloop;
3661334
3661335       %end;
3661336
3661337       %doendm:
3661338    %mend main;
3661339
3661340    %main;
MPRINT(EM_DIAGRAM):
MPRINT(EM_DIAGRAM):  ;
3661341    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3661342    * End POSTLOOPREPORT: EndGrp13;
MPRINT(EM_DIAGRAM):   * End POSTLOOPREPORT: EndGrp13;
3661343    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3661344
 
3661345    proc sort data=EMWS1.Neural5_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural5_CMeta_TRAIN out=WORK.SUBSETINMETA;
3661346    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3661347    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.NEURAL5_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3661348    proc sort data=EMWS1.EndGrp13_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp13_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
3661349    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3661350    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP13_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3661351    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3661352    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3661353    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3661354    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3661355    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3661356    set EMWS1.EndGrp13_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_CMeta_TRAIN;
3661357    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3661357  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
3661358    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP13_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3661359    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3661360    set EMWS1.EndGrp13_TRAIN(keep=
3661361    F_DepVar
3661362    I_DepVar
3661363    P_DepVar0
3661364    P_DepVar1
3661365    R_DepVar0
3661366    R_DepVar1
3661367    U_DepVar
3661368    _WARN_
3661369    DepVar
3661370    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
3661371    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: View EMWS1.ENDGRP13_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.ENDGRP13_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2437 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.EndGrp13_3PPFHZ0 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EndGrp13_3PPFHZ0;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.EndGrp13_3PPFHZ0(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp13_3PPFHZ0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp13_3PPFHZ0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370537546 _NEVENTS
334 _NNONEVENTS 2103 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2437));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 3.5736672E-7 OVLMAX 0.9999998675 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2437 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2437/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2437)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2437/20) ) / (
AVGNUMRESP / (2437/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2437/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2437/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3665658    %let grouptarget=0;
3665659    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3665660    set EMWS1.Grp13_EMLOOPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp13_EMLOOPINFO;
3665661    if _TARGET_ ne "" then do;
MPRINT(EM_DIAGRAM):   if _TARGET_ ne "" then do;
3665662    call symput('grouptarget', '1');
MPRINT(EM_DIAGRAM):   call symput('grouptarget', '1');
3665663    stop;
MPRINT(EM_DIAGRAM):   stop;
3665664    end;
MPRINT(EM_DIAGRAM):   end;
3665665    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _TARGET_ is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.GRP13_EMLOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3665666    data work.EMOUTFIT;
MPRINT(EM_DIAGRAM):    data work.EMOUTFIT;
3665667    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665668    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665669    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665669  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665670    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665671    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665672    set EMWS1.EndGrp13_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMOUTFIT;
3665673    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMOUTFIT.
NOTE: The data set WORK.EMOUTFIT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665674    data EMWS1.EndGrp13_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMOUTFIT_LOOP;
3665675    set EMWS1.EndGrp13_EMOUTFIT_LOOP work.EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMOUTFIT_LOOP work.EMOUTFIT;
3665676    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP13_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP13_EMOUTFIT_LOOP has 11 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665677    data work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):    data work.EMREPORTFIT;
3665678    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665679    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665680    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665680  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665681    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665682    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665683    set EMWS1.EndGrp13_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMREPORTFIT;
3665684    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP13_EMREPORTFIT.
NOTE: The data set WORK.EMREPORTFIT has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665685    data EMWS1.EndGrp13_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMREPORTFIT_LOOP;
3665686    set EMWS1.EndGrp13_EMREPORTFIT_LOOP work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMREPORTFIT_LOOP work.EMREPORTFIT;
3665687    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 210 observations read from the data set EMWS1.ENDGRP13_EMREPORTFIT_LOOP.
NOTE: There were 9 observations read from the data set WORK.EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP13_EMREPORTFIT_LOOP has 219 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3665688    data work.EMRANK;
MPRINT(EM_DIAGRAM):    data work.EMRANK;
3665689    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665690    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665691    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665691  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665692    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665693    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665694    set EMWS1.EndGrp13_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMRANK;
3665695    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP13_EMRANK.
NOTE: The data set WORK.EMRANK has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665696    data EMWS1.EndGrp13_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMRANK_LOOP;
3665697    set EMWS1.EndGrp13_EMRANK_LOOP work.EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMRANK_LOOP work.EMRANK;
3665698    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.ENDGRP13_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMRANK.
NOTE: The data set EMWS1.ENDGRP13_EMRANK_LOOP has 220 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665699    data work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data work.EMSCOREDIST;
3665700    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665701    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665702    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665702  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665703    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665704    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665705    set EMWS1.EndGrp13_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMSCOREDIST;
3665706    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP13_EMSCOREDIST.
NOTE: The data set WORK.EMSCOREDIST has 20 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665707    data EMWS1.EndGrp13_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMSCOREDIST_LOOP;
3665708    set EMWS1.EndGrp13_EMSCOREDIST_LOOP work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMSCOREDIST_LOOP work.EMSCOREDIST;
3665709    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.ENDGRP13_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP13_EMSCOREDIST_LOOP has 220 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665710    data work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data work.EMCLASSIFICATION;
3665711    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665712    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665713    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665713  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665714    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665715    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665716    set EMWS1.EndGrp13_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMCLASSIFICATION;
3665717    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP13_EMCLASSIFICATION.
NOTE: The data set WORK.EMCLASSIFICATION has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665718    data EMWS1.EndGrp13_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMCLASSIFICATION_LOOP;
3665719    set EMWS1.EndGrp13_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
3665720    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665721    proc sort data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP out=_temp;
3665722    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3665723    where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
MPRINT(EM_DIAGRAM):   where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
3665724    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP.
      WHERE (_type_='PREDICTION') and correct and (INTO not = ' ') and (FROM not = ' ');
NOTE: The data set WORK._TEMP has 22 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665725    data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL totalCount
3665725  ! totalPercent);
MPRINT(EM_DIAGRAM):   data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
totalCount totalPercent);
3665726    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3665727    retain totalCount totalPercent;
MPRINT(EM_DIAGRAM):   retain totalCount totalPercent;
3665728    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3665729    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3665730    totalCount = count;
MPRINT(EM_DIAGRAM):   totalCount = count;
3665731    totalPercent = percent;
MPRINT(EM_DIAGRAM):   totalPercent = percent;
3665732    end;
MPRINT(EM_DIAGRAM):   end;
3665733    else do;
MPRINT(EM_DIAGRAM):   else do;
3665734    totalCount + count;
MPRINT(EM_DIAGRAM):   totalCount + count;
3665735    totalPercent + percent;
MPRINT(EM_DIAGRAM):   totalPercent + percent;
3665736    end;
MPRINT(EM_DIAGRAM):   end;
3665737    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3665738    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TOTAL has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665739    data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL eventCount
3665739  ! eventPercent);
MPRINT(EM_DIAGRAM):   data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
eventCount eventPercent);
3665740    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3665741    where strip(FROM) eq strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) eq strip(EVENT);
3665742    by _LOOP_ DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ DATAROLE TARGET;
3665743    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3665744    eventCount = count;
MPRINT(EM_DIAGRAM):   eventCount = count;
3665745    eventPercent = percent;
MPRINT(EM_DIAGRAM):   eventPercent = percent;
3665746    end;
MPRINT(EM_DIAGRAM):   end;
3665747    else do;
MPRINT(EM_DIAGRAM):   else do;
3665748    eventCount + count;
MPRINT(EM_DIAGRAM):   eventCount + count;
3665749    eventPercent + percent;
MPRINT(EM_DIAGRAM):   eventPercent + percent;
3665750    end;
MPRINT(EM_DIAGRAM):   end;
3665751    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3665752    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable first.modelid is uninitialized.
NOTE: Variable last.modelid is uninitialized.
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM)=STRIP(EVENT);
NOTE: The data set WORK._EVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665753    data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL neventCount
3665753  ! neventPercent);
MPRINT(EM_DIAGRAM):   data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
neventCount neventPercent);
3665754    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3665755    retain neventCount neventPercent 0;
MPRINT(EM_DIAGRAM):   retain neventCount neventPercent 0;
3665756    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3665757    where strip(FROM) ne strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) ne strip(EVENT);
3665758    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3665759    neventCount = count;
MPRINT(EM_DIAGRAM):   neventCount = count;
3665760    neventPercent = percent;
MPRINT(EM_DIAGRAM):   neventPercent = percent;
3665761    end;
MPRINT(EM_DIAGRAM):   end;
3665762    else do;
MPRINT(EM_DIAGRAM):   else do;
3665763    neventCount + count;
MPRINT(EM_DIAGRAM):   neventCount + count;
3665764    neventPercent + percent;
MPRINT(EM_DIAGRAM):   neventPercent + percent;
3665765    end;
MPRINT(EM_DIAGRAM):   end;
3665766    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3665767    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM) not = STRIP(EVENT);
NOTE: The data set WORK._NEVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665768    data EMWS1.EndGrp13_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMMISC_LOOP;
3665769    merge _total _event _nevent;
MPRINT(EM_DIAGRAM):   merge _total _event _nevent;
3665770    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3665771    label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,   NOQUOTE))"
3665771  ! targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3665771  ! eventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctEvent_vlabel,  NOQUOTE))"
3665772       eventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,  NOQUOTE))"
3665772  ! neventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctNEvent_vlabel, NOQUOTE))"
3665772  ! neventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumNEvent_vlabel, NOQUOTE))"
3665773       totalPercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel,    NOQUOTE))"
3665773  !  totalCount = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalcount_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable" targetLabel = "Target Label"
eventPercent = "Percentage of Events" eventCount = "Number of Events" neventPercent =
"Percentage of Nonevents" neventCount = "Number of Nonevents" totalPercent = "Total
Percentage" totalCount = "Total Count";
3665774    if neventCount = . then neventCount = 0;
MPRINT(EM_DIAGRAM):   if neventCount = . then neventCount = 0;
3665775    if eventCount = . then eventCount = 0;
MPRINT(EM_DIAGRAM):   if eventCount = . then eventCount = 0;
3665776    if neventPercent = . then neventPercent = 0;
MPRINT(EM_DIAGRAM):   if neventPercent = . then neventPercent = 0;
3665777    if eventPercent = . then eventPercent = 0;
MPRINT(EM_DIAGRAM):   if eventPercent = . then eventPercent = 0;
3665778    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TOTAL.
NOTE: There were 11 observations read from the data set WORK._EVENT.
NOTE: There were 11 observations read from the data set WORK._NEVENT.
NOTE: The data set EMWS1.ENDGRP13_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3665779    proc sort data=EMWS1.EndGrp13_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp13_EMMISC_LOOP;
3665780    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3665781    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.ENDGRP13_EMMISC_LOOP.
NOTE: The data set EMWS1.ENDGRP13_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3665782    data work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data work.EMEVENTREPORT;
3665783    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3665784    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3665785    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3665785  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3665786    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3665787    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3665788    set EMWS1.EndGrp13_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMEVENTREPORT;
3665789    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMEVENTREPORT.
NOTE: The data set WORK.EMEVENTREPORT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3665790    data EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
3665791    set work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set work.EMEVENTREPORT;
3665792    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.EMEVENTREPORT.
NOTE: The data set EMWS1.ENDGRP13_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665793    %let _cn = %sysfunc(getoption(CENTER));
3665794    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3665795    proc print data=EMWS1.EndGrp13_EMREPORTFIT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp13_EMREPORTFIT_LOOP noobs label;
3665796    var STAT LABEL TRAIN
3665797    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
3665798    by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
MPRINT(EM_DIAGRAM):   by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
3665799    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3665800    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3665801    run;
 
NOTE: There were 219 observations read from the data set EMWS1.ENDGRP13_EMREPORTFIT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2405.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665802    title10;
MPRINT(EM_DIAGRAM):   title10;
3665803    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3665804    proc sort data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP nothreads;
3665805    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3665806    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP.
NOTE: The data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3665807    %let _cn = %sysfunc(getoption(CENTER));
3665808    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3665809    proc print data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp13_EMCLASSIFICATION_LOOP noobs label;
3665810    var from into pct_row pct_col count percent
3665811    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3665812    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3665813    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3665814    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3665815    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3665816    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3665817    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3665818    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3665819    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3665820    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3665821    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3665822    run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP13_EMCLASSIFICATION_LOOP.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2406.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
3665823    title9;
MPRINT(EM_DIAGRAM):   title9;
3665824    title10;
MPRINT(EM_DIAGRAM):   title10;
3665825    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3665826    %let _cn = %sysfunc(getoption(CENTER));
3665827    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3665828    data EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
3665829    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3665829  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
3665830    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3665830  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3665830  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3665830  ! FALSEEVENT
3665831    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3665831  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3665831  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3665832       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
3665833    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3665834    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3665835    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3665836    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3665837    set EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp13_EMEVENTREPORT_LOOP;
3665838    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMEVENTREPORT_LOOP.
NOTE: The data set EMWS1.ENDGRP13_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
3665839    proc print data=EMWS1.EndGrp13_EMEVENTREPORT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp13_EMEVENTREPORT_LOOP noobs label;
3665840    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3665841    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3665842    by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted TARGETLABEL;
3665843    run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP13_EMEVENTREPORT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2407.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3665844    title10;
MPRINT(EM_DIAGRAM):   title10;
3665845    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3665846    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3665847    modify EndGrp13_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp13_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3665848    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3665849    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3665849  ! ;
MPRINT(EM_DIAGRAM):   run;
3665850    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP13_EMRANK_LOOP.DATA.
3665851    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
3665852    %let _cn = %sysfunc(getoption(CENTER));
3665853    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3665854    proc print data=EMWS1.EndGrp13_EMRANK_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp13_EMRANK_LOOP label noobs;
3665855    var
3665856    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3665857    by
3665858    notsorted DATAROLE
3665859    notsorted _WHERE_
3665860    notsorted TARGET
3665861    notsorted TARGETLABEL
3665862    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3665863    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3665864    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3665865    run;
 
NOTE: There were 220 observations read from the data set EMWS1.ENDGRP13_EMRANK_LOOP.
NOTE: The PROCEDURE PRINT printed page 2408.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665866    title10;
MPRINT(EM_DIAGRAM):   title10;
3665867    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3665868    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3665869    modify EndGrp13_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp13_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3665870    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3665870  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3665871    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3665871  ! ;
MPRINT(EM_DIAGRAM):   run;
3665872    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP13_EMSCOREDIST_LOOP.DATA.
3665873    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
3665874    %let _cn = %sysfunc(getoption(CENTER));
3665875    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3665876    proc print data=EMWS1.EndGrp13_EMSCOREDIST_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp13_EMSCOREDIST_LOOP label noobs;
3665877    var
3665878    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
3665879    by
3665880    notsorted DATAROLE
3665881    notsorted _WHERE_
3665882    notsorted TARGET
3665883    notsorted TARGETLABEL
3665884    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3665885    where TARGET in(
3665886    "DepVar"
3665887    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
3665888    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3665889    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
3665890    run;
 
NOTE: There were 220 observations read from the data set EMWS1.ENDGRP13_EMSCOREDIST_LOOP.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 2409.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3665891    title10;
MPRINT(EM_DIAGRAM):   title10;
3665892    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3665893    %let emexceptionstring =;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:09 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:09 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp13\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp13_EMREPORT;
MPRINT(EM_DIAGRAM):   length ID 8 KEY $30 VALUE $512;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='PROPERTIES';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SETTINGS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="VARIABLES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMTRAINVARIABLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLLOG";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\EMLOG.log";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLOUTPUT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="NOTES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FLOWCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SASCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Scoring";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="MISCLASSIFICATIONMANY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMMISC_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="TOTALPERCENT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FITSTATPLOT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMOUTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="_ANYNUMERIC_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSRANKOVERLAY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMRANK_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="DECILE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="LIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BASELIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BESTLIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSSCOREDIST";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMSCOREDIST_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="SCORE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFNONEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEX";
MPRINT(EM_DIAGRAM):   VALUE="DATAROLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="NROWS";
MPRINT(EM_DIAGRAM):   VALUE="1";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="REPORTFITSTAT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMREPORTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="eventratestat";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMEVENTREPORT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="miningresult";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Gp";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp13_EMLOOPINFO";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
