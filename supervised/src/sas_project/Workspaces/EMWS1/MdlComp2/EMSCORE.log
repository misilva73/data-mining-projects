MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:17:26 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                17:17:26 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0KXICSX "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMSCORE.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0KXICSX new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
76229      /* Generate assessment metadata, which will be used to generate assessment data step
76229    !  */
76230      /* code, such as retrieving names of temporary variables and summary variables,
76230    !  */
76231      /* labels, etc.  It is used in almost all the assessment computations such as lift,
76231    !  */
76232      /* roc, index, scoreDist and could be thought as a global variable in assessment
76232    !  */
76233      /* computation.
76233    !  */
76234      data work.ASSESS_0CIL3WL_assessMeta_htE0od;
MPRINT(EM_DIAGRAM):    data work.ASSESS_0CIL3WL_assessMeta_htE0od;
76235      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32
76235    ! MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32
76235    ! RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32
76235    ! RESULT_MAX $32 RESULT_MAX_LABEL
76236         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE
76236    !  $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY 
$32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL 
$100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32 RESULT_MAX_LABEL 
$100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
76237      VARIABLE = "DepVar";
MPRINT(EM_DIAGRAM):   VARIABLE = "DepVar";
76238      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
76239      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
76240      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
76241      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
76242      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
76243      MEASUREMENT = "BINARY";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "BINARY";
76244      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
76245      GEN_VAR_IN_TEMP_DATA = "DepVar";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "DepVar";
76246      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
76247      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
76248      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
76249      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
76250      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
76251      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
76252      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
76253      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
76254      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
76255      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
76256      TEMPORARY_VARIABLE = "DepVar_ga3ogvddpVhOoGd";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "DepVar_ga3ogvddpVhOoGd";
76257      output;
MPRINT(EM_DIAGRAM):   output;
76258      VARIABLE = "F_DepVar_1";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_DepVar_1";
76259      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
76260      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
76261      PARENT = "F_DepVar";
MPRINT(EM_DIAGRAM):   PARENT = "F_DepVar";
76262      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
76263      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
76264      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
76265      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
76266      GEN_VAR_IN_TEMP_DATA = "F_DepVar_1_3BBPMuCjvVW44bT";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_DepVar_1_3BBPMuCjvVW44bT";
76267      RESULT_MEAN = "F_DepVar_1_mean_TvgHfyR7wDcHsgV";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_DepVar_1_mean_TvgHfyR7wDcHsgV";
76268      /* adjust for tied cases */
76269      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
76270      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
76271      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
76272      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
76273      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
76274      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
76275      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
76275    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
76276      TEMPORARY_VARIABLE = "F_DepVar_1_NldGcahjVswi9Fg";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_DepVar_1_NldGcahjVswi9Fg";
76277      output;
MPRINT(EM_DIAGRAM):   output;
76278      VARIABLE = "F_DepVar_0";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_DepVar_0";
76279      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
76280      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
76281      PARENT = "F_DepVar";
MPRINT(EM_DIAGRAM):   PARENT = "F_DepVar";
76282      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
76283      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
76284      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
76285      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
76286      GEN_VAR_IN_TEMP_DATA = "F_DepVar_0_uRO7s0IbXPJohmq";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_DepVar_0_uRO7s0IbXPJohmq";
76287      RESULT_MEAN = "F_DepVar_0_mean_2nhlS74qahHXRXY";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_DepVar_0_mean_2nhlS74qahHXRXY";
76288      /* adjust for tied cases */
76289      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
76290      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
76291      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
76292      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
76293      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
76294      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
76295      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
76295    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
76296      TEMPORARY_VARIABLE = "F_DepVar_0_ztWNdu5deU5Y4w5";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_DepVar_0_ztWNdu5deU5Y4w5";
76297      output;
MPRINT(EM_DIAGRAM):   output;
76298      VARIABLE = "P_DepVar1";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_DepVar1";
76299      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
76300      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
76301      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
76302      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
76303      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
76304      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
76305      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
76306      GEN_VAR_IN_TEMP_DATA = "P_DepVar1";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_DepVar1";
76307      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
76308      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
76308    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
76309      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
76310      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
76311      MIN_ADJUSTED = "P_DepVar_minAdjusted_5D9hwlgPz";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_DepVar_minAdjusted_5D9hwlgPz";
76312      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
76313      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
76314      MAX_ADJUSTED = "P_DepVar_maxAdjusted_5gD3mAh2l";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_DepVar_maxAdjusted_5gD3mAh2l";
76315      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
76316      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
76317      TEMPORARY_VARIABLE = "P_DepVar1_TsnUUxJpafK5fns";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_DepVar1_TsnUUxJpafK5fns";
76318      output;
MPRINT(EM_DIAGRAM):   output;
76319      VARIABLE = "P_DepVar0";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_DepVar0";
76320      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
76321      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
76322      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
76323      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
76324      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
76325      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
76326      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
76327      GEN_VAR_IN_TEMP_DATA = "P_DepVar0";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_DepVar0";
76328      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
76329      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
76329    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
76330      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
76331      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
76332      MIN_ADJUSTED = "P_DepVar_minAdjusted_v2YTv6rRY";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_DepVar_minAdjusted_v2YTv6rRY";
76333      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
76334      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
76335      MAX_ADJUSTED = "P_DepVar_maxAdjusted_ebbgSp5_L";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_DepVar_maxAdjusted_ebbgSp5_L";
76336      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
76337      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
76338      TEMPORARY_VARIABLE = "P_DepVar0_5dMBW5ZECcvcILg";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_DepVar0_5dMBW5ZECcvcILg";
76339      output;
MPRINT(EM_DIAGRAM):   output;
76340      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_0CIL3WL_ASSESSMETA_HTE0OD has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

76341      /* Generate temporary dataset and obtain summary statistics such as total number of
76341    !   */
76342      /* obserations, frequency of target.  However, summary statistics for class
76342    ! reporting */
76343      /* variabels are not computed here since if there exist class reporting variables,
76343    !   */
76344      /* then PROC DMDB will be called. And there is no need to compute interval reporting
76344    !   */
76345      /* summary statisitcs, if any.
76345    !   */
76346      data work.ASSESS_0CIL3WL_normSD_AfJoNi(drop=
76347      _numberOfObservation_
76348      _levelFrequency_1
76349      _levelFrequency_2
76350      )
76351      work.ASSESS_0CIL3WL_meansAndTi__H_gZP (keep=
76352      _numberOfObservation_
76353      _levelFrequency_1
76354      _levelFrequency_2
76355      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_0CIL3WL_normSD_AfJoNi(drop= _numberOfObservation_ 
_levelFrequency_1 _levelFrequency_2 ) work.ASSESS_0CIL3WL_meansAndTi__H_gZP (keep= 
_numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
76356      set EMWS1.Neural6_TRAIN(
76357      where=(
76358      (DepVar ^= .)
76359      )
76360      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_TRAIN( where=( (DepVar ^= .) ) ) end=_lastObservation_;
76361      keep frequency_0joyiY;
MPRINT(EM_DIAGRAM):   keep frequency_0joyiY;
76362      frequency_0joyiY = 1;
MPRINT(EM_DIAGRAM):   frequency_0joyiY = 1;
76363      keep I_DepVar F_DepVar;
MPRINT(EM_DIAGRAM):   keep I_DepVar F_DepVar;
76364      keep F_DepVar_1_3BBPMuCjvVW44bT;
MPRINT(EM_DIAGRAM):   keep F_DepVar_1_3BBPMuCjvVW44bT;
76365      if (F_DepVar = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_DepVar = '1') then do;
76366      F_DepVar_1_3BBPMuCjvVW44bT = 1;
MPRINT(EM_DIAGRAM):   F_DepVar_1_3BBPMuCjvVW44bT = 1;
76367      end;
MPRINT(EM_DIAGRAM):   end;
76368      else do;
MPRINT(EM_DIAGRAM):   else do;
76369      F_DepVar_1_3BBPMuCjvVW44bT = 0;
MPRINT(EM_DIAGRAM):   F_DepVar_1_3BBPMuCjvVW44bT = 0;
76370      end;
MPRINT(EM_DIAGRAM):   end;
76371      keep F_DepVar_0_uRO7s0IbXPJohmq;
MPRINT(EM_DIAGRAM):   keep F_DepVar_0_uRO7s0IbXPJohmq;
76372      if (F_DepVar = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_DepVar = '0') then do;
76373      F_DepVar_0_uRO7s0IbXPJohmq = 1;
MPRINT(EM_DIAGRAM):   F_DepVar_0_uRO7s0IbXPJohmq = 1;
76374      end;
MPRINT(EM_DIAGRAM):   end;
76375      else do;
MPRINT(EM_DIAGRAM):   else do;
76376      F_DepVar_0_uRO7s0IbXPJohmq = 0;
MPRINT(EM_DIAGRAM):   F_DepVar_0_uRO7s0IbXPJohmq = 0;
76377      end;
MPRINT(EM_DIAGRAM):   end;
76378      keep P_DepVar1;
MPRINT(EM_DIAGRAM):   keep P_DepVar1;
76379      keep P_DepVar0;
MPRINT(EM_DIAGRAM):   keep P_DepVar0;
76380      output work.ASSESS_0CIL3WL_normSD_AfJoNi;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0CIL3WL_normSD_AfJoNi;
76381      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
76382      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
76383      _numberOfObservation_ + frequency_0joyiY;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_0joyiY;
76384      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
76385      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
76386      if (F_DepVar = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_DepVar = '1') then do;
76387      _levelFrequency_1 + frequency_0joyiY;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_0joyiY;
76388      end;
MPRINT(EM_DIAGRAM):   end;
76389      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
76390      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
76391      if (F_DepVar = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_DepVar = '0') then do;
76392      _levelFrequency_2 + frequency_0joyiY;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_0joyiY;
76393      end;
MPRINT(EM_DIAGRAM):   end;
76394      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
76395      output work.ASSESS_0CIL3WL_meansAndTi__H_gZP;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0CIL3WL_meansAndTi__H_gZP;
76396      end;
MPRINT(EM_DIAGRAM):   end;
76397      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 1704 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 1704 observations read from the data set EMWS1.NEURAL6_TRAIN.
      WHERE DepVar not = .;
NOTE: The data set WORK.ASSESS_0CIL3WL_NORMSD_AFJONI has 1704 observations and 7 variables.
NOTE: The data set WORK.ASSESS_0CIL3WL_MEANSANDTI__H_GZP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

76398      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
76399      set EMWS1.MdlComp2_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMRANK;
76400      where MODEL = "Neural6" and TARGET = "DepVar" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Neural6" and TARGET = "DepVar" and dataRole="TRAIN";
76401      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP2_EMRANK.
      WHERE (MODEL='Neural6') and (TARGET='DepVar') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

76402      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
76403      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
76404      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
76405      output;
MPRINT(EM_DIAGRAM):   output;
76406      end;
MPRINT(EM_DIAGRAM):   end;
76407      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

76408      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
76409      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
76410      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
76411      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

76412      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
76413      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
76414      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
76415      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
76416      keep event;
MPRINT(EM_DIAGRAM):   keep event;
76417      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
76418      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
76419      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
76420      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
76421      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
76422      /* tied */
76423      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
76424      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
76425      end;
MPRINT(EM_DIAGRAM):   end;
76426      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
76427      /* next tied */
76428      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
76429      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ 
));
76430      end;
MPRINT(EM_DIAGRAM):   end;
76431      output;
MPRINT(EM_DIAGRAM):   output;
76432      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 
1E-6) then do;
76433      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
76434      *end;
MPRINT(EM_DIAGRAM):   *end;
76435      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
76436      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
76437      end;
MPRINT(EM_DIAGRAM):   end;
76438      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
76439      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
76440      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
76441      end;
MPRINT(EM_DIAGRAM):   end;
76442      end;
MPRINT(EM_DIAGRAM):   end;
76443      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
76444      /* correct the previous change */
76445      end;
MPRINT(EM_DIAGRAM):   end;
76446      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
76447      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
76448      output;
MPRINT(EM_DIAGRAM):   output;
76449      end;
MPRINT(EM_DIAGRAM):   end;
76450      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
76451      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
76452      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

76453      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
76454      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
76455      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
76456      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
76457      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
76458      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
76459      end;
MPRINT(EM_DIAGRAM):   end;
76460      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
76461      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
76462      output;
MPRINT(EM_DIAGRAM):   output;
76463      end;
MPRINT(EM_DIAGRAM):   end;
76464      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

76465      filename emflow "C:\Users\misil\Desktop\DM
76465    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring NEURAL6_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
76466      *------------------------------------------------------------*;
76467      * MdlComp2: Scoring NEURAL6_TRAIN data;
76468      *------------------------------------------------------------*;
76469      data EMWS1.MdlComp2_TRAIN
76470      / view=EMWS1.MdlComp2_TRAIN
76471      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_TRAIN / view=EMWS1.MdlComp2_TRAIN ;
76472      set EMWS1.Neural6_TRAIN
76473      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_TRAIN ;
76474      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas.
76475     +if (P_DepVar1 ge 0.97752051010071) then do;
MPRINT(EM_DIAGRAM):   if (P_DepVar1 ge 0.97752051010071) then do;
76476     +b_DepVar = 1;
MPRINT(EM_DIAGRAM):   b_DepVar = 1;
76477     +end;
MPRINT(EM_DIAGRAM):   end;
76478     +else
76479     +if (P_DepVar1 ge 0.732425512666) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.732425512666) then do;
76480     +b_DepVar = 2;
MPRINT(EM_DIAGRAM):   b_DepVar = 2;
76481     +end;
MPRINT(EM_DIAGRAM):   end;
76482     +else
76483     +if (P_DepVar1 ge 0.31572752758775) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.31572752758775) then do;
76484     +b_DepVar = 3;
MPRINT(EM_DIAGRAM):   b_DepVar = 3;
76485     +end;
MPRINT(EM_DIAGRAM):   end;
76486     +else
76487     +if (P_DepVar1 ge 0.10177663002444) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.10177663002444) then do;
76488     +b_DepVar = 4;
MPRINT(EM_DIAGRAM):   b_DepVar = 4;
76489     +end;
MPRINT(EM_DIAGRAM):   end;
76490     +else
76491     +if (P_DepVar1 ge 0.03883522532176) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.03883522532176) then do;
76492     +b_DepVar = 5;
MPRINT(EM_DIAGRAM):   b_DepVar = 5;
76493     +end;
MPRINT(EM_DIAGRAM):   end;
76494     +else
76495     +if (P_DepVar1 ge 0.01579953951326) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.01579953951326) then do;
76496     +b_DepVar = 6;
MPRINT(EM_DIAGRAM):   b_DepVar = 6;
76497     +end;
MPRINT(EM_DIAGRAM):   end;
76498     +else
76499     +if (P_DepVar1 ge 0.00766503802774) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00766503802774) then do;
76500     +b_DepVar = 7;
MPRINT(EM_DIAGRAM):   b_DepVar = 7;
76501     +end;
MPRINT(EM_DIAGRAM):   end;
76502     +else
76503     +if (P_DepVar1 ge 0.00418320952044) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00418320952044) then do;
76504     +b_DepVar = 8;
MPRINT(EM_DIAGRAM):   b_DepVar = 8;
76505     +end;
MPRINT(EM_DIAGRAM):   end;
76506     +else
76507     +if (P_DepVar1 ge 0.00232255750582) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00232255750582) then do;
76508     +b_DepVar = 9;
MPRINT(EM_DIAGRAM):   b_DepVar = 9;
76509     +end;
MPRINT(EM_DIAGRAM):   end;
76510     +else
76511     +if (P_DepVar1 ge 0.00138378348972) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00138378348972) then do;
76512     +b_DepVar = 10;
MPRINT(EM_DIAGRAM):   b_DepVar = 10;
76513     +end;
MPRINT(EM_DIAGRAM):   end;
76514     +else
76515     +if (P_DepVar1 ge 0.0007364516171) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.0007364516171) then do;
76516     +b_DepVar = 11;
MPRINT(EM_DIAGRAM):   b_DepVar = 11;
76517     +end;
MPRINT(EM_DIAGRAM):   end;
76518     +else
76519     +if (P_DepVar1 ge 0.00040943404464) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00040943404464) then do;
76520     +b_DepVar = 12;
MPRINT(EM_DIAGRAM):   b_DepVar = 12;
76521     +end;
MPRINT(EM_DIAGRAM):   end;
76522     +else
76523     +if (P_DepVar1 ge 0.0002473827863) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.0002473827863) then do;
76524     +b_DepVar = 13;
MPRINT(EM_DIAGRAM):   b_DepVar = 13;
76525     +end;
MPRINT(EM_DIAGRAM):   end;
76526     +else
76527     +if (P_DepVar1 ge 0.00014241470635) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00014241470635) then do;
76528     +b_DepVar = 14;
MPRINT(EM_DIAGRAM):   b_DepVar = 14;
76529     +end;
MPRINT(EM_DIAGRAM):   end;
76530     +else
76531     +if (P_DepVar1 ge 0.00007511467055) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00007511467055) then do;
76532     +b_DepVar = 15;
MPRINT(EM_DIAGRAM):   b_DepVar = 15;
76533     +end;
MPRINT(EM_DIAGRAM):   end;
76534     +else
76535     +if (P_DepVar1 ge 0.00003648421527) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00003648421527) then do;
76536     +b_DepVar = 16;
MPRINT(EM_DIAGRAM):   b_DepVar = 16;
76537     +end;
MPRINT(EM_DIAGRAM):   end;
76538     +else
76539     +if (P_DepVar1 ge 0.00001853373117) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00001853373117) then do;
76540     +b_DepVar = 17;
MPRINT(EM_DIAGRAM):   b_DepVar = 17;
76541     +end;
MPRINT(EM_DIAGRAM):   end;
76542     +else
76543     +if (P_DepVar1 ge 0.00001039462228) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00001039462228) then do;
76544     +b_DepVar = 18;
MPRINT(EM_DIAGRAM):   b_DepVar = 18;
76545     +end;
MPRINT(EM_DIAGRAM):   end;
76546     +else
76547     +if (P_DepVar1 ge 6.2776275633309E-6) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 6.2776275633309E-6) then do;
76548     +b_DepVar = 19;
MPRINT(EM_DIAGRAM):   b_DepVar = 19;
76549     +end;
MPRINT(EM_DIAGRAM):   end;
76550     +else
76551     +do;
MPRINT(EM_DIAGRAM):   else do;
76552     +b_DepVar = 20;
MPRINT(EM_DIAGRAM):   b_DepVar = 20;
76553     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
76554      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
76555      quit;
76556      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
76557      filename emflow "C:\Users\misil\Desktop\DM
76557    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring NEURAL6_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
76558      *------------------------------------------------------------*;
76559      * MdlComp2: Scoring NEURAL6_VALIDATE data;
76560      *------------------------------------------------------------*;
76561      data EMWS1.MdlComp2_VALIDATE
76562      / view=EMWS1.MdlComp2_VALIDATE
76563      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_VALIDATE / view=EMWS1.MdlComp2_VALIDATE ;
76564      set EMWS1.Neural6_VALIDATE
76565      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_VALIDATE ;
76566      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas.
76567     +if (P_DepVar1 ge 0.97752051010071) then do;
MPRINT(EM_DIAGRAM):   if (P_DepVar1 ge 0.97752051010071) then do;
76568     +b_DepVar = 1;
MPRINT(EM_DIAGRAM):   b_DepVar = 1;
76569     +end;
MPRINT(EM_DIAGRAM):   end;
76570     +else
76571     +if (P_DepVar1 ge 0.732425512666) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.732425512666) then do;
76572     +b_DepVar = 2;
MPRINT(EM_DIAGRAM):   b_DepVar = 2;
76573     +end;
MPRINT(EM_DIAGRAM):   end;
76574     +else
76575     +if (P_DepVar1 ge 0.31572752758775) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.31572752758775) then do;
76576     +b_DepVar = 3;
MPRINT(EM_DIAGRAM):   b_DepVar = 3;
76577     +end;
MPRINT(EM_DIAGRAM):   end;
76578     +else
76579     +if (P_DepVar1 ge 0.10177663002444) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.10177663002444) then do;
76580     +b_DepVar = 4;
MPRINT(EM_DIAGRAM):   b_DepVar = 4;
76581     +end;
MPRINT(EM_DIAGRAM):   end;
76582     +else
76583     +if (P_DepVar1 ge 0.03883522532176) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.03883522532176) then do;
76584     +b_DepVar = 5;
MPRINT(EM_DIAGRAM):   b_DepVar = 5;
76585     +end;
MPRINT(EM_DIAGRAM):   end;
76586     +else
76587     +if (P_DepVar1 ge 0.01579953951326) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.01579953951326) then do;
76588     +b_DepVar = 6;
MPRINT(EM_DIAGRAM):   b_DepVar = 6;
76589     +end;
MPRINT(EM_DIAGRAM):   end;
76590     +else
76591     +if (P_DepVar1 ge 0.00766503802774) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00766503802774) then do;
76592     +b_DepVar = 7;
MPRINT(EM_DIAGRAM):   b_DepVar = 7;
76593     +end;
MPRINT(EM_DIAGRAM):   end;
76594     +else
76595     +if (P_DepVar1 ge 0.00418320952044) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00418320952044) then do;
76596     +b_DepVar = 8;
MPRINT(EM_DIAGRAM):   b_DepVar = 8;
76597     +end;
MPRINT(EM_DIAGRAM):   end;
76598     +else
76599     +if (P_DepVar1 ge 0.00232255750582) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00232255750582) then do;
76600     +b_DepVar = 9;
MPRINT(EM_DIAGRAM):   b_DepVar = 9;
76601     +end;
MPRINT(EM_DIAGRAM):   end;
76602     +else
76603     +if (P_DepVar1 ge 0.00138378348972) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00138378348972) then do;
76604     +b_DepVar = 10;
MPRINT(EM_DIAGRAM):   b_DepVar = 10;
76605     +end;
MPRINT(EM_DIAGRAM):   end;
76606     +else
76607     +if (P_DepVar1 ge 0.0007364516171) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.0007364516171) then do;
76608     +b_DepVar = 11;
MPRINT(EM_DIAGRAM):   b_DepVar = 11;
76609     +end;
MPRINT(EM_DIAGRAM):   end;
76610     +else
76611     +if (P_DepVar1 ge 0.00040943404464) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00040943404464) then do;
76612     +b_DepVar = 12;
MPRINT(EM_DIAGRAM):   b_DepVar = 12;
76613     +end;
MPRINT(EM_DIAGRAM):   end;
76614     +else
76615     +if (P_DepVar1 ge 0.0002473827863) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.0002473827863) then do;
76616     +b_DepVar = 13;
MPRINT(EM_DIAGRAM):   b_DepVar = 13;
76617     +end;
MPRINT(EM_DIAGRAM):   end;
76618     +else
76619     +if (P_DepVar1 ge 0.00014241470635) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00014241470635) then do;
76620     +b_DepVar = 14;
MPRINT(EM_DIAGRAM):   b_DepVar = 14;
76621     +end;
MPRINT(EM_DIAGRAM):   end;
76622     +else
76623     +if (P_DepVar1 ge 0.00007511467055) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00007511467055) then do;
76624     +b_DepVar = 15;
MPRINT(EM_DIAGRAM):   b_DepVar = 15;
76625     +end;
MPRINT(EM_DIAGRAM):   end;
76626     +else
76627     +if (P_DepVar1 ge 0.00003648421527) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00003648421527) then do;
76628     +b_DepVar = 16;
MPRINT(EM_DIAGRAM):   b_DepVar = 16;
76629     +end;
MPRINT(EM_DIAGRAM):   end;
76630     +else
76631     +if (P_DepVar1 ge 0.00001853373117) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00001853373117) then do;
76632     +b_DepVar = 17;
MPRINT(EM_DIAGRAM):   b_DepVar = 17;
76633     +end;
MPRINT(EM_DIAGRAM):   end;
76634     +else
76635     +if (P_DepVar1 ge 0.00001039462228) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 0.00001039462228) then do;
76636     +b_DepVar = 18;
MPRINT(EM_DIAGRAM):   b_DepVar = 18;
76637     +end;
MPRINT(EM_DIAGRAM):   end;
76638     +else
76639     +if (P_DepVar1 ge 6.2776275633309E-6) then do;
MPRINT(EM_DIAGRAM):   else if (P_DepVar1 ge 6.2776275633309E-6) then do;
76640     +b_DepVar = 19;
MPRINT(EM_DIAGRAM):   b_DepVar = 19;
76641     +end;
MPRINT(EM_DIAGRAM):   end;
76642     +else
76643     +do;
MPRINT(EM_DIAGRAM):   else do;
76644     +b_DepVar = 20;
MPRINT(EM_DIAGRAM):   b_DepVar = 20;
76645     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
76646      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL6_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
76647      quit;
76648      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
76649      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
76650      * MdlComp2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp2: Computing metadata for TRAIN data;
76651      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp2_TRAIN out=WORK.M0JE1DS4 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JE1DS4;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JE1DS4(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JE1DS4;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JE1DS4;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M03ZDVW9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XHQHBU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   set WORK.M03ZDVW9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural6_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural6_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp2";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.MDLCOMP2_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
