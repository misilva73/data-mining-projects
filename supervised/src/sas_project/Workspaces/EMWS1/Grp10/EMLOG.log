*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:04:41 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:38 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                17:04:38 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3UG1_M4 "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3UG1_M4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMGROUP\EMLOG_11.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:38 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMGROUP\EMOUTPUT_11.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:04:38 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3399591    proc freq data=EMWS1.Grp10_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Grp10_VariableSet noprint;
3399592    table ROLE*LEVEL/out=WORK.Grp10META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Grp10META;
3399593    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.GRP10_VARIABLESET.
NOTE: The data set WORK.GRP10META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
3399594    proc print data=WORK.Grp10META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Grp10META label noobs;
3399595    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3399596    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
3399597    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3399598    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3399599    run;
 
NOTE: There were 4 observations read from the data set WORK.GRP10META.
NOTE: The PROCEDURE PRINT printed page 2284.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3399600    title10;
MPRINT(EM_DIAGRAM):   title10;
3399601    %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Grp10: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3399924    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3399925    * Grp10: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Grp10: Generation of macros and macro variables;
3399926    * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
3399927    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3399928    %let EMEXCEPTIONSTRING=;
3399929    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3399930    * TRAIN: Grp10;
MPRINT(EM_DIAGRAM):   * TRAIN: Grp10;
3399931    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3399932    %let EM_ACTION = TRAIN;
3399933    %let syscc = 0;
3399934    %macro main;
3399935
3399936       filename temp catalog 'sashelp.emutil.gp_macros.source';
3399937       %include temp;
3399938       filename temp;
3399939
3399940       %SetProperties;
3399941
3399942       %if %upcase(&EM_ACTION) = CREATE %then %do;
3399943
3399944           filename temp catalog 'sashelp.emutil.gp_create.source';
3399945           %include temp;
3399946           filename temp;
3399947
3399948           %create;
3399949       %end;
3399950       %else
3399951       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3399952
3399953           filename temp catalog 'sashelp.emutil.gp_train.source';
3399954           %include temp;
3399955           filename temp;
3399956
3399957           %train;
3399958       %end;
3399959       %else
3399960       %if %upcase(&EM_ACTION) = SCORE %then %do;
3399961
3399962           filename temp catalog 'sashelp.emutil.gp_score.source';
3399963           %include temp;
3399964           filename temp;
3399965
3399966           %score;
3399967       %end;
3399968       %else
3399969       %if %upcase(&EM_ACTION) = REPORT %then %do;
3399970
3399971           filename temp catalog 'sashelp.emutil.gp_report.source';
3399972           %include temp;
3399973           filename temp;
3399974
3399975           %report;
3399976
3399977       %end;
3399978       %else
3399979       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3399980
3399981           filename temp catalog 'sashelp.emutil.gp_postloop.source';
3399982           %include temp;
3399983           filename temp;
3399984
3399985           %postloop;
3399986
3399987       %end;
3399988
3399989       %doendm:
3399990    %mend main;
3399991
3399992    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_MACROS.SOURCE.
3399993   +%macro SetProperties;
3399994   +   %em_checkmacro(name=EM_PROPERTY_MODE,            global=Y, value=STRATIFY);
3399995   +   %em_checkmacro(name=EM_PROPERTY_TARGETGROUP,     global=Y, value=Y);
3399996   +   %em_checkmacro(name=EM_PROPERTY_INDEXCOUNT,      global=Y, value=10);
3399997   +   %em_checkmacro(name=EM_PROPERTY_MINIMUMOBS,      global=Y, value=10);
3399998   +   %em_checkmacro(name=EM_PROPERTY_SIZETYPE,        global=Y, value=PERCENT);
3399999   +   %em_checkmacro(name=EM_PROPERTY_SIZEOBS,         global=Y, value=.);
3400000   +   %em_checkmacro(name=EM_PROPERTY_SIZEPERCENT,     global=Y, value=10);
3400001   +%mend SetProperties;
3400002   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.gp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_TRAIN.SOURCE.
3400003   +%macro scoreValidTest(data=, out=);
3400005   +   %if ("&data" ne "") and (%sysfunc(exist(&data, VIEW)) or %sysfunc(exist(&data))) %then %do;
3400006   +       data &out / view = &out;
3400007   +          retain _RESAMP_ 1;
3400008   +          set &data;
3400009   +       run;
3400010   +   %end;
3400012   +%mend scoreValidTest;
3400014   +%macro getVariables;
3400015   +   %if "&emloopnumber" = "1" %then %do;
3400016   +       data _null_;
3400017   +          retain numgoup 0;
3400018   +          set &em_data_variableset end=eof;
3400019   +          %if &em_num_target = 1 %then %do;
3400020   +              %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3400021   +                  where (role = 'TARGET' and level ^= 'INTERVAL' and grouprole in('BOOST', 'DEFAULT'));
3400022   +                  if role eq 'TARGET' then call symput('emboostvar', strip(NAME));
3400023   +              %end;
3400024   +              %else
3400025   +              %if &EM_PROPERTY_MODE = BAGGING %then %do;
3400026   +                  where (role = 'TARGET' and grouprole in('BAG', 'DEFAULT'));
3400027   +                  if role eq 'TARGET' then call symput('embagvar', strip(NAME));
3400028   +              %end;
3400029   +          %end;
3400030   +          %else %do;
3400031   +              where (grouprole= 'GROUP' or (role = 'TARGET' and grouprole in('BAG', 'BOOST')) or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3400032   +              if grouprole eq 'BAG' then call symput('embagvar', strip(NAME));
3400033   +              else
3400034   +              if grouprole eq 'BOOST' then call symput('emboostvar', strip(NAME));
3400035   +          %end;
3400036   +          if grouprole = 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT') then do;
3400037   +             call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3400038   +             numgroup + 1;
3400039   +          end;
3400040   +          if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3400041   +       run;
3400042   +    %end;
3400043   +    %else %do;
3400044   +          %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3400045   +            data _null_;
3400046   +               retain numgoup 0;
3400047   +               set &em_data_variableset end=eof;
3400048   +               where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
3400049   +               call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
3400050   +               numgroup + 1;
3400051   +               if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
3400052   +            run;
3400053   +          %end;
3400054   +            %else
3400055   +        %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3400056   +            %em_getName(key=BOOSTINFO,   type=DATA);
3400057   +            %if %sysfunc(exist(&em_user_boostinfo)) %then %do;
3400058   +                data _null_;
3400059   +                   set &em_user_boostinfo;
3400060   +                   call symput('emboostvar', strip(_TARGET_));
3400061   +                run;
3400062   +            %end;
3400063   +        %end;
3400064   +        %else
3400065   +            %if &EM_PROPERTY_MODE = BAGGING %then %do;
3400066   +                %em_getName(key=BAGINFO,   type=DATA);
3400067   +                %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3400068   +                    data _null_;
3400069   +                       set &em_user_baginfo;
3400070   +                      call symput('embagvar', strip(_TARGET_));
3400071   +                    run;
3400072   +                %end;
3400073   +            %end;
3400074   +    %end;
3400075   +%mend getVariables;
3400077   +%macro gp_bag(targetname=);
3400078   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3400079   +        %put LOOP MODE:   &emloopmode ;
3400080   +        %put LOOP NUMBER: &emloopnumber;
3400081   +        %put BAGGING TARGET: &targetname;
3400082   +   %end;
3400084   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3400085   +   %include temp;
3400086   +   filename temp;
3400088   +   %em_getName(key=BAGINFO,    type=DATA);
3400089   +   %em_getName(key=EMLOOPINFO, type=DATA);
3400091   +   %if &emloopnumber = 1 %then %do;
3400092   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3400093   +       data _null_;
3400094   +          file gpdelta;
3400095   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3400096   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3400097   +          put "     LABEL='Bootstrap Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3400098   +          put "end;";
3400099   +       run;
3400100   +       filename gpdelta;
3400102   +       %if %sysfunc(exist(&em_user_baginfo)) %then %do;
3400103   +           proc datasets lib=&em_lib nolist;
3400104   +              delete &em_nodeid._baginfo;
3400105   +           run;
3400106   +       %end;
3400108   +       %if "%em_freq" ne "" %then %do;
3400109   +           proc means data=&em_import_data sum;
3400110   +              var %em_freq;
3400111   +              output out = _tempds sum=sumfreq;
3400112   +           run;
3400113   +           quit;
3400114   +           data _null_;
3400115   +              set _tempDs;
3400116   +              call symput('_sumfreq', put(sumfreq, best12.));
3400117   +           run;
3400118   +       %end;
3400119   +       %else %do;
3400120   +           proc sql noprint;
3400121   +              select count(*) into :_sumfreq
3400122   +              from &em_import_data;
3400123   +           quit;
3400124   +       %end;
3400126   +       %if "&em_property_SizeType" eq "PERCENT" %then %do;
3400127   +           data _null_;
3400128   +              call symput('_size', put(round(&_sumfreq*&em_property_sizepercent/100), best12.));
3400129   +           run;
3400130   +       %end;
3400131   +       %else
3400132   +           %let _size = &em_property_sizeobs;
3400134   +       data &em_user_baginfo;
3400135   +          length _LOOP_ 8 _TARGET_ $32 _SUMFREQ_ 8 _SIZE_ 8;
3400136   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3400137   +          _TARGET_   ="&targetname";
3400138   +          _SUMFREQ_  =&_sumfreq;
3400139   +           _SIZE_    = &_size;
3400140   +          output;
3400141   +       run;
3400142   +       data &em_user_emloopinfo;
3400143   +          length MODE $8;
3400144   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3400145   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400146   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3400147   +           set &em_user_baginfo(keep=_LOOP_ _TARGET_);
3400148   +           MODE='Bagging';
3400149   +       run;
3400151   +       data &em_data_eminfo;
3400152   +          length TARGET KEY $32  DATA $43;
3400153   +          TARGET=''; KEY='BAGINFO'; DATA="&em_nodeid"; output;
3400154   +       run;
3400155   +   %end;
3400156   +   %else %do;
3400157   +      data _null_;
3400158   +         set &em_user_baginfo;
3400159   +         call symput('_sumfreq', put(_sumfreq_, best12.));
3400160   +         call symput('_size', put(_size_, best12.));
3400161   +      run;
3400162   +   %end;
3400164   +   %let bagsumFreq  = &_sumFreq;
3400165   +   %let bagSize     = &_Size;
3400167   +   %embag( _tra=&em_export_train, _train=&em_import_data, _seed=&em_property_randomseed, _freq=%em_freq,
3400168   +           _sumfreq=&bagsumfreq, _size=&bagsize, _loop=&emloopnumber);
3400170   +   %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3400171   +   %scoreValidTest(data=&em_import_test,     out=em_export_test);
3400173   +   %doendbg:
3400175   +%mend gp_bag;
3400178   +%macro gp_boost(targetname=);
3400179   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3400180   +       %put LOOP MODE:   &emloopmode ;
3400181   +       %put LOOP NUMBER: &emloopnumber;
3400182   +        %put BAGGING TARGET: &targetname;
3400183   +   %end;
3400185   +   filename temp catalog 'sashelp.emutil.gp_boostmacros.source';
3400186   +   %include temp;
3400187   +   filename temp;
3400189   +   %em_getname(key=EMLOOPINFO, type=DATA);
3400190   +   %em_getname(key=BOOSTWEIGHT, type=DATA);
3400191   +   %em_getname(key=BOOSTSCORE,  type=DATA);
3400192   +   %em_getName(key=BOOSTINFO,   type=DATA);
3400194   +   %if &emloopnumber = 1 %then %do;
3400195   +       filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3400196   +       data _null_;
3400197   +          file gpdelta;
3400198   +          put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3400199   +          put "else if upcase(NAME) eq '_RESAMP_' then do;";
3400200   +          put "     LABEL='Arcing Frequency'; LEVEL='INTERVAL'; ROLE='FREQ';";
3400201   +          put "end;";
3400202   +       run;
3400203   +       filename gpdelta;
3400205   +       %let deleteString =;
3400206   +       %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3400207   +       %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3400208   +       %if "&deleteString" ne "" %then %do;
3400209   +           proc datasets lib=&em_lib nolist;
3400210   +              delete &deleteString;
3400211   +           run;
3400212   +       %end;
3400214   +       %emboost0( _train=&em_import_data, _dmboods=&em_user_boostweight, _target=&targetname, _freq=%em_freq);
3400216   +       data &em_user_boostinfo;
3400217   +          length _LOOP_ 8 _TARGET_ $32 _DMBOOST_DIVISOR_ 8 _SUMFREQ_ 8;
3400218   +          _LOOP_            =&EM_PROPERTY_INDEXCOUNT;
3400219   +          _TARGET_          ="&targetname";
3400220   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3400221   +          _SUMFREQ_         =&_sumfreq;
3400222   +       run;
3400223   +       data &em_user_emloopinfo;
3400224   +          length MODE $8;
3400225   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3400226   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400227   +               _TARGET_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3400228   +           set &em_user_boostinfo(keep=_LOOP_ _TARGET_);
3400229   +           MODE='Boosting';
3400230   +       run;
3400232   +       data &em_data_eminfo;
3400233   +          length TARGET KEY $32  DATA $43;
3400234   +          TARGET=''; KEY='BOOSTINFO'; DATA="&em_nodeid"; output;
3400235   +       run;
3400237   +   %end;
3400238   +   %else %do;
3400239   +       %global _dmboodiv;
3400240   +       %let dmboosf = %upcase(&targetname);
3400241   +       %if %sysfunc(length(&targetname))> 30 %then
3400242   +           %let dmboosf =  %substr(&targetname, 1, 30);
3400244   +       data _null_;
3400245   +          set &em_user_boostinfo;
3400246   +          call symput('_SUMFREQ',  strip(put(_sumfreq_,best12.)));
3400247   +       run;
3400249   +       %emboost2(_freq=%em_freq, _dmboods=&em_user_boostweight, _dmensds=&em_user_boostscore, _dmboosf=&dmboosf, _sumfreq=&_sumfreq);
3400251   +       data &em_user_boostinfo;
3400252   +          set &em_user_boostinfo;
3400253   +          _DMBOOST_DIVISOR_ =&_dmboodiv;
3400254   +       run;
3400256   +       %emboost1(_tra=&em_export_train, _TRAIN=&em_import_data, _FREQ=%em_freq, _dmboods=&em_user_boostweight, _dmboodiv=&_dmboodiv);
3400258   +   %end;
3400260   +    %scoreValidTest(data=&em_import_validate, out=em_export_validate);
3400261   +    %scoreValidTest(data=&em_import_test,     out=em_export_test);
3400263   +   %doendbst:
3400265   +%mend gp_boost;
3400267   +%macro gp_group(numgroupvar=, groupvar=);
3400268   +   %em_getname(key=GROUPINFO, type=DATA);
3400269   +   %em_getName(key=LOOPINFO,  type=DATA);
3400270   +   %em_getName(key=EMGROUPINFO, type=DATA);
3400272   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_groupinfo)) %then %do;
3400273   +       ods listing close;
3400274   +       %if &numgroupvar = 1 %then %do;
3400275   +           ods output onewayfreqs=temp;
3400276   +       %end;
3400277   +       %else %do;
3400278   +           ods output crosstabfreqs=temp;
3400279   +       %end;
3400280   +       proc freq data=&em_import_data;
3400281   +          table
3400283   +          %let tableString =;
3400284   +          %let freqString  =;
3400285   +          %do i=1 %to &numgroupvar;
3400286   +              %let tableString = &tableString %scan(&groupvar, &i, %str( ));
3400287   +              %if &i<&numgroupvar %then %let tableString = &tableString *;
3400288   +              %let freqString = &freqString.1;
3400289   +          %end;
3400290   +          &tableString / missing;
3400291   +       run;
3400292   +       ods listing;
3400293   +       %if &numgroupvar = 1 %then %do;
3400294   +           data _null_;
3400295   +              retain totalobs 0;
3400296   +              set temp end=eof;
3400297   +              totalobs + frequency;
3400298   +              if eof then
3400299   +                 call symput('_totalObs_', put(totalobs, best.));
3400300   +           run;
3400302   +           proc sort data=temp out=loopinfo nodupkey;
3400303   +              by &groupvar;
3400304   +              where frequency>=&em_property_minimumObs;
3400305   +           run;
3400306   +       %end;
3400307   +       %else %do;
3400308   +           data _null_;
3400309   +              set temp;
3400310   +              where _type_='00';
3400311   +              call symput('_totalObs_', put(frequency, best.));
3400312   +           run;
3400313   +           proc sort data=temp(drop=rowpercent colpercent) out=loopinfo nodupkey;
3400314   +              by &groupvar;
3400315   +              where _type_="&freqString" and frequency>=&em_property_minimumObs;
3400316   +           run;
3400317   +       %end;
3400319   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3400320   +       filename _pregrp "&em_user_precode";
3400322   +       %let dsid = %sysfunc(open(loopinfo));
3400323   +       %do i=1 %to &numgroupvar;
3400324   +           %let varname = %scan(&groupvar, &i, %str( ));
3400325   +           %let varnum  = %sysfunc(varnum(&dsid, &varname));
3400326   +           %let varfmt  = %sysfunc(varfmt(&dsid, &varnum));
3400327   +           %if %index(&varfmt, -) %then %do;
3400328   +               %let varfmt = %sysfunc(scan(&varfmt, 1,-)).;
3400329   +           %end;
3400331   +           %let vartype = %sysfunc(vartype(&dsid, &varnum));
3400332   +           %let varlen  = %sysfunc(varlen(&dsid, &varnum));
3400333   +           %let fmttype&i = &vartype;
3400334   +           %let fmtlen&i  = &varlen;
3400336   +           %let fmtvar&i =;
3400337   +           %let fmt&i    =;
3400338   +           %if "&varfmt" ne "" %then %do;
3400339   +              %let fmtvar&i  = _FORMAT&i._;
3400340   +              %let fmt&i     = &varfmt;
3400341   +           %end;
3400342   +       %end;
3400343   +       %let dsid = %sysfunc(close(&dsid));
3400345   +       data _null_;
3400346   +          %do i=1 %to &numgroupvar;
3400347   +              %if "&&fmt&i" ne "" %then %do;
3400348   +                  retain len_&i 0;
3400349   +              %end;
3400350   +          %end;
3400352   +          set loopinfo end=eof;
3400353   +          file _pregrp;
3400355   +          %do i=1 %to &numgroupvar;
3400356   +              %let varname = %scan(&groupvar, &i, %str( ));
3400357   +              %if "&&fmt&i" ne "" %then %do;
3400358   +                 if length(put(&varname, &&fmt&i)) > len_&i then
3400359   +                    len_&i = length(put(&varname, &&fmt&i));
3400360   +              %end;
3400361   +          %end;
3400363   +          if eof then do;
3400364   +             %do i=1 %to &numgroupvar;
3400365   +                 %let varname = %scan(&groupvar, &i, %str( ));
3400366   +                 %if "&&fmt&i" ne "" %then %do;
3400367   +                     put "length  &&fmtvar&i" len_&i "$" len_&i ";";
3400368   +                     put "drop &&fmtvar&i" len_&i ";";
3400369   +                     put "&&fmtvar&i" len_&i "= strip(put(&varname, &&fmt&i));";
3400370   +                     call symput('fmtnewlen'!!"&i", put(len_&i, best.));
3400371   +                     call symput('fmtnewvar'!!"&i", "&&fmtvar&i"!!strip(put(len_&i, best.)));
3400372   +                 %end;
3400373   +              %end;
3400374   +          end;
3400375   +      run;
3400377   +      data loopinfo;
3400378   +         set loopinfo;
3400379   +         %do i=1 %to &numgroupvar;
3400380   +             %let varname = %scan(&groupvar, &i, %str( ));
3400381   +             %if "&&fmt&i" ne "" %then %do;
3400382   +                 length  &&fmtnewvar&i $&&fmtnewlen&i;
3400383   +                 &&fmtnewvar&i = strip(put(&varname, &&fmt&i));
3400384   +             %end;
3400385   +         %end;
3400386   +      run;
3400387   +      filename _pregrp;
3400389   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3400390   +          data temp;
3400391   +             length _LOOP_ 8 _WHERE_  _WHEREDESC_ $2000;
3400392   +             keep _LOOP_ _WHERE_ _WHEREDESC_ FREQUENCY;
3400393   +      %end;
3400394   +      %else %do;
3400395   +          data &em_user_groupinfo;
3400396   +             length _LOOP_ 8 _TARGET_ $32 _WHERE_  _WHEREDESC_ $2000;
3400397   +             keep _LOOP_ _TARGET_  _WHERE_ _WHEREDESC_ FREQUENCY;
3400398   +             retain _TARGET_ '';
3400399   +      %end;
3400401   +          set loopinfo;
3400402   +          _LOOP_= _N_;
3400403   +          _WHERE_ = '';
3400404   +          _WHEREDESC_  = '';
3400405   +          %do i=1 %to &numgroupvar;
3400406   +              %let varname = %scan(&groupvar, &i, %str( ));
3400407   +              %if "&&fmt&i" eq "" %then %do;
3400408   +                  %if "&&fmtType&i" eq "N" %then %do;
3400409   +                      _WHERE_     = strip(_WHERE_)!!" &Varname ="!!strip(put(&varname, best12.));
3400410   +                      _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(put(&varname, best12.));
3400411   +                   %end;
3400412   +                  %else %do;
3400413   +                       _WHERE_ = strip(_WHERE_)!!" &Varname ='"!!tranwrd(strip(&varname), "'", "''")!!"'";
3400414   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &Varname ="!!strip(&varname);
3400415   +                  %end;
3400416   +              %end;
3400417   +              %else %do;
3400418   +                       _WHERE_ = strip(_WHERE_)!!" &&fmtnewvar&i ='"!!tranwrd(strip(&&fmtnewvar&i), "'", "''")!!"'";
3400419   +                       _WHEREDESC_ = strip(_WHEREDESC_)!!" &VarName = "!!strip(&&fmtnewvar&i);
3400420   +              %end;
3400421   +              %if &i < &numgroupvar %then %do;
3400422   +                  _WHERE_ = strip(_WHERE_)!!' and ';
3400423   +                  _WHEREDESC_ = strip(_WHEREDESC_)!!' and ';
3400424   +              %end;
3400425   +          %end;
3400426   +          %if "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3400427   +              _WHERE_ = '^('!!strip(_WHERE_)!!')';
3400428   +              _WHEREDESC_ = '^('!!strip(_WHEREDESC_)!!')';
3400429   +              FREQUENCY = &_totalobs_ - FREQUENCY;
3400430   +          %end;
3400431   +      run;
3400433   +      %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3400434   +          data target;
3400435   +             length _TARGET_ $32;
3400436   +              %do i=1 %to &em_num_target;
3400437   +                  %let varname = %scan(%em_target, &i, %str( ));
3400438   +                  _TARGET_ = "&varname";
3400439   +                  output;
3400440   +              %end;
3400441   +          run;
3400442   +          proc sql;
3400443   +             create table &em_user_groupinfo as select * from  work.temp, work.target;
3400444   +          quit;
3400445   +          data &em_user_groupinfo;
3400446   +             set &em_user_groupinfo;
3400447   +             _LOOP_=_N_;
3400448   +          run;
3400449   +      %end;
3400451   +      data &em_data_eminfo;
3400452   +         length TARGET KEY $32  DATA $43;
3400453   +         TARGET=''; KEY='GROUPINFO'; DATA="&em_nodeid"; output;
3400454   +      run;
3400456   +      data &em_user_emloopinfo;
3400457   +         set &em_user_groupinfo;
3400458   +         %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3400459   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400460   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3400461   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3400462   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3400463   +             keep _LOOP_ _TARGET_ _WHEREDESC_ FREQUENCY;
3400464   +         %end;
3400465   +         %else %do;
3400466   +             label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400467   +                   _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))"
3400468   +                   _WHEREDESC_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel,      NOQUOTE))"
3400469   +                   FREQUENCY   = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))";
3400470   +             keep _LOOP_ _WHEREDESC_ FREQUENCY;
3400471   +         %end;
3400472   +      run;
3400474   +      proc datasets lib=work nolist;
3400475   +          delete temp loopinfo
3400476   +          %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3400477   +              target
3400478   +          %end;
3400479   +          ;
3400480   +      run;
3400482   +   %end;
3400484   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3400485   +   %if (&EM_PROPERTY_TARGETGROUP= Y and &EM_NUM_TARGET>1) %then %do;
3400486   +       data _null_;
3400487   +          length quotedTarget $32;
3400488   +          set &em_user_groupinfo;
3400489   +          file gpdelta;
3400490   +          if _N_ = &emloopnumber then do;
3400491   +             quotedTarget = "'"!!strip(_TARGET_)!!"'";
3400492   +             put "if ROLE = 'TARGET' and NAME ne " quotedTarget " then delete;";
3400494   +             %do i=1 %to &numgroupvar;
3400495   +                 %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3400496   +                 put "if upcase(NAME)= '&gvar' then delete;";
3400497   +             %end;
3400498   +          end;
3400499   +       run;
3400500   +   %end;
3400501   +   %else %do;
3400502   +       data _null_;
3400503   +          set &em_user_groupinfo;
3400504   +          file gpdelta;
3400505   +          if _N_ = &emloopnumber then do;
3400506   +             %do i=1 %to &numgroupvar;
3400507   +              %let gvar = %upcase(%scan(&groupvar, &i, %str( )));
3400508   +                 put "if upcase(NAME)= '&gvar' then delete;";
3400509   +             %end;
3400510   +          end;
3400511   +       run;
3400512   +   %end;
3400513   +   filename gpdelta;
3400515   +   %let nobs=0;
3400516   +   %let dsid = %sysfunc(open(&em_user_groupinfo));
3400517   +   %if &dsid>0 %then %do;
3400518   +       %let nobs = %sysfunc(attrn(&dsid, NOBS));
3400519   +       %let dsid = %sysfunc(close(&dsid));
3400520   +   %end;
3400522   +   %if ^&nobs  %then
3400523   +       %let emloopmode =;
3400524   +   %else
3400525   +       %if &nobs< &emloopnumber %then
3400526   +           %let emloopmode = POSTLOOP;
3400527   +        %else
3400528   +        %let emloopmode = LOOP;
3400529   +%mend gp_group;
3400531   +%macro gp_Index;
3400533   +   %em_getName(key=INDEXINFO,  type=DATA);
3400534   +   %em_getName(key=EMLOOPINFO, type=DATA);
3400536   +   %if &emloopnumber=1 or ^%sysfunc(exist(&em_user_indexinfo)) %then %do;
3400537   +       data &em_user_indexinfo;
3400538   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $8;
3400539   +          _LOOP_     =&EM_PROPERTY_INDEXCOUNT;
3400540   +          _TARGET_   ="";
3400541   +          _WHERE_    ="";
3400542   +          output;
3400543   +       run;
3400544   +       data &em_data_eminfo;
3400545   +          length TARGET KEY $32  DATA $43;
3400546   +          TARGET=''; KEY='INDEXINFO'; DATA="&em_nodeid"; output;
3400547   +       run;
3400549   +       data &em_user_emloopinfo;
3400550   +          length MODE $8;
3400551   +          label MODE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mode_vlabel,       NOQUOTE))"
3400552   +                _LOOP_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400553   +          set &em_user_indexinfo(keep=_LOOP_ );
3400554   +          MODE='Index';
3400555   +       run;
3400556   +   %end;
3400558   +%mend gp_index;
3400560   +%macro gp_Target;
3400561   +   %let TargetName = %scan(%em_target, &emloopnumber);
3400562   +   %if "&targetName" eq "" %then %do;
3400563   +       %goto doendgpt;
3400564   +   %end;
3400566   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3400567   +       %put GP_TARGET;
3400568   +       %put &emLoopnumber &TargetName;
3400569   +   %end;
3400571   +   filename gpDelta "&EM_FILE_CDELTA_TRAIN";
3400572   +   data _null_;
3400573   +      file gpdelta;
3400574   +      put "if ROLE = 'TARGET' and NAME ne '&targetName' then delete;";
3400575   +   run;
3400576   +   filename gpdelta;
3400578   +   %if &emloopnumber eq 1 %then %do;
3400579   +       %em_getName(key=TARGETINFO,  type=DATA);
3400580   +       %em_getName(key=EMLOOPINFO,  type=DATA);
3400582   +       data &em_user_targetinfo;
3400583   +          length _LOOP_ 8 _TARGET_ $32 _WHERE_ $2000;
3400584   +          retain _LOOP_;
3400585   +          _WHERE_ = '';
3400586   +          %do i=1 %to &em_num_target;
3400587   +              %let varname = %scan(%em_target, &i, ' ');
3400588   +              _TARGET_ = "&varname";
3400589   +              _LOOP_+1;
3400590   +              output;
3400591   +           %end;
3400592   +       run;
3400593   +       data &em_user_emloopinfo;
3400594   +         set &em_user_targetinfo(keep=_LOOP_ _TARGET_);
3400595   +         label _LOOP_      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel, NOQUOTE))"
3400596   +               _TARGET_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,     NOQUOTE))";
3400597   +      run;
3400599   +       data &em_data_eminfo;
3400600   +          length TARGET KEY $32  DATA $43;
3400601   +          TARGET=''; KEY='TARGETINFO'; DATA="&em_nodeid"; output;
3400602   +       run;
3400603   +   %end;
3400605   +   %doendgpt:
3400606   +%mend gp_target;
3400608   +%macro train;
3400609   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3400610   +       %put LOOP MODE:   &emloopmode ;
3400611   +       %put LOOP NUMBER: &emloopnumber;
3400612   +   %end;
3400614   +   %if &emloopmode eq 'POSTLOOP' %then %goto doendmain;
3400616   +   %if ("&EM_PROPERTY_MODE" = "BOOSTING") or ("&EM_PROPERTY_MODE" = "BAGGING") %then %do;
3400618   +       %let hpdmFlag = 0;
3400619   +       %if %symexist(em_import_DATA_eminfo) %then %do;
3400620   +            data _null_;
3400621   +               set &em_import_DATA_eminfo;
3400622   +               where KEY = "HPDMSAMPLE";
3400623   +               call symput('hpdmFlag', '1');
3400624   +            run;
3400625   +       %end;
3400626   +       %if &hpdmFlag %then %do;
3400627   +           %let emexceptionstring = exception.server.EMTOOL.HPNOBOOSTBAG;
3400628   +           %goto doendmain;
3400629   +       %end;
3400630   +   %end;
3400632   +   %em_getname(key=EMLOOPINFO,  type=DATA);
3400633   +   %em_getname(key=GROUPINFO,  type=DATA);
3400634   +   %em_getname(key=BOOSTINFO,  type=DATA);
3400635   +   %em_getname(key=BAGINFO,    type=DATA);
3400636   +   %em_getname(key=TARGETINFO, type=DATA);
3400637   +   %em_getname(key=INDEXINFO,  type=DATA);
3400638   +   %em_getname(key=EMINFO,  type=DATA);
3400640   +   %if "&emloopnumber" = "1" %then %do;
3400641   +       %em_getname(key=PRECODE, type=FILE, extension=sas);
3400642   +       filename _pregrp "&em_user_precode";
3400643   +       data _null_;
3400644   +         rc = fdelete('_pregrp');
3400645   +       run;
3400646   +       filename _pregrp;
3400648   +       %let members =;
3400649   +       %if %sysfunc(exist(&em_user_emloopinfo)) %then %let members = &members %scan(&EM_USER_EMLOOPINFO,   2, .);
3400650   +       %if %sysfunc(exist(&em_user_groupinfo))  %then %let members = &members %scan(&EM_USER_GROUPINFO,  2, .);
3400651   +       %if %sysfunc(exist(&em_user_targetinfo)) %then %let members = &members %scan(&EM_USER_TARGETINFO, 2, .);
3400652   +       %if %sysfunc(exist(&em_user_boostinfo))  %then %let members = &members %scan(&EM_USER_BOOSTINFO,  2, .);
3400653   +       %if %sysfunc(exist(&em_user_baginfo))    %then %let members = &members %scan(&EM_USER_BAGINFO,    2, .);
3400654   +       %if %sysfunc(exist(&em_user_indexinfo))  %then %let members = &members %scan(&EM_USER_INDEXINFO,  2, .);
3400655   +       %if %sysfunc(exist(&em_user_eminfo))     %then %let members = &members %scan(&EM_USER_EMINFO,  2, .);
3400657   +       %if "&members" ne "" %then %do;
3400658   +           proc datasets lib=&em_lib nolist;
3400659   +              delete &members;
3400660   +           run;
3400661   +      %end;
3400662   +   %end;
3400664   +   %let emboostvar    =;
3400665   +   %let embagvar      =;
3400666   +   %let emgroupvar    =;
3400667   +   %let emnumgroupvar =;
3400668   +   %getVariables;
3400670   +   %if &EM_PROPERTY_MODE = TARGET %then %do;
3400671   +       %if &EM_NUM_TARGET>=1 %then %do;
3400672   +           %gp_target;
3400673   +           %if &emLoopNumber <= &EM_NUM_TARGET %then
3400674   +               %let emloopmode= LOOP;
3400675   +           %else
3400676   +              %let emloopmode = POSTLOOP;
3400677   +       %end;
3400678   +       %else %do;
3400679   +           %let emloopmode = ;
3400680   +           %let emexceptionstring = exception.server.METADATA.USE1TARGET;
3400681   +           %goto doendmain;
3400682   +       %end;
3400683   +   %end;
3400684   +   %else
3400685   +   %if &EM_PROPERTY_MODE = NOGROUP %then %do;
3400686   +       %let emloopmode=;
3400687   +       %if %sysfunc(exist(&em_data_eminfo)) %then %do;
3400688   +           proc delete data=&em_data_eminfo;
3400689   +           run;
3400690   +       %end;
3400691   +   %end;
3400692   +   %else
3400693   +   %if &EM_PROPERTY_MODE = INDEX %then %do;
3400694   +       %gp_index;
3400695   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then
3400696   +           %let emloopmode= LOOP;
3400697   +       %else
3400698   +           %let emloopmode= POSTLOOP;
3400699   +   %end;
3400700   +   %else
3400701   +   %if "&EM_PROPERTY_MODE" = "STRATIFY" or "&EM_PROPERTY_MODE" = "CROSSVALIDATION"  %then %do;
3400702   +       %if "&emloopnumber"="1" and "&emgroupvar" eq "" %then %do;
3400703   +           %let emloopmode = ;
3400704   +           %let emexceptionstring = exception.server.METADATA.USE1GROUPVAR;
3400705   +           %goto doendmain;
3400706   +       %end;
3400708   +       %gp_group(numgroupvar=&emnumgroupvar, groupvar=&emgroupvar);
3400709   +   %end;
3400710   +   %else
3400711   +   %if &EM_PROPERTY_MODE = BOOSTING %then %do;
3400712   +       %if "&emboostvar" eq "" %then %do;
3400713   +           %let emloopmode = ;
3400714   +           %let emexceptionstring = exception.server.METADATA.USE1BOOSTVAR;
3400715   +           %goto doendmain;
3400716   +       %end;
3400718   +       %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3400719   +           %let emloopmode= LOOP;
3400720   +           %gp_boost(targetname=&emboostvar);
3400722   +       %end;
3400723   +       %else
3400724   +           %let emloopmode= POSTLOOP;
3400725   +   %end;
3400726   +   %else
3400727   +   %if &EM_PROPERTY_MODE = BAGGING %then %do;
3400728   +       %if "&embagvar" eq "" %then %do;
3400729   +           %let emloopmode = ;
3400730   +           %let emexceptionstring = exception.server.METADATA.USE1BAGVAR;
3400731   +           %goto doendmain;
3400732   +       %end;
3400734   +        %if  &emLoopNumber <= &EM_PROPERTY_INDEXCOUNT %then %do;
3400735   +           %let emloopmode= LOOP;
3400736   +           %gp_bag(targetname=&embagvar);
3400737   +       %end;
3400738   +       %else
3400739   +           %let emloopmode= POSTLOOP;
3400740   +   %end;
3400743   +   %if &emloopmode eq "" %then %do;
3400744   +       %let lib    = %scan(&em_data_eminfo, 1, .);
3400745   +       %let member = %scan(&em_data_eminfo, 2, .);
3400746   +       proc datasets lib=&lib nolist;
3400747   +          delete &member;
3400748   +       run;
3400749   +   %end;
3400751   +   %doendmain:
3400753   +   %if %index(&EM_DEBUG, _ALL_) %then %do;
3400754   +       %put NEW LOOP MODE: &emloopmode;
3400755   +   %end;
3400757   +   %if "&emloopmode" eq "POSTLOOP" %then %do;
3400758   +       filename temp catalog 'sashelp.emutil.gp_postloop.source';
3400759   +       %include temp;
3400760   +       filename temp;
3400762   +       %postloop;
3400763   +   %end;
3400765   +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(GETVARIABLES):   data _null_;
MPRINT(GETVARIABLES):   retain numgoup 0;
MPRINT(GETVARIABLES):   set EMWS1.Grp10_VariableSet end=eof;
MPRINT(GETVARIABLES):   where (grouprole= 'GROUP' or (role = 'SEGMENT' and grouprole = 'DEFAULT'));
MPRINT(GETVARIABLES):   call symput('emgroupvar', strip(symget('emgroupvar'))!!' '!!strip(NAME));
MPRINT(GETVARIABLES):   numgroup + 1;
MPRINT(GETVARIABLES):   if eof then call symput('emnumgroupvar', strip(put(numgroup, best.)));
MPRINT(GETVARIABLES):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP10_VARIABLESET.
      WHERE (grouprole='GROUP') or ((role='SEGMENT') and (grouprole='DEFAULT'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):  ;
MPRINT(GP_GROUP):   filename gpDelta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\CDELTA_TRAIN.sas";
MPRINT(GP_GROUP):   data _null_;
MPRINT(GP_GROUP):   set EMWS1.Grp10_GROUPINFO;
MPRINT(GP_GROUP):   file gpdelta;
MPRINT(GP_GROUP):   if _N_ = 11 then do;
MPRINT(GP_GROUP):   put "if upcase(NAME)= 'CV_VAR' then delete;";
MPRINT(GP_GROUP):   end;
MPRINT(GP_GROUP):   run;
 
NOTE: The file GPDELTA is:
      Filename=C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Grp10\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:04:39 o'clock,
      Create Time=02 June 2018 16:26:00 o'clock
 
NOTE: 0 records were written to the file GPDELTA.
NOTE: There were 10 observations read from the data set EMWS1.GRP10_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GP_GROUP):   filename gpdelta;
NOTE: Fileref GPDELTA has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.gp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.GP_POSTLOOP.SOURCE.
3400767   +%macro postloop;
3400768   +   %let deleteString =;
3400769   +
3400770   +   %em_getname(key=boostweight, type=DATA);
3400771   +   %em_getname(key=boostscore,  type=DATA);
3400772   +
3400773   +   %if %sysfunc(exist(&em_user_boostweight)) %then %let deleteString = &deleteString &em_nodeid._boostweight;
3400774   +   %if %sysfunc(exist(&em_user_boostscore))  %then %let deleteString = &deleteString &em_nodeid._boostscore;
3400775   +   %if "&deleteString" ne "" %then %do;
3400776   +       proc datasets lib=&em_lib nolist;
3400777   +          delete &deleteString;
3400778   +       run;
3400779   +   %end;
3400780   +
3400781   +   %em_register(key=EMLOOPINFO,    type=DATA);
3400782   +   %em_getname(key=EMLOOPINFO,    type=DATA);
3400783   +    proc print data=&em_user_emloopinfo noobs label;
3400784   +       title9 'Group Summary';
3400785   +    run;
3400786   +    title9;
3400787   +
3400788   +   %em_report(key=EMLOOPINFO, VIEWTYPE=DATA, AUTODISPLAY=Y, DESCRIPTION=miningresult, BLOCK=Gp);
3400789   +
3400790   +%mend postloop;
3400791   +
3400792   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("EMLOOPINFO");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Grp10_EMLOOPINFO";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   proc print data=EMWS1.Grp10_EMLOOPINFO noobs label;
MPRINT(POSTLOOP):   title9 'Group Summary';
MPRINT(POSTLOOP):   run;
NOTE: There were 10 observations read from the data set EMWS1.GRP10_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2285.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   title9;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "EMLOOPINFO";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "miningresult";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Gp";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12012080900376;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(POSTLOOP):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Grp10;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3400793    *------------------------------------------------------------*;
3400794    * End TRAIN: Grp10;
3400795    *------------------------------------------------------------*;
3400796
 
3400797    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3400798    * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
3400799    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3400800    ;
MPRINT(EM_DIAGRAM):   ;
3400801    ;
MPRINT(EM_DIAGRAM):   ;
3400802    ;
MPRINT(EM_DIAGRAM):   ;
3400803    ;
MPRINT(EM_DIAGRAM):   ;
3400804    quit;
MPRINT(EM_DIAGRAM):   quit;
3400805    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3400806    * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
3400807    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3400808    /*; *"; *'; */
3400809    ;
MPRINT(EM_DIAGRAM):   ;
3400810    run;
MPRINT(EM_DIAGRAM):   run;
3400811    quit;
MPRINT(EM_DIAGRAM):   quit;
3400812    /* Reset EM Options */
3400813    options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
3400814    options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
3400815    goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
3400816    proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
3400817    by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
3400818    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
