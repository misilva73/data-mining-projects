MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:28 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Post Grouping Log
Date:                02 June 2018
Time:                17:08:28 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1I1N6X3 "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMTRAIN.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1I1N6X3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:28 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMTRAIN.log" encoding="UTF-8" 
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMOUTPUT.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:28 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMTRAIN.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
3688488    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3688489    set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
3688490    where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
3688491    call symput('EMGROUPMODE', strip(key));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPMODE', strip(key));
3688492    call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
3688493    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3688494    data WORK.M0VL14VB;
MPRINT(EM_DIAGRAM):    data WORK.M0VL14VB;
3688495    set WORK.M0VL14VB;
MPRINT(EM_DIAGRAM):   set WORK.M0VL14VB;
3688496    where upcase(NAME) in(
3688497    "DEPVAR"
3688498    );
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "DEPVAR" );
3688499    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.M0VL14VB.
      WHERE UPCASE(NAME)='DEPVAR';
NOTE: The data set WORK.M0VL14VB has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3688500    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Neural3_TRAIN EMWS1.Neural3_TRAIN 
EMWS1.Neural3_TRAIN EMWS1.Neural3_TRAIN EMWS1 Neural3_TRAIN 
EMWS1.Neural3_TRAIN EMWS1.Neural3_TRAIN 
EMWS1.Neural3_TRAIN EMWS1.Neural3_TRAIN EMWS1 Neural3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural3_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3688529    data WORK.EndGrp11_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp11_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS 
ORDER);
3688530    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3688531    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3688531  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3688531  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3688532       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3688532  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3688532  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3688533    set EMWS1.NEURAL3_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL3_DEPVAR_DM( where=(_TYPE_="TARGET"));
3688534    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3688535    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3688536    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3688537    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3688538    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3688539    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3688540    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3688541    end;
MPRINT(EM_DIAGRAM):   end;
3688542    output;
MPRINT(EM_DIAGRAM):   output;
3688543    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP11_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3688544    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3688545    proc print data=WORK.EndGrp11_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp11_EVENT noobs label;
3688546    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3688547    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3688548    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3688549    run;

NOTE: There were 1 observations read from the data set WORK.ENDGRP11_EVENT.
NOTE: The PROCEDURE PRINT printed page 2418.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3688550    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
3688551    proc print data = EMWS1.Neural3_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural3_DepVar_DM noobs label;
3688552    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3688553    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
3688554    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3688554  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3688554  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3688555    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3688556    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3688557    run;

NOTE: There were 7 observations read from the data set EMWS1.NEURAL3_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2419.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3688558    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp11: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp11: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp11: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3689020    %let EMEXCEPTIONSTRING=;
3689021    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3689022    * POSTLOOP: EndGrp11;
MPRINT(EM_DIAGRAM):   * POSTLOOP: EndGrp11;
3689023    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3689024    %let EM_ACTION = POSTLOOP;
3689025    %let syscc = 0;
3689026    %macro main;
3689027       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3689028    
3689029           filename temp catalog 'sashelp.emutil.endgp_train.source';
3689030           %include temp;
3689031           filename temp;
3689032    
3689033           %train;
3689034    
3689035       %end;
3689036       %else
3689037          %if %upcase(&EM_ACTION) = SCORE %then %do;
3689038    
3689039           filename temp catalog 'sashelp.emutil.endgp_score.source';
3689040           %include temp;
3689041           filename temp;
3689042    
3689043           %score;
3689044       %end;
3689045       %else
3689046       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3689047    
3689048           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3689049           %include temp;
3689050           filename temp;
3689051    
3689052           %postloop;
3689053    
3689054       %end;
3689055    
3689056       %doendm:
3689057    %mend main;
3689058    
3689059    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_POSTLOOP.SOURCE.
3689060   +%macro scoreTables(data=, out=, scoreref=, prescore=);
3689062   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW)))
3689062  !+%then %do;
3689063   +       data &out / view=&out;
3689064   +          set &data
3689067   +          %if "&prescore" = "Y" %then %do;
3689068   +              (obs=1)
3689069   +          %end;
3689071   +          ;
3689073   +       %let fexist = %sysfunc(fexist(&scoreref));
3689074   +       %if &fexist %then %do;
3689075   +          %inc &scoreref;
3689076   +       %end;
3689078   +       %if "&prescore" eq "Y" %then %do;
3689079   +          drop I_: R_:;
3689080   +       %end;
3689082   +       run;
3689083   +   %end;
3689085   +%mend scoretables;
3689087   +%macro postboostbag(groupid=, type=);
3689088   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3689089   +   data _null_;
3689090   +      retain index 0;
3689091   +      set &infoDs;
3689092   +      call symput('targetname', strip(_target_));
3689093   +   run;
3689095   +   data _null_;
3689096   +      set &em_import_data_eminfo;
3689097   +      where key in('MODEL', 'DECMETA') and TARGET="&targetname";
3689098   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
3689099   +      else call symput('MODELID', strip(data));
3689100   +   run;
3689102   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
3689103   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
3689105   +   filename loopflow "&em_user_loopflowcode";
3689106   +   filename looppub "&em_user_looppubcode";
3689108   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3689109   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3689111   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
3689112   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
3689114   +   filename loopflow;
3689115   +   filename looppub;
3689116   +   filename emflow;
3689117   +   filename empub;
3689119   +   %let EMGROUPASSMT = Y;
3689121   +   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y, DECSCORECODE=Y,
3689121  !+FITSTATISTICS=N, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3689123   +   %em_getname(key=emoutfit, type=DATA);
3689124   +   %em_getname(key=emoutfit_loop, type=DATA);
3689126   +   data &em_user_emoutfit;
3689127   +      set &em_user_emoutfit_loop end=eof;
3689128   +      drop _LOOP_ _WHERE_;
3689129   +      if eof then output;
3689130   +   run;
3689132   +%mend postboostbag;
3689134   +%macro postgroup(groupid=, type=);
3689135   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3689136   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3689138   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3689139   +   %let _XValidation = 0;
3689141   +   data _null_;
3689142   +      retain index 0;
3689143   +      set &infoDs end=eof;
3689144   +      index + 1;
3689145   +      call symput('loopwhere'!!strip(put(index, best.)), tranwrd(strip(_wheredesc_),
3689145  !+ '"', '""'));
3689146   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3689147   +      if eof and substr(_WHERE_, 1, 2)='^(' then
3689148   +         call symput('_XValidation', '1');
3689149   +   run;
3689151   +   %let grouptarget=;
3689152   +   /* Looping Over Groups Only.  Retrieve targets from EMINFO */
3689153   +   %if "&looptarget1" eq "" %then %do;
3689154   +      data _null_;
3689155   +         set &em_import_data_eminfo;
3689156   +         where key in('MODEL');
3689157   +         call symput('grouptarget', strip(symget('grouptarget'))!!'
3689157  !+'!!strip(target));
3689158   +      run;
3689159   +   %end;
3689161   +   %do j=1 %to &emloopnumber;
3689162   +       %let EnsembleIndex=0;
3689163   +       data _null_;
3689164   +          retain index 0 ensembleIndex 0;
3689165   +          set &em_user_path end=eof;
3689166   +          where LOOPID=&j;
3689167   +          if nodelabel = "&groupid" or index then do;
3689168   +             index + 1;
3689169   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3689170   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3689171   +             call symput('loopaccum'!!strip(put(index, best.)),
3689171  !+strip(accumulatedScoreCode));
3689172   +          end;
3689173   +          if component='Ensemble' then ensembleIndex = index;
3689174   +          if eof then do;
3689175   +             call symput('loopcodenum', strip(put(index, best.)));
3689176   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3689177   +          end;
3689178   +       run;
3689180   +       %do i = 1 %to &loopcodenum;
3689181   +           %let fsourceEntry =
3689181  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3689182   +           %let psourceEntry =
3689182  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3689184   +           %if (&&loopnode&i eq &em_nodeid ) or
3689185   +               ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or
3689185  !+&i>&ensembleIndex or &i=&ensembleIndex) ) %then %do;
3689187   +               data _null_;
3689188   +                  file emflow mod;
3689189   +                  put "&em_codebar;";
3689190   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3689191   +                  put "* User: &sysuserid;";
3689192   +                  put "* Date: &sysdate: &systime;";
3689193   +                  %if "&&loopwhere&j" ne "" %then %do;
3689194   +                      put "* Group: &&loopwhere&j;";
3689195   +                  %end;
3689196   +                  %if "&&looptarget&j" ne "" %then %do;
3689197   +                       put "* Target: &&looptarget&j;";
3689198   +                  %end;
3689199   +                  put "&em_codebar ;";
3689200   +               run;
3689201   +               data _null_;
3689202   +                   file empub mod;
3689203   +                   put "&em_codebar ;";
3689204   +                   put "* &&loopnode&i: &&loopdesc&i;" ;
3689205   +                   put "* User: &sysuserid;";
3689206   +                   put "* Date: &sysdate: &systime;";
3689207   +                   %if "&&loopwhere&j" ne "" %then %do;
3689208   +                       put "* Group: &&loopwhere&j;";
3689209   +                   %end;
3689210   +                   %if "&&looptarget&j" ne "" %then %do;
3689211   +                       put "* Target: &&looptarget&j;";
3689212   +                   %end;
3689213   +                   put "&em_codebar;";
3689214   +               run;
3689215   +           %end;
3689217   +           %if ("&&loopnode&i" ne "&em_nodeid" ) %then %do;
3689218   +               %if (&ensembleIndex = 0) or (&i=1 or &i>&ensembleIndex or
3689218  !+&i=&ensembleIndex) %then %do;
3689219   +                   %if "&&loopnode&i" eq "&groupid" and "&_XValidation" eq "1" %then
3689219  !+ %do;
3689220   +                       filename y catalog "&psourceEntry";
3689221   +                       %em_copyfile(infref=y, outfref=emflow, append=Y);
3689222   +                       filename y;
3689223   +                   %end;
3689224   +                   %else %do;
3689225   +                       filename x catalog "&fsourceEntry";
3689226   +                       %em_copyfile(infref=x, outfref=emflow, append=Y);
3689227   +                       filename x;
3689228   +                   %end;
3689230   +                   filename y catalog "&psourceEntry";
3689231   +                   %em_copyfile(infref=y, outfref=empub, append=Y);
3689232   +                   filename y;
3689233   +               %end;
3689234   +           %end;
3689235   +           %else %do;
3689236   +              %if "&&loopwhere&j" ne "" %then %do;
3689237   +                  data _null_;
3689238   +                     file emflow mod;
3689239   +                     put 'end;';
3689240   +                  run;
3689241   +                  data _null_;
3689242   +                     file empub mod;
3689243   +                     put 'end;';
3689244   +                  run;
3689245   +               %end;
3689246   +           %end;
3689247   +       %end;
3689248   +   %end;
3689249   +   filename emflow;
3689250   +   filename empub;
3689252   +   /* Stratify Model Need to Recompute All Assessment Reports */
3689253   +   %if "&grouptarget" eq "" %then %do;
3689254   +       %let assessTarget=;
3689255   +       %do j=1 %to &emloopnumber;
3689256   +           %let targetname = &&looptarget&j;
3689257   +           %if ^%index(&assesstarget, &targetname) and ("&targetname" ne "") %then
3689257  !+%do;
3689258   +               %let assesstarget = &assesstarget &targetname;
3689259   +               %let index = 1;
3689260   +               %do %while( %scan(%sysfunc(strip(&targetname)), &index) ne
3689260  !+%sysfunc(strip(&targetname)));
3689261   +                   %let index = %eval(&index + 1);
3689262   +               %end;
3689263   +               %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &index
3689263  !+,%str( ));
3689265   +               %if "&targetlevel" ne "INTERVAL" %then
3689266   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3689266  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3689267   +               %else
3689268   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3689268  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3689269   +           %end;
3689270   +       %end;
3689271   +   %end;
3689272   +   %else %do;
3689273   +       %do i=1 %to &em_num_target;
3689274   +           %let targetname = %scan(%em_target, &i, %str( )) ;
3689275   +           %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &i ,%str( ));
3689277   +           %if %sysfunc(indexw(&grouptarget, &targetname)) %then %do;
3689278   +              %if "&targetlevel" ne "INTERVAL" %then
3689279   +                  %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3689279  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3689280   +              %else
3689281   +                 %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3689281  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3689282   +           %end;
3689283   +           %else %do;
3689284   +               %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N,
3689284  !+DECSCORECODE=N, FITSTATISTICS=N, RESIDUALS=N, PREDICTED=N);
3689285   +           %end;
3689286   +       %end;
3689287   +   %end;
3689288   +   %let EMGROUPASSMT = N;
3689289   +%mend postgroup;
3689291   +%macro posttarget(groupid=, type=);
3689292   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3689293   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3689295   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3689296   +   data _null_;
3689297   +      retain index 0;
3689298   +      set &infoDs end=eof;
3689299   +      index + 1;
3689300   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3689301   +   run;
3689303   +   %do j=1 %to &emloopnumber;
3689304   +       %let EnsembleIndex=0;
3689305   +       data _null_;
3689306   +          retain index 0 ensembleIndex 0;
3689307   +          set &em_user_path end=eof;
3689308   +          where LOOPID=&j;
3689309   +          if nodelabel = "&groupid" or index then do;
3689310   +             index + 1;
3689311   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3689312   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3689313   +             call symput('loopaccum'!!strip(put(index, best.)),
3689313  !+strip(accumulatedScoreCode));
3689314   +          end;
3689315   +          if component='Ensemble' then ensembleIndex = index;
3689316   +          if eof then do;
3689317   +             call symput('loopcodenum', strip(put(index, best.)));
3689318   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3689319   +          end;
3689320   +       run;
3689322   +       %do i = 1 %to &loopcodenum;
3689323   +           %let fsourceEntry =
3689323  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3689324   +           %let psourceEntry =
3689324  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3689326   +           %if (&&loopnode&i ne &em_nodeid ) and
3689327   +               ( (&ensembleIndex = 0) or (&i>=&ensembleIndex) ) %then %do;
3689328   +               data _null_;
3689329   +                  file emflow mod;
3689330   +                  put "&em_codebar;";
3689331   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3689332   +                  put "* User: &sysuserid;";
3689333   +                  put "* Date: &sysdate: &systime;";
3689334   +                  put "* Target: &&looptarget&j;";
3689335   +                  put "&em_codebar ;";
3689336   +               run;
3689337   +               data _null_;
3689338   +                  file empub mod;
3689339   +                  put "&em_codebar ;";
3689340   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3689341   +                  put "* User: &sysuserid;";
3689342   +                  put "* Date: &sysdate: &systime;";
3689343   +                  put "* Target: &&looptarget&j;";
3689344   +                  put "&em_codebar;";
3689345   +               run;
3689347   +               filename x catalog "&fsourceEntry";
3689348   +               %em_copyfile(infref=x, outfref=emflow, append=Y);
3689349   +               filename x;
3689351   +               filename y catalog "&psourceEntry";
3689352   +               %em_copyfile(infref=y, outfref=empub, append=Y);
3689353   +               filename y;
3689354   +           %end;
3689355   +       %end;
3689356   +   %end;
3689357   +   filename emflow;
3689358   +   filename empub;
3689360   +   %do j=1 %to &emloopnumber;
3689361   +       %let targetname = &&looptarget&j;
3689362   +       %let k = 1;
3689363   +       %do %while( %scan(%sysfunc(strip(&targetname)), &k) ne
3689363  !+%sysfunc(strip(&targetname)));
3689364   +           %let k = %eval(&k + 1);
3689365   +       %end;
3689366   +       %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &k ,%str( ));
3689367   +       %if "&targetlevel" ne "INTERVAL" %then
3689368   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3689368  !+FITSTATISTICS=N, CLASSIFICATION=N, PREDICTED=Y);
3689369   +       %else
3689370   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3689370  !+FITSTATISTICS=N, RESIDUALS=N, PREDICTED=Y);
3689371   +       %let EMGROUPASSMT = N;
3689372   +   %end;
3689374   +%mend posttarget;
3689376   +%macro postloop;
3689378   +   %if ^%symexist(em_import_data_eminfo) %then %goto doendpl;
3689380   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
3689380  !+%then %do;
3689381   +       %let emexceptionstring = nomodeltarget;
3689382   +       %goto doendpl;
3689383   +   %end;
3689385   +   %let targetName=;
3689386   +   %let endgrp_decmeta=;
3689388   +   data _null_;
3689389   +      set &em_import_data_eminfo;
3689390   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
3689391   +      call symput('GROUPID',   strip(data));
3689392   +      call symput('LOOPTYPE', strip(key));
3689393   +   run;
3689395   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
3689396   +   %include temp;
3689397   +   filename temp;
3689399   +   %em_getname(key=PATH, type=DATA);
3689401   +   %if ^%sysfunc(exist(&em_user_path)) %then %goto doendpl;
3689403   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
3689405   +   %let gptrain=;
3689406   +   %let gpvalidate=;
3689407   +   %let gptest=;
3689409   +   data _null_;
3689410   +      set &groupImportDs;
3689411   +      select(upcase(port));
3689412   +          when('DATA')     call symput('gpTrain',    strip(dataset));
3689413   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
3689414   +          when('TEST')     call symput('gpTest',     strip(dataset));
3689415   +       otherwise;
3689416   +      end;
3689417   +   run;
3689418   +   %let gpTrain =&em_lib..%sysfunc(strip(&gpTrain));
3689420   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
3689420  !+%postboostbag(groupid=&groupid, type=&looptype);
3689421   +   %else
3689422   +   %if ("&looptype" eq "GROUPINFO") %then %postgroup(groupid=&groupid,
3689422  !+type=&looptype);
3689423   +   %else
3689424   +   %if ("&looptype" eq "TARGETINFO") %then %posttarget(groupid=&groupid,
3689424  !+type=&looptype);
3689426   +   %let deleteString = &em_nodeid._path;
3689428   +   proc sort data=&em_user_path nodupkey;
3689429   +      by nodelabel;
3689430   +   run;
3689431   +   %let loopnodenum=0;
3689432   +   data _null_;
3689433   +      retain index 0;
3689434   +      set &em_user_path end=eof;
3689435   +      if nodelabel = "&groupid" or index then do;
3689436   +         index + 1;
3689437   +         call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3689438   +      end;
3689439   +      if eof then do;
3689440   +         call symput('loopnodenum', strip(put(index, best.)));
3689441   +      end;
3689442   +   run;
3689443   +   proc datasets lib=&em_lib nolist;
3689444   +      delete &deleteString;
3689445   +      delete
3689446   +      %do i = 1 %to &loopnodenum;
3689447   +          %let loopcatalog = %sysfunc(strip(&&loopnode&i))_LOOP;
3689448   +          %if %sysfunc(cexist(&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP)) %then
3689448  !+%do;
3689450   +              &loopcatalog
3689451   +          %end;
3689452   +          %if &i = &loopnodenum %then %do;
3689453   +              / mt=catalog;
3689454   +          %end;
3689455   +      %end;
3689456   +   run;
3689457   +   quit;
3689459   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
3689461   +   %if "&gpTrain" ne "" and (("&looptype" eq "BOOSTINFO") or ("&looptype" eq
3689461  !+"BAGINFO")) %then %do;
3689463   +       %let targetType = ;
3689464   +       data _null_;
3689465   +          set &endgrp_decmeta;
3689466   +          where _TYPE_='TARGET';
3689467   +          call symput('TARGETTYPE', strip(level));
3689468   +       run;
3689470   +       filename empub "&EM_FILE_EMPUBLISHSCORECODE" MOD;
3689472   +       %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow,
3689472  !+prescore=Y);
3689474   +       %if &targetType ne 'INTERVAL' %then %do;
3689475   +           %makeClassificationVars(target=&target, data=&em_export_train,
3689475  !+decmeta=&endgrp_decmeta, publish=Y, fref=empub);
3689476   +       %end;
3689478   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
3689480   +       %em_model(TARGET=&targetname, ASSESS=Y, DECSCORECODE=Y, FITSTATISTICS=Y,
3689480  !+CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3689482   +       filename empub;
3689484   +   %end;
3689486   +   %if "&gpTrain" ne "" %then
3689487   +        %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow);
3689488   +   %if "&gpValidate" ne "" %then
3689489   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),
3689489  !+out=&em_export_validate, scoreref=emflow);
3689490   +   %if "&gpTest" ne "" %then
3689491   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),
3689491  !+out=&em_export_test,     scoreref=emflow);
3689493   +   filename emflow;
3689495   +   %doendpl:
3689497   +%mend postloop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Neural3_EMINFO;
MPRINT(POSTLOOP):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 
'INDEXINFO');
MPRINT(POSTLOOP):   call symput('GROUPID', strip(data));
MPRINT(POSTLOOP):   call symput('LOOPTYPE', strip(key));
MPRINT(POSTLOOP):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
3689498   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
3689499   +   proc display c=sashelp.emcore.pathscorecode.scl;
3689500   +   run;
3689501   +%mend EM_GETTRAINPATH;
3689502   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(POSTLOOP):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Grp11_importset;
MPRINT(POSTLOOP):   select(upcase(port));
MPRINT(POSTLOOP):   when('DATA') call symput('gpTrain', strip(dataset));
MPRINT(POSTLOOP):   when('VALIDATE') call symput('gpValidate', strip(dataset));
MPRINT(POSTLOOP):   when('TEST') call symput('gpTest', strip(dataset));
MPRINT(POSTLOOP):   otherwise;
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;

NOTE: There were 15 observations read from the data set EMWS1.GRP11_IMPORTSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas";
MPRINT(POSTGROUP):   filename empub "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas";
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0;
MPRINT(POSTGROUP):   set EMWS1.Grp11_GROUPINFO end=eof;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopwhere'!!strip(put(index, best.)), 
tranwrd(strip(_wheredesc_), '"', '""'));
MPRINT(POSTGROUP):   call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
MPRINT(POSTGROUP):   if eof and substr(_WHERE_, 1, 2)='^(' then call symput('_XValidation', 
'1');
MPRINT(POSTGROUP):   run;

NOTE: There were 10 observations read from the data set EMWS1.GRP11_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   set EMWS1.Neural3_EMINFO;
MPRINT(POSTGROUP):   where key in('MODEL');
MPRINT(POSTGROUP):   call symput('grouptarget', strip(symget('grouptarget'))!!' 
'!!strip(target));
MPRINT(POSTGROUP):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=1;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14501,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13535,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14720,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13754,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=2;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14726,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13760,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=14944,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=13978,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14981,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14015,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=15204,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=14238,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=29227,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27295,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=29446,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27514,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=3;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=29452,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27520,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=29670,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=27738,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=29707,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=27775,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=29930,
      Last Modified=02 June 2018 17:08:31 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=27998,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=43953,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41055,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44172,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41274,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=4;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44178,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41280,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=44396,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=41498,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=44433,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41535,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=44656,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=41758,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=58679,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=54815,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=58898,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55034,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=5;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=58904,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55040,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=59122,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=55258,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=59159,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=55295,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=59382,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=55518,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=73405,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=68575,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=73624,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=68794,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=6;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=73630,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=68800,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=73848,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=69018,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=73885,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=69055,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=74108,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=69278,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=88131,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82335,
      Last Modified=02 June 2018 17:08:32 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=88350,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82554,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=7;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=88356,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82560,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=88574,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=82778,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=88611,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82815,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=88834,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=83038,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=102857,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96095,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103076,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96314,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=8;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103082,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96320,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=103300,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=96538,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103337,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96575,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=103560,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=96798,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=117583,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=109855,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=117802,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=110074,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=9;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=117808,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=110080,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=118026,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
The SAS System

MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=110298,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=118063,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=110335,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=118286,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=110558,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=132309,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=123615,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=132528,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=123834,
      Last Modified=02 June 2018 17:08:33 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=10;
MPRINT(POSTGROUP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
      WHERE LOOPID=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=132534,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp11: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=123840,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=132753,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp11_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=124059,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=132792,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural3: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=124098,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural3_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=133016,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 392 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural3_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=124322,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 353 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=147039,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp11: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=137379,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=147259,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=137599,
      Last Modified=02 June 2018 17:08:34 o'clock,
      Create Time=02 June 2018 17:08:31 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(POSTGROUP):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   set WORK.EM_USER_MODEL end=eof;
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   if eof then do;
MPRINT(EM_MODEL):   data = "EMWS1.TRANS2_TRAIN";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   end;
MPRINT(EM_MODEL):   run;

NOTE: There were 3 observations read from the data set WORK.EM_USER_MODEL.
NOTE: The data set WORK.EM_USER_MODEL has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   proc sort data=EMWS1.EndGrp11_PATH nodupkey;
MPRINT(POSTLOOP):   by nodelabel;
MPRINT(POSTLOOP):   run;

NOTE: There were 120 observations read from the data set EMWS1.ENDGRP11_PATH.
NOTE: 108 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.ENDGRP11_PATH has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   retain index 0;
MPRINT(POSTLOOP):   set EMWS1.EndGrp11_PATH end=eof;
MPRINT(POSTLOOP):   if nodelabel = "Grp11" or index then do;
MPRINT(POSTLOOP):   index + 1;
MPRINT(POSTLOOP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   if eof then do;
MPRINT(POSTLOOP):   call symput('loopnodenum', strip(put(index, best.)));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP11_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):   proc datasets lib=EMWS1 nolist;
MPRINT(POSTLOOP):   delete EndGrp11_path;
MPRINT(POSTLOOP):   delete Grp11_LOOP Neural3_LOOP / mt=catalog;
MPRINT(POSTLOOP):   run;

NOTE: Deleting EMWS1.ENDGRP11_PATH (memtype=DATA).
NOTE: Deleting EMWS1.GRP11_LOOP (memtype=CATALOG).
NOTE: Deleting EMWS1.NEURAL3_LOOP (memtype=CATALOG).
MPRINT(POSTLOOP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(POSTLOOP):   filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas" MOD;
MPRINT(SCORETABLES):   data EMWS1.EndGrp11_TRAIN / view=EMWS1.EndGrp11_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN ;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMFLOWSCORE.sas.
3689503   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3689504   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3689505   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3689506   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3689507   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3689508   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3689509   +if (cv_var =1)  then do;
MPRINT(SCORETABLES):   if (cv_var =1) then do;
3689510   +_XVAL_=1;
MPRINT(SCORETABLES):   _XVAL_=1;
3689511   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3689512   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3689513   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3689514   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3689515   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3689516   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3689517   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3689518   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3689519   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3689520   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3689521   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3689522   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3689523   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3689524   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3689525   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3689526   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3689527   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3689528   +LENGTH _WARN_ $4
3689529   +      F_DepVar  $ 12
3689530   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3689531   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3689532   +
3689533   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3689534   +
3689535   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3689536   +
3689537   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3689538   +
3689539   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3689540   +
3689541   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3689542   +
3689543   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3689544   +
3689545   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3689546   +
3689547   +      label S_RANGE_campaign_acceptance =
3689548   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3689549   +
3689550   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3689551   +
3689552   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3689553   +
3689554   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3689555   +
3689556   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3689557   +
3689558   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3689559   +
3689560   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3689561   +
3689562   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3689563   +
3689564   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3689565   +
3689566   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3689567   +
3689568   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3689569   +
3689570   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3689571   +
3689572   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3689573   +
3689574   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3689575   +
3689576   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3689577   +
3689578   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3689579   +
3689580   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3689581   +
3689582   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3689583   +
3689584   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3689585   +
3689586   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3689587   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3689588   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3689589   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3689590   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3689591   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3689592   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3689593   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3689594   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3689595   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3689596   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3689597   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3689598   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3689599   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3689600   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3689601   +end;
MPRINT(SCORETABLES):   end;
3689602   +else do;
MPRINT(SCORETABLES):   else do;
3689603   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3689604   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3689605   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3689606   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3689607   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3689608   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3689609   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3689610   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3689611   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3689612   +         end;
MPRINT(SCORETABLES):   end;
3689613   +         else do;
MPRINT(SCORETABLES):   else do;
3689614   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3689615   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3689616   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3689617   +            end;
MPRINT(SCORETABLES):   end;
3689618   +         end;
MPRINT(SCORETABLES):   end;
3689619   +      end;
MPRINT(SCORETABLES):   end;
3689620   +      else do;
MPRINT(SCORETABLES):   else do;
3689621   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3689622   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3689623   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3689624   +         end;
MPRINT(SCORETABLES):   end;
3689625   +      end;
MPRINT(SCORETABLES):   end;
3689626   +   end;
MPRINT(SCORETABLES):   end;
3689627   +   else do;
MPRINT(SCORETABLES):   else do;
3689628   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3689629   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3689630   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3689631   +      end;
MPRINT(SCORETABLES):   end;
3689632   +      else do;
MPRINT(SCORETABLES):   else do;
3689633   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3689634   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3689635   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3689636   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3689637   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3689638   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3689639   +         end;
MPRINT(SCORETABLES):   end;
3689640   +      end;
MPRINT(SCORETABLES):   end;
3689641   +   end;
MPRINT(SCORETABLES):   end;
3689642   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3689643   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3689644   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3689645   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3689646   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3689647   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3689648   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3689649   +   end;
MPRINT(SCORETABLES):   end;
3689650   +end;
MPRINT(SCORETABLES):   end;
3689651   +
3689652   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689653   +*** Checking missing input Interval
3689654   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3689655   +
3689656   +IF NMISS(
3689657   +   MntCard_Games ,
3689658   +   MntMagazines ,
3689659   +   NumCatalogPurchases ,
3689660   +   NumDealsPurchases ,
3689661   +   NumWebPurchases ,
3689662   +   RANGE_Frq ,
3689663   +   RANGE_Recency ,
3689664   +   RANGE_average_purchase ,
3689665   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3689666   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3689667   +
3689668   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3689669   +END;
MPRINT(SCORETABLES):   END;
3689670   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689671   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3689672   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689673   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3689674   +   S_MntCard_Games  =    -2.31633152412107 +     6.63961214733305 *
3689675   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31633152412107 + 6.63961214733305 * MntCard_Games ;
3689676   +   S_MntMagazines  =    -0.83310078749065 +     17.1782166230333 *
3689677   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83310078749065 + 17.1782166230333 * MntMagazines ;
3689678   +   S_NumCatalogPurchases  =    -3.10236382993447 +     13.4651364383093 *
3689679   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10236382993447 + 13.4651364383093 * 
NumCatalogPurchases ;
3689680   +   S_NumDealsPurchases  =    -1.41419711263658 +     11.1260778670505 *
3689681   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41419711263658 + 11.1260778670505 * 
NumDealsPurchases ;
3689682   +   S_NumWebPurchases  =    -5.22726584458503 +     12.2353034977895 *
3689683   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22726584458503 + 12.2353034977895 * 
NumWebPurchases ;
3689684   +   S_RANGE_Frq  =    -1.36962723432313 +      4.2428882090185 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36962723432313 + 4.2428882090185 * RANGE_Frq ;
3689685   +   S_RANGE_Recency  =    -1.66023526942195 +     3.34270048889282 *
3689686   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66023526942195 + 3.34270048889282 * RANGE_Recency ;
3689687   +   S_RANGE_average_purchase  =    -1.03863097507694 +     5.19850795640987 *
3689688   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03863097507694 + 5.19850795640987 * 
RANGE_average_purchase ;
3689689   +   S_RANGE_campaign_acceptance
3689690   +          =    -0.47147991349306 +      5.8517392691825 *
3689691   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47147991349306 + 5.8517392691825 * 
RANGE_campaign_acceptance ;
3689692   +END;
MPRINT(SCORETABLES):   END;
3689693   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3689694   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3689695   +   ELSE S_MntCard_Games  =    -2.31633152412107 +     6.63961214733305 *
3689696   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31633152412107 + 6.63961214733305 * 
MntCard_Games ;
3689697   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3689698   +   ELSE S_MntMagazines  =    -0.83310078749065 +     17.1782166230333 *
3689699   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83310078749065 + 17.1782166230333 * 
MntMagazines ;
3689700   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3689701   +   ELSE S_NumCatalogPurchases
3689702   +          =    -3.10236382993447 +     13.4651364383093 * NumCatalogPurchases
3689703   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10236382993447 + 13.4651364383093 * 
NumCatalogPurchases ;
3689704   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3689705   +   ELSE S_NumDealsPurchases  =    -1.41419711263658 +     11.1260778670505 *
3689706   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41419711263658 + 11.1260778670505 * 
NumDealsPurchases ;
3689707   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3689708   +   ELSE S_NumWebPurchases  =    -5.22726584458503 +     12.2353034977895 *
3689709   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22726584458503 + 12.2353034977895 * 
NumWebPurchases ;
3689710   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3689711   +   ELSE S_RANGE_Frq  =    -1.36962723432313 +      4.2428882090185 * RANGE_Frq
3689712   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36962723432313 + 4.2428882090185 * RANGE_Frq ;
3689713   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3689714   +   ELSE S_RANGE_Recency  =    -1.66023526942195 +     3.34270048889282 *
3689715   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66023526942195 + 3.34270048889282 * 
RANGE_Recency ;
3689716   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3689717   +   ELSE S_RANGE_average_purchase
3689718   +          =    -1.03863097507694 +     5.19850795640987 *
3689719   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03863097507694 + 5.19850795640987 * 
RANGE_average_purchase ;
3689720   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3689721   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3689722   +   ELSE S_RANGE_campaign_acceptance
3689723   +          =    -0.47147991349306 +      5.8517392691825 *
3689724   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47147991349306 + 5.8517392691825 
* RANGE_campaign_acceptance ;
3689725   +END;
MPRINT(SCORETABLES):   END;
3689726   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689727   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3689728   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689729   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689730   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3689731   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689732   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3689733   +   H11  =    -1.22558949531387 * S_MntCard_Games  +    -1.66941448358276 *
3689734   +        S_MntMagazines  +    -0.94882752074149 * S_NumCatalogPurchases
3689735   +          +     3.90637948210723 * S_NumDealsPurchases
3689736   +          +    -2.65451149062731 * S_NumWebPurchases
3689737   +          +    -1.56525431363556 * S_RANGE_Frq  +    -0.61797029359684 *
3689738   +        S_RANGE_Recency  +     1.67536570140412 * S_RANGE_average_purchase
3689739   +          +     0.50596458499798 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -1.22558949531387 * S_MntCard_Games + -1.66941448358276 * 
S_MntMagazines + -0.94882752074149 * S_NumCatalogPurchases + 3.90637948210723 * 
S_NumDealsPurchases + -2.65451149062731 * S_NumWebPurchases + -1.56525431363556 * S_RANGE_Frq 
+ -0.61797029359684 * S_RANGE_Recency + 1.67536570140412 * S_RANGE_average_purchase + 
0.50596458499798 * S_RANGE_campaign_acceptance ;
3689740   +   H12  =     1.31248150782156 * S_MntCard_Games  +    -1.01712760417753 *
3689741   +        S_MntMagazines  +     2.42532803134114 * S_NumCatalogPurchases
3689742   +          +    -1.56454694446098 * S_NumDealsPurchases
3689743   +          +    -1.24726454433722 * S_NumWebPurchases
3689744   +          +    -0.90770178054373 * S_RANGE_Frq  +     4.95278604292526 *
3689745   +        S_RANGE_Recency  +     4.11758336075909 * S_RANGE_average_purchase
3689746   +          +     1.66800620199538 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.31248150782156 * S_MntCard_Games + -1.01712760417753 * 
S_MntMagazines + 2.42532803134114 * S_NumCatalogPurchases + -1.56454694446098 * 
S_NumDealsPurchases + -1.24726454433722 * S_NumWebPurchases + -0.90770178054373 * S_RANGE_Frq 
+ 4.95278604292526 * S_RANGE_Recency + 4.11758336075909 * S_RANGE_average_purchase + 
1.66800620199538 * S_RANGE_campaign_acceptance ;
3689747   +   H13  =     0.01785786580617 * S_MntCard_Games  +    -0.01132857206622 *
3689748   +        S_MntMagazines  +     0.02637518940742 * S_NumCatalogPurchases
3689749   +          +    -0.47992650869841 * S_NumDealsPurchases
3689750   +          +     0.38334748116366 * S_NumWebPurchases
3689751   +          +     0.20928319946808 * S_RANGE_Frq  +     0.87702867546683 *
3689752   +        S_RANGE_Recency  +     0.19974111260909 * S_RANGE_average_purchase
3689753   +          +    -0.32340891120333 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.01785786580617 * S_MntCard_Games + -0.01132857206622 * 
S_MntMagazines + 0.02637518940742 * S_NumCatalogPurchases + -0.47992650869841 * 
S_NumDealsPurchases + 0.38334748116366 * S_NumWebPurchases + 0.20928319946808 * S_RANGE_Frq + 
0.87702867546683 * S_RANGE_Recency + 0.19974111260909 * S_RANGE_average_purchase + 
-0.32340891120333 * S_RANGE_campaign_acceptance ;
3689754   +   H14  =    -4.10906585860211 * S_MntCard_Games  +     2.04057056233911 *
3689755   +        S_MntMagazines  +    -1.50453734992329 * S_NumCatalogPurchases
3689756   +          +    -3.82659607848064 * S_NumDealsPurchases
3689757   +          +    -1.40783918349045 * S_NumWebPurchases
3689758   +          +      4.0131198500908 * S_RANGE_Frq  +     0.37772462944983 *
3689759   +        S_RANGE_Recency  +    -0.65616961251589 * S_RANGE_average_purchase
3689760   +          +    -2.92393221675515 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -4.10906585860211 * S_MntCard_Games + 2.04057056233911 * 
S_MntMagazines + -1.50453734992329 * S_NumCatalogPurchases + -3.82659607848064 * 
S_NumDealsPurchases + -1.40783918349045 * S_NumWebPurchases + 4.0131198500908 * S_RANGE_Frq + 
0.37772462944983 * S_RANGE_Recency + -0.65616961251589 * S_RANGE_average_purchase + 
-2.92393221675515 * S_RANGE_campaign_acceptance ;
3689761   +   H15  =    -0.59148592826859 * S_MntCard_Games  +     -0.0222458126715 *
3689762   +        S_MntMagazines  +    -0.61846044920731 * S_NumCatalogPurchases
3689763   +          +    -0.28338640014209 * S_NumDealsPurchases
3689764   +          +    -1.47933202359404 * S_NumWebPurchases
3689765   +          +    -0.57380673516098 * S_RANGE_Frq  +     0.97322506439351 *
3689766   +        S_RANGE_Recency  +    -0.37794530284539 * S_RANGE_average_purchase
3689767   +          +    -0.43749415849594 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -0.59148592826859 * S_MntCard_Games + -0.0222458126715 * 
S_MntMagazines + -0.61846044920731 * S_NumCatalogPurchases + -0.28338640014209 * 
S_NumDealsPurchases + -1.47933202359404 * S_NumWebPurchases + -0.57380673516098 * S_RANGE_Frq 
+ 0.97322506439351 * S_RANGE_Recency + -0.37794530284539 * S_RANGE_average_purchase + 
-0.43749415849594 * S_RANGE_campaign_acceptance ;
3689768   +   H16  =    -0.42669748322109 * S_MntCard_Games  +     0.10550941635442 *
3689769   +        S_MntMagazines  +     -0.4167601967823 * S_NumCatalogPurchases
3689770   +          +    -0.34096099755362 * S_NumDealsPurchases
3689771   +          +    -0.07248190840157 * S_NumWebPurchases
3689772   +          +    -0.22958755646084 * S_RANGE_Frq  +     0.72053732002326 *
3689773   +        S_RANGE_Recency  +      -0.162785507808 * S_RANGE_average_purchase
3689774   +          +    -0.38530952493279 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.42669748322109 * S_MntCard_Games + 0.10550941635442 * 
S_MntMagazines + -0.4167601967823 * S_NumCatalogPurchases + -0.34096099755362 * 
S_NumDealsPurchases + -0.07248190840157 * S_NumWebPurchases + -0.22958755646084 * S_RANGE_Frq 
+ 0.72053732002326 * S_RANGE_Recency + -0.162785507808 * S_RANGE_average_purchase + 
-0.38530952493279 * S_RANGE_campaign_acceptance ;
3689775   +   H11  = H11  +     1.50171768927758 * Marital_StatusDivorced
3689776   +          +     0.95176707041373 * Marital_StatusMarried
3689777   +          +    -1.84950070430003 * Marital_StatusSingle
3689778   +          +    -1.57815340010426 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 1.50171768927758 * Marital_StatusDivorced + 
0.95176707041373 * Marital_StatusMarried + -1.84950070430003 * Marital_StatusSingle + 
-1.57815340010426 * Marital_StatusTogether ;
3689779   +   H12  = H12  +     2.01215584830451 * Marital_StatusDivorced
3689780   +          +    -3.11333130819204 * Marital_StatusMarried
3689781   +          +    -0.14244653389385 * Marital_StatusSingle
3689782   +          +     0.95537776535751 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 2.01215584830451 * Marital_StatusDivorced + 
-3.11333130819204 * Marital_StatusMarried + -0.14244653389385 * Marital_StatusSingle + 
0.95537776535751 * Marital_StatusTogether ;
3689783   +   H13  = H13  +    -0.05262941667434 * Marital_StatusDivorced
3689784   +          +     0.20663673328033 * Marital_StatusMarried
3689785   +          +    -0.33057240096715 * Marital_StatusSingle
3689786   +          +     0.83900420264143 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.05262941667434 * Marital_StatusDivorced + 
0.20663673328033 * Marital_StatusMarried + -0.33057240096715 * Marital_StatusSingle + 
0.83900420264143 * Marital_StatusTogether ;
3689787   +   H14  = H14  +    -3.39076454749667 * Marital_StatusDivorced
3689788   +          +     3.23761759914736 * Marital_StatusMarried
3689789   +          +    -3.22921147855652 * Marital_StatusSingle
3689790   +          +      3.6750091661749 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -3.39076454749667 * Marital_StatusDivorced + 
3.23761759914736 * Marital_StatusMarried + -3.22921147855652 * Marital_StatusSingle + 
3.6750091661749 * Marital_StatusTogether ;
3689791   +   H15  = H15  +     1.57006327207668 * Marital_StatusDivorced
3689792   +          +     1.58503904200952 * Marital_StatusMarried
3689793   +          +     1.54004210369796 * Marital_StatusSingle
3689794   +          +     1.73180037331557 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.57006327207668 * Marital_StatusDivorced + 
1.58503904200952 * Marital_StatusMarried + 1.54004210369796 * Marital_StatusSingle + 
1.73180037331557 * Marital_StatusTogether ;
3689795   +   H16  = H16  +    -0.22161833116062 * Marital_StatusDivorced
3689796   +          +    -0.10914825538849 * Marital_StatusMarried
3689797   +          +     0.14648342834272 * Marital_StatusSingle
3689798   +          +    -0.68348354528897 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.22161833116062 * Marital_StatusDivorced + 
-0.10914825538849 * Marital_StatusMarried + 0.14648342834272 * Marital_StatusSingle + 
-0.68348354528897 * Marital_StatusTogether ;
3689799   +   H11  =     3.67581715064013 + H11 ;
MPRINT(SCORETABLES):   H11 = 3.67581715064013 + H11 ;
3689800   +   H12  =    -1.68129625542952 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.68129625542952 + H12 ;
3689801   +   H13  =     0.07607048310671 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.07607048310671 + H13 ;
3689802   +   H14  =     1.92017285754607 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.92017285754607 + H14 ;
3689803   +   H15  =     0.79331799676974 + H15 ;
MPRINT(SCORETABLES):   H15 = 0.79331799676974 + H15 ;
3689804   +   H16  =     0.36866836777944 + H16 ;
MPRINT(SCORETABLES):   H16 = 0.36866836777944 + H16 ;
3689805   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3689806   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3689807   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3689808   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3689809   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3689810   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3689811   +END;
MPRINT(SCORETABLES):   END;
3689812   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3689813   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3689814   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3689815   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3689816   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3689817   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3689818   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3689819   +END;
MPRINT(SCORETABLES):   END;
3689820   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689821   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3689822   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689823   +
3689824   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3689825   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3689826   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3689827   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3689828   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3689829   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3689830   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3689831   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3689832   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3689833   +end;
MPRINT(SCORETABLES):   end;
3689834   +else do;
MPRINT(SCORETABLES):   else do;
3689835   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3689836   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3689837   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3689838   +   end;
MPRINT(SCORETABLES):   end;
3689839   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3689840   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3689841   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3689842   +   end;
MPRINT(SCORETABLES):   end;
3689843   +   else do;
MPRINT(SCORETABLES):   else do;
3689844   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3689845   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3689846   +   end;
MPRINT(SCORETABLES):   end;
3689847   +end;
MPRINT(SCORETABLES):   end;
3689848   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3689849   +   P_DepVar1  =    -3.23737124831139 * H11  +      4.2027491469247 * H12
3689850   +          +     -8.8876156002287 * H13  +    -2.23763283094238 * H14
3689851   +          +    -3.89157577822682 * H15  +    -7.17373194065375 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.23737124831139 * H11 + 4.2027491469247 * H12 + 
-8.8876156002287 * H13 + -2.23763283094238 * H14 + -3.89157577822682 * H15 + -7.17373194065375 
* H16 ;
3689852   +   P_DepVar1  =    -3.90045568356704 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.90045568356704 + P_DepVar1 ;
3689853   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3689854   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3689855   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3689856   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3689857   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3689858   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3689859   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3689860   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3689861   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3689862   +END;
MPRINT(SCORETABLES):   END;
3689863   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3689864   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3689865   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3689866   +END;
MPRINT(SCORETABLES):   END;
3689867   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3689868   +   P_DepVar1  =     0.13535911602209;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13535911602209;
3689869   +   P_DepVar0  =      0.8646408839779;
MPRINT(SCORETABLES):   P_DepVar0 = 0.8646408839779;
3689870   +END;
MPRINT(SCORETABLES):   END;
3689871   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3689872   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3689873   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3689874   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3689875   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3689876   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3689877   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3689878   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689879   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3689880   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3689881   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3689882   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3689883   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3689884   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3689885   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3689886   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3689887   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3689888   +END;
MPRINT(SCORETABLES):   END;
3689889   +********************************;
MPRINT(SCORETABLES):   ********************************;
3689890   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3689891   +********************************;
MPRINT(SCORETABLES):   ********************************;
3689892   +drop
3689893   +S_MntCard_Games
3689894   +S_MntMagazines
3689895   +S_NumCatalogPurchases
3689896   +S_NumDealsPurchases
3689897   +S_NumWebPurchases
3689898   +S_RANGE_Frq
3689899   +S_RANGE_Recency
3689900   +S_RANGE_average_purchase
3689901   +S_RANGE_campaign_acceptance
3689902   +H11
3689903   +H12
3689904   +H13
3689905   +H14
3689906   +H15
3689907   +H16
3689908   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3689909   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3689910   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3689911   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3689912   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3689913   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3689914   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3689915   +end;
MPRINT(SCORETABLES):   end;
3689916   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3689917   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3689918   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3689919   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3689920   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3689921   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3689922   +if (cv_var =2)  then do;
MPRINT(SCORETABLES):   if (cv_var =2) then do;
3689923   +_XVAL_=2;
MPRINT(SCORETABLES):   _XVAL_=2;
3689924   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3689925   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3689926   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3689927   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3689928   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3689929   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3689930   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3689931   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3689932   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3689933   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3689934   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3689935   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3689936   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3689937   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3689938   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3689939   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3689940   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3689941   +LENGTH _WARN_ $4
3689942   +      F_DepVar  $ 12
3689943   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3689944   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3689945   +
3689946   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3689947   +
3689948   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3689949   +
3689950   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3689951   +
3689952   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3689953   +
3689954   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3689955   +
3689956   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3689957   +
3689958   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3689959   +
3689960   +      label S_RANGE_campaign_acceptance =
3689961   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3689962   +
3689963   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3689964   +
3689965   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3689966   +
3689967   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3689968   +
3689969   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3689970   +
3689971   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3689972   +
3689973   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3689974   +
3689975   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3689976   +
3689977   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3689978   +
3689979   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3689980   +
3689981   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3689982   +
3689983   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3689984   +
3689985   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3689986   +
3689987   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3689988   +
3689989   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3689990   +
3689991   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3689992   +
3689993   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3689994   +
3689995   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3689996   +
3689997   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3689998   +
3689999   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3690000   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3690001   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3690002   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3690003   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3690004   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3690005   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3690006   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3690007   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3690008   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690009   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690010   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690011   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690012   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3690013   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690014   +end;
MPRINT(SCORETABLES):   end;
3690015   +else do;
MPRINT(SCORETABLES):   else do;
3690016   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3690017   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3690018   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3690019   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3690020   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3690021   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3690022   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3690023   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3690024   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690025   +         end;
MPRINT(SCORETABLES):   end;
3690026   +         else do;
MPRINT(SCORETABLES):   else do;
3690027   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3690028   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3690029   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690030   +            end;
MPRINT(SCORETABLES):   end;
3690031   +         end;
MPRINT(SCORETABLES):   end;
3690032   +      end;
MPRINT(SCORETABLES):   end;
3690033   +      else do;
MPRINT(SCORETABLES):   else do;
3690034   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3690035   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3690036   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690037   +         end;
MPRINT(SCORETABLES):   end;
3690038   +      end;
MPRINT(SCORETABLES):   end;
3690039   +   end;
MPRINT(SCORETABLES):   end;
3690040   +   else do;
MPRINT(SCORETABLES):   else do;
3690041   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3690042   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3690043   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690044   +      end;
MPRINT(SCORETABLES):   end;
3690045   +      else do;
MPRINT(SCORETABLES):   else do;
3690046   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3690047   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3690048   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3690049   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3690050   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3690051   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690052   +         end;
MPRINT(SCORETABLES):   end;
3690053   +      end;
MPRINT(SCORETABLES):   end;
3690054   +   end;
MPRINT(SCORETABLES):   end;
3690055   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3690056   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690057   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690058   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690059   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690060   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3690061   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690062   +   end;
MPRINT(SCORETABLES):   end;
3690063   +end;
MPRINT(SCORETABLES):   end;
3690064   +
3690065   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690066   +*** Checking missing input Interval
3690067   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3690068   +
3690069   +IF NMISS(
3690070   +   MntCard_Games ,
3690071   +   MntMagazines ,
3690072   +   NumCatalogPurchases ,
3690073   +   NumDealsPurchases ,
3690074   +   NumWebPurchases ,
3690075   +   RANGE_Frq ,
3690076   +   RANGE_Recency ,
3690077   +   RANGE_average_purchase ,
3690078   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3690079   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3690080   +
3690081   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690082   +END;
MPRINT(SCORETABLES):   END;
3690083   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690084   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3690085   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690086   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690087   +   S_MntCard_Games  =     -2.2973847559683 +     6.60591387040517 *
3690088   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.2973847559683 + 6.60591387040517 * MntCard_Games ;
3690089   +   S_MntMagazines  =    -0.83561820910834 +     17.4804551619825 *
3690090   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83561820910834 + 17.4804551619825 * MntMagazines ;
3690091   +   S_NumCatalogPurchases  =    -3.12840084058165 +      13.569936576812 *
3690092   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12840084058165 + 13.569936576812 * 
NumCatalogPurchases ;
3690093   +   S_NumDealsPurchases  =    -1.42218990824448 +     11.2388115529769 *
3690094   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42218990824448 + 11.2388115529769 * 
NumDealsPurchases ;
3690095   +   S_NumWebPurchases  =    -5.28857180555686 +     12.3740044600605 *
3690096   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.28857180555686 + 12.3740044600605 * 
NumWebPurchases ;
3690097   +   S_RANGE_Frq  =      -1.364025459792 +     4.21918803337606 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.364025459792 + 4.21918803337606 * RANGE_Frq ;
3690098   +   S_RANGE_Recency  =     -1.6619605088771 +     3.34949554514339 *
3690099   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6619605088771 + 3.34949554514339 * RANGE_Recency ;
3690100   +   S_RANGE_average_purchase  =    -1.03977751595811 +     5.18933408962766 *
3690101   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03977751595811 + 5.18933408962766 * 
RANGE_average_purchase ;
3690102   +   S_RANGE_campaign_acceptance
3690103   +          =    -0.47019785088739 +     5.76531885038011 *
3690104   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47019785088739 + 5.76531885038011 * 
RANGE_campaign_acceptance ;
3690105   +END;
MPRINT(SCORETABLES):   END;
3690106   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690107   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3690108   +   ELSE S_MntCard_Games  =     -2.2973847559683 +     6.60591387040517 *
3690109   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.2973847559683 + 6.60591387040517 * 
MntCard_Games ;
3690110   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3690111   +   ELSE S_MntMagazines  =    -0.83561820910834 +     17.4804551619825 *
3690112   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83561820910834 + 17.4804551619825 * 
MntMagazines ;
3690113   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3690114   +   ELSE S_NumCatalogPurchases
3690115   +          =    -3.12840084058165 +      13.569936576812 * NumCatalogPurchases
3690116   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12840084058165 + 13.569936576812 * 
NumCatalogPurchases ;
3690117   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3690118   +   ELSE S_NumDealsPurchases  =    -1.42218990824448 +     11.2388115529769 *
3690119   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42218990824448 + 11.2388115529769 * 
NumDealsPurchases ;
3690120   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3690121   +   ELSE S_NumWebPurchases  =    -5.28857180555686 +     12.3740044600605 *
3690122   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.28857180555686 + 12.3740044600605 * 
NumWebPurchases ;
3690123   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3690124   +   ELSE S_RANGE_Frq  =      -1.364025459792 +     4.21918803337606 * RANGE_Frq
3690125   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.364025459792 + 4.21918803337606 * RANGE_Frq ;
3690126   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3690127   +   ELSE S_RANGE_Recency  =     -1.6619605088771 +     3.34949554514339 *
3690128   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6619605088771 + 3.34949554514339 * 
RANGE_Recency ;
3690129   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3690130   +   ELSE S_RANGE_average_purchase
3690131   +          =    -1.03977751595811 +     5.18933408962766 *
3690132   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03977751595811 + 5.18933408962766 * 
RANGE_average_purchase ;
3690133   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3690134   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3690135   +   ELSE S_RANGE_campaign_acceptance
3690136   +          =    -0.47019785088739 +     5.76531885038011 *
3690137   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47019785088739 + 5.76531885038011 
* RANGE_campaign_acceptance ;
3690138   +END;
MPRINT(SCORETABLES):   END;
3690139   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690140   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3690141   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690142   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690143   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3690144   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690145   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690146   +   H11  =     0.54290636922379 * S_MntCard_Games  +    -0.93895559389981 *
3690147   +        S_MntMagazines  +     1.55581224511384 * S_NumCatalogPurchases
3690148   +          +     0.04061917830552 * S_NumDealsPurchases
3690149   +          +     1.02456123736901 * S_NumWebPurchases
3690150   +          +     0.41568892481891 * S_RANGE_Frq  +    -2.26386456314846 *
3690151   +        S_RANGE_Recency  +     -0.5661394899616 * S_RANGE_average_purchase
3690152   +          +     1.09296391351338 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.54290636922379 * S_MntCard_Games + -0.93895559389981 * 
S_MntMagazines + 1.55581224511384 * S_NumCatalogPurchases + 0.04061917830552 * 
S_NumDealsPurchases + 1.02456123736901 * S_NumWebPurchases + 0.41568892481891 * S_RANGE_Frq + 
-2.26386456314846 * S_RANGE_Recency + -0.5661394899616 * S_RANGE_average_purchase + 
1.09296391351338 * S_RANGE_campaign_acceptance ;
3690153   +   H12  =    -0.01738706236547 * S_MntCard_Games  +    -1.01410871760836 *
3690154   +        S_MntMagazines  +     1.27953799601246 * S_NumCatalogPurchases
3690155   +          +    -2.52061589482997 * S_NumDealsPurchases
3690156   +          +    -1.18837278088751 * S_NumWebPurchases
3690157   +          +    -0.85186130811275 * S_RANGE_Frq  +     5.58364045266412 *
3690158   +        S_RANGE_Recency  +     3.47956856812744 * S_RANGE_average_purchase
3690159   +          +     0.06417330085822 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.01738706236547 * S_MntCard_Games + -1.01410871760836 * 
S_MntMagazines + 1.27953799601246 * S_NumCatalogPurchases + -2.52061589482997 * 
S_NumDealsPurchases + -1.18837278088751 * S_NumWebPurchases + -0.85186130811275 * S_RANGE_Frq 
+ 5.58364045266412 * S_RANGE_Recency + 3.47956856812744 * S_RANGE_average_purchase + 
0.06417330085822 * S_RANGE_campaign_acceptance ;
3690160   +   H13  =    -0.49684984522422 * S_MntCard_Games  +    -0.02428861170389 *
3690161   +        S_MntMagazines  +     0.03333683681007 * S_NumCatalogPurchases
3690162   +          +    -0.64225196906613 * S_NumDealsPurchases
3690163   +          +     0.38433612032424 * S_NumWebPurchases
3690164   +          +    -0.04259126399527 * S_RANGE_Frq  +       1.071831891537 *
3690165   +        S_RANGE_Recency  +     0.67898467598409 * S_RANGE_average_purchase
3690166   +          +    -0.54013721897031 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.49684984522422 * S_MntCard_Games + -0.02428861170389 * 
S_MntMagazines + 0.03333683681007 * S_NumCatalogPurchases + -0.64225196906613 * 
S_NumDealsPurchases + 0.38433612032424 * S_NumWebPurchases + -0.04259126399527 * S_RANGE_Frq + 
1.071831891537 * S_RANGE_Recency + 0.67898467598409 * S_RANGE_average_purchase + 
-0.54013721897031 * S_RANGE_campaign_acceptance ;
3690167   +   H14  =     -4.8135270171394 * S_MntCard_Games  +     0.74014018361062 *
3690168   +        S_MntMagazines  +    -3.74343169911544 * S_NumCatalogPurchases
3690169   +          +    -3.72578643906049 * S_NumDealsPurchases
3690170   +          +    -1.23670196665382 * S_NumWebPurchases
3690171   +          +     3.96046211665957 * S_RANGE_Frq  +    -0.10635173117595 *
3690172   +        S_RANGE_Recency  +    -2.43795169539141 * S_RANGE_average_purchase
3690173   +          +    -4.06689833953857 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -4.8135270171394 * S_MntCard_Games + 0.74014018361062 * 
S_MntMagazines + -3.74343169911544 * S_NumCatalogPurchases + -3.72578643906049 * 
S_NumDealsPurchases + -1.23670196665382 * S_NumWebPurchases + 3.96046211665957 * S_RANGE_Frq + 
-0.10635173117595 * S_RANGE_Recency + -2.43795169539141 * S_RANGE_average_purchase + 
-4.06689833953857 * S_RANGE_campaign_acceptance ;
3690174   +   H15  =    -0.91298966186163 * S_MntCard_Games  +     0.00853606923314 *
3690175   +        S_MntMagazines  +    -1.15406179003289 * S_NumCatalogPurchases
3690176   +          +    -0.64080411107407 * S_NumDealsPurchases
3690177   +          +    -2.63713343912379 * S_NumWebPurchases
3690178   +          +    -0.93571265498126 * S_RANGE_Frq  +     2.15525444218734 *
3690179   +        S_RANGE_Recency  +    -1.03017813493002 * S_RANGE_average_purchase
3690180   +          +    -0.80377808950519 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -0.91298966186163 * S_MntCard_Games + 0.00853606923314 * 
S_MntMagazines + -1.15406179003289 * S_NumCatalogPurchases + -0.64080411107407 * 
S_NumDealsPurchases + -2.63713343912379 * S_NumWebPurchases + -0.93571265498126 * S_RANGE_Frq 
+ 2.15525444218734 * S_RANGE_Recency + -1.03017813493002 * S_RANGE_average_purchase + 
-0.80377808950519 * S_RANGE_campaign_acceptance ;
3690181   +   H16  =    -0.47934019611129 * S_MntCard_Games  +    -0.88570498784286 *
3690182   +        S_MntMagazines  +    -0.23164520132183 * S_NumCatalogPurchases
3690183   +          +    -0.24620095225319 * S_NumDealsPurchases
3690184   +          +     -0.1408344464005 * S_NumWebPurchases
3690185   +          +    -0.09718325184752 * S_RANGE_Frq  +     0.74745150771946 *
3690186   +        S_RANGE_Recency  +    -1.49865781221189 * S_RANGE_average_purchase
3690187   +          +     -0.6137430133391 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.47934019611129 * S_MntCard_Games + -0.88570498784286 * 
S_MntMagazines + -0.23164520132183 * S_NumCatalogPurchases + -0.24620095225319 * 
S_NumDealsPurchases + -0.1408344464005 * S_NumWebPurchases + -0.09718325184752 * S_RANGE_Frq + 
0.74745150771946 * S_RANGE_Recency + -1.49865781221189 * S_RANGE_average_purchase + 
-0.6137430133391 * S_RANGE_campaign_acceptance ;
3690188   +   H11  = H11  +     1.07516723252485 * Marital_StatusDivorced
3690189   +          +    -2.83159745491497 * Marital_StatusMarried
3690190   +          +     2.78325595468818 * Marital_StatusSingle
3690191   +          +    -2.21751295482324 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 1.07516723252485 * Marital_StatusDivorced + 
-2.83159745491497 * Marital_StatusMarried + 2.78325595468818 * Marital_StatusSingle + 
-2.21751295482324 * Marital_StatusTogether ;
3690192   +   H12  = H12  +    -6.44223931670744 * Marital_StatusDivorced
3690193   +          +     0.14537870699669 * Marital_StatusMarried
3690194   +          +    -0.34883750729053 * Marital_StatusSingle
3690195   +          +     3.28750329843119 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -6.44223931670744 * Marital_StatusDivorced + 
0.14537870699669 * Marital_StatusMarried + -0.34883750729053 * Marital_StatusSingle + 
3.28750329843119 * Marital_StatusTogether ;
3690196   +   H13  = H13  +    -1.71651602300424 * Marital_StatusDivorced
3690197   +          +     0.09983067084375 * Marital_StatusMarried
3690198   +          +    -0.36747783969903 * Marital_StatusSingle
3690199   +          +     0.72427006638514 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.71651602300424 * Marital_StatusDivorced + 
0.09983067084375 * Marital_StatusMarried + -0.36747783969903 * Marital_StatusSingle + 
0.72427006638514 * Marital_StatusTogether ;
3690200   +   H14  = H14  +     5.18606432818366 * Marital_StatusDivorced
3690201   +          +    -0.64633946044005 * Marital_StatusMarried
3690202   +          +     0.76037550531355 * Marital_StatusSingle
3690203   +          +    -3.09012147556829 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 5.18606432818366 * Marital_StatusDivorced + 
-0.64633946044005 * Marital_StatusMarried + 0.76037550531355 * Marital_StatusSingle + 
-3.09012147556829 * Marital_StatusTogether ;
3690204   +   H15  = H15  +     4.58695387888866 * Marital_StatusDivorced
3690205   +          +     1.79993337111784 * Marital_StatusMarried
3690206   +          +        2.02114250202 * Marital_StatusSingle
3690207   +          +     1.96470945021415 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 4.58695387888866 * Marital_StatusDivorced + 
1.79993337111784 * Marital_StatusMarried + 2.02114250202 * Marital_StatusSingle + 
1.96470945021415 * Marital_StatusTogether ;
3690208   +   H16  = H16  +    -0.11605317280313 * Marital_StatusDivorced
3690209   +          +    -0.48500807008578 * Marital_StatusMarried
3690210   +          +     1.48744714404026 * Marital_StatusSingle
3690211   +          +    -1.77253702964789 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.11605317280313 * Marital_StatusDivorced + 
-0.48500807008578 * Marital_StatusMarried + 1.48744714404026 * Marital_StatusSingle + 
-1.77253702964789 * Marital_StatusTogether ;
3690212   +   H11  =    -2.99766672524883 + H11 ;
MPRINT(SCORETABLES):   H11 = -2.99766672524883 + H11 ;
3690213   +   H12  =    -1.29040244970056 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.29040244970056 + H12 ;
3690214   +   H13  =     0.56272021442163 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.56272021442163 + H13 ;
3690215   +   H14  =     2.99786115876293 + H14 ;
MPRINT(SCORETABLES):   H14 = 2.99786115876293 + H14 ;
3690216   +   H15  =      2.5389089303019 + H15 ;
MPRINT(SCORETABLES):   H15 = 2.5389089303019 + H15 ;
3690217   +   H16  =    -0.98898377916628 + H16 ;
MPRINT(SCORETABLES):   H16 = -0.98898377916628 + H16 ;
3690218   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3690219   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3690220   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3690221   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3690222   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3690223   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3690224   +END;
MPRINT(SCORETABLES):   END;
3690225   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690226   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3690227   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3690228   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3690229   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3690230   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3690231   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3690232   +END;
MPRINT(SCORETABLES):   END;
3690233   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690234   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3690235   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690236   +
3690237   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3690238   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3690239   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3690240   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3690241   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3690242   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3690243   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3690244   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3690245   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3690246   +end;
MPRINT(SCORETABLES):   end;
3690247   +else do;
MPRINT(SCORETABLES):   else do;
3690248   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3690249   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3690250   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3690251   +   end;
MPRINT(SCORETABLES):   end;
3690252   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3690253   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3690254   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3690255   +   end;
MPRINT(SCORETABLES):   end;
3690256   +   else do;
MPRINT(SCORETABLES):   else do;
3690257   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3690258   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3690259   +   end;
MPRINT(SCORETABLES):   end;
3690260   +end;
MPRINT(SCORETABLES):   end;
3690261   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690262   +   P_DepVar1  =     4.47862511063634 * H11  +     4.74091197512304 * H12
3690263   +          +    -9.70116002225741 * H13  +    -3.26932535075891 * H14
3690264   +          +    -4.32422392288032 * H15  +    -5.52052703018753 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.47862511063634 * H11 + 4.74091197512304 * H12 + 
-9.70116002225741 * H13 + -3.26932535075891 * H14 + -4.32422392288032 * H15 + 
-5.52052703018753 * H16 ;
3690265   +   P_DepVar1  =     -4.7459559965517 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.7459559965517 + P_DepVar1 ;
3690266   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3690267   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3690268   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3690269   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3690270   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3690271   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3690272   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3690273   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3690274   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3690275   +END;
MPRINT(SCORETABLES):   END;
3690276   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690277   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3690278   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3690279   +END;
MPRINT(SCORETABLES):   END;
3690280   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3690281   +   P_DepVar1  =     0.13520871143375;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13520871143375;
3690282   +   P_DepVar0  =     0.86479128856624;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86479128856624;
3690283   +END;
MPRINT(SCORETABLES):   END;
3690284   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3690285   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3690286   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3690287   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3690288   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3690289   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3690290   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3690291   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690292   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3690293   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690294   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3690295   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3690296   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3690297   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3690298   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3690299   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3690300   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3690301   +END;
MPRINT(SCORETABLES):   END;
3690302   +********************************;
MPRINT(SCORETABLES):   ********************************;
3690303   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3690304   +********************************;
MPRINT(SCORETABLES):   ********************************;
3690305   +drop
3690306   +S_MntCard_Games
3690307   +S_MntMagazines
3690308   +S_NumCatalogPurchases
3690309   +S_NumDealsPurchases
3690310   +S_NumWebPurchases
3690311   +S_RANGE_Frq
3690312   +S_RANGE_Recency
3690313   +S_RANGE_average_purchase
3690314   +S_RANGE_campaign_acceptance
3690315   +H11
3690316   +H12
3690317   +H13
3690318   +H14
3690319   +H15
3690320   +H16
3690321   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3690322   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690323   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3690324   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690325   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690326   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3690327   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690328   +end;
MPRINT(SCORETABLES):   end;
3690329   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690330   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3690331   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690332   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690333   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3690334   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690335   +if (cv_var =3)  then do;
MPRINT(SCORETABLES):   if (cv_var =3) then do;
3690336   +_XVAL_=3;
MPRINT(SCORETABLES):   _XVAL_=3;
3690337   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690338   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3690339   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690340   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690341   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3690342   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690343   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3690344   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3690345   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3690346   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3690347   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3690348   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3690349   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3690350   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3690351   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3690352   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3690353   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3690354   +LENGTH _WARN_ $4
3690355   +      F_DepVar  $ 12
3690356   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3690357   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3690358   +
3690359   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3690360   +
3690361   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3690362   +
3690363   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3690364   +
3690365   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3690366   +
3690367   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3690368   +
3690369   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3690370   +
3690371   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3690372   +
3690373   +      label S_RANGE_campaign_acceptance =
3690374   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3690375   +
3690376   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3690377   +
3690378   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3690379   +
3690380   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3690381   +
3690382   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3690383   +
3690384   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3690385   +
3690386   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3690387   +
3690388   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3690389   +
3690390   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3690391   +
3690392   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3690393   +
3690394   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3690395   +
3690396   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3690397   +
3690398   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3690399   +
3690400   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3690401   +
3690402   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3690403   +
3690404   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3690405   +
3690406   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3690407   +
3690408   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3690409   +
3690410   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3690411   +
3690412   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3690413   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3690414   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3690415   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3690416   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3690417   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3690418   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3690419   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3690420   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3690421   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690422   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690423   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690424   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690425   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3690426   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690427   +end;
MPRINT(SCORETABLES):   end;
3690428   +else do;
MPRINT(SCORETABLES):   else do;
3690429   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3690430   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3690431   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3690432   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3690433   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3690434   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3690435   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3690436   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3690437   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690438   +         end;
MPRINT(SCORETABLES):   end;
3690439   +         else do;
MPRINT(SCORETABLES):   else do;
3690440   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3690441   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3690442   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690443   +            end;
MPRINT(SCORETABLES):   end;
3690444   +         end;
MPRINT(SCORETABLES):   end;
3690445   +      end;
MPRINT(SCORETABLES):   end;
3690446   +      else do;
MPRINT(SCORETABLES):   else do;
3690447   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3690448   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3690449   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690450   +         end;
MPRINT(SCORETABLES):   end;
3690451   +      end;
MPRINT(SCORETABLES):   end;
3690452   +   end;
MPRINT(SCORETABLES):   end;
3690453   +   else do;
MPRINT(SCORETABLES):   else do;
3690454   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3690455   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3690456   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690457   +      end;
MPRINT(SCORETABLES):   end;
3690458   +      else do;
MPRINT(SCORETABLES):   else do;
3690459   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3690460   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3690461   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3690462   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3690463   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3690464   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690465   +         end;
MPRINT(SCORETABLES):   end;
3690466   +      end;
MPRINT(SCORETABLES):   end;
3690467   +   end;
MPRINT(SCORETABLES):   end;
3690468   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3690469   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690470   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690471   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690472   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690473   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3690474   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690475   +   end;
MPRINT(SCORETABLES):   end;
3690476   +end;
MPRINT(SCORETABLES):   end;
3690477   +
3690478   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690479   +*** Checking missing input Interval
3690480   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3690481   +
3690482   +IF NMISS(
3690483   +   MntCard_Games ,
3690484   +   MntMagazines ,
3690485   +   NumCatalogPurchases ,
3690486   +   NumDealsPurchases ,
3690487   +   NumWebPurchases ,
3690488   +   RANGE_Frq ,
3690489   +   RANGE_Recency ,
3690490   +   RANGE_average_purchase ,
3690491   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3690492   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3690493   +
3690494   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690495   +END;
MPRINT(SCORETABLES):   END;
3690496   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690497   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3690498   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690499   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690500   +   S_MntCard_Games  =    -2.30904212357119 +      6.6128259130159 *
3690501   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30904212357119 + 6.6128259130159 * MntCard_Games ;
3690502   +   S_MntMagazines  =    -0.83238740556457 +     17.2867559070278 *
3690503   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83238740556457 + 17.2867559070278 * MntMagazines ;
3690504   +   S_NumCatalogPurchases  =    -3.13777787988529 +     13.5898301483557 *
3690505   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.13777787988529 + 13.5898301483557 * 
NumCatalogPurchases ;
3690506   +   S_NumDealsPurchases  =    -1.41566198989916 +     11.2100551713153 *
3690507   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41566198989916 + 11.2100551713153 * 
NumDealsPurchases ;
3690508   +   S_NumWebPurchases  =    -5.23286447719619 +     12.2594293185447 *
3690509   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23286447719619 + 12.2594293185447 * 
NumWebPurchases ;
3690510   +   S_RANGE_Frq  =    -1.36371107344636 +     4.21452272368577 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36371107344636 + 4.21452272368577 * RANGE_Frq ;
3690511   +   S_RANGE_Recency  =    -1.68321602612361 +     3.38058460082703 *
3690512   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.68321602612361 + 3.38058460082703 * RANGE_Recency ;
3690513   +   S_RANGE_average_purchase  =    -1.03516471680442 +     5.13991313823254 *
3690514   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03516471680442 + 5.13991313823254 * 
RANGE_average_purchase ;
3690515   +   S_RANGE_campaign_acceptance
3690516   +          =    -0.47836958972481 +      5.7378102778515 *
3690517   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47836958972481 + 5.7378102778515 * 
RANGE_campaign_acceptance ;
3690518   +END;
MPRINT(SCORETABLES):   END;
3690519   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690520   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3690521   +   ELSE S_MntCard_Games  =    -2.30904212357119 +      6.6128259130159 *
3690522   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30904212357119 + 6.6128259130159 * 
MntCard_Games ;
3690523   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3690524   +   ELSE S_MntMagazines  =    -0.83238740556457 +     17.2867559070278 *
3690525   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83238740556457 + 17.2867559070278 * 
MntMagazines ;
3690526   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3690527   +   ELSE S_NumCatalogPurchases
3690528   +          =    -3.13777787988529 +     13.5898301483557 * NumCatalogPurchases
3690529   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.13777787988529 + 13.5898301483557 * 
NumCatalogPurchases ;
3690530   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3690531   +   ELSE S_NumDealsPurchases  =    -1.41566198989916 +     11.2100551713153 *
3690532   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41566198989916 + 11.2100551713153 * 
NumDealsPurchases ;
3690533   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3690534   +   ELSE S_NumWebPurchases  =    -5.23286447719619 +     12.2594293185447 *
3690535   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23286447719619 + 12.2594293185447 * 
NumWebPurchases ;
3690536   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3690537   +   ELSE S_RANGE_Frq  =    -1.36371107344636 +     4.21452272368577 * RANGE_Frq
3690538   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36371107344636 + 4.21452272368577 * RANGE_Frq ;
3690539   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3690540   +   ELSE S_RANGE_Recency  =    -1.68321602612361 +     3.38058460082703 *
3690541   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.68321602612361 + 3.38058460082703 * 
RANGE_Recency ;
3690542   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3690543   +   ELSE S_RANGE_average_purchase
3690544   +          =    -1.03516471680442 +     5.13991313823254 *
3690545   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03516471680442 + 5.13991313823254 * 
RANGE_average_purchase ;
3690546   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3690547   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3690548   +   ELSE S_RANGE_campaign_acceptance
3690549   +          =    -0.47836958972481 +      5.7378102778515 *
3690550   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47836958972481 + 5.7378102778515 
* RANGE_campaign_acceptance ;
3690551   +END;
MPRINT(SCORETABLES):   END;
3690552   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690553   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3690554   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690555   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690556   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3690557   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690558   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690559   +   H11  =    -2.95505167414058 * S_MntCard_Games  +    -1.06304232732885 *
3690560   +        S_MntMagazines  +    -5.99972531238934 * S_NumCatalogPurchases
3690561   +          +    -2.82899462140312 * S_NumDealsPurchases
3690562   +          +    -1.32915760834547 * S_NumWebPurchases
3690563   +          +     1.43081344043679 * S_RANGE_Frq  +     1.78443066474801 *
3690564   +        S_RANGE_Recency  +    -0.32771079295847 * S_RANGE_average_purchase
3690565   +          +    -1.24463527081811 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -2.95505167414058 * S_MntCard_Games + -1.06304232732885 * 
S_MntMagazines + -5.99972531238934 * S_NumCatalogPurchases + -2.82899462140312 * 
S_NumDealsPurchases + -1.32915760834547 * S_NumWebPurchases + 1.43081344043679 * S_RANGE_Frq + 
1.78443066474801 * S_RANGE_Recency + -0.32771079295847 * S_RANGE_average_purchase + 
-1.24463527081811 * S_RANGE_campaign_acceptance ;
3690566   +   H12  =     0.86371220607468 * S_MntCard_Games  +    -1.33692424127769 *
3690567   +        S_MntMagazines  +    -0.68151163146001 * S_NumCatalogPurchases
3690568   +          +    -0.59285744915103 * S_NumDealsPurchases
3690569   +          +    -2.17257112571969 * S_NumWebPurchases
3690570   +          +     0.04614606809995 * S_RANGE_Frq  +     2.30288893020718 *
3690571   +        S_RANGE_Recency  +    -0.78174997761184 * S_RANGE_average_purchase
3690572   +          +    -0.98220880840839 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.86371220607468 * S_MntCard_Games + -1.33692424127769 * 
S_MntMagazines + -0.68151163146001 * S_NumCatalogPurchases + -0.59285744915103 * 
S_NumDealsPurchases + -2.17257112571969 * S_NumWebPurchases + 0.04614606809995 * S_RANGE_Frq + 
2.30288893020718 * S_RANGE_Recency + -0.78174997761184 * S_RANGE_average_purchase + 
-0.98220880840839 * S_RANGE_campaign_acceptance ;
3690573   +   H13  =    -1.02777250153548 * S_MntCard_Games  +    -0.46803624433839 *
3690574   +        S_MntMagazines  +    -0.46441778069159 * S_NumCatalogPurchases
3690575   +          +     0.11480836412629 * S_NumDealsPurchases
3690576   +          +    -1.20796283121144 * S_NumWebPurchases
3690577   +          +    -1.03282129684729 * S_RANGE_Frq  +      1.1260053068974 *
3690578   +        S_RANGE_Recency  +    -0.10802257746315 * S_RANGE_average_purchase
3690579   +          +    -0.82254658677281 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.02777250153548 * S_MntCard_Games + -0.46803624433839 * 
S_MntMagazines + -0.46441778069159 * S_NumCatalogPurchases + 0.11480836412629 * 
S_NumDealsPurchases + -1.20796283121144 * S_NumWebPurchases + -1.03282129684729 * S_RANGE_Frq 
+ 1.1260053068974 * S_RANGE_Recency + -0.10802257746315 * S_RANGE_average_purchase + 
-0.82254658677281 * S_RANGE_campaign_acceptance ;
3690580   +   H14  =     0.07861045362466 * S_MntCard_Games  +      2.0175206931951 *
3690581   +        S_MntMagazines  +    -0.60973478531319 * S_NumCatalogPurchases
3690582   +          +    -0.63371620177297 * S_NumDealsPurchases
3690583   +          +     1.06007581607092 * S_NumWebPurchases
3690584   +          +      2.0136263036472 * S_RANGE_Frq  +      0.8923964973425 *
3690585   +        S_RANGE_Recency  +     1.03398307098365 * S_RANGE_average_purchase
3690586   +          +    -0.26235883358685 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 0.07861045362466 * S_MntCard_Games + 2.0175206931951 * 
S_MntMagazines + -0.60973478531319 * S_NumCatalogPurchases + -0.63371620177297 * 
S_NumDealsPurchases + 1.06007581607092 * S_NumWebPurchases + 2.0136263036472 * S_RANGE_Frq + 
0.8923964973425 * S_RANGE_Recency + 1.03398307098365 * S_RANGE_average_purchase + 
-0.26235883358685 * S_RANGE_campaign_acceptance ;
3690587   +   H15  =     1.29014141322919 * S_MntCard_Games  +    -0.00168067555356 *
3690588   +        S_MntMagazines  +     0.73673457852217 * S_NumCatalogPurchases
3690589   +          +     0.98298161584248 * S_NumDealsPurchases
3690590   +          +     0.00668281413024 * S_NumWebPurchases
3690591   +          +    -0.13222432109522 * S_RANGE_Frq  +    -1.24504081946581 *
3690592   +        S_RANGE_Recency  +     0.07763819954742 * S_RANGE_average_purchase
3690593   +          +     1.00914707635703 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 1.29014141322919 * S_MntCard_Games + -0.00168067555356 * 
S_MntMagazines + 0.73673457852217 * S_NumCatalogPurchases + 0.98298161584248 * 
S_NumDealsPurchases + 0.00668281413024 * S_NumWebPurchases + -0.13222432109522 * S_RANGE_Frq + 
-1.24504081946581 * S_RANGE_Recency + 0.07763819954742 * S_RANGE_average_purchase + 
1.00914707635703 * S_RANGE_campaign_acceptance ;
3690594   +   H16  =     -2.1327218049542 * S_MntCard_Games  +     0.15274863898147 *
3690595   +        S_MntMagazines  +    -1.32537364504807 * S_NumCatalogPurchases
3690596   +          +     0.41522162544357 * S_NumDealsPurchases
3690597   +          +    -2.90382753566108 * S_NumWebPurchases
3690598   +          +     1.61639270925708 * S_RANGE_Frq  +     0.77373847007276 *
3690599   +        S_RANGE_Recency  +     1.37336101805986 * S_RANGE_average_purchase
3690600   +          +    -0.71578693261948 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.1327218049542 * S_MntCard_Games + 0.15274863898147 * 
S_MntMagazines + -1.32537364504807 * S_NumCatalogPurchases + 0.41522162544357 * 
S_NumDealsPurchases + -2.90382753566108 * S_NumWebPurchases + 1.61639270925708 * S_RANGE_Frq + 
0.77373847007276 * S_RANGE_Recency + 1.37336101805986 * S_RANGE_average_purchase + 
-0.71578693261948 * S_RANGE_campaign_acceptance ;
3690601   +   H11  = H11  +      0.9289257477825 * Marital_StatusDivorced
3690602   +          +     2.69919273767577 * Marital_StatusMarried
3690603   +          +    -1.54902700710472 * Marital_StatusSingle
3690604   +          +     -0.7456418069433 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.9289257477825 * Marital_StatusDivorced + 2.69919273767577 
* Marital_StatusMarried + -1.54902700710472 * Marital_StatusSingle + -0.7456418069433 * 
Marital_StatusTogether ;
3690605   +   H12  = H12  +    -0.71014720576129 * Marital_StatusDivorced
3690606   +          +     0.02823327055109 * Marital_StatusMarried
3690607   +          +     0.85980354456257 * Marital_StatusSingle
3690608   +          +     1.34172748302304 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.71014720576129 * Marital_StatusDivorced + 
0.02823327055109 * Marital_StatusMarried + 0.85980354456257 * Marital_StatusSingle + 
1.34172748302304 * Marital_StatusTogether ;
3690609   +   H13  = H13  +     -0.9104052126779 * Marital_StatusDivorced
3690610   +          +     0.52247124738254 * Marital_StatusMarried
3690611   +          +     0.01677358297997 * Marital_StatusSingle
3690612   +          +     0.17622013628399 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.9104052126779 * Marital_StatusDivorced + 
0.52247124738254 * Marital_StatusMarried + 0.01677358297997 * Marital_StatusSingle + 
0.17622013628399 * Marital_StatusTogether ;
3690613   +   H14  = H14  +     0.11452255571758 * Marital_StatusDivorced
3690614   +          +     0.55530048753438 * Marital_StatusMarried
3690615   +          +    -3.61034064915902 * Marital_StatusSingle
3690616   +          +      1.7177826644742 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.11452255571758 * Marital_StatusDivorced + 
0.55530048753438 * Marital_StatusMarried + -3.61034064915902 * Marital_StatusSingle + 
1.7177826644742 * Marital_StatusTogether ;
3690617   +   H15  = H15  +     0.00859956104574 * Marital_StatusDivorced
3690618   +          +    -0.15514614311855 * Marital_StatusMarried
3690619   +          +     -0.2804608470483 * Marital_StatusSingle
3690620   +          +     0.09520128371101 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 0.00859956104574 * Marital_StatusDivorced + 
-0.15514614311855 * Marital_StatusMarried + -0.2804608470483 * Marital_StatusSingle + 
0.09520128371101 * Marital_StatusTogether ;
3690621   +   H16  = H16  +    -1.07408346500561 * Marital_StatusDivorced
3690622   +          +     -1.1743085192678 * Marital_StatusMarried
3690623   +          +     1.55487607177835 * Marital_StatusSingle
3690624   +          +    -5.61832525391916 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -1.07408346500561 * Marital_StatusDivorced + 
-1.1743085192678 * Marital_StatusMarried + 1.55487607177835 * Marital_StatusSingle + 
-5.61832525391916 * Marital_StatusTogether ;
3690625   +   H11  =    -1.84030746164557 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.84030746164557 + H11 ;
3690626   +   H12  =      0.9249615963055 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.9249615963055 + H12 ;
3690627   +   H13  =     3.01562010492952 + H13 ;
MPRINT(SCORETABLES):   H13 = 3.01562010492952 + H13 ;
3690628   +   H14  =    -2.00357113991565 + H14 ;
MPRINT(SCORETABLES):   H14 = -2.00357113991565 + H14 ;
3690629   +   H15  =    -1.41843367137753 + H15 ;
MPRINT(SCORETABLES):   H15 = -1.41843367137753 + H15 ;
3690630   +   H16  =    -2.17877100497854 + H16 ;
MPRINT(SCORETABLES):   H16 = -2.17877100497854 + H16 ;
3690631   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3690632   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3690633   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3690634   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3690635   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3690636   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3690637   +END;
MPRINT(SCORETABLES):   END;
3690638   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690639   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3690640   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3690641   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3690642   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3690643   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3690644   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3690645   +END;
MPRINT(SCORETABLES):   END;
3690646   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690647   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3690648   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690649   +
3690650   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3690651   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3690652   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3690653   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3690654   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3690655   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3690656   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3690657   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3690658   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3690659   +end;
MPRINT(SCORETABLES):   end;
3690660   +else do;
MPRINT(SCORETABLES):   else do;
3690661   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3690662   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3690663   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3690664   +   end;
MPRINT(SCORETABLES):   end;
3690665   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3690666   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3690667   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3690668   +   end;
MPRINT(SCORETABLES):   end;
3690669   +   else do;
MPRINT(SCORETABLES):   else do;
3690670   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3690671   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3690672   +   end;
MPRINT(SCORETABLES):   end;
3690673   +end;
MPRINT(SCORETABLES):   end;
3690674   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690675   +   P_DepVar1  =    -3.64948492107646 * H11  +    -2.32576845142573 * H12
3690676   +          +    -6.89642539182004 * H13  +    -5.46931419660053 * H14
3690677   +          +     4.63372199131896 * H15  +     2.94197016905258 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.64948492107646 * H11 + -2.32576845142573 * H12 + 
-6.89642539182004 * H13 + -5.46931419660053 * H14 + 4.63372199131896 * H15 + 2.94197016905258 
* H16 ;
3690678   +   P_DepVar1  =    -4.70936827784884 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.70936827784884 + P_DepVar1 ;
3690679   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3690680   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3690681   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3690682   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3690683   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3690684   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3690685   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3690686   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3690687   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3690688   +END;
MPRINT(SCORETABLES):   END;
3690689   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690690   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3690691   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3690692   +END;
MPRINT(SCORETABLES):   END;
3690693   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3690694   +   P_DepVar1  =     0.13677950594693;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13677950594693;
3690695   +   P_DepVar0  =     0.86322049405306;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86322049405306;
3690696   +END;
MPRINT(SCORETABLES):   END;
3690697   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3690698   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3690699   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3690700   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3690701   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3690702   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3690703   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3690704   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690705   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3690706   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690707   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3690708   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3690709   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3690710   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3690711   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3690712   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3690713   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3690714   +END;
MPRINT(SCORETABLES):   END;
3690715   +********************************;
MPRINT(SCORETABLES):   ********************************;
3690716   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3690717   +********************************;
MPRINT(SCORETABLES):   ********************************;
3690718   +drop
3690719   +S_MntCard_Games
3690720   +S_MntMagazines
3690721   +S_NumCatalogPurchases
3690722   +S_NumDealsPurchases
3690723   +S_NumWebPurchases
3690724   +S_RANGE_Frq
3690725   +S_RANGE_Recency
3690726   +S_RANGE_average_purchase
3690727   +S_RANGE_campaign_acceptance
3690728   +H11
3690729   +H12
3690730   +H13
3690731   +H14
3690732   +H15
3690733   +H16
3690734   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3690735   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690736   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3690737   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690738   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690739   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3690740   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690741   +end;
MPRINT(SCORETABLES):   end;
3690742   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690743   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3690744   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690745   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690746   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3690747   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690748   +if (cv_var =4)  then do;
MPRINT(SCORETABLES):   if (cv_var =4) then do;
3690749   +_XVAL_=4;
MPRINT(SCORETABLES):   _XVAL_=4;
3690750   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3690751   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3690752   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3690753   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3690754   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3690755   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3690756   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3690757   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3690758   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3690759   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3690760   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3690761   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3690762   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3690763   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3690764   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3690765   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3690766   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3690767   +LENGTH _WARN_ $4
3690768   +      F_DepVar  $ 12
3690769   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3690770   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3690771   +
3690772   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3690773   +
3690774   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3690775   +
3690776   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3690777   +
3690778   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3690779   +
3690780   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3690781   +
3690782   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3690783   +
3690784   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3690785   +
3690786   +      label S_RANGE_campaign_acceptance =
3690787   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3690788   +
3690789   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3690790   +
3690791   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3690792   +
3690793   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3690794   +
3690795   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3690796   +
3690797   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3690798   +
3690799   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3690800   +
3690801   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3690802   +
3690803   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3690804   +
3690805   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3690806   +
3690807   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3690808   +
3690809   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3690810   +
3690811   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3690812   +
3690813   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3690814   +
3690815   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3690816   +
3690817   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3690818   +
3690819   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3690820   +
3690821   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3690822   +
3690823   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3690824   +
3690825   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3690826   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3690827   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3690828   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3690829   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3690830   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3690831   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3690832   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3690833   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3690834   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690835   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690836   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690837   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690838   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3690839   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690840   +end;
MPRINT(SCORETABLES):   end;
3690841   +else do;
MPRINT(SCORETABLES):   else do;
3690842   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3690843   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3690844   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3690845   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3690846   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3690847   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3690848   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3690849   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3690850   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690851   +         end;
MPRINT(SCORETABLES):   end;
3690852   +         else do;
MPRINT(SCORETABLES):   else do;
3690853   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3690854   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3690855   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690856   +            end;
MPRINT(SCORETABLES):   end;
3690857   +         end;
MPRINT(SCORETABLES):   end;
3690858   +      end;
MPRINT(SCORETABLES):   end;
3690859   +      else do;
MPRINT(SCORETABLES):   else do;
3690860   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3690861   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3690862   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690863   +         end;
MPRINT(SCORETABLES):   end;
3690864   +      end;
MPRINT(SCORETABLES):   end;
3690865   +   end;
MPRINT(SCORETABLES):   end;
3690866   +   else do;
MPRINT(SCORETABLES):   else do;
3690867   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3690868   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3690869   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690870   +      end;
MPRINT(SCORETABLES):   end;
3690871   +      else do;
MPRINT(SCORETABLES):   else do;
3690872   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3690873   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3690874   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3690875   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3690876   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3690877   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3690878   +         end;
MPRINT(SCORETABLES):   end;
3690879   +      end;
MPRINT(SCORETABLES):   end;
3690880   +   end;
MPRINT(SCORETABLES):   end;
3690881   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3690882   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3690883   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3690884   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3690885   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3690886   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3690887   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690888   +   end;
MPRINT(SCORETABLES):   end;
3690889   +end;
MPRINT(SCORETABLES):   end;
3690890   +
3690891   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690892   +*** Checking missing input Interval
3690893   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3690894   +
3690895   +IF NMISS(
3690896   +   MntCard_Games ,
3690897   +   MntMagazines ,
3690898   +   NumCatalogPurchases ,
3690899   +   NumDealsPurchases ,
3690900   +   NumWebPurchases ,
3690901   +   RANGE_Frq ,
3690902   +   RANGE_Recency ,
3690903   +   RANGE_average_purchase ,
3690904   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3690905   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3690906   +
3690907   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3690908   +END;
MPRINT(SCORETABLES):   END;
3690909   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690910   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3690911   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690912   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690913   +   S_MntCard_Games  =    -2.30422154155005 +      6.6278680694124 *
3690914   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30422154155005 + 6.6278680694124 * MntCard_Games ;
3690915   +   S_MntMagazines  =     -0.8344763645162 +     17.2941521870224 *
3690916   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8344763645162 + 17.2941521870224 * MntMagazines ;
3690917   +   S_NumCatalogPurchases  =    -3.11785831089977 +     13.5021615236546 *
3690918   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11785831089977 + 13.5021615236546 * 
NumCatalogPurchases ;
3690919   +   S_NumDealsPurchases  =    -1.42257823361345 +     11.2046223199835 *
3690920   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42257823361345 + 11.2046223199835 * 
NumDealsPurchases ;
3690921   +   S_NumWebPurchases  =    -5.26193636462499 +     12.3221807461613 *
3690922   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.26193636462499 + 12.3221807461613 * 
NumWebPurchases ;
3690923   +   S_RANGE_Frq  =    -1.36341176337234 +     4.23823722495677 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36341176337234 + 4.23823722495677 * RANGE_Frq ;
3690924   +   S_RANGE_Recency  =    -1.66797692962532 +     3.34934849143656 *
3690925   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66797692962532 + 3.34934849143656 * RANGE_Recency ;
3690926   +   S_RANGE_average_purchase  =    -1.03413177275915 +      5.1466959614103 *
3690927   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03413177275915 + 5.1466959614103 * 
RANGE_average_purchase ;
3690928   +   S_RANGE_campaign_acceptance
3690929   +          =    -0.47584930537711 +     5.81300674989767 *
3690930   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47584930537711 + 5.81300674989767 * 
RANGE_campaign_acceptance ;
3690931   +END;
MPRINT(SCORETABLES):   END;
3690932   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3690933   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3690934   +   ELSE S_MntCard_Games  =    -2.30422154155005 +      6.6278680694124 *
3690935   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30422154155005 + 6.6278680694124 * 
MntCard_Games ;
3690936   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3690937   +   ELSE S_MntMagazines  =     -0.8344763645162 +     17.2941521870224 *
3690938   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8344763645162 + 17.2941521870224 * 
MntMagazines ;
3690939   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3690940   +   ELSE S_NumCatalogPurchases
3690941   +          =    -3.11785831089977 +     13.5021615236546 * NumCatalogPurchases
3690942   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11785831089977 + 13.5021615236546 * 
NumCatalogPurchases ;
3690943   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3690944   +   ELSE S_NumDealsPurchases  =    -1.42257823361345 +     11.2046223199835 *
3690945   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42257823361345 + 11.2046223199835 * 
NumDealsPurchases ;
3690946   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3690947   +   ELSE S_NumWebPurchases  =    -5.26193636462499 +     12.3221807461613 *
3690948   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.26193636462499 + 12.3221807461613 * 
NumWebPurchases ;
3690949   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3690950   +   ELSE S_RANGE_Frq  =    -1.36341176337234 +     4.23823722495677 * RANGE_Frq
3690951   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36341176337234 + 4.23823722495677 * RANGE_Frq ;
3690952   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3690953   +   ELSE S_RANGE_Recency  =    -1.66797692962532 +     3.34934849143656 *
3690954   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66797692962532 + 3.34934849143656 * 
RANGE_Recency ;
3690955   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3690956   +   ELSE S_RANGE_average_purchase
3690957   +          =    -1.03413177275915 +      5.1466959614103 *
3690958   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03413177275915 + 5.1466959614103 * 
RANGE_average_purchase ;
3690959   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3690960   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3690961   +   ELSE S_RANGE_campaign_acceptance
3690962   +          =    -0.47584930537711 +     5.81300674989767 *
3690963   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47584930537711 + 5.81300674989767 
* RANGE_campaign_acceptance ;
3690964   +END;
MPRINT(SCORETABLES):   END;
3690965   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690966   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3690967   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690968   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690969   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3690970   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3690971   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3690972   +   H11  =     0.91284207245911 * S_MntCard_Games  +    -0.22567313809319 *
3690973   +        S_MntMagazines  +     1.18274578535738 * S_NumCatalogPurchases
3690974   +          +     3.28691449989261 * S_NumDealsPurchases
3690975   +          +     0.03192285860863 * S_NumWebPurchases
3690976   +          +     3.72543361582393 * S_RANGE_Frq  +    -0.90706035318826 *
3690977   +        S_RANGE_Recency  +    -0.09475845199781 * S_RANGE_average_purchase
3690978   +          +     -0.1601032043041 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.91284207245911 * S_MntCard_Games + -0.22567313809319 * 
S_MntMagazines + 1.18274578535738 * S_NumCatalogPurchases + 3.28691449989261 * 
S_NumDealsPurchases + 0.03192285860863 * S_NumWebPurchases + 3.72543361582393 * S_RANGE_Frq + 
-0.90706035318826 * S_RANGE_Recency + -0.09475845199781 * S_RANGE_average_purchase + 
-0.1601032043041 * S_RANGE_campaign_acceptance ;
3690979   +   H12  =     1.94789049342037 * S_MntCard_Games  +    -0.56350220121534 *
3690980   +        S_MntMagazines  +     1.37825614754161 * S_NumCatalogPurchases
3690981   +          +    -0.49958113443852 * S_NumDealsPurchases
3690982   +          +     -1.8569833025015 * S_NumWebPurchases
3690983   +          +    -0.84610515397833 * S_RANGE_Frq  +     2.25450449569914 *
3690984   +        S_RANGE_Recency  +     2.28933270164638 * S_RANGE_average_purchase
3690985   +          +     2.00327303776539 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.94789049342037 * S_MntCard_Games + -0.56350220121534 * 
S_MntMagazines + 1.37825614754161 * S_NumCatalogPurchases + -0.49958113443852 * 
S_NumDealsPurchases + -1.8569833025015 * S_NumWebPurchases + -0.84610515397833 * S_RANGE_Frq + 
2.25450449569914 * S_RANGE_Recency + 2.28933270164638 * S_RANGE_average_purchase + 
2.00327303776539 * S_RANGE_campaign_acceptance ;
3690986   +   H13  =     0.23389540591471 * S_MntCard_Games  +     0.17820581793556 *
3690987   +        S_MntMagazines  +    -0.07732288772876 * S_NumCatalogPurchases
3690988   +          +    -0.23329010361264 * S_NumDealsPurchases
3690989   +          +     0.32017381133571 * S_NumWebPurchases
3690990   +          +     0.51687997909497 * S_RANGE_Frq  +     0.57708470843014 *
3690991   +        S_RANGE_Recency  +     0.28928363298588 * S_RANGE_average_purchase
3690992   +          +     -0.1883351565619 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.23389540591471 * S_MntCard_Games + 0.17820581793556 * 
S_MntMagazines + -0.07732288772876 * S_NumCatalogPurchases + -0.23329010361264 * 
S_NumDealsPurchases + 0.32017381133571 * S_NumWebPurchases + 0.51687997909497 * S_RANGE_Frq + 
0.57708470843014 * S_RANGE_Recency + 0.28928363298588 * S_RANGE_average_purchase + 
-0.1883351565619 * S_RANGE_campaign_acceptance ;
3690993   +   H14  =    -3.15364731825312 * S_MntCard_Games  +     1.09205804153574 *
3690994   +        S_MntMagazines  +    -2.46347661430582 * S_NumCatalogPurchases
3690995   +          +    -3.11973773571659 * S_NumDealsPurchases
3690996   +          +    -0.93058757966105 * S_NumWebPurchases
3690997   +          +     1.99612065136971 * S_RANGE_Frq  +     1.02867361351393 *
3690998   +        S_RANGE_Recency  +     0.38096888133039 * S_RANGE_average_purchase
3690999   +          +    -3.14542006607837 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -3.15364731825312 * S_MntCard_Games + 1.09205804153574 * 
S_MntMagazines + -2.46347661430582 * S_NumCatalogPurchases + -3.11973773571659 * 
S_NumDealsPurchases + -0.93058757966105 * S_NumWebPurchases + 1.99612065136971 * S_RANGE_Frq + 
1.02867361351393 * S_RANGE_Recency + 0.38096888133039 * S_RANGE_average_purchase + 
-3.14542006607837 * S_RANGE_campaign_acceptance ;
3691000   +   H15  =     -0.9152276828823 * S_MntCard_Games  +    -0.17578422945174 *
3691001   +        S_MntMagazines  +    -0.37684358341253 * S_NumCatalogPurchases
3691002   +          +    -0.11156712787372 * S_NumDealsPurchases
3691003   +          +     -1.1667860387137 * S_NumWebPurchases
3691004   +          +    -0.65941203370269 * S_RANGE_Frq  +     1.06007633962357 *
3691005   +        S_RANGE_Recency  +     -0.1436315359999 * S_RANGE_average_purchase
3691006   +          +    -0.52624824891561 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -0.9152276828823 * S_MntCard_Games + -0.17578422945174 * 
S_MntMagazines + -0.37684358341253 * S_NumCatalogPurchases + -0.11156712787372 * 
S_NumDealsPurchases + -1.1667860387137 * S_NumWebPurchases + -0.65941203370269 * S_RANGE_Frq + 
1.06007633962357 * S_RANGE_Recency + -0.1436315359999 * S_RANGE_average_purchase + 
-0.52624824891561 * S_RANGE_campaign_acceptance ;
3691007   +   H16  =    -0.63757207857913 * S_MntCard_Games  +    -0.54074788256719 *
3691008   +        S_MntMagazines  +    -0.43507129763928 * S_NumCatalogPurchases
3691009   +          +    -0.46920319717486 * S_NumDealsPurchases
3691010   +          +    -0.19747260781984 * S_NumWebPurchases
3691011   +          +    -0.57481107993852 * S_RANGE_Frq  +     1.44202361345187 *
3691012   +        S_RANGE_Recency  +    -0.15725374503664 * S_RANGE_average_purchase
3691013   +          +    -0.62366473923329 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.63757207857913 * S_MntCard_Games + -0.54074788256719 * 
S_MntMagazines + -0.43507129763928 * S_NumCatalogPurchases + -0.46920319717486 * 
S_NumDealsPurchases + -0.19747260781984 * S_NumWebPurchases + -0.57481107993852 * S_RANGE_Frq 
+ 1.44202361345187 * S_RANGE_Recency + -0.15725374503664 * S_RANGE_average_purchase + 
-0.62366473923329 * S_RANGE_campaign_acceptance ;
3691014   +   H11  = H11  +     7.15124155487069 * Marital_StatusDivorced
3691015   +          +    -1.88524231767582 * Marital_StatusMarried
3691016   +          +     1.31741119180279 * Marital_StatusSingle
3691017   +          +    -5.39823311222065 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 7.15124155487069 * Marital_StatusDivorced + 
-1.88524231767582 * Marital_StatusMarried + 1.31741119180279 * Marital_StatusSingle + 
-5.39823311222065 * Marital_StatusTogether ;
3691018   +   H12  = H12  +     3.15986383277857 * Marital_StatusDivorced
3691019   +          +    -2.01806060572231 * Marital_StatusMarried
3691020   +          +    -2.47833603349442 * Marital_StatusSingle
3691021   +          +    -0.35118511076938 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 3.15986383277857 * Marital_StatusDivorced + 
-2.01806060572231 * Marital_StatusMarried + -2.47833603349442 * Marital_StatusSingle + 
-0.35118511076938 * Marital_StatusTogether ;
3691022   +   H13  = H13  +     -0.1917914698645 * Marital_StatusDivorced
3691023   +          +     0.06525382728497 * Marital_StatusMarried
3691024   +          +    -1.89158783012127 * Marital_StatusSingle
3691025   +          +     0.31410803497357 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.1917914698645 * Marital_StatusDivorced + 
0.06525382728497 * Marital_StatusMarried + -1.89158783012127 * Marital_StatusSingle + 
0.31410803497357 * Marital_StatusTogether ;
3691026   +   H14  = H14  +     0.26490423659515 * Marital_StatusDivorced
3691027   +          +     1.69552625617504 * Marital_StatusMarried
3691028   +          +     -0.0442199648571 * Marital_StatusSingle
3691029   +          +     0.83247867717596 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.26490423659515 * Marital_StatusDivorced + 
1.69552625617504 * Marital_StatusMarried + -0.0442199648571 * Marital_StatusSingle + 
0.83247867717596 * Marital_StatusTogether ;
3691030   +   H15  = H15  +     1.85214536171615 * Marital_StatusDivorced
3691031   +          +     1.39776952847088 * Marital_StatusMarried
3691032   +          +     1.42257307374575 * Marital_StatusSingle
3691033   +          +      1.3712142344865 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.85214536171615 * Marital_StatusDivorced + 
1.39776952847088 * Marital_StatusMarried + 1.42257307374575 * Marital_StatusSingle + 
1.3712142344865 * Marital_StatusTogether ;
3691034   +   H16  = H16  +    -0.11215606059729 * Marital_StatusDivorced
3691035   +          +    -0.40867195675279 * Marital_StatusMarried
3691036   +          +     0.76801357471932 * Marital_StatusSingle
3691037   +          +    -0.99532432306071 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.11215606059729 * Marital_StatusDivorced + 
-0.40867195675279 * Marital_StatusMarried + 0.76801357471932 * Marital_StatusSingle + 
-0.99532432306071 * Marital_StatusTogether ;
3691038   +   H11  =    -1.83375753020201 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.83375753020201 + H11 ;
3691039   +   H12  =    -2.35655025566663 + H12 ;
MPRINT(SCORETABLES):   H12 = -2.35655025566663 + H12 ;
3691040   +   H13  =    -0.10592871888748 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.10592871888748 + H13 ;
3691041   +   H14  =     2.69929989100261 + H14 ;
MPRINT(SCORETABLES):   H14 = 2.69929989100261 + H14 ;
3691042   +   H15  =     1.34932485055204 + H15 ;
MPRINT(SCORETABLES):   H15 = 1.34932485055204 + H15 ;
3691043   +   H16  =     0.20452832340196 + H16 ;
MPRINT(SCORETABLES):   H16 = 0.20452832340196 + H16 ;
3691044   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3691045   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3691046   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3691047   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3691048   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3691049   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3691050   +END;
MPRINT(SCORETABLES):   END;
3691051   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691052   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3691053   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3691054   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3691055   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3691056   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3691057   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3691058   +END;
MPRINT(SCORETABLES):   END;
3691059   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691060   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3691061   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691062   +
3691063   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3691064   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3691065   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3691066   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3691067   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3691068   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3691069   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3691070   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691071   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691072   +end;
MPRINT(SCORETABLES):   end;
3691073   +else do;
MPRINT(SCORETABLES):   else do;
3691074   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3691075   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3691076   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3691077   +   end;
MPRINT(SCORETABLES):   end;
3691078   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3691079   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3691080   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3691081   +   end;
MPRINT(SCORETABLES):   end;
3691082   +   else do;
MPRINT(SCORETABLES):   else do;
3691083   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691084   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691085   +   end;
MPRINT(SCORETABLES):   end;
3691086   +end;
MPRINT(SCORETABLES):   end;
3691087   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691088   +   P_DepVar1  =      1.9258163171631 * H11  +     3.99793329392414 * H12
3691089   +          +    -7.43443937629739 * H13  +    -2.51597459432791 * H14
3691090   +          +    -6.63113572555693 * H15  +    -6.76341291259813 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 1.9258163171631 * H11 + 3.99793329392414 * H12 + 
-7.43443937629739 * H13 + -2.51597459432791 * H14 + -6.63113572555693 * H15 + 
-6.76341291259813 * H16 ;
3691091   +   P_DepVar1  =    -4.66424466964479 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.66424466964479 + P_DepVar1 ;
3691092   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3691093   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3691094   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3691095   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3691096   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3691097   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3691098   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3691099   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3691100   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3691101   +END;
MPRINT(SCORETABLES):   END;
3691102   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691103   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3691104   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3691105   +END;
MPRINT(SCORETABLES):   END;
3691106   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3691107   +   P_DepVar1  =     0.13424036281179;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13424036281179;
3691108   +   P_DepVar0  =      0.8657596371882;
MPRINT(SCORETABLES):   P_DepVar0 = 0.8657596371882;
3691109   +END;
MPRINT(SCORETABLES):   END;
3691110   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3691111   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3691112   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3691113   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3691114   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3691115   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3691116   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3691117   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691118   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3691119   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691120   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3691121   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3691122   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3691123   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3691124   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3691125   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3691126   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3691127   +END;
MPRINT(SCORETABLES):   END;
3691128   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691129   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3691130   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691131   +drop
3691132   +S_MntCard_Games
3691133   +S_MntMagazines
3691134   +S_NumCatalogPurchases
3691135   +S_NumDealsPurchases
3691136   +S_NumWebPurchases
3691137   +S_RANGE_Frq
3691138   +S_RANGE_Recency
3691139   +S_RANGE_average_purchase
3691140   +S_RANGE_campaign_acceptance
3691141   +H11
3691142   +H12
3691143   +H13
3691144   +H14
3691145   +H15
3691146   +H16
3691147   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3691148   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691149   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3691150   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691151   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691152   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3691153   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691154   +end;
MPRINT(SCORETABLES):   end;
3691155   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691156   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3691157   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691158   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691159   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3691160   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691161   +if (cv_var =5)  then do;
MPRINT(SCORETABLES):   if (cv_var =5) then do;
3691162   +_XVAL_=5;
MPRINT(SCORETABLES):   _XVAL_=5;
3691163   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691164   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3691165   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691166   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691167   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3691168   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691169   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691170   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3691171   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691172   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3691173   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3691174   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3691175   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3691176   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3691177   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3691178   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3691179   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3691180   +LENGTH _WARN_ $4
3691181   +      F_DepVar  $ 12
3691182   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3691183   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3691184   +
3691185   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3691186   +
3691187   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3691188   +
3691189   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3691190   +
3691191   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3691192   +
3691193   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3691194   +
3691195   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3691196   +
3691197   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3691198   +
3691199   +      label S_RANGE_campaign_acceptance =
3691200   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3691201   +
3691202   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3691203   +
3691204   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3691205   +
3691206   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3691207   +
3691208   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3691209   +
3691210   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3691211   +
3691212   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3691213   +
3691214   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3691215   +
3691216   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3691217   +
3691218   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3691219   +
3691220   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3691221   +
3691222   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3691223   +
3691224   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3691225   +
3691226   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3691227   +
3691228   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3691229   +
3691230   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3691231   +
3691232   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3691233   +
3691234   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3691235   +
3691236   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3691237   +
3691238   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3691239   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3691240   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3691241   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3691242   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3691243   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3691244   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3691245   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3691246   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3691247   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3691248   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3691249   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3691250   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3691251   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3691252   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691253   +end;
MPRINT(SCORETABLES):   end;
3691254   +else do;
MPRINT(SCORETABLES):   else do;
3691255   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3691256   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3691257   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3691258   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3691259   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3691260   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3691261   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3691262   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3691263   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691264   +         end;
MPRINT(SCORETABLES):   end;
3691265   +         else do;
MPRINT(SCORETABLES):   else do;
3691266   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3691267   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3691268   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691269   +            end;
MPRINT(SCORETABLES):   end;
3691270   +         end;
MPRINT(SCORETABLES):   end;
3691271   +      end;
MPRINT(SCORETABLES):   end;
3691272   +      else do;
MPRINT(SCORETABLES):   else do;
3691273   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3691274   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3691275   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691276   +         end;
MPRINT(SCORETABLES):   end;
3691277   +      end;
MPRINT(SCORETABLES):   end;
3691278   +   end;
MPRINT(SCORETABLES):   end;
3691279   +   else do;
MPRINT(SCORETABLES):   else do;
3691280   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3691281   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3691282   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691283   +      end;
MPRINT(SCORETABLES):   end;
3691284   +      else do;
MPRINT(SCORETABLES):   else do;
3691285   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3691286   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3691287   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3691288   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3691289   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3691290   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691291   +         end;
MPRINT(SCORETABLES):   end;
3691292   +      end;
MPRINT(SCORETABLES):   end;
3691293   +   end;
MPRINT(SCORETABLES):   end;
3691294   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3691295   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3691296   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3691297   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3691298   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3691299   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3691300   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691301   +   end;
MPRINT(SCORETABLES):   end;
3691302   +end;
MPRINT(SCORETABLES):   end;
3691303   +
3691304   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691305   +*** Checking missing input Interval
3691306   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3691307   +
3691308   +IF NMISS(
3691309   +   MntCard_Games ,
3691310   +   MntMagazines ,
3691311   +   NumCatalogPurchases ,
3691312   +   NumDealsPurchases ,
3691313   +   NumWebPurchases ,
3691314   +   RANGE_Frq ,
3691315   +   RANGE_Recency ,
3691316   +   RANGE_average_purchase ,
3691317   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3691318   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3691319   +
3691320   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691321   +END;
MPRINT(SCORETABLES):   END;
3691322   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691323   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3691324   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691325   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691326   +   S_MntCard_Games  =    -2.32271345418194 +     6.59498219040202 *
3691327   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32271345418194 + 6.59498219040202 * MntCard_Games ;
3691328   +   S_MntMagazines  =    -0.83801022618829 +     17.3248167471497 *
3691329   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83801022618829 + 17.3248167471497 * MntMagazines ;
3691330   +   S_NumCatalogPurchases  =    -3.10282176666347 +     13.3977042611872 *
3691331   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10282176666347 + 13.3977042611872 * 
NumCatalogPurchases ;
3691332   +   S_NumDealsPurchases  =     -1.4060514802267 +     11.1690301040746 *
3691333   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.4060514802267 + 11.1690301040746 * 
NumDealsPurchases ;
3691334   +   S_NumWebPurchases  =    -5.19000777786962 +     12.1809156294621 *
3691335   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.19000777786962 + 12.1809156294621 * 
NumWebPurchases ;
3691336   +   S_RANGE_Frq  =    -1.36719960797418 +     4.20388118037654 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36719960797418 + 4.20388118037654 * RANGE_Frq ;
3691337   +   S_RANGE_Recency  =     -1.6722479537157 +     3.36019552383506 *
3691338   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6722479537157 + 3.36019552383506 * RANGE_Recency ;
3691339   +   S_RANGE_average_purchase  =    -1.04571005422691 +      5.1535815325542 *
3691340   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04571005422691 + 5.1535815325542 * 
RANGE_average_purchase ;
3691341   +   S_RANGE_campaign_acceptance
3691342   +          =    -0.47597115058406 +     5.76134310294891 *
3691343   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47597115058406 + 5.76134310294891 * 
RANGE_campaign_acceptance ;
3691344   +END;
MPRINT(SCORETABLES):   END;
3691345   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691346   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3691347   +   ELSE S_MntCard_Games  =    -2.32271345418194 +     6.59498219040202 *
3691348   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32271345418194 + 6.59498219040202 * 
MntCard_Games ;
3691349   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3691350   +   ELSE S_MntMagazines  =    -0.83801022618829 +     17.3248167471497 *
3691351   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83801022618829 + 17.3248167471497 * 
MntMagazines ;
3691352   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3691353   +   ELSE S_NumCatalogPurchases
3691354   +          =    -3.10282176666347 +     13.3977042611872 * NumCatalogPurchases
3691355   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10282176666347 + 13.3977042611872 * 
NumCatalogPurchases ;
3691356   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3691357   +   ELSE S_NumDealsPurchases  =     -1.4060514802267 +     11.1690301040746 *
3691358   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.4060514802267 + 11.1690301040746 * 
NumDealsPurchases ;
3691359   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3691360   +   ELSE S_NumWebPurchases  =    -5.19000777786962 +     12.1809156294621 *
3691361   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.19000777786962 + 12.1809156294621 * 
NumWebPurchases ;
3691362   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3691363   +   ELSE S_RANGE_Frq  =    -1.36719960797418 +     4.20388118037654 * RANGE_Frq
3691364   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36719960797418 + 4.20388118037654 * RANGE_Frq ;
3691365   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3691366   +   ELSE S_RANGE_Recency  =     -1.6722479537157 +     3.36019552383506 *
3691367   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6722479537157 + 3.36019552383506 * 
RANGE_Recency ;
3691368   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3691369   +   ELSE S_RANGE_average_purchase
3691370   +          =    -1.04571005422691 +      5.1535815325542 *
3691371   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04571005422691 + 5.1535815325542 * 
RANGE_average_purchase ;
3691372   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3691373   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3691374   +   ELSE S_RANGE_campaign_acceptance
3691375   +          =    -0.47597115058406 +     5.76134310294891 *
3691376   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47597115058406 + 5.76134310294891 
* RANGE_campaign_acceptance ;
3691377   +END;
MPRINT(SCORETABLES):   END;
3691378   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691379   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3691380   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691381   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691382   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3691383   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691384   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691385   +   H11  =     0.15353582224336 * S_MntCard_Games  +     0.16155031301006 *
3691386   +        S_MntMagazines  +     0.10156786617885 * S_NumCatalogPurchases
3691387   +          +     0.33999854773452 * S_NumDealsPurchases
3691388   +          +    -0.26446141557205 * S_NumWebPurchases
3691389   +          +     0.12152654351815 * S_RANGE_Frq  +    -0.38272116443659 *
3691390   +        S_RANGE_Recency  +     0.43716064130358 * S_RANGE_average_purchase
3691391   +          +     0.31429563319359 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.15353582224336 * S_MntCard_Games + 0.16155031301006 * 
S_MntMagazines + 0.10156786617885 * S_NumCatalogPurchases + 0.33999854773452 * 
S_NumDealsPurchases + -0.26446141557205 * S_NumWebPurchases + 0.12152654351815 * S_RANGE_Frq + 
-0.38272116443659 * S_RANGE_Recency + 0.43716064130358 * S_RANGE_average_purchase + 
0.31429563319359 * S_RANGE_campaign_acceptance ;
3691392   +   H12  =     -0.5985274432867 * S_MntCard_Games  +    -0.64911768590503 *
3691393   +        S_MntMagazines  +     -1.6549877899742 * S_NumCatalogPurchases
3691394   +          +    -1.29258529970734 * S_NumDealsPurchases
3691395   +          +     0.16813959489549 * S_NumWebPurchases
3691396   +          +    -0.86274747594498 * S_RANGE_Frq  +      2.1508841609998 *
3691397   +        S_RANGE_Recency  +     0.45497695838815 * S_RANGE_average_purchase
3691398   +          +     0.41959954857181 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.5985274432867 * S_MntCard_Games + -0.64911768590503 * 
S_MntMagazines + -1.6549877899742 * S_NumCatalogPurchases + -1.29258529970734 * 
S_NumDealsPurchases + 0.16813959489549 * S_NumWebPurchases + -0.86274747594498 * S_RANGE_Frq + 
2.1508841609998 * S_RANGE_Recency + 0.45497695838815 * S_RANGE_average_purchase + 
0.41959954857181 * S_RANGE_campaign_acceptance ;
3691399   +   H13  =    -0.38577914060185 * S_MntCard_Games  +     2.23785677864842 *
3691400   +        S_MntMagazines  +    -1.65062787396065 * S_NumCatalogPurchases
3691401   +          +     1.05910567303209 * S_NumDealsPurchases
3691402   +          +    -2.13002975683227 * S_NumWebPurchases
3691403   +          +     0.43792639362235 * S_RANGE_Frq  +     2.05170880694035 *
3691404   +        S_RANGE_Recency  +     2.30173502934687 * S_RANGE_average_purchase
3691405   +          +    -0.66843934093585 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.38577914060185 * S_MntCard_Games + 2.23785677864842 * 
S_MntMagazines + -1.65062787396065 * S_NumCatalogPurchases + 1.05910567303209 * 
S_NumDealsPurchases + -2.13002975683227 * S_NumWebPurchases + 0.43792639362235 * S_RANGE_Frq + 
2.05170880694035 * S_RANGE_Recency + 2.30173502934687 * S_RANGE_average_purchase + 
-0.66843934093585 * S_RANGE_campaign_acceptance ;
3691406   +   H14  =    -0.55549587273337 * S_MntCard_Games  +     0.04609980162624 *
3691407   +        S_MntMagazines  +    -1.16960588093441 * S_NumCatalogPurchases
3691408   +          +    -0.31309889171597 * S_NumDealsPurchases
3691409   +          +    -0.49450292506451 * S_NumWebPurchases
3691410   +          +     0.39159955266982 * S_RANGE_Frq  +     1.46152945084444 *
3691411   +        S_RANGE_Recency  +    -3.02007150303487 * S_RANGE_average_purchase
3691412   +          +     -0.5489952895927 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.55549587273337 * S_MntCard_Games + 0.04609980162624 * 
S_MntMagazines + -1.16960588093441 * S_NumCatalogPurchases + -0.31309889171597 * 
S_NumDealsPurchases + -0.49450292506451 * S_NumWebPurchases + 0.39159955266982 * S_RANGE_Frq + 
1.46152945084444 * S_RANGE_Recency + -3.02007150303487 * S_RANGE_average_purchase + 
-0.5489952895927 * S_RANGE_campaign_acceptance ;
3691413   +   H15  =    -0.46603198398039 * S_MntCard_Games  +    -1.33019261455143 *
3691414   +        S_MntMagazines  +     2.12108237738343 * S_NumCatalogPurchases
3691415   +          +    -0.13406068674301 * S_NumDealsPurchases
3691416   +          +    -1.13929499116037 * S_NumWebPurchases
3691417   +          +     4.28084226388507 * S_RANGE_Frq  +     -2.3473707989169 *
3691418   +        S_RANGE_Recency  +     0.91571080883706 * S_RANGE_average_purchase
3691419   +          +    -0.34349746885829 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -0.46603198398039 * S_MntCard_Games + -1.33019261455143 * 
S_MntMagazines + 2.12108237738343 * S_NumCatalogPurchases + -0.13406068674301 * 
S_NumDealsPurchases + -1.13929499116037 * S_NumWebPurchases + 4.28084226388507 * S_RANGE_Frq + 
-2.3473707989169 * S_RANGE_Recency + 0.91571080883706 * S_RANGE_average_purchase + 
-0.34349746885829 * S_RANGE_campaign_acceptance ;
3691420   +   H16  =    -1.72175297342015 * S_MntCard_Games  +     0.23493503667476 *
3691421   +        S_MntMagazines  +    -0.75047837688419 * S_NumCatalogPurchases
3691422   +          +    -0.78069601468643 * S_NumDealsPurchases
3691423   +          +    -1.48981850035405 * S_NumWebPurchases
3691424   +          +     0.01958311839832 * S_RANGE_Frq  +     1.03760430233716 *
3691425   +        S_RANGE_Recency  +     0.69336256270176 * S_RANGE_average_purchase
3691426   +          +    -1.57765928728057 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -1.72175297342015 * S_MntCard_Games + 0.23493503667476 * 
S_MntMagazines + -0.75047837688419 * S_NumCatalogPurchases + -0.78069601468643 * 
S_NumDealsPurchases + -1.48981850035405 * S_NumWebPurchases + 0.01958311839832 * S_RANGE_Frq + 
1.03760430233716 * S_RANGE_Recency + 0.69336256270176 * S_RANGE_average_purchase + 
-1.57765928728057 * S_RANGE_campaign_acceptance ;
3691427   +   H11  = H11  +     0.61681978524162 * Marital_StatusDivorced
3691428   +          +     0.04419762326094 * Marital_StatusMarried
3691429   +          +    -0.10117308155981 * Marital_StatusSingle
3691430   +          +    -0.46218376107589 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.61681978524162 * Marital_StatusDivorced + 
0.04419762326094 * Marital_StatusMarried + -0.10117308155981 * Marital_StatusSingle + 
-0.46218376107589 * Marital_StatusTogether ;
3691431   +   H12  = H12  +     -2.8838454743364 * Marital_StatusDivorced
3691432   +          +       1.558456697162 * Marital_StatusMarried
3691433   +          +    -0.52313919975169 * Marital_StatusSingle
3691434   +          +     0.03223500872552 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -2.8838454743364 * Marital_StatusDivorced + 1.558456697162 
* Marital_StatusMarried + -0.52313919975169 * Marital_StatusSingle + 0.03223500872552 * 
Marital_StatusTogether ;
3691435   +   H13  = H13  +     2.71213795805946 * Marital_StatusDivorced
3691436   +          +     2.14432484576925 * Marital_StatusMarried
3691437   +          +    -3.48649744222468 * Marital_StatusSingle
3691438   +          +     2.68583384144893 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 2.71213795805946 * Marital_StatusDivorced + 
2.14432484576925 * Marital_StatusMarried + -3.48649744222468 * Marital_StatusSingle + 
2.68583384144893 * Marital_StatusTogether ;
3691439   +   H14  = H14  +       0.257789937205 * Marital_StatusDivorced
3691440   +          +     0.12949216205192 * Marital_StatusMarried
3691441   +          +     0.27693138711895 * Marital_StatusSingle
3691442   +          +     0.10829793658142 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.257789937205 * Marital_StatusDivorced + 0.12949216205192 
* Marital_StatusMarried + 0.27693138711895 * Marital_StatusSingle + 0.10829793658142 * 
Marital_StatusTogether ;
3691443   +   H15  = H15  +     1.84078644271398 * Marital_StatusDivorced
3691444   +          +    -5.36270989481538 * Marital_StatusMarried
3691445   +          +     1.75379453647458 * Marital_StatusSingle
3691446   +          +     0.36768777191807 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.84078644271398 * Marital_StatusDivorced + 
-5.36270989481538 * Marital_StatusMarried + 1.75379453647458 * Marital_StatusSingle + 
0.36768777191807 * Marital_StatusTogether ;
3691447   +   H16  = H16  +     0.89503709275365 * Marital_StatusDivorced
3691448   +          +     1.68576703173994 * Marital_StatusMarried
3691449   +          +    -0.93652248173525 * Marital_StatusSingle
3691450   +          +    -0.77401216982733 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.89503709275365 * Marital_StatusDivorced + 
1.68576703173994 * Marital_StatusMarried + -0.93652248173525 * Marital_StatusSingle + 
-0.77401216982733 * Marital_StatusTogether ;
3691451   +   H11  =    -1.26680420180895 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.26680420180895 + H11 ;
3691452   +   H12  =    -1.15393908300368 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.15393908300368 + H12 ;
3691453   +   H13  =    -1.04544365456473 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.04544365456473 + H13 ;
3691454   +   H14  =    -0.66343010255008 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.66343010255008 + H14 ;
3691455   +   H15  =     1.89086776259694 + H15 ;
MPRINT(SCORETABLES):   H15 = 1.89086776259694 + H15 ;
3691456   +   H16  =     2.18621244153883 + H16 ;
MPRINT(SCORETABLES):   H16 = 2.18621244153883 + H16 ;
3691457   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3691458   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3691459   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3691460   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3691461   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3691462   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3691463   +END;
MPRINT(SCORETABLES):   END;
3691464   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691465   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3691466   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3691467   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3691468   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3691469   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3691470   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3691471   +END;
MPRINT(SCORETABLES):   END;
3691472   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691473   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3691474   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691475   +
3691476   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3691477   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3691478   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3691479   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3691480   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3691481   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3691482   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3691483   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691484   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691485   +end;
MPRINT(SCORETABLES):   end;
3691486   +else do;
MPRINT(SCORETABLES):   else do;
3691487   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3691488   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3691489   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3691490   +   end;
MPRINT(SCORETABLES):   end;
3691491   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3691492   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3691493   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3691494   +   end;
MPRINT(SCORETABLES):   end;
3691495   +   else do;
MPRINT(SCORETABLES):   else do;
3691496   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691497   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691498   +   end;
MPRINT(SCORETABLES):   end;
3691499   +end;
MPRINT(SCORETABLES):   end;
3691500   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691501   +   P_DepVar1  =     10.3757439346071 * H11  +    -3.13704325739536 * H12
3691502   +          +    -3.83653685974027 * H13  +    -5.90498146157377 * H14
3691503   +          +     -2.9672770632419 * H15  +    -3.85453388563746 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 10.3757439346071 * H11 + -3.13704325739536 * H12 + 
-3.83653685974027 * H13 + -5.90498146157377 * H14 + -2.9672770632419 * H15 + -3.85453388563746 
* H16 ;
3691504   +   P_DepVar1  =    -3.75994948005168 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.75994948005168 + P_DepVar1 ;
3691505   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3691506   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3691507   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3691508   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3691509   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3691510   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3691511   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3691512   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3691513   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3691514   +END;
MPRINT(SCORETABLES):   END;
3691515   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691516   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3691517   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3691518   +END;
MPRINT(SCORETABLES):   END;
3691519   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3691520   +   P_DepVar1  =     0.13935542442124;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13935542442124;
3691521   +   P_DepVar0  =     0.86064457557875;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86064457557875;
3691522   +END;
MPRINT(SCORETABLES):   END;
3691523   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3691524   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3691525   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3691526   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3691527   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3691528   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3691529   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3691530   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691531   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3691532   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691533   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3691534   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3691535   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3691536   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3691537   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3691538   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3691539   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3691540   +END;
MPRINT(SCORETABLES):   END;
3691541   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691542   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3691543   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691544   +drop
3691545   +S_MntCard_Games
3691546   +S_MntMagazines
3691547   +S_NumCatalogPurchases
3691548   +S_NumDealsPurchases
3691549   +S_NumWebPurchases
3691550   +S_RANGE_Frq
3691551   +S_RANGE_Recency
3691552   +S_RANGE_average_purchase
3691553   +S_RANGE_campaign_acceptance
3691554   +H11
3691555   +H12
3691556   +H13
3691557   +H14
3691558   +H15
3691559   +H16
3691560   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3691561   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691562   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3691563   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691564   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691565   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3691566   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691567   +end;
MPRINT(SCORETABLES):   end;
3691568   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691569   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3691570   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691571   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691572   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3691573   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691574   +if (cv_var =6)  then do;
MPRINT(SCORETABLES):   if (cv_var =6) then do;
3691575   +_XVAL_=6;
MPRINT(SCORETABLES):   _XVAL_=6;
3691576   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691577   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3691578   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691579   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691580   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3691581   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691582   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691583   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3691584   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691585   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3691586   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3691587   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3691588   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3691589   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3691590   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3691591   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3691592   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3691593   +LENGTH _WARN_ $4
3691594   +      F_DepVar  $ 12
3691595   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3691596   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3691597   +
3691598   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3691599   +
3691600   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3691601   +
3691602   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3691603   +
3691604   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3691605   +
3691606   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3691607   +
3691608   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3691609   +
3691610   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3691611   +
3691612   +      label S_RANGE_campaign_acceptance =
3691613   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3691614   +
3691615   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3691616   +
3691617   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3691618   +
3691619   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3691620   +
3691621   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3691622   +
3691623   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3691624   +
3691625   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3691626   +
3691627   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3691628   +
3691629   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3691630   +
3691631   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3691632   +
3691633   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3691634   +
3691635   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3691636   +
3691637   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3691638   +
3691639   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3691640   +
3691641   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3691642   +
3691643   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3691644   +
3691645   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3691646   +
3691647   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3691648   +
3691649   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3691650   +
3691651   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3691652   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3691653   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3691654   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3691655   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3691656   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3691657   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3691658   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3691659   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3691660   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3691661   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3691662   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3691663   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3691664   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3691665   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691666   +end;
MPRINT(SCORETABLES):   end;
3691667   +else do;
MPRINT(SCORETABLES):   else do;
3691668   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3691669   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3691670   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3691671   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3691672   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3691673   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3691674   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3691675   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3691676   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691677   +         end;
MPRINT(SCORETABLES):   end;
3691678   +         else do;
MPRINT(SCORETABLES):   else do;
3691679   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3691680   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3691681   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691682   +            end;
MPRINT(SCORETABLES):   end;
3691683   +         end;
MPRINT(SCORETABLES):   end;
3691684   +      end;
MPRINT(SCORETABLES):   end;
3691685   +      else do;
MPRINT(SCORETABLES):   else do;
3691686   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3691687   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3691688   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691689   +         end;
MPRINT(SCORETABLES):   end;
3691690   +      end;
MPRINT(SCORETABLES):   end;
3691691   +   end;
MPRINT(SCORETABLES):   end;
3691692   +   else do;
MPRINT(SCORETABLES):   else do;
3691693   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3691694   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3691695   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691696   +      end;
MPRINT(SCORETABLES):   end;
3691697   +      else do;
MPRINT(SCORETABLES):   else do;
3691698   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3691699   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3691700   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3691701   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3691702   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3691703   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3691704   +         end;
MPRINT(SCORETABLES):   end;
3691705   +      end;
MPRINT(SCORETABLES):   end;
3691706   +   end;
MPRINT(SCORETABLES):   end;
3691707   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3691708   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3691709   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3691710   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3691711   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3691712   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3691713   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691714   +   end;
MPRINT(SCORETABLES):   end;
3691715   +end;
MPRINT(SCORETABLES):   end;
3691716   +
3691717   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691718   +*** Checking missing input Interval
3691719   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3691720   +
3691721   +IF NMISS(
3691722   +   MntCard_Games ,
3691723   +   MntMagazines ,
3691724   +   NumCatalogPurchases ,
3691725   +   NumDealsPurchases ,
3691726   +   NumWebPurchases ,
3691727   +   RANGE_Frq ,
3691728   +   RANGE_Recency ,
3691729   +   RANGE_average_purchase ,
3691730   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3691731   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3691732   +
3691733   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3691734   +END;
MPRINT(SCORETABLES):   END;
3691735   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691736   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3691737   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691738   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691739   +   S_MntCard_Games  =    -2.33522593705059 +     6.68956977763158 *
3691740   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33522593705059 + 6.68956977763158 * MntCard_Games ;
3691741   +   S_MntMagazines  =    -0.82819479945891 +     17.2251462364348 *
3691742   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82819479945891 + 17.2251462364348 * MntMagazines ;
3691743   +   S_NumCatalogPurchases  =    -3.10054848188199 +     13.4367263992267 *
3691744   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10054848188199 + 13.4367263992267 * 
NumCatalogPurchases ;
3691745   +   S_NumDealsPurchases  =    -1.41500737175216 +     11.1230883165867 *
3691746   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41500737175216 + 11.1230883165867 * 
NumDealsPurchases ;
3691747   +   S_NumWebPurchases  =    -5.21856396880793 +     12.2279299177142 *
3691748   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21856396880793 + 12.2279299177142 * 
NumWebPurchases ;
3691749   +   S_RANGE_Frq  =    -1.36413014879794 +     4.19989227621622 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36413014879794 + 4.19989227621622 * RANGE_Frq ;
3691750   +   S_RANGE_Recency  =    -1.65726445083765 +     3.34328030677855 *
3691751   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65726445083765 + 3.34328030677855 * RANGE_Recency ;
3691752   +   S_RANGE_average_purchase  =     -1.0375239874731 +     5.18436677688615 *
3691753   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.0375239874731 + 5.18436677688615 * 
RANGE_average_purchase ;
3691754   +   S_RANGE_campaign_acceptance
3691755   +          =    -0.47216201579102 +     5.79894757422216 *
3691756   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47216201579102 + 5.79894757422216 * 
RANGE_campaign_acceptance ;
3691757   +END;
MPRINT(SCORETABLES):   END;
3691758   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691759   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3691760   +   ELSE S_MntCard_Games  =    -2.33522593705059 +     6.68956977763158 *
3691761   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33522593705059 + 6.68956977763158 * 
MntCard_Games ;
3691762   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3691763   +   ELSE S_MntMagazines  =    -0.82819479945891 +     17.2251462364348 *
3691764   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82819479945891 + 17.2251462364348 * 
MntMagazines ;
3691765   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3691766   +   ELSE S_NumCatalogPurchases
3691767   +          =    -3.10054848188199 +     13.4367263992267 * NumCatalogPurchases
3691768   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10054848188199 + 13.4367263992267 * 
NumCatalogPurchases ;
3691769   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3691770   +   ELSE S_NumDealsPurchases  =    -1.41500737175216 +     11.1230883165867 *
3691771   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41500737175216 + 11.1230883165867 * 
NumDealsPurchases ;
3691772   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3691773   +   ELSE S_NumWebPurchases  =    -5.21856396880793 +     12.2279299177142 *
3691774   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21856396880793 + 12.2279299177142 * 
NumWebPurchases ;
3691775   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3691776   +   ELSE S_RANGE_Frq  =    -1.36413014879794 +     4.19989227621622 * RANGE_Frq
3691777   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36413014879794 + 4.19989227621622 * RANGE_Frq ;
3691778   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3691779   +   ELSE S_RANGE_Recency  =    -1.65726445083765 +     3.34328030677855 *
3691780   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65726445083765 + 3.34328030677855 * 
RANGE_Recency ;
3691781   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3691782   +   ELSE S_RANGE_average_purchase
3691783   +          =     -1.0375239874731 +     5.18436677688615 *
3691784   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.0375239874731 + 5.18436677688615 * 
RANGE_average_purchase ;
3691785   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3691786   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3691787   +   ELSE S_RANGE_campaign_acceptance
3691788   +          =    -0.47216201579102 +     5.79894757422216 *
3691789   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47216201579102 + 5.79894757422216 
* RANGE_campaign_acceptance ;
3691790   +END;
MPRINT(SCORETABLES):   END;
3691791   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691792   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3691793   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691794   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691795   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3691796   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691797   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691798   +   H11  =    -0.70834528054883 * S_MntCard_Games  +    -0.14314077532251 *
3691799   +        S_MntMagazines  +    -1.12917889606349 * S_NumCatalogPurchases
3691800   +          +     -0.5883289995918 * S_NumDealsPurchases
3691801   +          +     0.02529440093812 * S_NumWebPurchases
3691802   +          +      1.1250254700024 * S_RANGE_Frq  +     1.73855164249935 *
3691803   +        S_RANGE_Recency  +    -2.62143424439721 * S_RANGE_average_purchase
3691804   +          +    -0.90646687103767 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.70834528054883 * S_MntCard_Games + -0.14314077532251 * 
S_MntMagazines + -1.12917889606349 * S_NumCatalogPurchases + -0.5883289995918 * 
S_NumDealsPurchases + 0.02529440093812 * S_NumWebPurchases + 1.1250254700024 * S_RANGE_Frq + 
1.73855164249935 * S_RANGE_Recency + -2.62143424439721 * S_RANGE_average_purchase + 
-0.90646687103767 * S_RANGE_campaign_acceptance ;
3691805   +   H12  =     1.82471058142657 * S_MntCard_Games  +     0.38817150888667 *
3691806   +        S_MntMagazines  +     2.71539375067233 * S_NumCatalogPurchases
3691807   +          +    -0.73076671723574 * S_NumDealsPurchases
3691808   +          +    -3.10323909629116 * S_NumWebPurchases
3691809   +          +     6.36168579644011 * S_RANGE_Frq  +     3.11109472406411 *
3691810   +        S_RANGE_Recency  +    -2.92717483289707 * S_RANGE_average_purchase
3691811   +          +    -8.79665889224933 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.82471058142657 * S_MntCard_Games + 0.38817150888667 * 
S_MntMagazines + 2.71539375067233 * S_NumCatalogPurchases + -0.73076671723574 * 
S_NumDealsPurchases + -3.10323909629116 * S_NumWebPurchases + 6.36168579644011 * S_RANGE_Frq + 
3.11109472406411 * S_RANGE_Recency + -2.92717483289707 * S_RANGE_average_purchase + 
-8.79665889224933 * S_RANGE_campaign_acceptance ;
3691812   +   H13  =    -0.08089349257979 * S_MntCard_Games  +     0.10391526722729 *
3691813   +        S_MntMagazines  +     0.43486734581182 * S_NumCatalogPurchases
3691814   +          +      0.1604310593481 * S_NumDealsPurchases
3691815   +          +    -0.69059374484548 * S_NumWebPurchases
3691816   +          +     0.30439279179007 * S_RANGE_Frq  +    -1.07423266260773 *
3691817   +        S_RANGE_Recency  +     0.49175111940188 * S_RANGE_average_purchase
3691818   +          +     0.18765444948077 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.08089349257979 * S_MntCard_Games + 0.10391526722729 * 
S_MntMagazines + 0.43486734581182 * S_NumCatalogPurchases + 0.1604310593481 * 
S_NumDealsPurchases + -0.69059374484548 * S_NumWebPurchases + 0.30439279179007 * S_RANGE_Frq + 
-1.07423266260773 * S_RANGE_Recency + 0.49175111940188 * S_RANGE_average_purchase + 
0.18765444948077 * S_RANGE_campaign_acceptance ;
3691819   +   H14  =     1.73406861269283 * S_MntCard_Games  +     -0.9339381661434 *
3691820   +        S_MntMagazines  +     0.31460196001203 * S_NumCatalogPurchases
3691821   +          +     1.14294557575345 * S_NumDealsPurchases
3691822   +          +     0.49887781101923 * S_NumWebPurchases
3691823   +          +    -0.14996564832493 * S_RANGE_Frq  +    -0.81180099754578 *
3691824   +        S_RANGE_Recency  +    -1.19501200159987 * S_RANGE_average_purchase
3691825   +          +     0.86070452735563 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 1.73406861269283 * S_MntCard_Games + -0.9339381661434 * 
S_MntMagazines + 0.31460196001203 * S_NumCatalogPurchases + 1.14294557575345 * 
S_NumDealsPurchases + 0.49887781101923 * S_NumWebPurchases + -0.14996564832493 * S_RANGE_Frq + 
-0.81180099754578 * S_RANGE_Recency + -1.19501200159987 * S_RANGE_average_purchase + 
0.86070452735563 * S_RANGE_campaign_acceptance ;
3691826   +   H15  =     0.10796799106232 * S_MntCard_Games  +    -0.15534120067077 *
3691827   +        S_MntMagazines  +     0.41265883698817 * S_NumCatalogPurchases
3691828   +          +     0.32682294735708 * S_NumDealsPurchases
3691829   +          +     1.19012657450285 * S_NumWebPurchases
3691830   +          +     0.66925971651705 * S_RANGE_Frq  +    -1.07353465376337 *
3691831   +        S_RANGE_Recency  +     0.26845301349353 * S_RANGE_average_purchase
3691832   +          +      0.1741477276552 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 0.10796799106232 * S_MntCard_Games + -0.15534120067077 * 
S_MntMagazines + 0.41265883698817 * S_NumCatalogPurchases + 0.32682294735708 * 
S_NumDealsPurchases + 1.19012657450285 * S_NumWebPurchases + 0.66925971651705 * S_RANGE_Frq + 
-1.07353465376337 * S_RANGE_Recency + 0.26845301349353 * S_RANGE_average_purchase + 
0.1741477276552 * S_RANGE_campaign_acceptance ;
3691833   +   H16  =    -2.49109106621332 * S_MntCard_Games  +    -1.51007535840652 *
3691834   +        S_MntMagazines  +     0.10477029131908 * S_NumCatalogPurchases
3691835   +          +    -0.81936916918852 * S_NumDealsPurchases
3691836   +          +     0.27839422164653 * S_NumWebPurchases
3691837   +          +     1.79508484809259 * S_RANGE_Frq  +    -2.03820694607095 *
3691838   +        S_RANGE_Recency  +     -0.9257100257643 * S_RANGE_average_purchase
3691839   +          +    -2.10078905143259 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.49109106621332 * S_MntCard_Games + -1.51007535840652 * 
S_MntMagazines + 0.10477029131908 * S_NumCatalogPurchases + -0.81936916918852 * 
S_NumDealsPurchases + 0.27839422164653 * S_NumWebPurchases + 1.79508484809259 * S_RANGE_Frq + 
-2.03820694607095 * S_RANGE_Recency + -0.9257100257643 * S_RANGE_average_purchase + 
-2.10078905143259 * S_RANGE_campaign_acceptance ;
3691840   +   H11  = H11  +    -0.24393079121083 * Marital_StatusDivorced
3691841   +          +     0.51130899615306 * Marital_StatusMarried
3691842   +          +      0.1179054377688 * Marital_StatusSingle
3691843   +          +     0.16155285442853 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.24393079121083 * Marital_StatusDivorced + 
0.51130899615306 * Marital_StatusMarried + 0.1179054377688 * Marital_StatusSingle + 
0.16155285442853 * Marital_StatusTogether ;
3691844   +   H12  = H12  +    -4.10008856454922 * Marital_StatusDivorced
3691845   +          +    -8.65731580777218 * Marital_StatusMarried
3691846   +          +    -0.44537892443283 * Marital_StatusSingle
3691847   +          +     9.23242332118887 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -4.10008856454922 * Marital_StatusDivorced + 
-8.65731580777218 * Marital_StatusMarried + -0.44537892443283 * Marital_StatusSingle + 
9.23242332118887 * Marital_StatusTogether ;
3691848   +   H13  = H13  +     0.48823257794576 * Marital_StatusDivorced
3691849   +          +     -0.5643203810427 * Marital_StatusMarried
3691850   +          +     0.57784804925416 * Marital_StatusSingle
3691851   +          +    -0.70810411666737 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.48823257794576 * Marital_StatusDivorced + 
-0.5643203810427 * Marital_StatusMarried + 0.57784804925416 * Marital_StatusSingle + 
-0.70810411666737 * Marital_StatusTogether ;
3691852   +   H14  = H14  +    -0.06784741131656 * Marital_StatusDivorced
3691853   +          +    -0.56813857523848 * Marital_StatusMarried
3691854   +          +     0.57671805736418 * Marital_StatusSingle
3691855   +          +    -1.29278521112463 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.06784741131656 * Marital_StatusDivorced + 
-0.56813857523848 * Marital_StatusMarried + 0.57671805736418 * Marital_StatusSingle + 
-1.29278521112463 * Marital_StatusTogether ;
3691856   +   H15  = H15  +     0.25943013890108 * Marital_StatusDivorced
3691857   +          +     0.06641823720344 * Marital_StatusMarried
3691858   +          +    -0.16860389151125 * Marital_StatusSingle
3691859   +          +     0.85629306115001 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 0.25943013890108 * Marital_StatusDivorced + 
0.06641823720344 * Marital_StatusMarried + -0.16860389151125 * Marital_StatusSingle + 
0.85629306115001 * Marital_StatusTogether ;
3691860   +   H16  = H16  +     0.44599338826889 * Marital_StatusDivorced
3691861   +          +    -0.31803091920046 * Marital_StatusMarried
3691862   +          +    -0.76479205890298 * Marital_StatusSingle
3691863   +          +     2.56842508988051 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.44599338826889 * Marital_StatusDivorced + 
-0.31803091920046 * Marital_StatusMarried + -0.76479205890298 * Marital_StatusSingle + 
2.56842508988051 * Marital_StatusTogether ;
3691864   +   H11  =     0.02080269723116 + H11 ;
MPRINT(SCORETABLES):   H11 = 0.02080269723116 + H11 ;
3691865   +   H12  =    -4.62311781315556 + H12 ;
MPRINT(SCORETABLES):   H12 = -4.62311781315556 + H12 ;
3691866   +   H13  =    -2.86166265554228 + H13 ;
MPRINT(SCORETABLES):   H13 = -2.86166265554228 + H13 ;
3691867   +   H14  =    -0.62547267898203 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.62547267898203 + H14 ;
3691868   +   H15  =    -1.95019994279481 + H15 ;
MPRINT(SCORETABLES):   H15 = -1.95019994279481 + H15 ;
3691869   +   H16  =    -0.14081093001301 + H16 ;
MPRINT(SCORETABLES):   H16 = -0.14081093001301 + H16 ;
3691870   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3691871   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3691872   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3691873   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3691874   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3691875   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3691876   +END;
MPRINT(SCORETABLES):   END;
3691877   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691878   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3691879   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3691880   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3691881   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3691882   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3691883   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3691884   +END;
MPRINT(SCORETABLES):   END;
3691885   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691886   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3691887   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691888   +
3691889   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3691890   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3691891   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3691892   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3691893   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3691894   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3691895   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3691896   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691897   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691898   +end;
MPRINT(SCORETABLES):   end;
3691899   +else do;
MPRINT(SCORETABLES):   else do;
3691900   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3691901   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3691902   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3691903   +   end;
MPRINT(SCORETABLES):   end;
3691904   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3691905   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3691906   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3691907   +   end;
MPRINT(SCORETABLES):   end;
3691908   +   else do;
MPRINT(SCORETABLES):   else do;
3691909   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3691910   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3691911   +   end;
MPRINT(SCORETABLES):   end;
3691912   +end;
MPRINT(SCORETABLES):   end;
3691913   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3691914   +   P_DepVar1  =    -5.12041461802307 * H11  +    -1.46276822092344 * H12
3691915   +          +     6.89658102773581 * H13  +     4.02913412547398 * H14
3691916   +          +     4.23003628073372 * H15  +    -2.61496632676677 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.12041461802307 * H11 + -1.46276822092344 * H12 + 
6.89658102773581 * H13 + 4.02913412547398 * H14 + 4.23003628073372 * H15 + -2.61496632676677 * 
H16 ;
3691917   +   P_DepVar1  =    -0.53024067079438 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.53024067079438 + P_DepVar1 ;
3691918   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3691919   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3691920   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3691921   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3691922   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3691923   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3691924   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3691925   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3691926   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3691927   +END;
MPRINT(SCORETABLES):   END;
3691928   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3691929   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3691930   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3691931   +END;
MPRINT(SCORETABLES):   END;
3691932   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3691933   +   P_DepVar1  =     0.13807339449541;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13807339449541;
3691934   +   P_DepVar0  =     0.86192660550458;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86192660550458;
3691935   +END;
MPRINT(SCORETABLES):   END;
3691936   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3691937   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3691938   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3691939   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3691940   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3691941   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3691942   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3691943   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691944   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3691945   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3691946   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3691947   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3691948   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3691949   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3691950   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3691951   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3691952   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3691953   +END;
MPRINT(SCORETABLES):   END;
3691954   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691955   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3691956   +********************************;
MPRINT(SCORETABLES):   ********************************;
3691957   +drop
3691958   +S_MntCard_Games
3691959   +S_MntMagazines
3691960   +S_NumCatalogPurchases
3691961   +S_NumDealsPurchases
3691962   +S_NumWebPurchases
3691963   +S_RANGE_Frq
3691964   +S_RANGE_Recency
3691965   +S_RANGE_average_purchase
3691966   +S_RANGE_campaign_acceptance
3691967   +H11
3691968   +H12
3691969   +H13
3691970   +H14
3691971   +H15
3691972   +H16
3691973   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3691974   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691975   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3691976   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691977   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691978   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3691979   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691980   +end;
MPRINT(SCORETABLES):   end;
3691981   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691982   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3691983   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691984   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691985   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3691986   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691987   +if (cv_var =7)  then do;
MPRINT(SCORETABLES):   if (cv_var =7) then do;
3691988   +_XVAL_=7;
MPRINT(SCORETABLES):   _XVAL_=7;
3691989   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3691990   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3691991   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3691992   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3691993   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3691994   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3691995   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691996   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3691997   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3691998   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3691999   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3692000   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3692001   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3692002   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3692003   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3692004   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3692005   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3692006   +LENGTH _WARN_ $4
3692007   +      F_DepVar  $ 12
3692008   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3692009   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3692010   +
3692011   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3692012   +
3692013   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3692014   +
3692015   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3692016   +
3692017   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3692018   +
3692019   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3692020   +
3692021   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3692022   +
3692023   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3692024   +
3692025   +      label S_RANGE_campaign_acceptance =
3692026   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3692027   +
3692028   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3692029   +
3692030   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3692031   +
3692032   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3692033   +
3692034   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3692035   +
3692036   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3692037   +
3692038   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3692039   +
3692040   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3692041   +
3692042   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3692043   +
3692044   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3692045   +
3692046   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3692047   +
3692048   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3692049   +
3692050   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3692051   +
3692052   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3692053   +
3692054   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3692055   +
3692056   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3692057   +
3692058   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3692059   +
3692060   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3692061   +
3692062   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3692063   +
3692064   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3692065   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3692066   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3692067   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3692068   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3692069   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3692070   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3692071   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3692072   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3692073   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692074   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692075   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692076   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692077   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3692078   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692079   +end;
MPRINT(SCORETABLES):   end;
3692080   +else do;
MPRINT(SCORETABLES):   else do;
3692081   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3692082   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3692083   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3692084   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3692085   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3692086   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3692087   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3692088   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3692089   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692090   +         end;
MPRINT(SCORETABLES):   end;
3692091   +         else do;
MPRINT(SCORETABLES):   else do;
3692092   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3692093   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3692094   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692095   +            end;
MPRINT(SCORETABLES):   end;
3692096   +         end;
MPRINT(SCORETABLES):   end;
3692097   +      end;
MPRINT(SCORETABLES):   end;
3692098   +      else do;
MPRINT(SCORETABLES):   else do;
3692099   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3692100   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3692101   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692102   +         end;
MPRINT(SCORETABLES):   end;
3692103   +      end;
MPRINT(SCORETABLES):   end;
3692104   +   end;
MPRINT(SCORETABLES):   end;
3692105   +   else do;
MPRINT(SCORETABLES):   else do;
3692106   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3692107   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3692108   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692109   +      end;
MPRINT(SCORETABLES):   end;
3692110   +      else do;
MPRINT(SCORETABLES):   else do;
3692111   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3692112   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3692113   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3692114   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3692115   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3692116   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692117   +         end;
MPRINT(SCORETABLES):   end;
3692118   +      end;
MPRINT(SCORETABLES):   end;
3692119   +   end;
MPRINT(SCORETABLES):   end;
3692120   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3692121   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692122   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692123   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692124   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692125   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3692126   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692127   +   end;
MPRINT(SCORETABLES):   end;
3692128   +end;
MPRINT(SCORETABLES):   end;
3692129   +
3692130   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692131   +*** Checking missing input Interval
3692132   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3692133   +
3692134   +IF NMISS(
3692135   +   MntCard_Games ,
3692136   +   MntMagazines ,
3692137   +   NumCatalogPurchases ,
3692138   +   NumDealsPurchases ,
3692139   +   NumWebPurchases ,
3692140   +   RANGE_Frq ,
3692141   +   RANGE_Recency ,
3692142   +   RANGE_average_purchase ,
3692143   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3692144   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3692145   +
3692146   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692147   +END;
MPRINT(SCORETABLES):   END;
3692148   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692149   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3692150   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692151   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692152   +   S_MntCard_Games  =    -2.30171387441483 +     6.59678810024031 *
3692153   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30171387441483 + 6.59678810024031 * MntCard_Games ;
3692154   +   S_MntMagazines  =    -0.82814802345175 +     17.2657204428733 *
3692155   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82814802345175 + 17.2657204428733 * MntMagazines ;
3692156   +   S_NumCatalogPurchases  =    -3.11539061667747 +     13.4725853077149 *
3692157   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11539061667747 + 13.4725853077149 * 
NumCatalogPurchases ;
3692158   +   S_NumDealsPurchases  =    -1.40831252901562 +       11.09734485836 *
3692159   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40831252901562 + 11.09734485836 * 
NumDealsPurchases ;
3692160   +   S_NumWebPurchases  =    -5.26193475609037 +     12.3101621966132 *
3692161   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.26193475609037 + 12.3101621966132 * 
NumWebPurchases ;
3692162   +   S_RANGE_Frq  =    -1.36313563343809 +     4.20172065367058 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36313563343809 + 4.20172065367058 * RANGE_Frq ;
3692163   +   S_RANGE_Recency  =     -1.6722407206178 +     3.35881872932975 *
3692164   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6722407206178 + 3.35881872932975 * RANGE_Recency ;
3692165   +   S_RANGE_average_purchase  =    -1.03707602763147 +     5.16913442651384 *
3692166   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03707602763147 + 5.16913442651384 * 
RANGE_average_purchase ;
3692167   +   S_RANGE_campaign_acceptance
3692168   +          =    -0.47524608769199 +     5.72642199490601 *
3692169   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47524608769199 + 5.72642199490601 * 
RANGE_campaign_acceptance ;
3692170   +END;
MPRINT(SCORETABLES):   END;
3692171   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692172   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3692173   +   ELSE S_MntCard_Games  =    -2.30171387441483 +     6.59678810024031 *
3692174   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30171387441483 + 6.59678810024031 * 
MntCard_Games ;
3692175   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3692176   +   ELSE S_MntMagazines  =    -0.82814802345175 +     17.2657204428733 *
3692177   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82814802345175 + 17.2657204428733 * 
MntMagazines ;
3692178   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3692179   +   ELSE S_NumCatalogPurchases
3692180   +          =    -3.11539061667747 +     13.4725853077149 * NumCatalogPurchases
3692181   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11539061667747 + 13.4725853077149 * 
NumCatalogPurchases ;
3692182   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3692183   +   ELSE S_NumDealsPurchases  =    -1.40831252901562 +       11.09734485836 *
3692184   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40831252901562 + 11.09734485836 * 
NumDealsPurchases ;
3692185   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3692186   +   ELSE S_NumWebPurchases  =    -5.26193475609037 +     12.3101621966132 *
3692187   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.26193475609037 + 12.3101621966132 * 
NumWebPurchases ;
3692188   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3692189   +   ELSE S_RANGE_Frq  =    -1.36313563343809 +     4.20172065367058 * RANGE_Frq
3692190   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36313563343809 + 4.20172065367058 * RANGE_Frq ;
3692191   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3692192   +   ELSE S_RANGE_Recency  =     -1.6722407206178 +     3.35881872932975 *
3692193   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6722407206178 + 3.35881872932975 * 
RANGE_Recency ;
3692194   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3692195   +   ELSE S_RANGE_average_purchase
3692196   +          =    -1.03707602763147 +     5.16913442651384 *
3692197   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03707602763147 + 5.16913442651384 * 
RANGE_average_purchase ;
3692198   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3692199   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3692200   +   ELSE S_RANGE_campaign_acceptance
3692201   +          =    -0.47524608769199 +     5.72642199490601 *
3692202   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47524608769199 + 5.72642199490601 
* RANGE_campaign_acceptance ;
3692203   +END;
MPRINT(SCORETABLES):   END;
3692204   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692205   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3692206   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692207   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692208   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3692209   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692210   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692211   +   H11  =    -0.04644589501161 * S_MntCard_Games  +     0.38841767451054 *
3692212   +        S_MntMagazines  +     0.09483209428084 * S_NumCatalogPurchases
3692213   +          +     0.41417766322767 * S_NumDealsPurchases
3692214   +          +    -0.51421142262442 * S_NumWebPurchases
3692215   +          +    -0.13119900071292 * S_RANGE_Frq  +    -0.27637390592066 *
3692216   +        S_RANGE_Recency  +     0.00134838153399 * S_RANGE_average_purchase
3692217   +          +     0.16187087872634 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.04644589501161 * S_MntCard_Games + 0.38841767451054 * 
S_MntMagazines + 0.09483209428084 * S_NumCatalogPurchases + 0.41417766322767 * 
S_NumDealsPurchases + -0.51421142262442 * S_NumWebPurchases + -0.13119900071292 * S_RANGE_Frq 
+ -0.27637390592066 * S_RANGE_Recency + 0.00134838153399 * S_RANGE_average_purchase + 
0.16187087872634 * S_RANGE_campaign_acceptance ;
3692218   +   H12  =    -3.78062409164022 * S_MntCard_Games  +    -0.02010310526909 *
3692219   +        S_MntMagazines  +    -0.63029090091824 * S_NumCatalogPurchases
3692220   +          +    -2.39334542599414 * S_NumDealsPurchases
3692221   +          +     1.24154331579333 * S_NumWebPurchases
3692222   +          +     1.79986429711606 * S_RANGE_Frq  +     2.15987408346789 *
3692223   +        S_RANGE_Recency  +    -1.40943688678965 * S_RANGE_average_purchase
3692224   +          +    -2.50301300797686 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -3.78062409164022 * S_MntCard_Games + -0.02010310526909 * 
S_MntMagazines + -0.63029090091824 * S_NumCatalogPurchases + -2.39334542599414 * 
S_NumDealsPurchases + 1.24154331579333 * S_NumWebPurchases + 1.79986429711606 * S_RANGE_Frq + 
2.15987408346789 * S_RANGE_Recency + -1.40943688678965 * S_RANGE_average_purchase + 
-2.50301300797686 * S_RANGE_campaign_acceptance ;
3692225   +   H13  =     1.46335536342965 * S_MntCard_Games  +     1.59061529037917 *
3692226   +        S_MntMagazines  +    -1.84823002875403 * S_NumCatalogPurchases
3692227   +          +     0.58553743633423 * S_NumDealsPurchases
3692228   +          +    -1.09927277386748 * S_NumWebPurchases
3692229   +          +    -2.41128488567229 * S_RANGE_Frq  +      0.0594091333452 *
3692230   +        S_RANGE_Recency  +     3.43786518789187 * S_RANGE_average_purchase
3692231   +          +     0.35901522017408 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 1.46335536342965 * S_MntCard_Games + 1.59061529037917 * 
S_MntMagazines + -1.84823002875403 * S_NumCatalogPurchases + 0.58553743633423 * 
S_NumDealsPurchases + -1.09927277386748 * S_NumWebPurchases + -2.41128488567229 * S_RANGE_Frq 
+ 0.0594091333452 * S_RANGE_Recency + 3.43786518789187 * S_RANGE_average_purchase + 
0.35901522017408 * S_RANGE_campaign_acceptance ;
3692232   +   H14  =    -0.39056027290126 * S_MntCard_Games  +      -0.743889190862 *
3692233   +        S_MntMagazines  +     -1.5665657201633 * S_NumCatalogPurchases
3692234   +          +    -0.44738342088516 * S_NumDealsPurchases
3692235   +          +    -1.31545130579834 * S_NumWebPurchases
3692236   +          +     0.81787918423009 * S_RANGE_Frq  +      1.6577030285632 *
3692237   +        S_RANGE_Recency  +    -2.93336536006899 * S_RANGE_average_purchase
3692238   +          +    -0.78132003589189 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.39056027290126 * S_MntCard_Games + -0.743889190862 * 
S_MntMagazines + -1.5665657201633 * S_NumCatalogPurchases + -0.44738342088516 * 
S_NumDealsPurchases + -1.31545130579834 * S_NumWebPurchases + 0.81787918423009 * S_RANGE_Frq + 
1.6577030285632 * S_RANGE_Recency + -2.93336536006899 * S_RANGE_average_purchase + 
-0.78132003589189 * S_RANGE_campaign_acceptance ;
3692239   +   H15  =     0.13774509830994 * S_MntCard_Games  +    -0.71734525840768 *
3692240   +        S_MntMagazines  +    -1.17523006943148 * S_NumCatalogPurchases
3692241   +          +    -1.08112021748997 * S_NumDealsPurchases
3692242   +          +     0.56591097128937 * S_NumWebPurchases
3692243   +          +     1.08377319960521 * S_RANGE_Frq  +     1.20971078467626 *
3692244   +        S_RANGE_Recency  +     0.35344170548682 * S_RANGE_average_purchase
3692245   +          +    -0.35831151741376 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 0.13774509830994 * S_MntCard_Games + -0.71734525840768 * 
S_MntMagazines + -1.17523006943148 * S_NumCatalogPurchases + -1.08112021748997 * 
S_NumDealsPurchases + 0.56591097128937 * S_NumWebPurchases + 1.08377319960521 * S_RANGE_Frq + 
1.20971078467626 * S_RANGE_Recency + 0.35344170548682 * S_RANGE_average_purchase + 
-0.35831151741376 * S_RANGE_campaign_acceptance ;
3692246   +   H16  =     -0.8574871272339 * S_MntCard_Games  +     0.42371407926191 *
3692247   +        S_MntMagazines  +    -0.68738792993754 * S_NumCatalogPurchases
3692248   +          +    -0.37074373540756 * S_NumDealsPurchases
3692249   +          +    -1.23233752085735 * S_NumWebPurchases
3692250   +          +    -0.30323697591942 * S_RANGE_Frq  +     1.61988577197901 *
3692251   +        S_RANGE_Recency  +     0.19394344028586 * S_RANGE_average_purchase
3692252   +          +    -0.94435824101473 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.8574871272339 * S_MntCard_Games + 0.42371407926191 * 
S_MntMagazines + -0.68738792993754 * S_NumCatalogPurchases + -0.37074373540756 * 
S_NumDealsPurchases + -1.23233752085735 * S_NumWebPurchases + -0.30323697591942 * S_RANGE_Frq 
+ 1.61988577197901 * S_RANGE_Recency + 0.19394344028586 * S_RANGE_average_purchase + 
-0.94435824101473 * S_RANGE_campaign_acceptance ;
3692253   +   H11  = H11  +     1.08704357177715 * Marital_StatusDivorced
3692254   +          +     -0.0768751218938 * Marital_StatusMarried
3692255   +          +     0.06536236969998 * Marital_StatusSingle
3692256   +          +    -1.11325785287586 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 1.08704357177715 * Marital_StatusDivorced + 
-0.0768751218938 * Marital_StatusMarried + 0.06536236969998 * Marital_StatusSingle + 
-1.11325785287586 * Marital_StatusTogether ;
3692257   +   H12  = H12  +     0.88652773033359 * Marital_StatusDivorced
3692258   +          +    -0.29982234646099 * Marital_StatusMarried
3692259   +          +     0.45967188395375 * Marital_StatusSingle
3692260   +          +    -1.11986176948431 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.88652773033359 * Marital_StatusDivorced + 
-0.29982234646099 * Marital_StatusMarried + 0.45967188395375 * Marital_StatusSingle + 
-1.11986176948431 * Marital_StatusTogether ;
3692261   +   H13  = H13  +     0.54023225512804 * Marital_StatusDivorced
3692262   +          +      2.2152655052305 * Marital_StatusMarried
3692263   +          +    -3.07683908464896 * Marital_StatusSingle
3692264   +          +     3.11296249778919 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.54023225512804 * Marital_StatusDivorced + 2.2152655052305 
* Marital_StatusMarried + -3.07683908464896 * Marital_StatusSingle + 3.11296249778919 * 
Marital_StatusTogether ;
3692265   +   H14  = H14  +      0.5275524723164 * Marital_StatusDivorced
3692266   +          +    -0.14053802777722 * Marital_StatusMarried
3692267   +          +     0.73519582367294 * Marital_StatusSingle
3692268   +          +    -1.22539737445946 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.5275524723164 * Marital_StatusDivorced + 
-0.14053802777722 * Marital_StatusMarried + 0.73519582367294 * Marital_StatusSingle + 
-1.22539737445946 * Marital_StatusTogether ;
3692269   +   H15  = H15  +    -0.99324843338399 * Marital_StatusDivorced
3692270   +          +     0.75363464283399 * Marital_StatusMarried
3692271   +          +    -1.12795259588548 * Marital_StatusSingle
3692272   +          +     2.24455240846882 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + -0.99324843338399 * Marital_StatusDivorced + 
0.75363464283399 * Marital_StatusMarried + -1.12795259588548 * Marital_StatusSingle + 
2.24455240846882 * Marital_StatusTogether ;
3692273   +   H16  = H16  +     0.74390680849273 * Marital_StatusDivorced
3692274   +          +     0.52117786773962 * Marital_StatusMarried
3692275   +          +    -1.08876939431067 * Marital_StatusSingle
3692276   +          +     0.18249437357131 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.74390680849273 * Marital_StatusDivorced + 
0.52117786773962 * Marital_StatusMarried + -1.08876939431067 * Marital_StatusSingle + 
0.18249437357131 * Marital_StatusTogether ;
3692277   +   H11  =     -0.9126272026716 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.9126272026716 + H11 ;
3692278   +   H12  =     3.24717316172106 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.24717316172106 + H12 ;
3692279   +   H13  =     0.57149091156115 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.57149091156115 + H13 ;
3692280   +   H14  =     0.04010845885345 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.04010845885345 + H14 ;
3692281   +   H15  =     3.27470695030779 + H15 ;
MPRINT(SCORETABLES):   H15 = 3.27470695030779 + H15 ;
3692282   +   H16  =     1.89495051877192 + H16 ;
MPRINT(SCORETABLES):   H16 = 1.89495051877192 + H16 ;
3692283   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3692284   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3692285   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3692286   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3692287   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3692288   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3692289   +END;
MPRINT(SCORETABLES):   END;
3692290   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692291   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3692292   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3692293   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3692294   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3692295   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3692296   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3692297   +END;
MPRINT(SCORETABLES):   END;
3692298   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692299   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3692300   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692301   +
3692302   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3692303   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3692304   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3692305   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3692306   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3692307   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3692308   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3692309   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3692310   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3692311   +end;
MPRINT(SCORETABLES):   end;
3692312   +else do;
MPRINT(SCORETABLES):   else do;
3692313   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3692314   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3692315   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3692316   +   end;
MPRINT(SCORETABLES):   end;
3692317   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3692318   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3692319   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3692320   +   end;
MPRINT(SCORETABLES):   end;
3692321   +   else do;
MPRINT(SCORETABLES):   else do;
3692322   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3692323   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3692324   +   end;
MPRINT(SCORETABLES):   end;
3692325   +end;
MPRINT(SCORETABLES):   end;
3692326   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692327   +   P_DepVar1  =     10.8610637772811 * H11  +    -4.46713442932405 * H12
3692328   +          +    -3.38540919137405 * H13  +    -5.12319288675307 * H14
3692329   +          +     5.89809980727878 * H15  +    -6.22869280042422 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 10.8610637772811 * H11 + -4.46713442932405 * H12 + 
-3.38540919137405 * H13 + -5.12319288675307 * H14 + 5.89809980727878 * H15 + -6.22869280042422 
* H16 ;
3692330   +   P_DepVar1  =    -5.71439477041192 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.71439477041192 + P_DepVar1 ;
3692331   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3692332   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3692333   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3692334   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3692335   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3692336   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3692337   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3692338   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3692339   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3692340   +END;
MPRINT(SCORETABLES):   END;
3692341   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692342   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3692343   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3692344   +END;
MPRINT(SCORETABLES):   END;
3692345   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3692346   +   P_DepVar1  =      0.1375227686703;
MPRINT(SCORETABLES):   P_DepVar1 = 0.1375227686703;
3692347   +   P_DepVar0  =     0.86247723132969;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86247723132969;
3692348   +END;
MPRINT(SCORETABLES):   END;
3692349   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3692350   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3692351   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3692352   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3692353   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3692354   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3692355   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3692356   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692357   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3692358   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692359   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3692360   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3692361   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3692362   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3692363   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3692364   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3692365   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3692366   +END;
MPRINT(SCORETABLES):   END;
3692367   +********************************;
MPRINT(SCORETABLES):   ********************************;
3692368   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3692369   +********************************;
MPRINT(SCORETABLES):   ********************************;
3692370   +drop
3692371   +S_MntCard_Games
3692372   +S_MntMagazines
3692373   +S_NumCatalogPurchases
3692374   +S_NumDealsPurchases
3692375   +S_NumWebPurchases
3692376   +S_RANGE_Frq
3692377   +S_RANGE_Recency
3692378   +S_RANGE_average_purchase
3692379   +S_RANGE_campaign_acceptance
3692380   +H11
3692381   +H12
3692382   +H13
3692383   +H14
3692384   +H15
3692385   +H16
3692386   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3692387   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692388   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3692389   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692390   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692391   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3692392   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692393   +end;
MPRINT(SCORETABLES):   end;
3692394   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692395   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3692396   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692397   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692398   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3692399   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692400   +if (cv_var =8)  then do;
MPRINT(SCORETABLES):   if (cv_var =8) then do;
3692401   +_XVAL_=8;
MPRINT(SCORETABLES):   _XVAL_=8;
3692402   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692403   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3692404   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692405   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692406   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3692407   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692408   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3692409   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3692410   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3692411   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3692412   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3692413   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3692414   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3692415   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3692416   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3692417   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3692418   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3692419   +LENGTH _WARN_ $4
3692420   +      F_DepVar  $ 12
3692421   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3692422   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3692423   +
3692424   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3692425   +
3692426   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3692427   +
3692428   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3692429   +
3692430   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3692431   +
3692432   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3692433   +
3692434   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3692435   +
3692436   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3692437   +
3692438   +      label S_RANGE_campaign_acceptance =
3692439   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3692440   +
3692441   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3692442   +
3692443   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3692444   +
3692445   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3692446   +
3692447   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3692448   +
3692449   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3692450   +
3692451   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3692452   +
3692453   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3692454   +
3692455   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3692456   +
3692457   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3692458   +
3692459   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3692460   +
3692461   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3692462   +
3692463   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3692464   +
3692465   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3692466   +
3692467   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3692468   +
3692469   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3692470   +
3692471   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3692472   +
3692473   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3692474   +
3692475   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3692476   +
3692477   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3692478   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3692479   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3692480   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3692481   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3692482   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3692483   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3692484   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3692485   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3692486   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692487   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692488   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692489   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692490   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3692491   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692492   +end;
MPRINT(SCORETABLES):   end;
3692493   +else do;
MPRINT(SCORETABLES):   else do;
3692494   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3692495   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3692496   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3692497   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3692498   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3692499   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3692500   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3692501   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3692502   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692503   +         end;
MPRINT(SCORETABLES):   end;
3692504   +         else do;
MPRINT(SCORETABLES):   else do;
3692505   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3692506   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3692507   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692508   +            end;
MPRINT(SCORETABLES):   end;
3692509   +         end;
MPRINT(SCORETABLES):   end;
3692510   +      end;
MPRINT(SCORETABLES):   end;
3692511   +      else do;
MPRINT(SCORETABLES):   else do;
3692512   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3692513   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3692514   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692515   +         end;
MPRINT(SCORETABLES):   end;
3692516   +      end;
MPRINT(SCORETABLES):   end;
3692517   +   end;
MPRINT(SCORETABLES):   end;
3692518   +   else do;
MPRINT(SCORETABLES):   else do;
3692519   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3692520   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3692521   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692522   +      end;
MPRINT(SCORETABLES):   end;
3692523   +      else do;
MPRINT(SCORETABLES):   else do;
3692524   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3692525   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3692526   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3692527   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3692528   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3692529   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692530   +         end;
MPRINT(SCORETABLES):   end;
3692531   +      end;
MPRINT(SCORETABLES):   end;
3692532   +   end;
MPRINT(SCORETABLES):   end;
3692533   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3692534   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692535   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692536   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692537   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692538   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3692539   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692540   +   end;
MPRINT(SCORETABLES):   end;
3692541   +end;
MPRINT(SCORETABLES):   end;
3692542   +
3692543   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692544   +*** Checking missing input Interval
3692545   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3692546   +
3692547   +IF NMISS(
3692548   +   MntCard_Games ,
3692549   +   MntMagazines ,
3692550   +   NumCatalogPurchases ,
3692551   +   NumDealsPurchases ,
3692552   +   NumWebPurchases ,
3692553   +   RANGE_Frq ,
3692554   +   RANGE_Recency ,
3692555   +   RANGE_average_purchase ,
3692556   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3692557   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3692558   +
3692559   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692560   +END;
MPRINT(SCORETABLES):   END;
3692561   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692562   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3692563   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692564   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692565   +   S_MntCard_Games  =    -2.32279906878901 +     6.62332649138705 *
3692566   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32279906878901 + 6.62332649138705 * MntCard_Games ;
3692567   +   S_MntMagazines  =    -0.82731873310476 +     17.0756602754173 *
3692568   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82731873310476 + 17.0756602754173 * MntMagazines ;
3692569   +   S_NumCatalogPurchases  =     -3.1218546894974 +     13.4378247571044 *
3692570   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.1218546894974 + 13.4378247571044 * 
NumCatalogPurchases ;
3692571   +   S_NumDealsPurchases  =    -1.41081041431666 +     11.1561319689755 *
3692572   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41081041431666 + 11.1561319689755 * 
NumDealsPurchases ;
3692573   +   S_NumWebPurchases  =    -5.22181714483559 +     12.2579433715915 *
3692574   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22181714483559 + 12.2579433715915 * 
NumWebPurchases ;
3692575   +   S_RANGE_Frq  =    -1.36786783381954 +     4.21359858057803 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36786783381954 + 4.21359858057803 * RANGE_Frq ;
3692576   +   S_RANGE_Recency  =    -1.67632659231905 +     3.37275265167254 *
3692577   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67632659231905 + 3.37275265167254 * RANGE_Recency ;
3692578   +   S_RANGE_average_purchase  =    -1.04115264597413 +     5.12893844438116 *
3692579   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04115264597413 + 5.12893844438116 * 
RANGE_average_purchase ;
3692580   +   S_RANGE_campaign_acceptance
3692581   +          =    -0.47858283955043 +     5.73254751876241 *
3692582   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47858283955043 + 5.73254751876241 * 
RANGE_campaign_acceptance ;
3692583   +END;
MPRINT(SCORETABLES):   END;
3692584   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692585   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3692586   +   ELSE S_MntCard_Games  =    -2.32279906878901 +     6.62332649138705 *
3692587   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32279906878901 + 6.62332649138705 * 
MntCard_Games ;
3692588   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3692589   +   ELSE S_MntMagazines  =    -0.82731873310476 +     17.0756602754173 *
3692590   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82731873310476 + 17.0756602754173 * 
MntMagazines ;
3692591   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3692592   +   ELSE S_NumCatalogPurchases
3692593   +          =     -3.1218546894974 +     13.4378247571044 * NumCatalogPurchases
3692594   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.1218546894974 + 13.4378247571044 * 
NumCatalogPurchases ;
3692595   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3692596   +   ELSE S_NumDealsPurchases  =    -1.41081041431666 +     11.1561319689755 *
3692597   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41081041431666 + 11.1561319689755 * 
NumDealsPurchases ;
3692598   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3692599   +   ELSE S_NumWebPurchases  =    -5.22181714483559 +     12.2579433715915 *
3692600   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22181714483559 + 12.2579433715915 * 
NumWebPurchases ;
3692601   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3692602   +   ELSE S_RANGE_Frq  =    -1.36786783381954 +     4.21359858057803 * RANGE_Frq
3692603   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36786783381954 + 4.21359858057803 * RANGE_Frq ;
3692604   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3692605   +   ELSE S_RANGE_Recency  =    -1.67632659231905 +     3.37275265167254 *
3692606   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67632659231905 + 3.37275265167254 * 
RANGE_Recency ;
3692607   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3692608   +   ELSE S_RANGE_average_purchase
3692609   +          =    -1.04115264597413 +     5.12893844438116 *
3692610   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04115264597413 + 5.12893844438116 * 
RANGE_average_purchase ;
3692611   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3692612   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3692613   +   ELSE S_RANGE_campaign_acceptance
3692614   +          =    -0.47858283955043 +     5.73254751876241 *
3692615   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47858283955043 + 5.73254751876241 
* RANGE_campaign_acceptance ;
3692616   +END;
MPRINT(SCORETABLES):   END;
3692617   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692618   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3692619   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692620   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692621   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3692622   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692623   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692624   +   H11  =     0.90308606344808 * S_MntCard_Games  +    -0.41783063306108 *
3692625   +        S_MntMagazines  +     0.88108937524217 * S_NumCatalogPurchases
3692626   +          +      0.0583326875932 * S_NumDealsPurchases
3692627   +          +     0.67249364541071 * S_NumWebPurchases
3692628   +          +     0.58588276447015 * S_RANGE_Frq  +    -1.81299058934686 *
3692629   +        S_RANGE_Recency  +    -0.83040457193839 * S_RANGE_average_purchase
3692630   +          +     0.92461513992318 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.90308606344808 * S_MntCard_Games + -0.41783063306108 * 
S_MntMagazines + 0.88108937524217 * S_NumCatalogPurchases + 0.0583326875932 * 
S_NumDealsPurchases + 0.67249364541071 * S_NumWebPurchases + 0.58588276447015 * S_RANGE_Frq + 
-1.81299058934686 * S_RANGE_Recency + -0.83040457193839 * S_RANGE_average_purchase + 
0.92461513992318 * S_RANGE_campaign_acceptance ;
3692631   +   H12  =      1.3717237392538 * S_MntCard_Games  +    -4.43151391584211 *
3692632   +        S_MntMagazines  +     3.10866693054077 * S_NumCatalogPurchases
3692633   +          +    -3.93022087696485 * S_NumDealsPurchases
3692634   +          +    -1.90498923826715 * S_NumWebPurchases
3692635   +          +    -0.06825560586065 * S_RANGE_Frq  +      9.0709366044142 *
3692636   +        S_RANGE_Recency  +     6.91564747031537 * S_RANGE_average_purchase
3692637   +          +     3.21397143435247 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.3717237392538 * S_MntCard_Games + -4.43151391584211 * 
S_MntMagazines + 3.10866693054077 * S_NumCatalogPurchases + -3.93022087696485 * 
S_NumDealsPurchases + -1.90498923826715 * S_NumWebPurchases + -0.06825560586065 * S_RANGE_Frq 
+ 9.0709366044142 * S_RANGE_Recency + 6.91564747031537 * S_RANGE_average_purchase + 
3.21397143435247 * S_RANGE_campaign_acceptance ;
3692638   +   H13  =    -0.13508767593582 * S_MntCard_Games  +      -0.197653093595 *
3692639   +        S_MntMagazines  +     0.04802070926948 * S_NumCatalogPurchases
3692640   +          +    -1.01450029533041 * S_NumDealsPurchases
3692641   +          +     0.57096134542819 * S_NumWebPurchases
3692642   +          +     0.82620793867875 * S_RANGE_Frq  +      0.6861035819392 *
3692643   +        S_RANGE_Recency  +     0.23341214371026 * S_RANGE_average_purchase
3692644   +          +    -0.15117188374416 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.13508767593582 * S_MntCard_Games + -0.197653093595 * 
S_MntMagazines + 0.04802070926948 * S_NumCatalogPurchases + -1.01450029533041 * 
S_NumDealsPurchases + 0.57096134542819 * S_NumWebPurchases + 0.82620793867875 * S_RANGE_Frq + 
0.6861035819392 * S_RANGE_Recency + 0.23341214371026 * S_RANGE_average_purchase + 
-0.15117188374416 * S_RANGE_campaign_acceptance ;
3692645   +   H14  =    -6.43033245199374 * S_MntCard_Games  +    -0.34524462590446 *
3692646   +        S_MntMagazines  +    -2.56408497154861 * S_NumCatalogPurchases
3692647   +          +    -2.66104839530252 * S_NumDealsPurchases
3692648   +          +    -5.32765149687484 * S_NumWebPurchases
3692649   +          +      4.2957629278098 * S_RANGE_Frq  +    -7.53526508665235 *
3692650   +        S_RANGE_Recency  +    -1.39779483789957 * S_RANGE_average_purchase
3692651   +          +     0.15235796883224 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -6.43033245199374 * S_MntCard_Games + -0.34524462590446 * 
S_MntMagazines + -2.56408497154861 * S_NumCatalogPurchases + -2.66104839530252 * 
S_NumDealsPurchases + -5.32765149687484 * S_NumWebPurchases + 4.2957629278098 * S_RANGE_Frq + 
-7.53526508665235 * S_RANGE_Recency + -1.39779483789957 * S_RANGE_average_purchase + 
0.15235796883224 * S_RANGE_campaign_acceptance ;
3692652   +   H15  =     0.72001867151525 * S_MntCard_Games  +     0.32001917374161 *
3692653   +        S_MntMagazines  +    -0.72471735363852 * S_NumCatalogPurchases
3692654   +          +    -1.11991454170357 * S_NumDealsPurchases
3692655   +          +    -2.18114657300039 * S_NumWebPurchases
3692656   +          +    -2.32013915523081 * S_RANGE_Frq  +     2.29828305428477 *
3692657   +        S_RANGE_Recency  +    -0.90641320854235 * S_RANGE_average_purchase
3692658   +          +    -1.18921725836181 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 0.72001867151525 * S_MntCard_Games + 0.32001917374161 * 
S_MntMagazines + -0.72471735363852 * S_NumCatalogPurchases + -1.11991454170357 * 
S_NumDealsPurchases + -2.18114657300039 * S_NumWebPurchases + -2.32013915523081 * S_RANGE_Frq 
+ 2.29828305428477 * S_RANGE_Recency + -0.90641320854235 * S_RANGE_average_purchase + 
-1.18921725836181 * S_RANGE_campaign_acceptance ;
3692659   +   H16  =     -0.3393722883508 * S_MntCard_Games  +    -0.28569816171282 *
3692660   +        S_MntMagazines  +    -0.24064164183556 * S_NumCatalogPurchases
3692661   +          +    -0.36961782311406 * S_NumDealsPurchases
3692662   +          +     0.03425065016242 * S_NumWebPurchases
3692663   +          +     0.11714139803176 * S_RANGE_Frq  +     0.77620409686838 *
3692664   +        S_RANGE_Recency  +    -0.18917790071362 * S_RANGE_average_purchase
3692665   +          +    -0.39575779242584 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.3393722883508 * S_MntCard_Games + -0.28569816171282 * 
S_MntMagazines + -0.24064164183556 * S_NumCatalogPurchases + -0.36961782311406 * 
S_NumDealsPurchases + 0.03425065016242 * S_NumWebPurchases + 0.11714139803176 * S_RANGE_Frq + 
0.77620409686838 * S_RANGE_Recency + -0.18917790071362 * S_RANGE_average_purchase + 
-0.39575779242584 * S_RANGE_campaign_acceptance ;
3692666   +   H11  = H11  +    -0.20652968296513 * Marital_StatusDivorced
3692667   +          +    -1.11111198757302 * Marital_StatusMarried
3692668   +          +     1.32414115478118 * Marital_StatusSingle
3692669   +          +    -2.09886878305883 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.20652968296513 * Marital_StatusDivorced + 
-1.11111198757302 * Marital_StatusMarried + 1.32414115478118 * Marital_StatusSingle + 
-2.09886878305883 * Marital_StatusTogether ;
3692670   +   H12  = H12  +     2.42942497651431 * Marital_StatusDivorced
3692671   +          +    -5.87727455193093 * Marital_StatusMarried
3692672   +          +    -0.96209634017337 * Marital_StatusSingle
3692673   +          +    -0.93380990228344 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 2.42942497651431 * Marital_StatusDivorced + 
-5.87727455193093 * Marital_StatusMarried + -0.96209634017337 * Marital_StatusSingle + 
-0.93380990228344 * Marital_StatusTogether ;
3692674   +   H13  = H13  +    -1.89385547216534 * Marital_StatusDivorced
3692675   +          +     0.61312708787078 * Marital_StatusMarried
3692676   +          +    -3.08563596269091 * Marital_StatusSingle
3692677   +          +     0.61899570831397 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.89385547216534 * Marital_StatusDivorced + 
0.61312708787078 * Marital_StatusMarried + -3.08563596269091 * Marital_StatusSingle + 
0.61899570831397 * Marital_StatusTogether ;
3692678   +   H14  = H14  +    -0.07143372129563 * Marital_StatusDivorced
3692679   +          +     4.89231388905064 * Marital_StatusMarried
3692680   +          +     2.37375990950479 * Marital_StatusSingle
3692681   +          +     2.31581863699935 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.07143372129563 * Marital_StatusDivorced + 
4.89231388905064 * Marital_StatusMarried + 2.37375990950479 * Marital_StatusSingle + 
2.31581863699935 * Marital_StatusTogether ;
3692682   +   H15  = H15  +     1.17777032769802 * Marital_StatusDivorced
3692683   +          +      1.9915232282624 * Marital_StatusMarried
3692684   +          +     3.52150132132861 * Marital_StatusSingle
3692685   +          +     0.52402089288692 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.17777032769802 * Marital_StatusDivorced + 1.9915232282624 
* Marital_StatusMarried + 3.52150132132861 * Marital_StatusSingle + 0.52402089288692 * 
Marital_StatusTogether ;
3692686   +   H16  = H16  +     0.16824273752517 * Marital_StatusDivorced
3692687   +          +    -0.32046507923907 * Marital_StatusMarried
3692688   +          +     0.31697818979086 * Marital_StatusSingle
3692689   +          +     -0.1581042110965 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.16824273752517 * Marital_StatusDivorced + 
-0.32046507923907 * Marital_StatusMarried + 0.31697818979086 * Marital_StatusSingle + 
-0.1581042110965 * Marital_StatusTogether ;
3692690   +   H11  =    -1.86652390486176 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.86652390486176 + H11 ;
3692691   +   H12  =    -0.22219697907812 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.22219697907812 + H12 ;
3692692   +   H13  =    -0.67507147700296 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.67507147700296 + H13 ;
3692693   +   H14  =    -0.81908678847055 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.81908678847055 + H14 ;
3692694   +   H15  =     1.22865900563723 + H15 ;
MPRINT(SCORETABLES):   H15 = 1.22865900563723 + H15 ;
3692695   +   H16  =     0.63816187667123 + H16 ;
MPRINT(SCORETABLES):   H16 = 0.63816187667123 + H16 ;
3692696   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3692697   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3692698   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3692699   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3692700   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3692701   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3692702   +END;
MPRINT(SCORETABLES):   END;
3692703   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692704   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3692705   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3692706   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3692707   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3692708   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3692709   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3692710   +END;
MPRINT(SCORETABLES):   END;
3692711   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692712   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3692713   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692714   +
3692715   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3692716   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3692717   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3692718   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3692719   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3692720   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3692721   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3692722   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3692723   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3692724   +end;
MPRINT(SCORETABLES):   end;
3692725   +else do;
MPRINT(SCORETABLES):   else do;
3692726   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3692727   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3692728   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3692729   +   end;
MPRINT(SCORETABLES):   end;
3692730   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3692731   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3692732   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3692733   +   end;
MPRINT(SCORETABLES):   end;
3692734   +   else do;
MPRINT(SCORETABLES):   else do;
3692735   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3692736   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3692737   +   end;
MPRINT(SCORETABLES):   end;
3692738   +end;
MPRINT(SCORETABLES):   end;
3692739   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692740   +   P_DepVar1  =     5.06998080171852 * H11  +     4.59352360672156 * H12
3692741   +          +    -6.31432090172318 * H13  +    -2.77345017045474 * H14
3692742   +          +    -3.70719121211464 * H15  +    -9.48006576782259 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.06998080171852 * H11 + 4.59352360672156 * H12 + 
-6.31432090172318 * H13 + -2.77345017045474 * H14 + -3.70719121211464 * H15 + 
-9.48006576782259 * H16 ;
3692743   +   P_DepVar1  =    -5.49922043785989 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.49922043785989 + P_DepVar1 ;
3692744   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3692745   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3692746   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3692747   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3692748   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3692749   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3692750   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3692751   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3692752   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3692753   +END;
MPRINT(SCORETABLES):   END;
3692754   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692755   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3692756   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3692757   +END;
MPRINT(SCORETABLES):   END;
3692758   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3692759   +   P_DepVar1  =     0.13712984054669;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13712984054669;
3692760   +   P_DepVar0  =      0.8628701594533;
MPRINT(SCORETABLES):   P_DepVar0 = 0.8628701594533;
3692761   +END;
MPRINT(SCORETABLES):   END;
3692762   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3692763   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3692764   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3692765   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3692766   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3692767   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3692768   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3692769   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692770   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3692771   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692772   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3692773   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3692774   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3692775   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3692776   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3692777   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3692778   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3692779   +END;
MPRINT(SCORETABLES):   END;
3692780   +********************************;
MPRINT(SCORETABLES):   ********************************;
3692781   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3692782   +********************************;
MPRINT(SCORETABLES):   ********************************;
3692783   +drop
3692784   +S_MntCard_Games
3692785   +S_MntMagazines
3692786   +S_NumCatalogPurchases
3692787   +S_NumDealsPurchases
3692788   +S_NumWebPurchases
3692789   +S_RANGE_Frq
3692790   +S_RANGE_Recency
3692791   +S_RANGE_average_purchase
3692792   +S_RANGE_campaign_acceptance
3692793   +H11
3692794   +H12
3692795   +H13
3692796   +H14
3692797   +H15
3692798   +H16
3692799   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3692800   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692801   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3692802   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692803   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692804   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3692805   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692806   +end;
MPRINT(SCORETABLES):   end;
3692807   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692808   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3692809   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692810   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692811   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3692812   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692813   +if (cv_var =9)  then do;
MPRINT(SCORETABLES):   if (cv_var =9) then do;
3692814   +_XVAL_=9;
MPRINT(SCORETABLES):   _XVAL_=9;
3692815   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3692816   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3692817   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3692818   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3692819   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3692820   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3692821   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3692822   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3692823   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3692824   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3692825   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3692826   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3692827   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3692828   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3692829   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3692830   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3692831   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3692832   +LENGTH _WARN_ $4
3692833   +      F_DepVar  $ 12
3692834   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3692835   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3692836   +
3692837   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3692838   +
3692839   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3692840   +
3692841   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3692842   +
3692843   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3692844   +
3692845   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3692846   +
3692847   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3692848   +
3692849   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3692850   +
3692851   +      label S_RANGE_campaign_acceptance =
3692852   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3692853   +
3692854   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3692855   +
3692856   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3692857   +
3692858   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3692859   +
3692860   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3692861   +
3692862   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3692863   +
3692864   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3692865   +
3692866   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3692867   +
3692868   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3692869   +
3692870   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3692871   +
3692872   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3692873   +
3692874   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3692875   +
3692876   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3692877   +
3692878   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3692879   +
3692880   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3692881   +
3692882   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3692883   +
3692884   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3692885   +
3692886   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3692887   +
3692888   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3692889   +
3692890   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3692891   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3692892   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3692893   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3692894   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3692895   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3692896   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3692897   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3692898   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3692899   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692900   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692901   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692902   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692903   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3692904   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692905   +end;
MPRINT(SCORETABLES):   end;
3692906   +else do;
MPRINT(SCORETABLES):   else do;
3692907   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3692908   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3692909   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3692910   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3692911   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3692912   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3692913   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3692914   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3692915   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692916   +         end;
MPRINT(SCORETABLES):   end;
3692917   +         else do;
MPRINT(SCORETABLES):   else do;
3692918   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3692919   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3692920   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692921   +            end;
MPRINT(SCORETABLES):   end;
3692922   +         end;
MPRINT(SCORETABLES):   end;
3692923   +      end;
MPRINT(SCORETABLES):   end;
3692924   +      else do;
MPRINT(SCORETABLES):   else do;
3692925   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3692926   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3692927   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692928   +         end;
MPRINT(SCORETABLES):   end;
3692929   +      end;
MPRINT(SCORETABLES):   end;
3692930   +   end;
MPRINT(SCORETABLES):   end;
3692931   +   else do;
MPRINT(SCORETABLES):   else do;
3692932   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3692933   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3692934   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692935   +      end;
MPRINT(SCORETABLES):   end;
3692936   +      else do;
MPRINT(SCORETABLES):   else do;
3692937   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3692938   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3692939   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3692940   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3692941   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3692942   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3692943   +         end;
MPRINT(SCORETABLES):   end;
3692944   +      end;
MPRINT(SCORETABLES):   end;
3692945   +   end;
MPRINT(SCORETABLES):   end;
3692946   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3692947   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3692948   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3692949   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3692950   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3692951   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3692952   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692953   +   end;
MPRINT(SCORETABLES):   end;
3692954   +end;
MPRINT(SCORETABLES):   end;
3692955   +
3692956   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692957   +*** Checking missing input Interval
3692958   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3692959   +
3692960   +IF NMISS(
3692961   +   MntCard_Games ,
3692962   +   MntMagazines ,
3692963   +   NumCatalogPurchases ,
3692964   +   NumDealsPurchases ,
3692965   +   NumWebPurchases ,
3692966   +   RANGE_Frq ,
3692967   +   RANGE_Recency ,
3692968   +   RANGE_average_purchase ,
3692969   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3692970   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3692971   +
3692972   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3692973   +END;
MPRINT(SCORETABLES):   END;
3692974   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692975   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3692976   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3692977   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3692978   +   S_MntCard_Games  =    -2.33786760593048 +     6.69094204609016 *
3692979   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33786760593048 + 6.69094204609016 * MntCard_Games ;
3692980   +   S_MntMagazines  =    -0.84666213245305 +     17.8674725682059 *
3692981   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84666213245305 + 17.8674725682059 * MntMagazines ;
3692982   +   S_NumCatalogPurchases  =    -3.10013914151801 +     13.3800091431702 *
3692983   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10013914151801 + 13.3800091431702 * 
NumCatalogPurchases ;
3692984   +   S_NumDealsPurchases  =    -1.41437396056537 +     11.2342978115416 *
3692985   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41437396056537 + 11.2342978115416 * 
NumDealsPurchases ;
3692986   +   S_NumWebPurchases  =    -5.22272050983417 +      12.249884920774 *
3692987   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22272050983417 + 12.249884920774 * 
NumWebPurchases ;
3692988   +   S_RANGE_Frq  =    -1.36914014769379 +     4.20359474524006 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36914014769379 + 4.20359474524006 * RANGE_Frq ;
3692989   +   S_RANGE_Recency  =    -1.66063435637006 +     3.34542339428733 *
3692990   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66063435637006 + 3.34542339428733 * RANGE_Recency ;
3692991   +   S_RANGE_average_purchase  =    -1.04451508732204 +     5.15021541240414 *
3692992   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04451508732204 + 5.15021541240414 * 
RANGE_average_purchase ;
3692993   +   S_RANGE_campaign_acceptance
3692994   +          =    -0.47585598844883 +     5.77806504330198 *
3692995   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47585598844883 + 5.77806504330198 * 
RANGE_campaign_acceptance ;
3692996   +END;
MPRINT(SCORETABLES):   END;
3692997   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3692998   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3692999   +   ELSE S_MntCard_Games  =    -2.33786760593048 +     6.69094204609016 *
3693000   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33786760593048 + 6.69094204609016 * 
MntCard_Games ;
3693001   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3693002   +   ELSE S_MntMagazines  =    -0.84666213245305 +     17.8674725682059 *
3693003   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84666213245305 + 17.8674725682059 * 
MntMagazines ;
3693004   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3693005   +   ELSE S_NumCatalogPurchases
3693006   +          =    -3.10013914151801 +     13.3800091431702 * NumCatalogPurchases
3693007   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10013914151801 + 13.3800091431702 * 
NumCatalogPurchases ;
3693008   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3693009   +   ELSE S_NumDealsPurchases  =    -1.41437396056537 +     11.2342978115416 *
3693010   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41437396056537 + 11.2342978115416 * 
NumDealsPurchases ;
3693011   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3693012   +   ELSE S_NumWebPurchases  =    -5.22272050983417 +      12.249884920774 *
3693013   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22272050983417 + 12.249884920774 * 
NumWebPurchases ;
3693014   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3693015   +   ELSE S_RANGE_Frq  =    -1.36914014769379 +     4.20359474524006 * RANGE_Frq
3693016   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36914014769379 + 4.20359474524006 * RANGE_Frq ;
3693017   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3693018   +   ELSE S_RANGE_Recency  =    -1.66063435637006 +     3.34542339428733 *
3693019   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66063435637006 + 3.34542339428733 * 
RANGE_Recency ;
3693020   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3693021   +   ELSE S_RANGE_average_purchase
3693022   +          =    -1.04451508732204 +     5.15021541240414 *
3693023   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04451508732204 + 5.15021541240414 * 
RANGE_average_purchase ;
3693024   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3693025   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3693026   +   ELSE S_RANGE_campaign_acceptance
3693027   +          =    -0.47585598844883 +     5.77806504330198 *
3693028   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47585598844883 + 5.77806504330198 
* RANGE_campaign_acceptance ;
3693029   +END;
MPRINT(SCORETABLES):   END;
3693030   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693031   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3693032   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693033   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693034   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3693035   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693036   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3693037   +   H11  =     0.76898813164137 * S_MntCard_Games  +    -0.16032646346991 *
3693038   +        S_MntMagazines  +     0.66325345643857 * S_NumCatalogPurchases
3693039   +          +     0.15894542372299 * S_NumDealsPurchases
3693040   +          +     0.61058929168945 * S_NumWebPurchases
3693041   +          +      0.5142937908155 * S_RANGE_Frq  +    -1.23123193133177 *
3693042   +        S_RANGE_Recency  +     -0.7319244160517 * S_RANGE_average_purchase
3693043   +          +     0.72874412646371 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.76898813164137 * S_MntCard_Games + -0.16032646346991 * 
S_MntMagazines + 0.66325345643857 * S_NumCatalogPurchases + 0.15894542372299 * 
S_NumDealsPurchases + 0.61058929168945 * S_NumWebPurchases + 0.5142937908155 * S_RANGE_Frq + 
-1.23123193133177 * S_RANGE_Recency + -0.7319244160517 * S_RANGE_average_purchase + 
0.72874412646371 * S_RANGE_campaign_acceptance ;
3693044   +   H12  =     0.50281359481501 * S_MntCard_Games  +    -0.73154447262623 *
3693045   +        S_MntMagazines  +     1.37258888380577 * S_NumCatalogPurchases
3693046   +          +    -2.03191895167214 * S_NumDealsPurchases
3693047   +          +     -0.9480138597536 * S_NumWebPurchases
3693048   +          +    -1.90232641165453 * S_RANGE_Frq  +     4.50454242959668 *
3693049   +        S_RANGE_Recency  +     3.14689802470687 * S_RANGE_average_purchase
3693050   +          +     0.90975760149714 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.50281359481501 * S_MntCard_Games + -0.73154447262623 * 
S_MntMagazines + 1.37258888380577 * S_NumCatalogPurchases + -2.03191895167214 * 
S_NumDealsPurchases + -0.9480138597536 * S_NumWebPurchases + -1.90232641165453 * S_RANGE_Frq + 
4.50454242959668 * S_RANGE_Recency + 3.14689802470687 * S_RANGE_average_purchase + 
0.90975760149714 * S_RANGE_campaign_acceptance ;
3693051   +   H13  =    -0.04572597854281 * S_MntCard_Games  +     0.04372992424537 *
3693052   +        S_MntMagazines  +     -0.2558194673146 * S_NumCatalogPurchases
3693053   +          +    -0.54020298079174 * S_NumDealsPurchases
3693054   +          +      0.1443903811728 * S_NumWebPurchases
3693055   +          +     0.21259004987769 * S_RANGE_Frq  +     1.07416199834363 *
3693056   +        S_RANGE_Recency  +      0.2548582317131 * S_RANGE_average_purchase
3693057   +          +    -0.29580404164563 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.04572597854281 * S_MntCard_Games + 0.04372992424537 * 
S_MntMagazines + -0.2558194673146 * S_NumCatalogPurchases + -0.54020298079174 * 
S_NumDealsPurchases + 0.1443903811728 * S_NumWebPurchases + 0.21259004987769 * S_RANGE_Frq + 
1.07416199834363 * S_RANGE_Recency + 0.2548582317131 * S_RANGE_average_purchase + 
-0.29580404164563 * S_RANGE_campaign_acceptance ;
3693058   +   H14  =    -3.09361926115241 * S_MntCard_Games  +     0.50367476484986 *
3693059   +        S_MntMagazines  +    -2.00534837877656 * S_NumCatalogPurchases
3693060   +          +    -4.28371676525883 * S_NumDealsPurchases
3693061   +          +    -2.42194135206806 * S_NumWebPurchases
3693062   +          +     0.98960958139385 * S_RANGE_Frq  +    -1.25973464134301 *
3693063   +        S_RANGE_Recency  +    -1.67449915926622 * S_RANGE_average_purchase
3693064   +          +    -1.52632382632171 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -3.09361926115241 * S_MntCard_Games + 0.50367476484986 * 
S_MntMagazines + -2.00534837877656 * S_NumCatalogPurchases + -4.28371676525883 * 
S_NumDealsPurchases + -2.42194135206806 * S_NumWebPurchases + 0.98960958139385 * S_RANGE_Frq + 
-1.25973464134301 * S_RANGE_Recency + -1.67449915926622 * S_RANGE_average_purchase + 
-1.52632382632171 * S_RANGE_campaign_acceptance ;
3693065   +   H15  =    -0.05669824052148 * S_MntCard_Games  +     0.18688515673173 *
3693066   +        S_MntMagazines  +      0.7115682471695 * S_NumCatalogPurchases
3693067   +          +    -1.34005613902077 * S_NumDealsPurchases
3693068   +          +     -1.8244223918309 * S_NumWebPurchases
3693069   +          +     -1.2925687066971 * S_RANGE_Frq  +     1.73537126238404 *
3693070   +        S_RANGE_Recency  +    -1.83847728755717 * S_RANGE_average_purchase
3693071   +          +     -1.0260744483329 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -0.05669824052148 * S_MntCard_Games + 0.18688515673173 * 
S_MntMagazines + 0.7115682471695 * S_NumCatalogPurchases + -1.34005613902077 * 
S_NumDealsPurchases + -1.8244223918309 * S_NumWebPurchases + -1.2925687066971 * S_RANGE_Frq + 
1.73537126238404 * S_RANGE_Recency + -1.83847728755717 * S_RANGE_average_purchase + 
-1.0260744483329 * S_RANGE_campaign_acceptance ;
3693072   +   H16  =     -0.6255680375209 * S_MntCard_Games  +    -1.00126705732116 *
3693073   +        S_MntMagazines  +    -0.48261390617401 * S_NumCatalogPurchases
3693074   +          +    -0.57209240868565 * S_NumDealsPurchases
3693075   +          +     0.12380336219785 * S_NumWebPurchases
3693076   +          +    -0.09362640067962 * S_RANGE_Frq  +     1.38152242056825 *
3693077   +        S_RANGE_Recency  +    -0.61751514865554 * S_RANGE_average_purchase
3693078   +          +    -0.63460867348168 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.6255680375209 * S_MntCard_Games + -1.00126705732116 * 
S_MntMagazines + -0.48261390617401 * S_NumCatalogPurchases + -0.57209240868565 * 
S_NumDealsPurchases + 0.12380336219785 * S_NumWebPurchases + -0.09362640067962 * S_RANGE_Frq + 
1.38152242056825 * S_RANGE_Recency + -0.61751514865554 * S_RANGE_average_purchase + 
-0.63460867348168 * S_RANGE_campaign_acceptance ;
3693079   +   H11  = H11  +    -0.47330657567106 * Marital_StatusDivorced
3693080   +          +    -1.06745895573866 * Marital_StatusMarried
3693081   +          +     0.81685509233804 * Marital_StatusSingle
3693082   +          +    -0.99190475578861 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.47330657567106 * Marital_StatusDivorced + 
-1.06745895573866 * Marital_StatusMarried + 0.81685509233804 * Marital_StatusSingle + 
-0.99190475578861 * Marital_StatusTogether ;
3693083   +   H12  = H12  +      2.7569166430108 * Marital_StatusDivorced
3693084   +          +    -0.95635900826446 * Marital_StatusMarried
3693085   +          +    -0.29557433008229 * Marital_StatusSingle
3693086   +          +     1.41255137333055 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 2.7569166430108 * Marital_StatusDivorced + 
-0.95635900826446 * Marital_StatusMarried + -0.29557433008229 * Marital_StatusSingle + 
1.41255137333055 * Marital_StatusTogether ;
3693087   +   H13  = H13  +    -0.57281141808981 * Marital_StatusDivorced
3693088   +          +     0.19089853555624 * Marital_StatusMarried
3693089   +          +    -2.00914792518758 * Marital_StatusSingle
3693090   +          +     0.76260109852448 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.57281141808981 * Marital_StatusDivorced + 
0.19089853555624 * Marital_StatusMarried + -2.00914792518758 * Marital_StatusSingle + 
0.76260109852448 * Marital_StatusTogether ;
3693091   +   H14  = H14  +     0.32097569256078 * Marital_StatusDivorced
3693092   +          +     4.09032307503783 * Marital_StatusMarried
3693093   +          +     0.96568013149301 * Marital_StatusSingle
3693094   +          +    -1.52149599742185 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.32097569256078 * Marital_StatusDivorced + 
4.09032307503783 * Marital_StatusMarried + 0.96568013149301 * Marital_StatusSingle + 
-1.52149599742185 * Marital_StatusTogether ;
3693095   +   H15  = H15  +     2.93755472583355 * Marital_StatusDivorced
3693096   +          +    -1.43508459663406 * Marital_StatusMarried
3693097   +          +     3.63441830074979 * Marital_StatusSingle
3693098   +          +     1.61139415890284 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 2.93755472583355 * Marital_StatusDivorced + 
-1.43508459663406 * Marital_StatusMarried + 3.63441830074979 * Marital_StatusSingle + 
1.61139415890284 * Marital_StatusTogether ;
3693099   +   H16  = H16  +    -0.48207612180145 * Marital_StatusDivorced
3693100   +          +    -0.28898131330943 * Marital_StatusMarried
3693101   +          +     1.51201970375236 * Marital_StatusSingle
3693102   +          +    -1.36092154681452 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.48207612180145 * Marital_StatusDivorced + 
-0.28898131330943 * Marital_StatusMarried + 1.51201970375236 * Marital_StatusSingle + 
-1.36092154681452 * Marital_StatusTogether ;
3693103   +   H11  =    -1.61024423215794 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.61024423215794 + H11 ;
3693104   +   H12  =    -0.60146563977246 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.60146563977246 + H12 ;
3693105   +   H13  =     0.40402408207659 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.40402408207659 + H13 ;
3693106   +   H14  =     1.33615251475706 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.33615251475706 + H14 ;
3693107   +   H15  =     0.37965845641871 + H15 ;
MPRINT(SCORETABLES):   H15 = 0.37965845641871 + H15 ;
3693108   +   H16  =      0.0354150840422 + H16 ;
MPRINT(SCORETABLES):   H16 = 0.0354150840422 + H16 ;
3693109   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3693110   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3693111   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3693112   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3693113   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3693114   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3693115   +END;
MPRINT(SCORETABLES):   END;
3693116   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3693117   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3693118   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3693119   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3693120   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3693121   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3693122   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3693123   +END;
MPRINT(SCORETABLES):   END;
3693124   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693125   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3693126   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693127   +
3693128   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3693129   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3693130   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3693131   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3693132   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3693133   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3693134   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3693135   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3693136   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3693137   +end;
MPRINT(SCORETABLES):   end;
3693138   +else do;
MPRINT(SCORETABLES):   else do;
3693139   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3693140   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3693141   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3693142   +   end;
MPRINT(SCORETABLES):   end;
3693143   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3693144   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3693145   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3693146   +   end;
MPRINT(SCORETABLES):   end;
3693147   +   else do;
MPRINT(SCORETABLES):   else do;
3693148   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3693149   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3693150   +   end;
MPRINT(SCORETABLES):   end;
3693151   +end;
MPRINT(SCORETABLES):   end;
3693152   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3693153   +   P_DepVar1  =     6.16209919838699 * H11  +     4.50364692986037 * H12
3693154   +          +    -6.64079567142035 * H13  +    -2.28665862644821 * H14
3693155   +          +    -3.20328658335471 * H15  +    -4.89511957134481 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 6.16209919838699 * H11 + 4.50364692986037 * H12 + 
-6.64079567142035 * H13 + -2.28665862644821 * H14 + -3.20328658335471 * H15 + 
-4.89511957134481 * H16 ;
3693156   +   P_DepVar1  =    -5.09385867425055 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.09385867425055 + P_DepVar1 ;
3693157   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3693158   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3693159   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3693160   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3693161   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3693162   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3693163   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3693164   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3693165   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3693166   +END;
MPRINT(SCORETABLES):   END;
3693167   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3693168   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3693169   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3693170   +END;
MPRINT(SCORETABLES):   END;
3693171   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3693172   +   P_DepVar1  =     0.13673285198555;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13673285198555;
3693173   +   P_DepVar0  =     0.86326714801444;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86326714801444;
3693174   +END;
MPRINT(SCORETABLES):   END;
3693175   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3693176   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3693177   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3693178   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3693179   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3693180   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3693181   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3693182   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693183   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3693184   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693185   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3693186   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3693187   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3693188   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3693189   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3693190   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3693191   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3693192   +END;
MPRINT(SCORETABLES):   END;
3693193   +********************************;
MPRINT(SCORETABLES):   ********************************;
3693194   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3693195   +********************************;
MPRINT(SCORETABLES):   ********************************;
3693196   +drop
3693197   +S_MntCard_Games
3693198   +S_MntMagazines
3693199   +S_NumCatalogPurchases
3693200   +S_NumDealsPurchases
3693201   +S_NumWebPurchases
3693202   +S_RANGE_Frq
3693203   +S_RANGE_Recency
3693204   +S_RANGE_average_purchase
3693205   +S_RANGE_campaign_acceptance
3693206   +H11
3693207   +H12
3693208   +H13
3693209   +H14
3693210   +H15
3693211   +H16
3693212   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3693213   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3693214   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3693215   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3693216   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3693217   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3693218   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3693219   +end;
MPRINT(SCORETABLES):   end;
3693220   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3693221   +* Grp11: StartGroup;
MPRINT(SCORETABLES):   * Grp11: StartGroup;
3693222   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3693223   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3693224   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3693225   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3693226   +if (cv_var =10)  then do;
MPRINT(SCORETABLES):   if (cv_var =10) then do;
3693227   +_XVAL_=10;
MPRINT(SCORETABLES):   _XVAL_=10;
3693228   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3693229   +* Neural3: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural3: NeuralNetwork;
3693230   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3693231   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3693232   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3693233   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3693234   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3693235   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3693236   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3693237   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3693238   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3693239   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3693240   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3693241   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3693242   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3693243   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3693244   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3693245   +LENGTH _WARN_ $4
3693246   +      F_DepVar  $ 12
3693247   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3693248   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3693249   +
3693250   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3693251   +
3693252   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3693253   +
3693254   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3693255   +
3693256   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3693257   +
3693258   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3693259   +
3693260   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3693261   +
3693262   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3693263   +
3693264   +      label S_RANGE_campaign_acceptance =
3693265   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3693266   +
3693267   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3693268   +
3693269   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3693270   +
3693271   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3693272   +
3693273   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3693274   +
3693275   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3693276   +
3693277   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3693278   +
3693279   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3693280   +
3693281   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3693282   +
3693283   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3693284   +
3693285   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3693286   +
3693287   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3693288   +
3693289   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3693290   +
3693291   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3693292   +
3693293   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3693294   +
3693295   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3693296   +
3693297   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3693298   +
3693299   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3693300   +
3693301   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3693302   +
3693303   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3693304   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3693305   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3693306   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3693307   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3693308   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3693309   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3693310   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3693311   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3693312   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3693313   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3693314   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3693315   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3693316   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3693317   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3693318   +end;
MPRINT(SCORETABLES):   end;
3693319   +else do;
MPRINT(SCORETABLES):   else do;
3693320   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3693321   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3693322   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3693323   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3693324   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3693325   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3693326   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3693327   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3693328   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3693329   +         end;
MPRINT(SCORETABLES):   end;
3693330   +         else do;
MPRINT(SCORETABLES):   else do;
3693331   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3693332   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3693333   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3693334   +            end;
MPRINT(SCORETABLES):   end;
3693335   +         end;
MPRINT(SCORETABLES):   end;
3693336   +      end;
MPRINT(SCORETABLES):   end;
3693337   +      else do;
MPRINT(SCORETABLES):   else do;
3693338   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3693339   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3693340   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3693341   +         end;
MPRINT(SCORETABLES):   end;
3693342   +      end;
MPRINT(SCORETABLES):   end;
3693343   +   end;
MPRINT(SCORETABLES):   end;
3693344   +   else do;
MPRINT(SCORETABLES):   else do;
3693345   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3693346   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3693347   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3693348   +      end;
MPRINT(SCORETABLES):   end;
3693349   +      else do;
MPRINT(SCORETABLES):   else do;
3693350   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3693351   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3693352   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3693353   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3693354   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3693355   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3693356   +         end;
MPRINT(SCORETABLES):   end;
3693357   +      end;
MPRINT(SCORETABLES):   end;
3693358   +   end;
MPRINT(SCORETABLES):   end;
3693359   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3693360   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3693361   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3693362   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3693363   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3693364   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3693365   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3693366   +   end;
MPRINT(SCORETABLES):   end;
3693367   +end;
MPRINT(SCORETABLES):   end;
3693368   +
3693369   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693370   +*** Checking missing input Interval
3693371   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3693372   +
3693373   +IF NMISS(
3693374   +   MntCard_Games ,
3693375   +   MntMagazines ,
3693376   +   NumCatalogPurchases ,
3693377   +   NumDealsPurchases ,
3693378   +   NumWebPurchases ,
3693379   +   RANGE_Frq ,
3693380   +   RANGE_Recency ,
3693381   +   RANGE_average_purchase ,
3693382   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3693383   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3693384   +
3693385   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3693386   +END;
MPRINT(SCORETABLES):   END;
3693387   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693388   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3693389   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693390   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3693391   +   S_MntCard_Games  =    -2.30918854581405 +     6.61801006219653 *
3693392   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30918854581405 + 6.61801006219653 * MntCard_Games ;
3693393   +   S_MntMagazines  =    -0.84261781049883 +     17.6585895016814 *
3693394   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84261781049883 + 17.6585895016814 * MntMagazines ;
3693395   +   S_NumCatalogPurchases  =    -3.12037022024461 +     13.4933890263556 *
3693396   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12037022024461 + 13.4933890263556 * 
NumCatalogPurchases ;
3693397   +   S_NumDealsPurchases  =      -1.408873960652 +     11.1635890207703 *
3693398   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.408873960652 + 11.1635890207703 * 
NumDealsPurchases ;
3693399   +   S_NumWebPurchases  =    -5.25049385713447 +     12.3080007490462 *
3693400   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.25049385713447 + 12.3080007490462 * 
NumWebPurchases ;
3693401   +   S_RANGE_Frq  =    -1.36690690404855 +     4.21318814288285 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36690690404855 + 4.21318814288285 * RANGE_Frq ;
3693402   +   S_RANGE_Recency  =    -1.67574189796136 +     3.38964188013597 *
3693403   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67574189796136 + 3.38964188013597 * RANGE_Recency ;
3693404   +   S_RANGE_average_purchase  =    -1.04095750675198 +     5.16476140443727 *
3693405   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04095750675198 + 5.16476140443727 * 
RANGE_average_purchase ;
3693406   +   S_RANGE_campaign_acceptance
3693407   +          =    -0.48096710523328 +     5.81956874143758 *
3693408   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.48096710523328 + 5.81956874143758 * 
RANGE_campaign_acceptance ;
3693409   +END;
MPRINT(SCORETABLES):   END;
3693410   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3693411   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3693412   +   ELSE S_MntCard_Games  =    -2.30918854581405 +     6.61801006219653 *
3693413   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30918854581405 + 6.61801006219653 * 
MntCard_Games ;
3693414   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3693415   +   ELSE S_MntMagazines  =    -0.84261781049883 +     17.6585895016814 *
3693416   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84261781049883 + 17.6585895016814 * 
MntMagazines ;
3693417   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3693418   +   ELSE S_NumCatalogPurchases
3693419   +          =    -3.12037022024461 +     13.4933890263556 * NumCatalogPurchases
3693420   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12037022024461 + 13.4933890263556 * 
NumCatalogPurchases ;
3693421   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3693422   +   ELSE S_NumDealsPurchases  =      -1.408873960652 +     11.1635890207703 *
3693423   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.408873960652 + 11.1635890207703 * 
NumDealsPurchases ;
3693424   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3693425   +   ELSE S_NumWebPurchases  =    -5.25049385713447 +     12.3080007490462 *
3693426   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.25049385713447 + 12.3080007490462 * 
NumWebPurchases ;
3693427   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3693428   +   ELSE S_RANGE_Frq  =    -1.36690690404855 +     4.21318814288285 * RANGE_Frq
3693429   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36690690404855 + 4.21318814288285 * RANGE_Frq ;
3693430   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3693431   +   ELSE S_RANGE_Recency  =    -1.67574189796136 +     3.38964188013597 *
3693432   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67574189796136 + 3.38964188013597 * 
RANGE_Recency ;
3693433   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3693434   +   ELSE S_RANGE_average_purchase
3693435   +          =    -1.04095750675198 +     5.16476140443727 *
3693436   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04095750675198 + 5.16476140443727 * 
RANGE_average_purchase ;
3693437   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3693438   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3693439   +   ELSE S_RANGE_campaign_acceptance
3693440   +          =    -0.48096710523328 +     5.81956874143758 *
3693441   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.48096710523328 + 5.81956874143758 
* RANGE_campaign_acceptance ;
3693442   +END;
MPRINT(SCORETABLES):   END;
3693443   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693444   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3693445   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693446   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693447   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3693448   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693449   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3693450   +   H11  =    -0.72119329787386 * S_MntCard_Games  +    -1.45295995424379 *
3693451   +        S_MntMagazines  +    -0.55755782764482 * S_NumCatalogPurchases
3693452   +          +     0.76929501299928 * S_NumDealsPurchases
3693453   +          +     1.27332973645547 * S_NumWebPurchases
3693454   +          +     3.44911664509974 * S_RANGE_Frq  +     -0.5351143429707 *
3693455   +        S_RANGE_Recency  +    -0.65702433695851 * S_RANGE_average_purchase
3693456   +          +     1.07309078258672 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.72119329787386 * S_MntCard_Games + -1.45295995424379 * 
S_MntMagazines + -0.55755782764482 * S_NumCatalogPurchases + 0.76929501299928 * 
S_NumDealsPurchases + 1.27332973645547 * S_NumWebPurchases + 3.44911664509974 * S_RANGE_Frq + 
-0.5351143429707 * S_RANGE_Recency + -0.65702433695851 * S_RANGE_average_purchase + 
1.07309078258672 * S_RANGE_campaign_acceptance ;
3693457   +   H12  =     1.17206827986685 * S_MntCard_Games  +    -0.75959467574514 *
3693458   +        S_MntMagazines  +    -0.69905484067663 * S_NumCatalogPurchases
3693459   +          +    -2.21240109905296 * S_NumDealsPurchases
3693460   +          +    -1.87636157076342 * S_NumWebPurchases
3693461   +          +    -0.25804670628179 * S_RANGE_Frq  +     1.23680142599868 *
3693462   +        S_RANGE_Recency  +     2.06468080942811 * S_RANGE_average_purchase
3693463   +          +     2.98273859234759 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.17206827986685 * S_MntCard_Games + -0.75959467574514 * 
S_MntMagazines + -0.69905484067663 * S_NumCatalogPurchases + -2.21240109905296 * 
S_NumDealsPurchases + -1.87636157076342 * S_NumWebPurchases + -0.25804670628179 * S_RANGE_Frq 
+ 1.23680142599868 * S_RANGE_Recency + 2.06468080942811 * S_RANGE_average_purchase + 
2.98273859234759 * S_RANGE_campaign_acceptance ;
3693464   +   H13  =     -0.0495155233842 * S_MntCard_Games  +     -0.1934849915977 *
3693465   +        S_MntMagazines  +    -0.09347897576759 * S_NumCatalogPurchases
3693466   +          +    -0.52539078991587 * S_NumDealsPurchases
3693467   +          +     0.25068053523421 * S_NumWebPurchases
3693468   +          +     0.41769318691099 * S_RANGE_Frq  +      0.5775945316972 *
3693469   +        S_RANGE_Recency  +     0.10356349292501 * S_RANGE_average_purchase
3693470   +          +     -0.1980068632095 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.0495155233842 * S_MntCard_Games + -0.1934849915977 * 
S_MntMagazines + -0.09347897576759 * S_NumCatalogPurchases + -0.52539078991587 * 
S_NumDealsPurchases + 0.25068053523421 * S_NumWebPurchases + 0.41769318691099 * S_RANGE_Frq + 
0.5775945316972 * S_RANGE_Recency + 0.10356349292501 * S_RANGE_average_purchase + 
-0.1980068632095 * S_RANGE_campaign_acceptance ;
3693471   +   H14  =    -5.64529465406281 * S_MntCard_Games  +     1.19152228062841 *
3693472   +        S_MntMagazines  +    -1.38167417341416 * S_NumCatalogPurchases
3693473   +          +    -3.50258006684404 * S_NumDealsPurchases
3693474   +          +    -3.19716454779915 * S_NumWebPurchases
3693475   +          +     1.71632621585567 * S_RANGE_Frq  +    -0.55716763216155 *
3693476   +        S_RANGE_Recency  +     1.03047877164953 * S_RANGE_average_purchase
3693477   +          +    -2.77945186313122 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -5.64529465406281 * S_MntCard_Games + 1.19152228062841 * 
S_MntMagazines + -1.38167417341416 * S_NumCatalogPurchases + -3.50258006684404 * 
S_NumDealsPurchases + -3.19716454779915 * S_NumWebPurchases + 1.71632621585567 * S_RANGE_Frq + 
-0.55716763216155 * S_RANGE_Recency + 1.03047877164953 * S_RANGE_average_purchase + 
-2.77945186313122 * S_RANGE_campaign_acceptance ;
3693478   +   H15  =    -1.12714933951324 * S_MntCard_Games  +     0.36916171134137 *
3693479   +        S_MntMagazines  +    -0.88793226248091 * S_NumCatalogPurchases
3693480   +          +    -0.13676410783135 * S_NumDealsPurchases
3693481   +          +    -1.38625771097984 * S_NumWebPurchases
3693482   +          +     -0.5859883428652 * S_RANGE_Frq  +     1.70743371830164 *
3693483   +        S_RANGE_Recency  +     0.37066841253591 * S_RANGE_average_purchase
3693484   +          +    -0.97660437107142 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = -1.12714933951324 * S_MntCard_Games + 0.36916171134137 * 
S_MntMagazines + -0.88793226248091 * S_NumCatalogPurchases + -0.13676410783135 * 
S_NumDealsPurchases + -1.38625771097984 * S_NumWebPurchases + -0.5859883428652 * S_RANGE_Frq + 
1.70743371830164 * S_RANGE_Recency + 0.37066841253591 * S_RANGE_average_purchase + 
-0.97660437107142 * S_RANGE_campaign_acceptance ;
3693485   +   H16  =    -0.34803381118276 * S_MntCard_Games  +    -0.38461820307206 *
3693486   +        S_MntMagazines  +    -0.49925952589762 * S_NumCatalogPurchases
3693487   +          +    -0.46935048271648 * S_NumDealsPurchases
3693488   +          +     0.13132510163854 * S_NumWebPurchases
3693489   +          +      0.1662180111598 * S_RANGE_Frq  +     0.64592603022417 *
3693490   +        S_RANGE_Recency  +    -0.28522799997819 * S_RANGE_average_purchase
3693491   +          +    -0.20387858203378 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.34803381118276 * S_MntCard_Games + -0.38461820307206 * 
S_MntMagazines + -0.49925952589762 * S_NumCatalogPurchases + -0.46935048271648 * 
S_NumDealsPurchases + 0.13132510163854 * S_NumWebPurchases + 0.1662180111598 * S_RANGE_Frq + 
0.64592603022417 * S_RANGE_Recency + -0.28522799997819 * S_RANGE_average_purchase + 
-0.20387858203378 * S_RANGE_campaign_acceptance ;
3693492   +   H11  = H11  +    -0.77688656799974 * Marital_StatusDivorced
3693493   +          +    -2.03104245048515 * Marital_StatusMarried
3693494   +          +    -1.11863815419988 * Marital_StatusSingle
3693495   +          +      0.4568562323328 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.77688656799974 * Marital_StatusDivorced + 
-2.03104245048515 * Marital_StatusMarried + -1.11863815419988 * Marital_StatusSingle + 
0.4568562323328 * Marital_StatusTogether ;
3693496   +   H12  = H12  +    -1.89866140389785 * Marital_StatusDivorced
3693497   +          +     1.23445372453463 * Marital_StatusMarried
3693498   +          +     0.49900176443941 * Marital_StatusSingle
3693499   +          +     2.03956264569684 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -1.89866140389785 * Marital_StatusDivorced + 
1.23445372453463 * Marital_StatusMarried + 0.49900176443941 * Marital_StatusSingle + 
2.03956264569684 * Marital_StatusTogether ;
3693500   +   H13  = H13  +     -1.7089712758507 * Marital_StatusDivorced
3693501   +          +     0.09244737118714 * Marital_StatusMarried
3693502   +          +    -1.82500260744085 * Marital_StatusSingle
3693503   +          +     1.28210527759073 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.7089712758507 * Marital_StatusDivorced + 
0.09244737118714 * Marital_StatusMarried + -1.82500260744085 * Marital_StatusSingle + 
1.28210527759073 * Marital_StatusTogether ;
3693504   +   H14  = H14  +     0.23067416364417 * Marital_StatusDivorced
3693505   +          +     3.09102757694823 * Marital_StatusMarried
3693506   +          +     -1.2687664350416 * Marital_StatusSingle
3693507   +          +     1.95523653613823 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.23067416364417 * Marital_StatusDivorced + 
3.09102757694823 * Marital_StatusMarried + -1.2687664350416 * Marital_StatusSingle + 
1.95523653613823 * Marital_StatusTogether ;
3693508   +   H15  = H15  +     1.61651105876832 * Marital_StatusDivorced
3693509   +          +     1.66116971604752 * Marital_StatusMarried
3693510   +          +     0.38692792919249 * Marital_StatusSingle
3693511   +          +     2.02941753642745 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.61651105876832 * Marital_StatusDivorced + 
1.66116971604752 * Marital_StatusMarried + 0.38692792919249 * Marital_StatusSingle + 
2.02941753642745 * Marital_StatusTogether ;
3693512   +   H16  = H16  +    -0.01592267137904 * Marital_StatusDivorced
3693513   +          +     0.14704399190288 * Marital_StatusMarried
3693514   +          +     0.68151835317996 * Marital_StatusSingle
3693515   +          +    -0.64461672698642 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.01592267137904 * Marital_StatusDivorced + 
0.14704399190288 * Marital_StatusMarried + 0.68151835317996 * Marital_StatusSingle + 
-0.64461672698642 * Marital_StatusTogether ;
3693516   +   H11  =    -0.20279250295501 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.20279250295501 + H11 ;
3693517   +   H12  =    -2.26480457252219 + H12 ;
MPRINT(SCORETABLES):   H12 = -2.26480457252219 + H12 ;
3693518   +   H13  =    -0.15253254107791 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.15253254107791 + H13 ;
3693519   +   H14  =     1.89723924268148 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.89723924268148 + H14 ;
3693520   +   H15  =     1.36400424164324 + H15 ;
MPRINT(SCORETABLES):   H15 = 1.36400424164324 + H15 ;
3693521   +   H16  =     0.35474619982846 + H16 ;
MPRINT(SCORETABLES):   H16 = 0.35474619982846 + H16 ;
3693522   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3693523   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3693524   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3693525   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3693526   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3693527   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3693528   +END;
MPRINT(SCORETABLES):   END;
3693529   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3693530   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3693531   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3693532   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3693533   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3693534   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3693535   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3693536   +END;
MPRINT(SCORETABLES):   END;
3693537   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693538   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3693539   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693540   +
3693541   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3693542   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3693543   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3693544   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3693545   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3693546   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3693547   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3693548   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3693549   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3693550   +end;
MPRINT(SCORETABLES):   end;
3693551   +else do;
MPRINT(SCORETABLES):   else do;
3693552   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3693553   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3693554   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3693555   +   end;
MPRINT(SCORETABLES):   end;
3693556   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3693557   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3693558   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3693559   +   end;
MPRINT(SCORETABLES):   end;
3693560   +   else do;
MPRINT(SCORETABLES):   else do;
3693561   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3693562   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3693563   +   end;
MPRINT(SCORETABLES):   end;
3693564   +end;
MPRINT(SCORETABLES):   end;
3693565   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3693566   +   P_DepVar1  =     2.26066475153079 * H11  +     2.60261842374516 * H12
3693567   +          +    -5.34160037685808 * H13  +    -1.32735448967693 * H14
3693568   +          +    -3.68489816323255 * H15  +    -6.20369831817812 * H16 ;
MPRINT(SCORETABLES):   P_DepVar1 = 2.26066475153079 * H11 + 2.60261842374516 * H12 + 
-5.34160037685808 * H13 + -1.32735448967693 * H14 + -3.68489816323255 * H15 + 
-6.20369831817812 * H16 ;
3693569   +   P_DepVar1  =    -4.23272828331628 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.23272828331628 + P_DepVar1 ;
3693570   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3693571   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3693572   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3693573   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3693574   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3693575   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3693576   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3693577   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3693578   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3693579   +END;
MPRINT(SCORETABLES):   END;
3693580   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3693581   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3693582   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3693583   +END;
MPRINT(SCORETABLES):   END;
3693584   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3693585   +   P_DepVar1  =     0.13782051282051;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13782051282051;
3693586   +   P_DepVar0  =     0.86217948717948;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86217948717948;
3693587   +END;
MPRINT(SCORETABLES):   END;
3693588   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3693589   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3693590   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3693591   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3693592   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3693593   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3693594   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3693595   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693596   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3693597   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3693598   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3693599   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3693600   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3693601   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3693602   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3693603   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3693604   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3693605   +END;
MPRINT(SCORETABLES):   END;
3693606   +********************************;
MPRINT(SCORETABLES):   ********************************;
3693607   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3693608   +********************************;
MPRINT(SCORETABLES):   ********************************;
3693609   +drop
3693610   +S_MntCard_Games
3693611   +S_MntMagazines
3693612   +S_NumCatalogPurchases
3693613   +S_NumDealsPurchases
3693614   +S_NumWebPurchases
3693615   +S_RANGE_Frq
3693616   +S_RANGE_Recency
3693617   +S_RANGE_average_purchase
3693618   +S_RANGE_campaign_acceptance
3693619   +H11
3693620   +H12
3693621   +H13
3693622   +H14
3693623   +H15
3693624   +H16
3693625   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 ;
3693626   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3693627   +* EndGrp11: EndGroup;
MPRINT(SCORETABLES):   * EndGrp11: EndGroup;
3693628   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3693629   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3693630   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3693631   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3693632   +end;
MPRINT(SCORETABLES):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;

NOTE: DATA STEP view saved on file EMWS1.ENDGRP11_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
      

MPRINT(POSTLOOP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End POSTLOOP: EndGrp11;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3693633    *------------------------------------------------------------*;
3693634    * End POSTLOOP: EndGrp11;
3693635    *------------------------------------------------------------*;
3693636    

NOTE: There were 10 observations read from the data set EMWS1.GRP11_EMLOOPINFO.
NOTE: The data set EMWS1.ENDGRP11_EMLOOPINFO has 10 observations and 3 variables.
3693637    proc print data=EMWS1.EndGrp11_EMLOOPINFO noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.EndGrp11_EMLOOPINFO noobs label;
3693638    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rptgroupsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Group Summary";
MPRINT(EM_DIAGRAM):   run;
3693639    run;

NOTE: There were 10 observations read from the data set EMWS1.ENDGRP11_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2420.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3693640    title9;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ 
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.EndGrp11_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ 
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of 
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" 
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_= 
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: 
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ 
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_DepVar) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
3693664    data EMWS1.EndGrp11_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMOUTFIT;
3693665    set WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set WORK.OUTFITDATA;
3693666    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.ENDGRP11_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3693667    data EMWS1.EndGrp11_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMOUTFIT;
3693668    set EMWS1.EndGrp11_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMOUTFIT;
3693669    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3693670    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3693670  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3693671    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3693672    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP11_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3693673    proc sort data=EMWS1.EndGrp11_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp11_EMREPORTFIT nothreads;
3693674    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3693675    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.ENDGRP11_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP11_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3693676    %let _EMwarndup = 0;
3693677    %let _EMtargetdup =;
3693678    %let _EMASEtargetdup =;
3693679    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3693680    set EMWS1.EndGrp11_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMOUTFIT;
3693681    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3693682    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3693683    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3693684    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3693685    end;
MPRINT(EM_DIAGRAM):   end;
3693686    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3693687    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3693688    * EndGrp11: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp11: Computing metadata for TRAIN data;
3693689    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.ENDGRP11_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp11_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp11_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp11_TRAIN out=WORK.M1C8OPLQ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C8OPLQ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C8OPLQ(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C8OPLQ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C8OPLQ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M35EB2T7 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2AYH2RF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   set WORK.M35EB2T7;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp11";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp11";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp11";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp11: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3694040    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3694041    set EMWS1.EndGrp11_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMINFO;
3694042    where DATA='EndGrp11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp11' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
3694043    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMINFO.
      WHERE (DATA='EndGrp11') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3694044    data EMWS1.EndGrp11_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMINFO;
3694045    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3694046    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3694047    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.ENDGRP11_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
3694051    run;
3694052    data EMWS1.EndGrp11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMINFO;
3694053    set EMWS1.EndGrp11_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMINFO WORK.MODELTEMP_INFO;
3694054    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.ENDGRP11_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP11_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3694055    proc sort data = EMWS1.EndGrp11_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp11_EMINFO NOTHREADS;
3694056    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3694057    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.ENDGRP11_EMINFO.
NOTE: The data set EMWS1.ENDGRP11_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3694058    proc sort data = EMWS1.Neural3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3694059    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3694060    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.NEURAL3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3694061    proc sort data = EMWS1.EndGrp11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp11_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3694062    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3694063    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP11_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3694064    data EMWS1.EndGrp11_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMINFO;
3694065    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3694066    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3694067    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP11_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3694068    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3694069    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3694070    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3694071    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

NOTE: View EMWS1.ENDGRP11_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp11: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp11: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp11: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3694533    %let EMEXCEPTIONSTRING=;
3694534    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3694535    * POSTLOOPREPORT: EndGrp11;
MPRINT(EM_DIAGRAM):   * POSTLOOPREPORT: EndGrp11;
3694536    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3694537    %let EM_ACTION = POSTLOOPREPORT;
3694538    %let syscc = 0;
3694539    %macro main;
3694540       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3694541    
3694542           filename temp catalog 'sashelp.emutil.endgp_train.source';
3694543           %include temp;
3694544           filename temp;
3694545    
3694546           %train;
3694547    
3694548       %end;
3694549       %else
3694550          %if %upcase(&EM_ACTION) = SCORE %then %do;
3694551    
3694552           filename temp catalog 'sashelp.emutil.endgp_score.source';
3694553           %include temp;
3694554           filename temp;
3694555    
3694556           %score;
3694557       %end;
3694558       %else
3694559       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3694560    
3694561           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3694562           %include temp;
3694563           filename temp;
3694564    
3694565           %postloop;
3694566    
3694567       %end;
3694568    
3694569       %doendm:
3694570    %mend main;
3694571    
3694572    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
3694573    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3694574    * End POSTLOOPREPORT: EndGrp11;
MPRINT(EM_DIAGRAM):   * End POSTLOOPREPORT: EndGrp11;
3694575    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3694576    

3694577    proc sort data=EMWS1.Neural3_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural3_CMeta_TRAIN out=WORK.SUBSETINMETA;
3694578    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3694579    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.NEURAL3_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3694580    proc sort data=EMWS1.EndGrp11_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp11_VariableSet 
out=WORK.SUBSETVARSET(keep=NAME REPORT);
3694581    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3694582    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.ENDGRP11_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

3694583    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3694584    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3694585    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3694586    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3694587    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3694588    set EMWS1.EndGrp11_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_CMeta_TRAIN;
3694589    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3694589  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 
'ASSESS', 'COST');
3694590    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.ENDGRP11_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3694591    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3694592    set EMWS1.EndGrp11_TRAIN(keep=
3694593    F_DepVar
3694594    I_DepVar
3694595    P_DepVar0
3694596    P_DepVar1
3694597    R_DepVar0
3694598    R_DepVar1
3694599    U_DepVar
3694600    _WARN_
3694601    DepVar
3694602    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
3694603    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: View EMWS1.ENDGRP11_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.ENDGRP11_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2437 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.EndGrp11_2B36YJA nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EndGrp11_2B36YJA;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 
CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.EndGrp11_2B36YJA(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp11_2B36YJA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp11_2B36YJA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ 
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;

MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS 
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC 
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB 
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST 
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE 
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS 
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370537546 _NEVENTS 
334 _NNONEVENTS 2103 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2437));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.1005825354196E-16 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2437 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
(2437/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2437)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2437/20) ) / ( 
AVGNUMRESP / (2437/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2437/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * 
((20-GROUP+1)* 2437/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - 
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - 
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - 
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - 
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - 
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - 
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - 
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - 
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - 
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - 
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - 
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - 
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - 
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - 
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - 
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
The SAS System

MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - 
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - 
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - 
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - 
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) 
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number 
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = 
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = 
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB = 
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = 
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS 
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior 
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" 
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative 
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = 
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" 
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound 
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" 
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min 
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = 
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = 
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC 
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior 
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response" 
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of 
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative 
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC 
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative 
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best 
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift" 
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % 
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" 
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = 
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3698890    %let grouptarget=0;
3698891    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3698892    set EMWS1.Grp11_EMLOOPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp11_EMLOOPINFO;
3698893    if _TARGET_ ne "" then do;
MPRINT(EM_DIAGRAM):   if _TARGET_ ne "" then do;
3698894    call symput('grouptarget', '1');
MPRINT(EM_DIAGRAM):   call symput('grouptarget', '1');
3698895    stop;
MPRINT(EM_DIAGRAM):   stop;
3698896    end;
MPRINT(EM_DIAGRAM):   end;
3698897    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _TARGET_ is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.GRP11_EMLOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3698898    data work.EMOUTFIT;
MPRINT(EM_DIAGRAM):    data work.EMOUTFIT;
3698899    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3698900    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3698901    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3698901  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3698902    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3698903    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3698904    set EMWS1.EndGrp11_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMOUTFIT;
3698905    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMOUTFIT.
NOTE: The data set WORK.EMOUTFIT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3698906    data EMWS1.EndGrp11_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMOUTFIT_LOOP;
3698907    set EMWS1.EndGrp11_EMOUTFIT_LOOP work.EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMOUTFIT_LOOP work.EMOUTFIT;
3698908    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.ENDGRP11_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP11_EMOUTFIT_LOOP has 11 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3698909    data work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):    data work.EMREPORTFIT;
3698910    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3698911    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3698912    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3698912  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3698913    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3698914    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3698915    set EMWS1.EndGrp11_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMREPORTFIT;
3698916    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.ENDGRP11_EMREPORTFIT.
NOTE: The data set WORK.EMREPORTFIT has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3698917    data EMWS1.EndGrp11_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMREPORTFIT_LOOP;
3698918    set EMWS1.EndGrp11_EMREPORTFIT_LOOP work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMREPORTFIT_LOOP work.EMREPORTFIT;
3698919    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 210 observations read from the data set EMWS1.ENDGRP11_EMREPORTFIT_LOOP.
NOTE: There were 9 observations read from the data set WORK.EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP11_EMREPORTFIT_LOOP has 219 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3698920    data work.EMRANK;
MPRINT(EM_DIAGRAM):    data work.EMRANK;
3698921    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3698922    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3698923    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3698923  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3698924    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3698925    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3698926    set EMWS1.EndGrp11_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMRANK;
3698927    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.ENDGRP11_EMRANK.
NOTE: The data set WORK.EMRANK has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3698928    data EMWS1.EndGrp11_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMRANK_LOOP;
3698929    set EMWS1.EndGrp11_EMRANK_LOOP work.EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMRANK_LOOP work.EMRANK;
3698930    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set EMWS1.ENDGRP11_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMRANK.
NOTE: The data set EMWS1.ENDGRP11_EMRANK_LOOP has 220 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3698931    data work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data work.EMSCOREDIST;
3698932    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3698933    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3698934    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3698934  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3698935    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3698936    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3698937    set EMWS1.EndGrp11_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMSCOREDIST;
3698938    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.ENDGRP11_EMSCOREDIST.
NOTE: The data set WORK.EMSCOREDIST has 20 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3698939    data EMWS1.EndGrp11_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMSCOREDIST_LOOP;
3698940    set EMWS1.EndGrp11_EMSCOREDIST_LOOP work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMSCOREDIST_LOOP work.EMSCOREDIST;
3698941    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set EMWS1.ENDGRP11_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP11_EMSCOREDIST_LOOP has 220 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3698942    data work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data work.EMCLASSIFICATION;
3698943    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3698944    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3698945    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3698945  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3698946    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3698947    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3698948    set EMWS1.EndGrp11_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMCLASSIFICATION;
3698949    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.ENDGRP11_EMCLASSIFICATION.
NOTE: The data set WORK.EMCLASSIFICATION has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3698950    data EMWS1.EndGrp11_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMCLASSIFICATION_LOOP;
3698951    set EMWS1.EndGrp11_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
3698952    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3698953    proc sort data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP out=_temp;
3698954    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3698955    where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
MPRINT(EM_DIAGRAM):   where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
3698956    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP.
      WHERE (_type_='PREDICTION') and correct and (INTO not = ' ') and (FROM not = ' ');
NOTE: The data set WORK._TEMP has 22 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

3698957    data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL totalCount
3698957  ! totalPercent);
MPRINT(EM_DIAGRAM):   data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
totalCount totalPercent);
3698958    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3698959    retain totalCount totalPercent;
MPRINT(EM_DIAGRAM):   retain totalCount totalPercent;
3698960    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3698961    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3698962    totalCount = count;
MPRINT(EM_DIAGRAM):   totalCount = count;
3698963    totalPercent = percent;
MPRINT(EM_DIAGRAM):   totalPercent = percent;
3698964    end;
MPRINT(EM_DIAGRAM):   end;
3698965    else do;
MPRINT(EM_DIAGRAM):   else do;
3698966    totalCount + count;
MPRINT(EM_DIAGRAM):   totalCount + count;
3698967    totalPercent + percent;
MPRINT(EM_DIAGRAM):   totalPercent + percent;
3698968    end;
MPRINT(EM_DIAGRAM):   end;
3698969    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3698970    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TOTAL has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3698971    data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL eventCount
3698971  ! eventPercent);
MPRINT(EM_DIAGRAM):   data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
eventCount eventPercent);
3698972    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3698973    where strip(FROM) eq strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) eq strip(EVENT);
3698974    by _LOOP_ DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ DATAROLE TARGET;
3698975    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3698976    eventCount = count;
MPRINT(EM_DIAGRAM):   eventCount = count;
3698977    eventPercent = percent;
MPRINT(EM_DIAGRAM):   eventPercent = percent;
3698978    end;
MPRINT(EM_DIAGRAM):   end;
3698979    else do;
MPRINT(EM_DIAGRAM):   else do;
3698980    eventCount + count;
MPRINT(EM_DIAGRAM):   eventCount + count;
3698981    eventPercent + percent;
MPRINT(EM_DIAGRAM):   eventPercent + percent;
3698982    end;
MPRINT(EM_DIAGRAM):   end;
3698983    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3698984    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable first.modelid is uninitialized.
NOTE: Variable last.modelid is uninitialized.
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM)=STRIP(EVENT);
NOTE: The data set WORK._EVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3698985    data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL neventCount
3698985  ! neventPercent);
MPRINT(EM_DIAGRAM):   data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
neventCount neventPercent);
3698986    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3698987    retain neventCount neventPercent 0;
MPRINT(EM_DIAGRAM):   retain neventCount neventPercent 0;
3698988    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3698989    where strip(FROM) ne strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) ne strip(EVENT);
3698990    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3698991    neventCount = count;
MPRINT(EM_DIAGRAM):   neventCount = count;
3698992    neventPercent = percent;
MPRINT(EM_DIAGRAM):   neventPercent = percent;
3698993    end;
MPRINT(EM_DIAGRAM):   end;
3698994    else do;
MPRINT(EM_DIAGRAM):   else do;
3698995    neventCount + count;
MPRINT(EM_DIAGRAM):   neventCount + count;
3698996    neventPercent + percent;
MPRINT(EM_DIAGRAM):   neventPercent + percent;
3698997    end;
MPRINT(EM_DIAGRAM):   end;
3698998    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3698999    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM) not = STRIP(EVENT);
NOTE: The data set WORK._NEVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3699000    data EMWS1.EndGrp11_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMMISC_LOOP;
3699001    merge _total _event _nevent;
MPRINT(EM_DIAGRAM):   merge _total _event _nevent;
3699002    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3699003    label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,   NOQUOTE))"
3699003  ! targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3699003  ! eventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctEvent_vlabel,  NOQUOTE))"
3699004       eventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,  NOQUOTE))"
3699004  ! neventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctNEvent_vlabel, NOQUOTE))"
3699004  ! neventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumNEvent_vlabel, NOQUOTE))"
3699005       totalPercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel,    NOQUOTE))"
3699005  !  totalCount = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalcount_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable" targetLabel = "Target Label" 
eventPercent = "Percentage of Events" eventCount = "Number of Events" neventPercent = 
"Percentage of Nonevents" neventCount = "Number of Nonevents" totalPercent = "Total 
Percentage" totalCount = "Total Count";
3699006    if neventCount = . then neventCount = 0;
MPRINT(EM_DIAGRAM):   if neventCount = . then neventCount = 0;
3699007    if eventCount = . then eventCount = 0;
MPRINT(EM_DIAGRAM):   if eventCount = . then eventCount = 0;
3699008    if neventPercent = . then neventPercent = 0;
MPRINT(EM_DIAGRAM):   if neventPercent = . then neventPercent = 0;
3699009    if eventPercent = . then eventPercent = 0;
MPRINT(EM_DIAGRAM):   if eventPercent = . then eventPercent = 0;
3699010    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TOTAL.
NOTE: There were 11 observations read from the data set WORK._EVENT.
NOTE: There were 11 observations read from the data set WORK._NEVENT.
NOTE: The data set EMWS1.ENDGRP11_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

3699011    proc sort data=EMWS1.EndGrp11_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp11_EMMISC_LOOP;
3699012    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3699013    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.ENDGRP11_EMMISC_LOOP.
NOTE: The data set EMWS1.ENDGRP11_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3699014    data work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data work.EMEVENTREPORT;
3699015    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3699016    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3699017    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3699017  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3699018    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3699019    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3699020    set EMWS1.EndGrp11_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMEVENTREPORT;
3699021    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMEVENTREPORT.
NOTE: The data set WORK.EMEVENTREPORT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3699022    data EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
3699023    set work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set work.EMEVENTREPORT;
3699024    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.EMEVENTREPORT.
NOTE: The data set EMWS1.ENDGRP11_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3699025    %let _cn = %sysfunc(getoption(CENTER));
3699026    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3699027    proc print data=EMWS1.EndGrp11_EMREPORTFIT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp11_EMREPORTFIT_LOOP noobs label;
3699028    var STAT LABEL TRAIN
3699029    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
3699030    by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
MPRINT(EM_DIAGRAM):   by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
3699031    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3699032    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3699033    run;

NOTE: There were 219 observations read from the data set EMWS1.ENDGRP11_EMREPORTFIT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2421.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3699034    title10;
MPRINT(EM_DIAGRAM):   title10;
3699035    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3699036    proc sort data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP nothreads;
3699037    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3699038    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 44 observations read from the data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP.
NOTE: The data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3699039    %let _cn = %sysfunc(getoption(CENTER));
3699040    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3699041    proc print data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp11_EMCLASSIFICATION_LOOP noobs label;
3699042    var from into pct_row pct_col count percent
3699043    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3699044    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3699045    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3699046    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3699047    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3699048    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3699049    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3699050    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3699051    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3699052    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3699053    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3699054    run;

NOTE: There were 44 observations read from the data set EMWS1.ENDGRP11_EMCLASSIFICATION_LOOP.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2422.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

3699055    title9;
MPRINT(EM_DIAGRAM):   title9;
3699056    title10;
MPRINT(EM_DIAGRAM):   title10;
3699057    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3699058    %let _cn = %sysfunc(getoption(CENTER));
3699059    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3699060    data EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
3699061    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3699061  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT 
FALSEEVENT TRUEEVENT 8;
3699062    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3699062  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3699062  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3699062  ! FALSEEVENT
3699063    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3699063  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3699063  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3699064       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target 
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True 
Positive" TRUENEVENT = "True Negative";
3699065    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3699066    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3699067    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3699068    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3699069    set EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp11_EMEVENTREPORT_LOOP;
3699070    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMEVENTREPORT_LOOP.
NOTE: The data set EMWS1.ENDGRP11_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

3699071    proc print data=EMWS1.EndGrp11_EMEVENTREPORT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp11_EMEVENTREPORT_LOOP noobs label;
3699072    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3699073    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3699074    by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted TARGETLABEL;
3699075    run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP11_EMEVENTREPORT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2423.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3699076    title10;
MPRINT(EM_DIAGRAM):   title10;
3699077    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3699078    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3699079    modify EndGrp11_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp11_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3699080    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3699081    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3699081  ! ;
MPRINT(EM_DIAGRAM):   run;
3699082    run;

NOTE: MODIFY was successful for EMWS1.ENDGRP11_EMRANK_LOOP.DATA.
3699083    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

3699084    %let _cn = %sysfunc(getoption(CENTER));
3699085    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3699086    proc print data=EMWS1.EndGrp11_EMRANK_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp11_EMRANK_LOOP label noobs;
3699087    var
3699088    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3699089    by
3699090    notsorted DATAROLE
3699091    notsorted _WHERE_
3699092    notsorted TARGET
3699093    notsorted TARGETLABEL
3699094    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL ;
3699095    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3699096    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3699097    run;

NOTE: There were 220 observations read from the data set EMWS1.ENDGRP11_EMRANK_LOOP.
NOTE: The PROCEDURE PRINT printed page 2424.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3699098    title10;
MPRINT(EM_DIAGRAM):   title10;
3699099    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3699100    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3699101    modify EndGrp11_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp11_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3699102    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3699102  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3699103    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3699103  ! ;
MPRINT(EM_DIAGRAM):   run;
3699104    run;

NOTE: MODIFY was successful for EMWS1.ENDGRP11_EMSCOREDIST_LOOP.DATA.
3699105    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      

3699106    %let _cn = %sysfunc(getoption(CENTER));
3699107    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3699108    proc print data=EMWS1.EndGrp11_EMSCOREDIST_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp11_EMSCOREDIST_LOOP label noobs;
3699109    var
3699110    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
3699111    by
3699112    notsorted DATAROLE
3699113    notsorted _WHERE_
3699114    notsorted TARGET
3699115    notsorted TARGETLABEL
3699116    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL ;
3699117    where TARGET in(
3699118    "DepVar"
3699119    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
3699120    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3699121    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
3699122    run;

NOTE: There were 220 observations read from the data set EMWS1.ENDGRP11_EMSCOREDIST_LOOP.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 2425.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3699123    title10;
MPRINT(EM_DIAGRAM):   title10;
3699124    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3699125    %let emexceptionstring =;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:42 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMTRAIN.log" encoding="UTF-8" 
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMOUTPUT.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:42 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMTRAIN.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp11\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp11_EMREPORT;
MPRINT(EM_DIAGRAM):   length ID 8 KEY $30 VALUE $512;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='PROPERTIES';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SETTINGS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="VARIABLES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMTRAINVARIABLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLLOG";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\EMLOG.log";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLOUTPUT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="NOTES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FLOWCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SASCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Scoring";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="MISCLASSIFICATIONMANY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMMISC_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="TOTALPERCENT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FITSTATPLOT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMOUTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="_ANYNUMERIC_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSRANKOVERLAY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMRANK_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="DECILE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="LIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BASELIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BESTLIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSSCOREDIST";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMSCOREDIST_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="SCORE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFNONEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEX";
MPRINT(EM_DIAGRAM):   VALUE="DATAROLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="NROWS";
MPRINT(EM_DIAGRAM):   VALUE="1";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="REPORTFITSTAT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMREPORTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="eventratestat";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMEVENTREPORT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="miningresult";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Gp";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp11_EMLOOPINFO";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
