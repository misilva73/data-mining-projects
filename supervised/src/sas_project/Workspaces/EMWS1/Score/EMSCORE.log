MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:19:11 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                17:19:11 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O38LSCZD "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O38LSCZD new;
MPRINT(EM_DIAGRAM):   run;
77305      filename emflow "C:\Users\misil\Desktop\DM
77305    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77306      *------------------------------------------------------------*;
77307      * Score: Scoring DATA data;
77308      *------------------------------------------------------------*;
77309      data EMWS1.Score_TRAIN
77310      / view=EMWS1.Score_TRAIN
77311      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_TRAIN / view=EMWS1.Score_TRAIN ;
77312      set EMWS1.Neural6_TRAIN
77313      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_TRAIN ;
77314      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
77315     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77316     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
77317     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77318     +LENGTH EM_EVENTPROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_EVENTPROBABILITY 8;
77319     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
77320     +EM_EVENTPROBABILITY = P_DepVar1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_DepVar1;
77321     +LENGTH EM_PROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_PROBABILITY 8;
77322     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
77323     +EM_PROBABILITY =
77324     +max(
77325     +P_DepVar1
77326     +,
77327     +P_DepVar0
77328     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_DepVar1 , P_DepVar0 );
77329     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
77329    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
77330     +LABEL EM_CLASSIFICATION = "Prediction for DepVar";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for DepVar";
77331     +EM_CLASSIFICATION = I_DepVar;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_DepVar;
77332     +LABEL EM_CLASSTARGET = 'Target Variable: DepVar';
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSTARGET = 'Target Variable: DepVar';
77333     +EM_CLASSTARGET = F_DepVar;
MPRINT(EM_DIAGRAM):   EM_CLASSTARGET = F_DepVar;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
77334      run;

NOTE: DATA STEP view saved on file EMWS1.SCORE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
77335      quit;
77336      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
77337      filename emflow "C:\Users\misil\Desktop\DM
77337    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77338      *------------------------------------------------------------*;
77339      * Score: Scoring VALIDATE data;
77340      *------------------------------------------------------------*;
77341      data EMWS1.Score_VALIDATE
77342      / view=EMWS1.Score_VALIDATE
77343      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_VALIDATE / view=EMWS1.Score_VALIDATE ;
77344      set EMWS1.Neural6_VALIDATE
77345      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_VALIDATE ;
77346      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
77347     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77348     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
77349     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77350     +LENGTH EM_EVENTPROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_EVENTPROBABILITY 8;
77351     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
77352     +EM_EVENTPROBABILITY = P_DepVar1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_DepVar1;
77353     +LENGTH EM_PROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_PROBABILITY 8;
77354     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
77355     +EM_PROBABILITY =
77356     +max(
77357     +P_DepVar1
77358     +,
77359     +P_DepVar0
77360     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_DepVar1 , P_DepVar0 );
77361     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
77361    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
77362     +LABEL EM_CLASSIFICATION = "Prediction for DepVar";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for DepVar";
77363     +EM_CLASSIFICATION = I_DepVar;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_DepVar;
77364     +LABEL EM_CLASSTARGET = 'Target Variable: DepVar';
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSTARGET = 'Target Variable: DepVar';
77365     +EM_CLASSTARGET = F_DepVar;
MPRINT(EM_DIAGRAM):   EM_CLASSTARGET = F_DepVar;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
77366      run;

NOTE: DATA STEP view saved on file EMWS1.SCORE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL6_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
77367      quit;
77368      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
77369      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
77370      * Score: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score: Creating Publish Score Variables Table;
77371      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77372      proc sort data=EMWS1.Neural6_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL)
77372    ! out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural6_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT 
LABEL) out=_temp;
77373      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77374      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.NEURAL6_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 21 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

77375      proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT(keep= NAME ROLE CREATOR COMMENT LABEL)
77375    ! out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT(keep= NAME ROLE CREATOR 
COMMENT LABEL) out=_temp2;
77376      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77377      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._TEMP2 has 35 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

77378      data EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMINPUTVARS;
77379      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
77380      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77381      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
77382      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE
77382    ! = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR =
77382    ! "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
77383         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL =
77383    ! "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE =
77383    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
77384         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = 
"Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
77385      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
77386      if upcase(NAME) = "CUSTID" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTID" then HIDE = "N";
77387      if upcase(NAME) = "DEPVAR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "DEPVAR" then HIDE = "N";
77388      if upcase(NAME) = "F_DEPVAR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "F_DEPVAR" then HIDE = "N";
77389      if upcase(NAME) = "I_DEPVAR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "I_DEPVAR" then HIDE = "N";
77390      if upcase(NAME) = "MARITAL_STATUS" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "MARITAL_STATUS" then HIDE = "N";
77391      if upcase(NAME) = "MNTCARD_GAMES" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "MNTCARD_GAMES" then HIDE = "N";
77392      if upcase(NAME) = "MNTMAGAZINES" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "MNTMAGAZINES" then HIDE = "N";
77393      if upcase(NAME) = "NUMCATALOGPURCHASES" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NUMCATALOGPURCHASES" then HIDE = "N";
77394      if upcase(NAME) = "NUMDEALSPURCHASES" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NUMDEALSPURCHASES" then HIDE = "N";
77395      if upcase(NAME) = "NUMWEBPURCHASES" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NUMWEBPURCHASES" then HIDE = "N";
77396      if upcase(NAME) = "P_DEPVAR0" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "P_DEPVAR0" then HIDE = "N";
77397      if upcase(NAME) = "P_DEPVAR1" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "P_DEPVAR1" then HIDE = "N";
77398      if upcase(NAME) = "RANGE_FRQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "RANGE_FRQ" then HIDE = "N";
77399      if upcase(NAME) = "RANGE_RECENCY" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "RANGE_RECENCY" then HIDE = "N";
77400      if upcase(NAME) = "RANGE_AVERAGE_PURCHASE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "RANGE_AVERAGE_PURCHASE" then HIDE = "N";
77401      if upcase(NAME) = "RANGE_CAMPAIGN_ACCEPTANCE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "RANGE_CAMPAIGN_ACCEPTANCE" then HIDE = "N";
77402      if upcase(NAME) = "R_DEPVAR0" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "R_DEPVAR0" then HIDE = "N";
77403      if upcase(NAME) = "R_DEPVAR1" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "R_DEPVAR1" then HIDE = "N";
77404      if upcase(NAME) = "U_DEPVAR" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "U_DEPVAR" then HIDE = "N";
77405      if upcase(NAME) = "_WARN_" then delete;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_WARN_" then delete;
77406      if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
77407      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: There were 21 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 47 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

77408      proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
77409      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77410      where CREATOR='' or (NAME="DEPVAR" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="DEPVAR" and CREATOR='');
77411      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME='DEPVAR') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

77412      filename _pref "C:\Users\misil\Desktop\DM
77412    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
77413      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
77414      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
77415      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas.
77416     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77417     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
77418     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77419     +LENGTH EM_EVENTPROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_EVENTPROBABILITY 8;
77420     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
77421     +EM_EVENTPROBABILITY = P_DepVar1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_DepVar1;
77422     +LENGTH EM_PROBABILITY 8;
MPRINT(EM_DIAGRAM):   LENGTH EM_PROBABILITY 8;
77423     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
77424     +EM_PROBABILITY =
77425     +max(
77426     +P_DepVar1
77427     +,
77428     +P_DepVar0
77429     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_DepVar1 , P_DepVar0 );
77430     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
77430    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
77431     +LABEL EM_CLASSIFICATION = "Prediction for DepVar";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for DepVar";
77432     +EM_CLASSIFICATION = I_DepVar;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_DepVar;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
77433      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77434      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
77435      quit;
77436      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
77437      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
77438      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
77439      retain ID 1 Node "Score";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score";
77440      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
77441      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77442      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
77443      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77444      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77445      proc sort data=EMWS1.Neural6_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural6_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
77446      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77447      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.NEURAL6_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 21 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77448      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77449      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
77450      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
77451      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77452      proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
77453      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 67 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

77454      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
77455      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77456      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 67 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 67 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77457      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77458      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
77459      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77460      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 67 observations read from the data set WORK._META.
NOTE: There were 21 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 67 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

77461      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
77462      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
77462    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.

77463      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77464      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
77465      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE_FCMP has 4 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77466      filename _pref "C:\Users\misil\Desktop\DM
77466    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Neural6\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Neural6\EMPUBLISHSCORE.sas";
77467      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
77468      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
77469      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Neural6\EMPUBLISHSCORE.sas.
77470     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
77471     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
77472     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
77473     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
77474     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
77475     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
77476     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
77477     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
77478     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
77479     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
77480     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
77481     +LENGTH _WARN_ $4
77482     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
77483     +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(EM_DIAGRAM):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
77484     +
77485     +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(EM_DIAGRAM):   label S_MntMagazines = 'Standard: MntMagazines' ;
77486     +
77487     +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
77488     +
77489     +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
77490     +
77491     +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
77492     +
77493     +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
77494     +
77495     +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
77496     +
77497     +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
77498     +
77499     +      label S_RANGE_campaign_acceptance =
77500     +'Standard: RANGE_campaign_acceptance' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
77501     +
77502     +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
77503     +
77504     +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
77505     +
77506     +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
77507     +
77508     +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
77509     +
77510     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
77511     +
77512     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
77513     +
77514     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
77515     +
77516     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
77517     +
77518     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
77519     +
77520     +      label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
77521     +
77522     +      label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
77523     +
77524     +      label H18 = 'Hidden: H1=8' ;
MPRINT(EM_DIAGRAM):   label H18 = 'Hidden: H1=8' ;
77525     +
77526     +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
77527     +
77528     +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
77529     +
77530     +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
77531     +
77532     +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
77533     +
77534     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
77535     +
77536     +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
77537     +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
77538     +        Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
77539     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
77540     +Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
77541     +Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
77542     +Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
77543     +Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
77544     +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
77545     +   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
77546     +   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
77547     +   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
77548     +   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
77549     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
77550     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
77551     +end;
MPRINT(EM_DIAGRAM):   end;
77552     +else do;
MPRINT(EM_DIAGRAM):   else do;
77553     +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
77554     +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
77555     +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
77556     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
77557     +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
77558     +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
77559     +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
77560     +            Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
77561     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
77562     +         end;
MPRINT(EM_DIAGRAM):   end;
77563     +         else do;
MPRINT(EM_DIAGRAM):   else do;
77564     +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
77565     +               Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
77566     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
77567     +            end;
MPRINT(EM_DIAGRAM):   end;
77568     +         end;
MPRINT(EM_DIAGRAM):   end;
77569     +      end;
MPRINT(EM_DIAGRAM):   end;
77570     +      else do;
MPRINT(EM_DIAGRAM):   else do;
77571     +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
77572     +            Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
77573     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
77574     +         end;
MPRINT(EM_DIAGRAM):   end;
77575     +      end;
MPRINT(EM_DIAGRAM):   end;
77576     +   end;
MPRINT(EM_DIAGRAM):   end;
77577     +   else do;
MPRINT(EM_DIAGRAM):   else do;
77578     +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
77579     +         Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
77580     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
77581     +      end;
MPRINT(EM_DIAGRAM):   end;
77582     +      else do;
MPRINT(EM_DIAGRAM):   else do;
77583     +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
77584     +            Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
77585     +            Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
77586     +            Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
77587     +            Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
77588     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
77589     +         end;
MPRINT(EM_DIAGRAM):   end;
77590     +      end;
MPRINT(EM_DIAGRAM):   end;
77591     +   end;
MPRINT(EM_DIAGRAM):   end;
77592     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
77593     +      Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
77594     +      Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
77595     +      Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
77596     +      Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
77597     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
77598     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
77599     +   end;
MPRINT(EM_DIAGRAM):   end;
77600     +end;
MPRINT(EM_DIAGRAM):   end;
77601     +
77602     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77603     +*** Checking missing input Interval
77604     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
77605     +
77606     +IF NMISS(
77607     +   MntCard_Games ,
77608     +   MntMagazines ,
77609     +   NumCatalogPurchases ,
77610     +   NumDealsPurchases ,
77611     +   NumWebPurchases ,
77612     +   RANGE_Frq ,
77613     +   RANGE_Recency ,
77614     +   RANGE_average_purchase ,
77615     +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
77616     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
77617     +
77618     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
77619     +END;
MPRINT(EM_DIAGRAM):   END;
77620     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77621     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
77622     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77623     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
77624     +   S_MntCard_Games  =    -2.29552053621136 +     6.58526682455081 *
77625     +        MntCard_Games ;
MPRINT(EM_DIAGRAM):   S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * MntCard_Games ;
77626     +   S_MntMagazines  =    -0.82293757807429 +     17.2690037990877 *
77627     +        MntMagazines ;
MPRINT(EM_DIAGRAM):   S_MntMagazines = -0.82293757807429 + 17.2690037990877 * MntMagazines ;
77628     +   S_NumCatalogPurchases  =    -3.13390881283003 +     13.5906280879322 *
77629     +        NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
77630     +   S_NumDealsPurchases  =    -1.41465463186291 +     11.0318603521921 *
77631     +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
77632     +   S_NumWebPurchases  =    -5.24785908864246 +      12.283402083256 *
77633     +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
77634     +   S_RANGE_Frq  =    -1.36303513338452 +     4.21654196784367 * RANGE_Frq ;
MPRINT(EM_DIAGRAM):   S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
77635     +   S_RANGE_Recency  =    -1.65915928443681 +     3.37794970549188 *
77636     +        RANGE_Recency ;
MPRINT(EM_DIAGRAM):   S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * RANGE_Recency ;
77637     +   S_RANGE_average_purchase  =     -1.0387883165722 +     5.11361054117627 *
77638     +        RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
77639     +   S_RANGE_campaign_acceptance
77640     +          =     -0.4736186337401 +     5.76461537066529 *
77641     +        RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
77642     +END;
MPRINT(EM_DIAGRAM):   END;
77643     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
77644     +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
77645     +   ELSE S_MntCard_Games  =    -2.29552053621136 +     6.58526682455081 *
77646     +        MntCard_Games ;
MPRINT(EM_DIAGRAM):   ELSE S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * 
MntCard_Games ;
77647     +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
77648     +   ELSE S_MntMagazines  =    -0.82293757807429 +     17.2690037990877 *
77649     +        MntMagazines ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMagazines = -0.82293757807429 + 17.2690037990877 * 
MntMagazines ;
77650     +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
77651     +   ELSE S_NumCatalogPurchases
77652     +          =    -3.13390881283003 +     13.5906280879322 * NumCatalogPurchases
77653     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
77654     +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
77655     +   ELSE S_NumDealsPurchases  =    -1.41465463186291 +     11.0318603521921 *
77656     +        NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
77657     +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
77658     +   ELSE S_NumWebPurchases  =    -5.24785908864246 +      12.283402083256 *
77659     +        NumWebPurchases ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
77660     +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
77661     +   ELSE S_RANGE_Frq  =    -1.36303513338452 +     4.21654196784367 * RANGE_Frq
77662     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
77663     +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
77664     +   ELSE S_RANGE_Recency  =    -1.65915928443681 +     3.37794970549188 *
77665     +        RANGE_Recency ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * 
RANGE_Recency ;
77666     +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
77667     +   ELSE S_RANGE_average_purchase
77668     +          =     -1.0387883165722 +     5.11361054117627 *
77669     +        RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
77670     +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
77671     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance 
= . ;
77672     +   ELSE S_RANGE_campaign_acceptance
77673     +          =     -0.4736186337401 +     5.76461537066529 *
77674     +        RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
77675     +END;
MPRINT(EM_DIAGRAM):   END;
77676     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77677     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
77678     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77679     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77680     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
77681     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77682     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
77683     +   H11  =     0.20972421718057 * S_MntCard_Games  +    -0.10519753218003 *
77684     +        S_MntMagazines  +     0.15656734847629 * S_NumCatalogPurchases
77685     +          +     0.63057160324877 * S_NumDealsPurchases
77686     +          +    -0.00737690936149 * S_NumWebPurchases
77687     +          +     0.20053768659238 * S_RANGE_Frq  +    -1.12557480034141 *
77688     +        S_RANGE_Recency  +    -0.22476100695688 * S_RANGE_average_purchase
77689     +          +     0.28567577425134 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H11 = 0.20972421718057 * S_MntCard_Games + -0.10519753218003 * 
S_MntMagazines + 0.15656734847629 * S_NumCatalogPurchases + 0.63057160324877 * 
S_NumDealsPurchases + -0.00737690936149 * S_NumWebPurchases + 0.20053768659238 * S_RANGE_Frq + 
-1.12557480034141 * S_RANGE_Recency + -0.22476100695688 * S_RANGE_average_purchase + 
0.28567577425134 * S_RANGE_campaign_acceptance ;
77690     +   H12  =     0.07368864080416 * S_MntCard_Games  +     -0.4223767992421 *
77691     +        S_MntMagazines  +     0.17487060799852 * S_NumCatalogPurchases
77692     +          +    -0.16663103701637 * S_NumDealsPurchases
77693     +          +      0.4469410823334 * S_NumWebPurchases
77694     +          +     0.07351068357053 * S_RANGE_Frq  +      0.2764433150472 *
77695     +        S_RANGE_Recency  +     0.25947059452403 * S_RANGE_average_purchase
77696     +          +     0.12894202604451 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H12 = 0.07368864080416 * S_MntCard_Games + -0.4223767992421 * 
S_MntMagazines + 0.17487060799852 * S_NumCatalogPurchases + -0.16663103701637 * 
S_NumDealsPurchases + 0.4469410823334 * S_NumWebPurchases + 0.07351068357053 * S_RANGE_Frq + 
0.2764433150472 * S_RANGE_Recency + 0.25947059452403 * S_RANGE_average_purchase + 
0.12894202604451 * S_RANGE_campaign_acceptance ;
77697     +   H13  =     0.31080135867348 * S_MntCard_Games  +     0.18451282806391 *
77698     +        S_MntMagazines  +      0.1127627139197 * S_NumCatalogPurchases
77699     +          +     0.24603022042835 * S_NumDealsPurchases
77700     +          +    -0.28013448748239 * S_NumWebPurchases
77701     +          +     0.12933786524903 * S_RANGE_Frq  +     0.34733298788257 *
77702     +        S_RANGE_Recency  +     0.51115383261532 * S_RANGE_average_purchase
77703     +          +    -0.26437219931513 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H13 = 0.31080135867348 * S_MntCard_Games + 0.18451282806391 * 
S_MntMagazines + 0.1127627139197 * S_NumCatalogPurchases + 0.24603022042835 * 
S_NumDealsPurchases + -0.28013448748239 * S_NumWebPurchases + 0.12933786524903 * S_RANGE_Frq + 
0.34733298788257 * S_RANGE_Recency + 0.51115383261532 * S_RANGE_average_purchase + 
-0.26437219931513 * S_RANGE_campaign_acceptance ;
77704     +   H14  =    -0.57033383655748 * S_MntCard_Games  +    -0.33054700873328 *
77705     +        S_MntMagazines  +    -1.02671397545134 * S_NumCatalogPurchases
77706     +          +    -0.41228604651309 * S_NumDealsPurchases
77707     +          +    -0.21819906644753 * S_NumWebPurchases
77708     +          +     0.60269025654631 * S_RANGE_Frq  +      0.6046180501819 *
77709     +        S_RANGE_Recency  +    -0.42162410945573 * S_RANGE_average_purchase
77710     +          +    -0.20008993427643 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H14 = -0.57033383655748 * S_MntCard_Games + -0.33054700873328 * 
S_MntMagazines + -1.02671397545134 * S_NumCatalogPurchases + -0.41228604651309 * 
S_NumDealsPurchases + -0.21819906644753 * S_NumWebPurchases + 0.60269025654631 * S_RANGE_Frq + 
0.6046180501819 * S_RANGE_Recency + -0.42162410945573 * S_RANGE_average_purchase + 
-0.20008993427643 * S_RANGE_campaign_acceptance ;
77711     +   H15  =      0.6093862111979 * S_MntCard_Games  +     0.18205906140977 *
77712     +        S_MntMagazines  +     0.49639052978093 * S_NumCatalogPurchases
77713     +          +     0.61953955047886 * S_NumDealsPurchases
77714     +          +    -0.23923372893571 * S_NumWebPurchases
77715     +          +    -0.19964591826134 * S_RANGE_Frq  +    -0.20354696929195 *
77716     +        S_RANGE_Recency  +     0.54178001423516 * S_RANGE_average_purchase
77717     +          +     0.82116084363342 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H15 = 0.6093862111979 * S_MntCard_Games + 0.18205906140977 * 
S_MntMagazines + 0.49639052978093 * S_NumCatalogPurchases + 0.61953955047886 * 
S_NumDealsPurchases + -0.23923372893571 * S_NumWebPurchases + -0.19964591826134 * S_RANGE_Frq 
+ -0.20354696929195 * S_RANGE_Recency + 0.54178001423516 * S_RANGE_average_purchase + 
0.82116084363342 * S_RANGE_campaign_acceptance ;
77718     +   H16  =    -0.89765621146319 * S_MntCard_Games  +     0.18624358536157 *
77719     +        S_MntMagazines  +    -0.41426005837921 * S_NumCatalogPurchases
77720     +          +    -0.63819825018964 * S_NumDealsPurchases
77721     +          +    -0.75564857992734 * S_NumWebPurchases
77722     +          +    -0.24431914212986 * S_RANGE_Frq  +     1.47078024332987 *
77723     +        S_RANGE_Recency  +    -0.08214840144887 * S_RANGE_average_purchase
77724     +          +    -0.87167436264292 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H16 = -0.89765621146319 * S_MntCard_Games + 0.18624358536157 * 
S_MntMagazines + -0.41426005837921 * S_NumCatalogPurchases + -0.63819825018964 * 
S_NumDealsPurchases + -0.75564857992734 * S_NumWebPurchases + -0.24431914212986 * S_RANGE_Frq 
+ 1.47078024332987 * S_RANGE_Recency + -0.08214840144887 * S_RANGE_average_purchase + 
-0.87167436264292 * S_RANGE_campaign_acceptance ;
77725     +   H17  =     0.03824306532902 * S_MntCard_Games  +     0.09162051848061 *
77726     +        S_MntMagazines  +     0.25990341633612 * S_NumCatalogPurchases
77727     +          +    -0.58632763415232 * S_NumDealsPurchases
77728     +          +    -0.02683058882616 * S_NumWebPurchases
77729     +          +     0.36070453911153 * S_RANGE_Frq  +    -0.46706817985413 *
77730     +        S_RANGE_Recency  +     0.03188715672586 * S_RANGE_average_purchase
77731     +          +     0.27713598915972 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H17 = 0.03824306532902 * S_MntCard_Games + 0.09162051848061 * 
S_MntMagazines + 0.25990341633612 * S_NumCatalogPurchases + -0.58632763415232 * 
S_NumDealsPurchases + -0.02683058882616 * S_NumWebPurchases + 0.36070453911153 * S_RANGE_Frq + 
-0.46706817985413 * S_RANGE_Recency + 0.03188715672586 * S_RANGE_average_purchase + 
0.27713598915972 * S_RANGE_campaign_acceptance ;
77732     +   H18  =    -0.35178879490005 * S_MntCard_Games  +     -0.2853720173945 *
77733     +        S_MntMagazines  +     0.36904553501501 * S_NumCatalogPurchases
77734     +          +     0.49484726303534 * S_NumDealsPurchases
77735     +          +    -0.51224257122634 * S_NumWebPurchases
77736     +          +     0.31503193306354 * S_RANGE_Frq  +    -0.24985277238677 *
77737     +        S_RANGE_Recency  +       0.061397741924 * S_RANGE_average_purchase
77738     +          +     0.24571810164181 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H18 = -0.35178879490005 * S_MntCard_Games + -0.2853720173945 * 
S_MntMagazines + 0.36904553501501 * S_NumCatalogPurchases + 0.49484726303534 * 
S_NumDealsPurchases + -0.51224257122634 * S_NumWebPurchases + 0.31503193306354 * S_RANGE_Frq + 
-0.24985277238677 * S_RANGE_Recency + 0.061397741924 * S_RANGE_average_purchase + 
0.24571810164181 * S_RANGE_campaign_acceptance ;
77739     +   H11  = H11  +     0.27684891699167 * Marital_StatusDivorced
77740     +          +    -0.33031859213239 * Marital_StatusMarried
77741     +          +     0.61699559997992 * Marital_StatusSingle
77742     +          +    -0.16243553104357 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27684891699167 * Marital_StatusDivorced + 
-0.33031859213239 * Marital_StatusMarried + 0.61699559997992 * Marital_StatusSingle + 
-0.16243553104357 * Marital_StatusTogether ;
77743     +   H12  = H12  +    -0.50397359271861 * Marital_StatusDivorced
77744     +          +    -0.23570256235163 * Marital_StatusMarried
77745     +          +     0.18671782880144 * Marital_StatusSingle
77746     +          +      0.0300664326928 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.50397359271861 * Marital_StatusDivorced + 
-0.23570256235163 * Marital_StatusMarried + 0.18671782880144 * Marital_StatusSingle + 
0.0300664326928 * Marital_StatusTogether ;
77747     +   H13  = H13  +    -0.10864645717505 * Marital_StatusDivorced
77748     +          +    -0.20555700211504 * Marital_StatusMarried
77749     +          +      0.1648370262569 * Marital_StatusSingle
77750     +          +    -0.03166337233879 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.10864645717505 * Marital_StatusDivorced + 
-0.20555700211504 * Marital_StatusMarried + 0.1648370262569 * Marital_StatusSingle + 
-0.03166337233879 * Marital_StatusTogether ;
77751     +   H14  = H14  +    -0.25764039105044 * Marital_StatusDivorced
77752     +          +     0.05281900768859 * Marital_StatusMarried
77753     +          +    -0.28955714634595 * Marital_StatusSingle
77754     +          +      0.1811608851228 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.25764039105044 * Marital_StatusDivorced + 
0.05281900768859 * Marital_StatusMarried + -0.28955714634595 * Marital_StatusSingle + 
0.1811608851228 * Marital_StatusTogether ;
77755     +   H15  = H15  +     0.16052554933853 * Marital_StatusDivorced
77756     +          +     0.01235369787171 * Marital_StatusMarried
77757     +          +      0.1227747816279 * Marital_StatusSingle
77758     +          +    -0.78421505074531 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.16052554933853 * Marital_StatusDivorced + 0.01235369787171 
* Marital_StatusMarried + 0.1227747816279 * Marital_StatusSingle + -0.78421505074531 * 
Marital_StatusTogether ;
77759     +   H16  = H16  +    -0.09636185034972 * Marital_StatusDivorced
77760     +          +     0.49379263355192 * Marital_StatusMarried
77761     +          +     0.11693446659268 * Marital_StatusSingle
77762     +          +     0.39504907373164 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.09636185034972 * Marital_StatusDivorced + 
0.49379263355192 * Marital_StatusMarried + 0.11693446659268 * Marital_StatusSingle + 
0.39504907373164 * Marital_StatusTogether ;
77763     +   H17  = H17  +     0.63607617128916 * Marital_StatusDivorced
77764     +          +    -0.69233427848009 * Marital_StatusMarried
77765     +          +     0.85408778865978 * Marital_StatusSingle
77766     +          +    -0.23854465330987 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.63607617128916 * Marital_StatusDivorced + 
-0.69233427848009 * Marital_StatusMarried + 0.85408778865978 * Marital_StatusSingle + 
-0.23854465330987 * Marital_StatusTogether ;
77767     +   H18  = H18  +     0.28535498096797 * Marital_StatusDivorced
77768     +          +    -0.22088583509449 * Marital_StatusMarried
77769     +          +    -0.10230118240769 * Marital_StatusSingle
77770     +          +    -0.41427540923153 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H18 = H18 + 0.28535498096797 * Marital_StatusDivorced + 
-0.22088583509449 * Marital_StatusMarried + -0.10230118240769 * Marital_StatusSingle + 
-0.41427540923153 * Marital_StatusTogether ;
77771     +   H11  =     0.29714961909337 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.29714961909337 + H11 ;
77772     +   H12  =     2.28692305168248 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 2.28692305168248 + H12 ;
77773     +   H13  =     1.04684893652896 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.04684893652896 + H13 ;
77774     +   H14  =    -0.27835769163672 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.27835769163672 + H14 ;
77775     +   H15  =    -1.48853670189635 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.48853670189635 + H15 ;
77776     +   H16  =     2.02040716755866 + H16 ;
MPRINT(EM_DIAGRAM):   H16 = 2.02040716755866 + H16 ;
77777     +   H17  =     -2.1402631431051 + H17 ;
MPRINT(EM_DIAGRAM):   H17 = -2.1402631431051 + H17 ;
77778     +   H18  =    -1.77285171982666 + H18 ;
MPRINT(EM_DIAGRAM):   H18 = -1.77285171982666 + H18 ;
77779     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
77780     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
77781     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
77782     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
77783     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
77784     +   H16  = TANH(H16 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
77785     +   H17  = TANH(H17 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
77786     +   H18  = TANH(H18 );
MPRINT(EM_DIAGRAM):   H18 = TANH(H18 );
77787     +END;
MPRINT(EM_DIAGRAM):   END;
77788     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
77789     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
77790     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
77791     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
77792     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
77793     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
77794     +   H16  = .;
MPRINT(EM_DIAGRAM):   H16 = .;
77795     +   H17  = .;
MPRINT(EM_DIAGRAM):   H17 = .;
77796     +   H18  = .;
MPRINT(EM_DIAGRAM):   H18 = .;
77797     +END;
MPRINT(EM_DIAGRAM):   END;
77798     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77799     +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
77800     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77801     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
77802     +   P_DepVar1  =     2.28155484960035 * H11  +     0.37558662649004 * H12
77803     +          +    -0.01491883215668 * H13  +    -1.79896740790015 * H14
77804     +          +     1.54972455239658 * H15  +    -2.83834486141497 * H16
77805     +          +     1.56015981413604 * H17  +     1.15123166934324 * H18 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.28155484960035 * H11 + 0.37558662649004 * H12 + 
-0.01491883215668 * H13 + -1.79896740790015 * H14 + 1.54972455239658 * H15 + -2.83834486141497 
* H16 + 1.56015981413604 * H17 + 1.15123166934324 * H18 ;
77806     +   P_DepVar1  =    -1.56259640307401 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.56259640307401 + P_DepVar1 ;
77807     +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
77808     +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
77809     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
77810     +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
77811     +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
77812     +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
77813     +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
77814     +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
77815     +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
77816     +END;
MPRINT(EM_DIAGRAM):   END;
77817     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
77818     +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
77819     +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
77820     +END;
MPRINT(EM_DIAGRAM):   END;
77821     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
77822     +   P_DepVar1  =     0.13673708920187;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.13673708920187;
77823     +   P_DepVar0  =     0.86326291079812;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.86326291079812;
77824     +END;
MPRINT(EM_DIAGRAM):   END;
77825     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77826     +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
77827     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
77828     +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
77829     +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
77830     +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
77831     +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
77832     +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
77833     +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
77834     +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
77835     +END;
MPRINT(EM_DIAGRAM):   END;
77836     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
77837     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
77838     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
77839     +drop
77840     +S_MntCard_Games
77841     +S_MntMagazines
77842     +S_NumCatalogPurchases
77843     +S_NumDealsPurchases
77844     +S_NumWebPurchases
77845     +S_RANGE_Frq
77846     +S_RANGE_Recency
77847     +S_RANGE_average_purchase
77848     +S_RANGE_campaign_acceptance
77849     +H11
77850     +H12
77851     +H13
77852     +H14
77853     +H15
77854     +H16
77855     +H17
77856     +H18
77857     +;
MPRINT(EM_DIAGRAM):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
77858      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

77859      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
77860      quit;
77861      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
77862      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
77863      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
77864      retain ID 2 Node "Neural6";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Neural6";
77865      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
77866      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1096 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1096 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

77867      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
77868      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77869      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1096 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1096 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77870      proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
77871      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77872      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77873      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77874      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
77875      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
77876      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77877      proc contents data=EMWS1.Neural6_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural6_train out=_meta(keep=NAME) noprint;
77878      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 63 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

77879      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
77880      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77881      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 63 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 63 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77882      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77883      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
77884      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77885      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 63 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 63 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77886      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
77887      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
77887    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 396 rows and 5 columns.

77888      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77889      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
77890      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 396 observations read from the data set WORK._TEMPX.
NOTE: 396 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 400 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

77891      filename _pref "C:\Users\misil\Desktop\DM
77891    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
77892      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
77893      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
77894      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas.
77895     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77896     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
77897     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77898     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77899     +* TRANSFORM: Frq , (Frq - 10) / (40-10);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Frq , (Frq - 10) / (40-10);
77900     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77901     +label RANGE_Frq = 'Transformed Frq';
MPRINT(EM_DIAGRAM):   label RANGE_Frq = 'Transformed Frq';
77902     +length RANGE_Frq 8;
MPRINT(EM_DIAGRAM):   length RANGE_Frq 8;
77903     +if Frq eq . then RANGE_Frq = .;
MPRINT(EM_DIAGRAM):   if Frq eq . then RANGE_Frq = .;
77904     +else RANGE_Frq = (Frq - 10) / (40-10);
MPRINT(EM_DIAGRAM):   else RANGE_Frq = (Frq - 10) / (40-10);
77905     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77906     +* TRANSFORM: IMP_Income , (IMP_Income - 9000) / (123230-9000);
MPRINT(EM_DIAGRAM):   * TRANSFORM: IMP_Income , (IMP_Income - 9000) / (123230-9000);
77907     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77908     +label RANGE_IMP_Income = 'Transformed: Imputed: Income';
MPRINT(EM_DIAGRAM):   label RANGE_IMP_Income = 'Transformed: Imputed: Income';
77909     +length RANGE_IMP_Income 8;
MPRINT(EM_DIAGRAM):   length RANGE_IMP_Income 8;
77910     +if IMP_Income eq . then RANGE_IMP_Income = .;
MPRINT(EM_DIAGRAM):   if IMP_Income eq . then RANGE_IMP_Income = .;
77911     +else RANGE_IMP_Income = (IMP_Income - 9000) / (123230-9000);
MPRINT(EM_DIAGRAM):   else RANGE_IMP_Income = (IMP_Income - 9000) / (123230-9000);
77912     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77913     +* TRANSFORM: Mnt , (Mnt - 9) / (3260-9);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Mnt , (Mnt - 9) / (3260-9);
77914     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77915     +label RANGE_Mnt = 'Transformed Mnt';
MPRINT(EM_DIAGRAM):   label RANGE_Mnt = 'Transformed Mnt';
77916     +length RANGE_Mnt 8;
MPRINT(EM_DIAGRAM):   length RANGE_Mnt 8;
77917     +if Mnt eq . then RANGE_Mnt = .;
MPRINT(EM_DIAGRAM):   if Mnt eq . then RANGE_Mnt = .;
77918     +else RANGE_Mnt = (Mnt - 9) / (3260-9);
MPRINT(EM_DIAGRAM):   else RANGE_Mnt = (Mnt - 9) / (3260-9);
77919     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77920     +* TRANSFORM: NumWebVisitsMonth , (NumWebVisitsMonth - 4) / (15-4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: NumWebVisitsMonth , (NumWebVisitsMonth - 4) / (15-4);
77921     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77922     +label RANGE_NumWebVisitsMonth = 'Transformed: NumWebVisitsMonth';
MPRINT(EM_DIAGRAM):   label RANGE_NumWebVisitsMonth = 'Transformed: NumWebVisitsMonth';
77923     +length RANGE_NumWebVisitsMonth 8;
MPRINT(EM_DIAGRAM):   length RANGE_NumWebVisitsMonth 8;
77924     +if NumWebVisitsMonth eq . then RANGE_NumWebVisitsMonth = .;
MPRINT(EM_DIAGRAM):   if NumWebVisitsMonth eq . then RANGE_NumWebVisitsMonth = .;
77925     +else RANGE_NumWebVisitsMonth = (NumWebVisitsMonth - 4) / (15-4);
MPRINT(EM_DIAGRAM):   else RANGE_NumWebVisitsMonth = (NumWebVisitsMonth - 4) / (15-4);
77926     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77927     +* TRANSFORM: Recency , (Recency - 0) / (99-0);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Recency , (Recency - 0) / (99-0);
77928     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77929     +label RANGE_Recency = 'Transformed: Recency';
MPRINT(EM_DIAGRAM):   label RANGE_Recency = 'Transformed: Recency';
77930     +length RANGE_Recency 8;
MPRINT(EM_DIAGRAM):   length RANGE_Recency 8;
77931     +if Recency eq . then RANGE_Recency = .;
MPRINT(EM_DIAGRAM):   if Recency eq . then RANGE_Recency = .;
77932     +else RANGE_Recency = (Recency - 0) / (99-0);
MPRINT(EM_DIAGRAM):   else RANGE_Recency = (Recency - 0) / (99-0);
77933     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77934     +* TRANSFORM: age , (age - 19) / (74-19);
MPRINT(EM_DIAGRAM):   * TRANSFORM: age , (age - 19) / (74-19);
77935     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77936     +label RANGE_age = 'Transformed age';
MPRINT(EM_DIAGRAM):   label RANGE_age = 'Transformed age';
77937     +length RANGE_age 8;
MPRINT(EM_DIAGRAM):   length RANGE_age 8;
77938     +if age eq . then RANGE_age = .;
MPRINT(EM_DIAGRAM):   if age eq . then RANGE_age = .;
77939     +else RANGE_age = (age - 19) / (74-19);
MPRINT(EM_DIAGRAM):   else RANGE_age = (age - 19) / (74-19);
77940     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77941     +* TRANSFORM: average_purchase , (average_purchase - 0.9) / (139.66666667-0.9);
MPRINT(EM_DIAGRAM):   * TRANSFORM: average_purchase , (average_purchase - 0.9) / 
(139.66666667-0.9);
77942     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77943     +label RANGE_average_purchase = 'Transformed average_purchase';
MPRINT(EM_DIAGRAM):   label RANGE_average_purchase = 'Transformed average_purchase';
77944     +length RANGE_average_purchase 8;
MPRINT(EM_DIAGRAM):   length RANGE_average_purchase 8;
77945     +if average_purchase eq . then RANGE_average_purchase = .;
MPRINT(EM_DIAGRAM):   if average_purchase eq . then RANGE_average_purchase = .;
77946     +else RANGE_average_purchase = (average_purchase - 0.9) / (139.66666667-0.9);
MPRINT(EM_DIAGRAM):   else RANGE_average_purchase = (average_purchase - 0.9) / 
(139.66666667-0.9);
77947     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77948     +* TRANSFORM: campaign_acceptance , (campaign_acceptance - 0) / (4-0);
MPRINT(EM_DIAGRAM):   * TRANSFORM: campaign_acceptance , (campaign_acceptance - 0) / (4-0);
77949     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77950     +label RANGE_campaign_acceptance = 'Transformed campaign_acceptance';
MPRINT(EM_DIAGRAM):   label RANGE_campaign_acceptance = 'Transformed campaign_acceptance';
77951     +length RANGE_campaign_acceptance 8;
MPRINT(EM_DIAGRAM):   length RANGE_campaign_acceptance 8;
77952     +if campaign_acceptance eq . then RANGE_campaign_acceptance = .;
MPRINT(EM_DIAGRAM):   if campaign_acceptance eq . then RANGE_campaign_acceptance = .;
77953     +else RANGE_campaign_acceptance = (campaign_acceptance - 0) / (4-0);
MPRINT(EM_DIAGRAM):   else RANGE_campaign_acceptance = (campaign_acceptance - 0) / (4-0);
77954     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77955     +* TRANSFORM: loyalty , (loyalty - 24) / (47-24);
MPRINT(EM_DIAGRAM):   * TRANSFORM: loyalty , (loyalty - 24) / (47-24);
77956     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77957     +label RANGE_loyalty = 'Transformed loyalty';
MPRINT(EM_DIAGRAM):   label RANGE_loyalty = 'Transformed loyalty';
77958     +length RANGE_loyalty 8;
MPRINT(EM_DIAGRAM):   length RANGE_loyalty 8;
77959     +if loyalty eq . then RANGE_loyalty = .;
MPRINT(EM_DIAGRAM):   if loyalty eq . then RANGE_loyalty = .;
77960     +else RANGE_loyalty = (loyalty - 24) / (47-24);
MPRINT(EM_DIAGRAM):   else RANGE_loyalty = (loyalty - 24) / (47-24);
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
77961      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77962      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
77963      quit;
77964      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
77965      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
77966      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
77967      retain ID 5 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 5 Node "Trans";
77968      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
77969      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 9 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77970      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
77971      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77972      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 9 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

77973      proc sort data=EMWS1.EMCODE3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EMCODE3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
77974      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77975      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 43 observations read from the data set EMWS1.EMCODE3_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 43 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

77976      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77977      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
77978      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
77979      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 43 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77980      proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
77981      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 55 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

77982      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
77983      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77984      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 55 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 55 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

77985      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
77986      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
77987      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
77988      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 55 observations read from the data set WORK._META.
NOTE: There were 43 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 55 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

77989      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
77990      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
77990    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 9 rows and 5 columns.

77991      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

77992      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
77993      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 9 observations read from the data set WORK._TEMPX.
NOTE: 9 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 409 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

77994      filename _pref "C:\Users\misil\Desktop\DM
77994    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EMCODE2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EMCODE2\EMPUBLISHSCORE.sas";
77995      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
77996      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
77997      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EMCODE2\EMPUBLISHSCORE.sas.
77998     +  campaign_acceptance = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + AcceptedCmp4 +
77998    !+AcceptedCmp5;
MPRINT(EM_DIAGRAM):   campaign_acceptance = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + 
AcceptedCmp4 + AcceptedCmp5;
77999     +
78000     +  Childhome = 1*((Kidhome=1) | (Teenhome=1));
MPRINT(EM_DIAGRAM):   Childhome = 1*((Kidhome=1) | (Teenhome=1));
78001     +
78002     +  Mnt = IMP_MntScenario +  MntMiniatures + MntCard_Games + MntMagazines +
78002    !+MntPainting_Material;
MPRINT(EM_DIAGRAM):   Mnt = IMP_MntScenario + MntMiniatures + MntCard_Games + MntMagazines + 
MntPainting_Material;
78003     +
78004     +    IMP_MntScenario = IMP_MntScenario/Mnt;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = IMP_MntScenario/Mnt;
78005     +
78006     +    MntMiniatures = MntMiniatures/Mnt;
MPRINT(EM_DIAGRAM):   MntMiniatures = MntMiniatures/Mnt;
78007     +
78008     +    MntCard_Games = MntCard_Games/Mnt;
MPRINT(EM_DIAGRAM):   MntCard_Games = MntCard_Games/Mnt;
78009     +
78010     +    MntMagazines = MntMagazines/Mnt;
MPRINT(EM_DIAGRAM):   MntMagazines = MntMagazines/Mnt;
78011     +
78012     +    MntPainting_Material = MntPainting_Material/Mnt;
MPRINT(EM_DIAGRAM):   MntPainting_Material = MntPainting_Material/Mnt;
78013     +
78014     +    IMP_MntBrandA__Material = IMP_MntBrandA__Material/Mnt;
MPRINT(EM_DIAGRAM):   IMP_MntBrandA__Material = IMP_MntBrandA__Material/Mnt;
78015     +
78016     +  Frq = NumCatalogPurchases  +  NumStorePurchases + NumWebPurchases;
MPRINT(EM_DIAGRAM):   Frq = NumCatalogPurchases + NumStorePurchases + NumWebPurchases;
78017     +
78018     +    NumCatalogPurchases = NumCatalogPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumCatalogPurchases = NumCatalogPurchases/Frq;
78019     +
78020     +    NumStorePurchases = NumStorePurchases/Frq;
MPRINT(EM_DIAGRAM):   NumStorePurchases = NumStorePurchases/Frq;
78021     +
78022     +    NumWebPurchases = NumWebPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumWebPurchases = NumWebPurchases/Frq;
78023     +
78024     +    NumDealsPurchases = NumDealsPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumDealsPurchases = NumDealsPurchases/Frq;
78025     +
78026     +  average_purchase = Mnt / Frq;
MPRINT(EM_DIAGRAM):   average_purchase = Mnt / Frq;
78027     +
78028     +  age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   age = year(today())-Year_Birth;
78029     +
78030     +  loyalty = 12*(year(today()) - year(Dt_Customer)) +
78030    !+month(today())-month(Dt_Customer);
MPRINT(EM_DIAGRAM):   loyalty = 12*(year(today()) - year(Dt_Customer)) + 
month(today())-month(Dt_Customer);
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
78031      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78032      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
78033      quit;
78034      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
78035      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
78036      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
78037      retain ID 8 Node "EMCODE2";
MPRINT(EM_DIAGRAM):   retain ID 8 Node "EMCODE2";
78038      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
78039      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 241 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 241 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78040      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
78041      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78042      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 241 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 241 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78043      proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
78044      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78045      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 36 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78046      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78047      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
78048      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
78049      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 36 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78050      proc contents data=EMWS1.EMCODE2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.EMCODE2_train out=_meta(keep=NAME) noprint;
78051      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78052      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
78053      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78054      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 46 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 46 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78055      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78056      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
78057      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78058      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 46 observations read from the data set WORK._META.
NOTE: There were 36 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 46 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78059      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
78060      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
78060    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 137 rows and 5 columns.

78061      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78062      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
78063      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 137 observations read from the data set WORK._TEMPX.
NOTE: 137 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 546 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78064      filename _pref "C:\Users\misil\Desktop\DM
78064    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas";
78065      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
78066      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
78067      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Impt\EMPUBLISHSCORE.sas.
78068     +*;
MPRINT(EM_DIAGRAM):   *;
78069     +* TREE IMPUTATION;
MPRINT(EM_DIAGRAM):   * TREE IMPUTATION;
78070     +*;
MPRINT(EM_DIAGRAM):   *;
78071     +*;
MPRINT(EM_DIAGRAM):   *;
78072     +* IMPUTE VARIABLE: Income;
MPRINT(EM_DIAGRAM):   * IMPUTE VARIABLE: Income;
78073     +*;
MPRINT(EM_DIAGRAM):   *;
78074     +length IMP_Income 8;
MPRINT(EM_DIAGRAM):   length IMP_Income 8;
78075     +format IMP_Income BEST.;
MPRINT(EM_DIAGRAM):   format IMP_Income BEST.;
78076     +label IMP_Income = 'Imputed: Income';
MPRINT(EM_DIAGRAM):   label IMP_Income = 'Imputed: Income';
78077     +IMP_Income = Income;
MPRINT(EM_DIAGRAM):   IMP_Income = Income;
78078     +if missing(IMP_Income) then do;
MPRINT(EM_DIAGRAM):   if missing(IMP_Income) then do;
78079     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78080     +****** DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
78081     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78082     +****** LENGTHS OF NEW CHARACTER VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
78083     +LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
78084     +****** LABELS FOR NEW VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
78085     +label P_Income = 'Predicted: Income';
MPRINT(EM_DIAGRAM):   label P_Income = 'Predicted: Income';
78086     +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
78087     +****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
78088     +LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
78089     +DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
78090     +_ARBFMT_12 = ' ';
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
78091     +/* Initialize to avoid warning. */
78092     +****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   /* Initialize to avoid warning. */ ****** ASSIGN OBSERVATION TO NODE 
******;
78093     +IF NOT MISSING(MntMiniatures ) AND
78094     +MntMiniatures < 118 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND MntMiniatures < 118 THEN DO;
78095     +IF NOT MISSING(MntMiniatures ) AND
78096     +29.5 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 29.5 <= MntMiniatures THEN DO;
78097     +IF NOT MISSING(NumWebVisitsMonth ) AND
78098     +NumWebVisitsMonth < 3.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND NumWebVisitsMonth < 3.5 THEN DO;
78099     +IF NOT MISSING(MntScenario ) AND
78100     +MntScenario < 31 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntScenario ) AND MntScenario < 31 THEN DO;
78101     +P_Income = 60000.8461538461;
MPRINT(EM_DIAGRAM):   P_Income = 60000.8461538461;
78102     +END;
MPRINT(EM_DIAGRAM):   END;
78103     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78104     +P_Income = 76444.05;
MPRINT(EM_DIAGRAM):   P_Income = 76444.05;
78105     +END;
MPRINT(EM_DIAGRAM):   END;
78106     +END;
MPRINT(EM_DIAGRAM):   END;
78107     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78108     +IF NOT MISSING(NumWebVisitsMonth ) AND
78109     +7.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 7.5 <= NumWebVisitsMonth THEN DO;
78110     +IF NOT MISSING(Teenhome ) AND
78111     +0.5 <= Teenhome THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Teenhome ) AND 0.5 <= Teenhome THEN DO;
78112     +P_Income = 45831.2195121951;
MPRINT(EM_DIAGRAM):   P_Income = 45831.2195121951;
78113     +END;
MPRINT(EM_DIAGRAM):   END;
78114     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78115     +P_Income = 38620.1702127659;
MPRINT(EM_DIAGRAM):   P_Income = 38620.1702127659;
78116     +END;
MPRINT(EM_DIAGRAM):   END;
78117     +END;
MPRINT(EM_DIAGRAM):   END;
78118     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78119     +IF NOT MISSING(Teenhome ) AND
78120     +Teenhome < 0.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Teenhome ) AND Teenhome < 0.5 THEN DO;
78121     +P_Income = 46564.9333333333;
MPRINT(EM_DIAGRAM):   P_Income = 46564.9333333333;
78122     +END;
MPRINT(EM_DIAGRAM):   END;
78123     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78124     +P_Income = 53181.4938271605;
MPRINT(EM_DIAGRAM):   P_Income = 53181.4938271605;
78125     +END;
MPRINT(EM_DIAGRAM):   END;
78126     +END;
MPRINT(EM_DIAGRAM):   END;
78127     +END;
MPRINT(EM_DIAGRAM):   END;
78128     +END;
MPRINT(EM_DIAGRAM):   END;
78129     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78130     +IF NOT MISSING(Teenhome ) AND
78131     +0.5 <= Teenhome THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Teenhome ) AND 0.5 <= Teenhome THEN DO;
78132     +IF NOT MISSING(NumDealsPurchases ) AND
78133     +NumDealsPurchases < 1.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND NumDealsPurchases < 1.5 THEN DO;
78134     +IF NOT MISSING(MntMiniatures ) AND
78135     +MntMiniatures < 9.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND MntMiniatures < 9.5 THEN DO;
78136     +IF NOT MISSING(MntCard_Games ) AND
78137     +MntCard_Games < 7 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND MntCard_Games < 7 THEN DO;
78138     +P_Income = 33113.3125;
MPRINT(EM_DIAGRAM):   P_Income = 33113.3125;
78139     +END;
MPRINT(EM_DIAGRAM):   END;
78140     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78141     +P_Income = 46363.2727272727;
MPRINT(EM_DIAGRAM):   P_Income = 46363.2727272727;
78142     +END;
MPRINT(EM_DIAGRAM):   END;
78143     +END;
MPRINT(EM_DIAGRAM):   END;
78144     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78145     +P_Income = 51717.8305084745;
MPRINT(EM_DIAGRAM):   P_Income = 51717.8305084745;
78146     +END;
MPRINT(EM_DIAGRAM):   END;
78147     +END;
MPRINT(EM_DIAGRAM):   END;
78148     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78149     +IF NOT MISSING(MntMiniatures ) AND
78150     +MntMiniatures < 14.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND MntMiniatures < 14.5 THEN DO;
78151     +IF NOT MISSING(MntBrandA__Material ) AND
78152     +MntBrandA__Material < 16.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntBrandA__Material ) AND MntBrandA__Material < 16.5 THEN 
DO;
78153     +P_Income = 37886.1666666666;
MPRINT(EM_DIAGRAM):   P_Income = 37886.1666666666;
78154     +END;
MPRINT(EM_DIAGRAM):   END;
78155     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78156     +P_Income = 22242.4375;
MPRINT(EM_DIAGRAM):   P_Income = 22242.4375;
78157     +END;
MPRINT(EM_DIAGRAM):   END;
78158     +END;
MPRINT(EM_DIAGRAM):   END;
78159     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78160     +P_Income = 42230.343283582;
MPRINT(EM_DIAGRAM):   P_Income = 42230.343283582;
78161     +END;
MPRINT(EM_DIAGRAM):   END;
78162     +END;
MPRINT(EM_DIAGRAM):   END;
78163     +END;
MPRINT(EM_DIAGRAM):   END;
78164     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78165     +IF NOT MISSING(MntMiniatures ) AND
78166     +7.5 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 7.5 <= MntMiniatures THEN DO;
78167     +IF NOT MISSING(NumDealsPurchases ) AND
78168     +2.5 <= NumDealsPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND 2.5 <= NumDealsPurchases THEN DO;
78169     +IF NOT MISSING(MntCard_Games ) AND
78170     +83.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 83.5 <= MntCard_Games THEN DO;
78171     +P_Income = 41775.4;
MPRINT(EM_DIAGRAM):   P_Income = 41775.4;
78172     +END;
MPRINT(EM_DIAGRAM):   END;
78173     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78174     +P_Income = 24694.6578947368;
MPRINT(EM_DIAGRAM):   P_Income = 24694.6578947368;
78175     +END;
MPRINT(EM_DIAGRAM):   END;
78176     +END;
MPRINT(EM_DIAGRAM):   END;
78177     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78178     +P_Income = 35662.2312138728;
MPRINT(EM_DIAGRAM):   P_Income = 35662.2312138728;
78179     +END;
MPRINT(EM_DIAGRAM):   END;
78180     +END;
MPRINT(EM_DIAGRAM):   END;
78181     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78182     +IF NOT MISSING(NumDealsPurchases ) AND
78183     +1.5 <= NumDealsPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND 1.5 <= NumDealsPurchases THEN DO;
78184     +P_Income = 23288.9175257731;
MPRINT(EM_DIAGRAM):   P_Income = 23288.9175257731;
78185     +END;
MPRINT(EM_DIAGRAM):   END;
78186     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78187     +P_Income = 29123.7272727272;
MPRINT(EM_DIAGRAM):   P_Income = 29123.7272727272;
78188     +END;
MPRINT(EM_DIAGRAM):   END;
78189     +END;
MPRINT(EM_DIAGRAM):   END;
78190     +END;
MPRINT(EM_DIAGRAM):   END;
78191     +END;
MPRINT(EM_DIAGRAM):   END;
78192     +END;
MPRINT(EM_DIAGRAM):   END;
78193     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78194     +IF NOT MISSING(NumDealsPurchases ) AND
78195     +NumDealsPurchases < 1.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND NumDealsPurchases < 1.5 THEN DO;
78196     +_ARBFMT_12 = PUT( AcceptedCmp4 , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( AcceptedCmp4 , BEST.);
78197     +%DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
78198     +IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
78199     +IF NOT MISSING(NumDealsPurchases ) AND
78200     +NumDealsPurchases < 0.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumDealsPurchases ) AND NumDealsPurchases < 0.5 THEN DO;
78201     +P_Income = 107467.655172413;
MPRINT(EM_DIAGRAM):   P_Income = 107467.655172413;
78202     +END;
MPRINT(EM_DIAGRAM):   END;
78203     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78204     +IF NOT MISSING(NumWebVisitsMonth ) AND
78205     +4.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 4.5 <= NumWebVisitsMonth THEN DO;
78206     +P_Income = 92015;
MPRINT(EM_DIAGRAM):   P_Income = 92015;
78207     +END;
MPRINT(EM_DIAGRAM):   END;
78208     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78209     +P_Income = 100853.071942446;
MPRINT(EM_DIAGRAM):   P_Income = 100853.071942446;
78210     +END;
MPRINT(EM_DIAGRAM):   END;
78211     +END;
MPRINT(EM_DIAGRAM):   END;
78212     +END;
MPRINT(EM_DIAGRAM):   END;
78213     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78214     +IF NOT MISSING(MntCard_Games ) AND
78215     +MntCard_Games < 415.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND MntCard_Games < 415.5 THEN DO;
78216     +IF NOT MISSING(NumCatalogPurchases ) AND
78217     +NumCatalogPurchases < 4.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND NumCatalogPurchases < 4.5 THEN 
DO;
78218     +IF NOT MISSING(Dt_Customer ) AND
78219     +Dt_Customer < 20351 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Dt_Customer ) AND Dt_Customer < 20351 THEN DO;
78220     +P_Income = 58836.6666666666;
MPRINT(EM_DIAGRAM):   P_Income = 58836.6666666666;
78221     +END;
MPRINT(EM_DIAGRAM):   END;
78222     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78223     +P_Income = 73054.05;
MPRINT(EM_DIAGRAM):   P_Income = 73054.05;
78224     +END;
MPRINT(EM_DIAGRAM):   END;
78225     +END;
MPRINT(EM_DIAGRAM):   END;
78226     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78227     +P_Income = 82572.3583333333;
MPRINT(EM_DIAGRAM):   P_Income = 82572.3583333333;
78228     +END;
MPRINT(EM_DIAGRAM):   END;
78229     +END;
MPRINT(EM_DIAGRAM):   END;
78230     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78231     +IF NOT MISSING(NumWebVisitsMonth ) AND
78232     +4.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 4.5 <= NumWebVisitsMonth THEN DO;
78233     +P_Income = 84319.7037037037;
MPRINT(EM_DIAGRAM):   P_Income = 84319.7037037037;
78234     +END;
MPRINT(EM_DIAGRAM):   END;
78235     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78236     +P_Income = 92504.211469534;
MPRINT(EM_DIAGRAM):   P_Income = 92504.211469534;
78237     +END;
MPRINT(EM_DIAGRAM):   END;
78238     +END;
MPRINT(EM_DIAGRAM):   END;
78239     +END;
MPRINT(EM_DIAGRAM):   END;
78240     +END;
MPRINT(EM_DIAGRAM):   END;
78241     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78242     +IF NOT MISSING(MntCard_Games ) AND
78243     +251.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 251.5 <= MntCard_Games THEN DO;
78244     +IF NOT MISSING(MntMiniatures ) AND
78245     +627.5 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 627.5 <= MntMiniatures THEN DO;
78246     +IF NOT MISSING(Kidhome ) AND
78247     +0.5 <= Kidhome THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Kidhome ) AND 0.5 <= Kidhome THEN DO;
78248     +P_Income = 93983.4545454545;
MPRINT(EM_DIAGRAM):   P_Income = 93983.4545454545;
78249     +END;
MPRINT(EM_DIAGRAM):   END;
78250     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78251     +P_Income = 83167.046875;
MPRINT(EM_DIAGRAM):   P_Income = 83167.046875;
78252     +END;
MPRINT(EM_DIAGRAM):   END;
78253     +END;
MPRINT(EM_DIAGRAM):   END;
78254     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78255     +IF NOT MISSING(NumWebVisitsMonth ) AND
78256     +5.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 5.5 <= NumWebVisitsMonth THEN DO;
78257     +IF NOT MISSING(Teenhome ) AND
78258     +Teenhome < 0.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Teenhome ) AND Teenhome < 0.5 THEN DO;
78259     +P_Income = 56632.6842105263;
MPRINT(EM_DIAGRAM):   P_Income = 56632.6842105263;
78260     +END;
MPRINT(EM_DIAGRAM):   END;
78261     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78262     +P_Income = 72954.6666666666;
MPRINT(EM_DIAGRAM):   P_Income = 72954.6666666666;
78263     +END;
MPRINT(EM_DIAGRAM):   END;
78264     +END;
MPRINT(EM_DIAGRAM):   END;
78265     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78266     +IF NOT MISSING(NumWebPurchases ) AND
78267     +11.5 <= NumWebPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebPurchases ) AND 11.5 <= NumWebPurchases THEN DO;
78268     +P_Income = 86293.95;
MPRINT(EM_DIAGRAM):   P_Income = 86293.95;
78269     +END;
MPRINT(EM_DIAGRAM):   END;
78270     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78271     +P_Income = 76749.7590361445;
MPRINT(EM_DIAGRAM):   P_Income = 76749.7590361445;
78272     +END;
MPRINT(EM_DIAGRAM):   END;
78273     +END;
MPRINT(EM_DIAGRAM):   END;
78274     +END;
MPRINT(EM_DIAGRAM):   END;
78275     +END;
MPRINT(EM_DIAGRAM):   END;
78276     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78277     +IF NOT MISSING(MntMiniatures ) AND
78278     +359.5 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 359.5 <= MntMiniatures THEN DO;
78279     +IF NOT MISSING(NumWebVisitsMonth ) AND
78280     +NumWebVisitsMonth < 6.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND NumWebVisitsMonth < 6.5 THEN DO;
78281     +IF NOT MISSING(MntCard_Games ) AND
78282     +158.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 158.5 <= MntCard_Games THEN DO;
78283     +P_Income = 78231.0909090909;
MPRINT(EM_DIAGRAM):   P_Income = 78231.0909090909;
78284     +END;
MPRINT(EM_DIAGRAM):   END;
78285     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78286     +P_Income = 70671.2916666666;
MPRINT(EM_DIAGRAM):   P_Income = 70671.2916666666;
78287     +END;
MPRINT(EM_DIAGRAM):   END;
78288     +END;
MPRINT(EM_DIAGRAM):   END;
78289     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78290     +IF NOT MISSING(MntMiniatures ) AND
78291     +779 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 779 <= MntMiniatures THEN DO;
78292     +P_Income = 74626.5;
MPRINT(EM_DIAGRAM):   P_Income = 74626.5;
78293     +END;
MPRINT(EM_DIAGRAM):   END;
78294     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78295     +P_Income = 64728.6708860759;
MPRINT(EM_DIAGRAM):   P_Income = 64728.6708860759;
78296     +END;
MPRINT(EM_DIAGRAM):   END;
78297     +END;
MPRINT(EM_DIAGRAM):   END;
78298     +END;
MPRINT(EM_DIAGRAM):   END;
78299     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78300     +IF NOT MISSING(NumWebVisitsMonth ) AND
78301     +7.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 7.5 <= NumWebVisitsMonth THEN DO;
78302     +IF NOT MISSING(Teenhome ) AND
78303     +0.5 <= Teenhome THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Teenhome ) AND 0.5 <= Teenhome THEN DO;
78304     +P_Income = 55256.8918918919;
MPRINT(EM_DIAGRAM):   P_Income = 55256.8918918919;
78305     +END;
MPRINT(EM_DIAGRAM):   END;
78306     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78307     +P_Income = 44871.9729729729;
MPRINT(EM_DIAGRAM):   P_Income = 44871.9729729729;
78308     +END;
MPRINT(EM_DIAGRAM):   END;
78309     +END;
MPRINT(EM_DIAGRAM):   END;
78310     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78311     +IF NOT MISSING(NumWebVisitsMonth ) AND
78312     +5.5 <= NumWebVisitsMonth THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebVisitsMonth ) AND 5.5 <= NumWebVisitsMonth THEN DO;
78313     +P_Income = 59564.0693069307;
MPRINT(EM_DIAGRAM):   P_Income = 59564.0693069307;
78314     +END;
MPRINT(EM_DIAGRAM):   END;
78315     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78316     +P_Income = 66927.3461538461;
MPRINT(EM_DIAGRAM):   P_Income = 66927.3461538461;
78317     +END;
MPRINT(EM_DIAGRAM):   END;
78318     +END;
MPRINT(EM_DIAGRAM):   END;
78319     +END;
MPRINT(EM_DIAGRAM):   END;
78320     +END;
MPRINT(EM_DIAGRAM):   END;
78321     +END;
MPRINT(EM_DIAGRAM):   END;
78322     +END;
MPRINT(EM_DIAGRAM):   END;
78323     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78324     +****** END OF DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
78325     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78326     +*;
MPRINT(EM_DIAGRAM):   *;
78327     +* ASSIGN VALUE TO: Income;
MPRINT(EM_DIAGRAM):   * ASSIGN VALUE TO: Income;
78328     +*;
MPRINT(EM_DIAGRAM):   *;
78329     +IMP_Income = P_INCOME;
MPRINT(EM_DIAGRAM):   IMP_Income = P_INCOME;
78330     +END;
MPRINT(EM_DIAGRAM):   END;
78331     +*;
MPRINT(EM_DIAGRAM):   *;
78332     +* IMPUTE VARIABLE: MntBrandA__Material;
MPRINT(EM_DIAGRAM):   * IMPUTE VARIABLE: MntBrandA__Material;
78333     +*;
MPRINT(EM_DIAGRAM):   *;
78334     +length IMP_MntBrandA__Material 8;
MPRINT(EM_DIAGRAM):   length IMP_MntBrandA__Material 8;
78335     +label IMP_MntBrandA__Material = 'Imputed: MntBrandA _Material';
MPRINT(EM_DIAGRAM):   label IMP_MntBrandA__Material = 'Imputed: MntBrandA _Material';
78336     +IMP_MntBrandA__Material = MntBrandA__Material;
MPRINT(EM_DIAGRAM):   IMP_MntBrandA__Material = MntBrandA__Material;
78337     +if missing(IMP_MntBrandA__Material) then do;
MPRINT(EM_DIAGRAM):   if missing(IMP_MntBrandA__Material) then do;
78338     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78339     +****** DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
78340     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78341     +****** LENGTHS OF NEW CHARACTER VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
78342     +LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
78343     +****** LABELS FOR NEW VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
78344     +label P_MntBrandA__Material = 'Predicted: MntBrandA__Material';
MPRINT(EM_DIAGRAM):   label P_MntBrandA__Material = 'Predicted: MntBrandA__Material';
78345     +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
78346     +****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
78347     +LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
78348     +DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
78349     +_ARBFMT_10 = ' ';
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
78350     +/* Initialize to avoid warning. */
78351     +LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   /* Initialize to avoid warning. */ LENGTH _ARBFMT_12 $ 12;
78352     +DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
78353     +_ARBFMT_12 = ' ';
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
78354     +/* Initialize to avoid warning. */
78355     +****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   /* Initialize to avoid warning. */ ****** ASSIGN OBSERVATION TO NODE 
******;
78356     +IF NOT MISSING(MntCard_Games ) AND
78357     +MntCard_Games < 79 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND MntCard_Games < 79 THEN DO;
78358     +IF NOT MISSING(NumCatalogPurchases ) AND
78359     +3.5 <= NumCatalogPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 3.5 <= NumCatalogPurchases THEN 
DO;
78360     +IF NOT MISSING(NumCatalogPurchases ) AND
78361     +6.5 <= NumCatalogPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 6.5 <= NumCatalogPurchases THEN 
DO;
78362     +P_MntBrandA__Material = 132.833333333333;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 132.833333333333;
78363     +END;
MPRINT(EM_DIAGRAM):   END;
78364     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78365     +IF NOT MISSING(Dt_Customer ) AND
78366     +Dt_Customer < 19962 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Dt_Customer ) AND Dt_Customer < 19962 THEN DO;
78367     +P_MntBrandA__Material = 150;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 150;
78368     +END;
MPRINT(EM_DIAGRAM):   END;
78369     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78370     +P_MntBrandA__Material = 49.0892857142857;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 49.0892857142857;
78371     +END;
MPRINT(EM_DIAGRAM):   END;
78372     +END;
MPRINT(EM_DIAGRAM):   END;
78373     +END;
MPRINT(EM_DIAGRAM):   END;
78374     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78375     +IF NOT MISSING(NumCatalogPurchases ) AND
78376     +2.5 <= NumCatalogPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 2.5 <= NumCatalogPurchases THEN 
DO;
78377     +IF NOT MISSING(MntScenario ) AND
78378     +9 <= MntScenario THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntScenario ) AND 9 <= MntScenario THEN DO;
78379     +IF NOT MISSING(MntPainting_Material ) AND
78380     +37 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 37 <= MntPainting_Material 
THEN DO;
78381     +P_MntBrandA__Material = 72;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 72;
78382     +END;
MPRINT(EM_DIAGRAM):   END;
78383     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78384     +IF NOT MISSING(MntMiniatures ) AND
78385     +176.5 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 176.5 <= MntMiniatures THEN DO;
78386     +P_MntBrandA__Material = 62.3636363636363;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 62.3636363636363;
78387     +END;
MPRINT(EM_DIAGRAM):   END;
78388     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78389     +P_MntBrandA__Material = 30.8018018018018;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 30.8018018018018;
78390     +END;
MPRINT(EM_DIAGRAM):   END;
78391     +END;
MPRINT(EM_DIAGRAM):   END;
78392     +END;
MPRINT(EM_DIAGRAM):   END;
78393     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78394     +IF NOT MISSING(NumWebPurchases ) AND
78395     +6.5 <= NumWebPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebPurchases ) AND 6.5 <= NumWebPurchases THEN DO;
78396     +_ARBFMT_12 = PUT( AcceptedCmp2 , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( AcceptedCmp2 , BEST.);
78397     +%DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
78398     +IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
78399     +P_MntBrandA__Material = 52.2222222222222;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 52.2222222222222;
78400     +END;
MPRINT(EM_DIAGRAM):   END;
78401     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78402     +P_MntBrandA__Material = 24.1688311688311;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 24.1688311688311;
78403     +END;
MPRINT(EM_DIAGRAM):   END;
78404     +END;
MPRINT(EM_DIAGRAM):   END;
78405     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78406     +IF NOT MISSING(MntMagazines ) AND
78407     +5.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 5.5 <= MntMagazines THEN DO;
78408     +P_MntBrandA__Material = 26.3181818181818;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 26.3181818181818;
78409     +END;
MPRINT(EM_DIAGRAM):   END;
78410     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78411     +P_MntBrandA__Material = 14.9663865546218;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 14.9663865546218;
78412     +END;
MPRINT(EM_DIAGRAM):   END;
78413     +END;
MPRINT(EM_DIAGRAM):   END;
78414     +END;
MPRINT(EM_DIAGRAM):   END;
78415     +END;
MPRINT(EM_DIAGRAM):   END;
78416     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78417     +IF NOT MISSING(MntScenario ) AND
78418     +13 <= MntScenario THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntScenario ) AND 13 <= MntScenario THEN DO;
78419     +IF NOT MISSING(Dt_Customer ) AND
78420     +Dt_Customer < 19972.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Dt_Customer ) AND Dt_Customer < 19972.5 THEN DO;
78421     +P_MntBrandA__Material = 49.1666666666666;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 49.1666666666666;
78422     +END;
MPRINT(EM_DIAGRAM):   END;
78423     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78424     +P_MntBrandA__Material = 21.2022471910112;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 21.2022471910112;
78425     +END;
MPRINT(EM_DIAGRAM):   END;
78426     +END;
MPRINT(EM_DIAGRAM):   END;
78427     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78428     +IF NOT MISSING(MntMagazines ) AND
78429     +4.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 4.5 <= MntMagazines THEN DO;
78430     +IF NOT MISSING(MntMiniatures ) AND
78431     +50 <= MntMiniatures THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMiniatures ) AND 50 <= MntMiniatures THEN DO;
78432     +P_MntBrandA__Material = 39.1666666666666;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 39.1666666666666;
78433     +END;
MPRINT(EM_DIAGRAM):   END;
78434     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78435     +P_MntBrandA__Material = 15.2258064516129;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 15.2258064516129;
78436     +END;
MPRINT(EM_DIAGRAM):   END;
78437     +END;
MPRINT(EM_DIAGRAM):   END;
78438     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78439     +IF NOT MISSING(NumWebPurchases ) AND
78440     +5.5 <= NumWebPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumWebPurchases ) AND 5.5 <= NumWebPurchases THEN DO;
78441     +P_MntBrandA__Material = 10.6716417910447;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 10.6716417910447;
78442     +END;
MPRINT(EM_DIAGRAM):   END;
78443     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78444     +P_MntBrandA__Material = 5.79116465863453;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 5.79116465863453;
78445     +END;
MPRINT(EM_DIAGRAM):   END;
78446     +END;
MPRINT(EM_DIAGRAM):   END;
78447     +END;
MPRINT(EM_DIAGRAM):   END;
78448     +END;
MPRINT(EM_DIAGRAM):   END;
78449     +END;
MPRINT(EM_DIAGRAM):   END;
78450     +END;
MPRINT(EM_DIAGRAM):   END;
78451     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78452     +_ARBFMT_10 = PUT( Education , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Education , $10.);
78453     +%DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
78454     +IF _ARBFMT_10 IN ('BASIC' ,'2N CYCLE' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('BASIC' ,'2N CYCLE' ) THEN DO;
78455     +P_MntBrandA__Material = 106.692098092643;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 106.692098092643;
78456     +END;
MPRINT(EM_DIAGRAM):   END;
78457     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78458     +_ARBFMT_12 = PUT( AcceptedCmp2 , BEST.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( AcceptedCmp2 , BEST.);
78459     +%DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
78460     +IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
78461     +P_MntBrandA__Material = 118.571428571428;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 118.571428571428;
78462     +END;
MPRINT(EM_DIAGRAM):   END;
78463     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78464     +IF NOT MISSING(MntPainting_Material ) AND
78465     +68.5 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 68.5 <= MntPainting_Material 
THEN DO;
78466     +IF NOT MISSING(Dt_Customer ) AND
78467     +20437.5 <= Dt_Customer THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Dt_Customer ) AND 20437.5 <= Dt_Customer THEN DO;
78468     +P_MntBrandA__Material = 57.2727272727272;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 57.2727272727272;
78469     +END;
MPRINT(EM_DIAGRAM):   END;
78470     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78471     +P_MntBrandA__Material = 102.050632911392;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 102.050632911392;
78472     +END;
MPRINT(EM_DIAGRAM):   END;
78473     +END;
MPRINT(EM_DIAGRAM):   END;
78474     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78475     +IF NOT MISSING(NumCatalogPurchases ) AND
78476     +NumCatalogPurchases < 4.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND NumCatalogPurchases < 4.5 THEN 
DO;
78477     +IF NOT MISSING(MntCard_Games ) AND
78478     +320 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 320 <= MntCard_Games THEN DO;
78479     +P_MntBrandA__Material = 87.48;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 87.48;
78480     +END;
MPRINT(EM_DIAGRAM):   END;
78481     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78482     +P_MntBrandA__Material = 44.4663461538461;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 44.4663461538461;
78483     +END;
MPRINT(EM_DIAGRAM):   END;
78484     +END;
MPRINT(EM_DIAGRAM):   END;
78485     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78486     +P_MntBrandA__Material = 68.2479108635097;
MPRINT(EM_DIAGRAM):   P_MntBrandA__Material = 68.2479108635097;
78487     +END;
MPRINT(EM_DIAGRAM):   END;
78488     +END;
MPRINT(EM_DIAGRAM):   END;
78489     +END;
MPRINT(EM_DIAGRAM):   END;
78490     +END;
MPRINT(EM_DIAGRAM):   END;
78491     +END;
MPRINT(EM_DIAGRAM):   END;
78492     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78493     +****** END OF DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
78494     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78495     +*;
MPRINT(EM_DIAGRAM):   *;
78496     +* ASSIGN VALUE TO: MntBrandA__Material;
MPRINT(EM_DIAGRAM):   * ASSIGN VALUE TO: MntBrandA__Material;
78497     +*;
MPRINT(EM_DIAGRAM):   *;
78498     +IMP_MntBrandA__Material = P_MNTBRANDA__MATERIAL;
MPRINT(EM_DIAGRAM):   IMP_MntBrandA__Material = P_MNTBRANDA__MATERIAL;
78499     +END;
MPRINT(EM_DIAGRAM):   END;
78500     +*;
MPRINT(EM_DIAGRAM):   *;
78501     +* IMPUTE VARIABLE: MntScenario;
MPRINT(EM_DIAGRAM):   * IMPUTE VARIABLE: MntScenario;
78502     +*;
MPRINT(EM_DIAGRAM):   *;
78503     +length IMP_MntScenario 8;
MPRINT(EM_DIAGRAM):   length IMP_MntScenario 8;
78504     +format IMP_MntScenario BEST.;
MPRINT(EM_DIAGRAM):   format IMP_MntScenario BEST.;
78505     +label IMP_MntScenario = 'Imputed: MntScenario';
MPRINT(EM_DIAGRAM):   label IMP_MntScenario = 'Imputed: MntScenario';
78506     +IMP_MntScenario = MntScenario;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = MntScenario;
78507     +if missing(IMP_MntScenario) then do;
MPRINT(EM_DIAGRAM):   if missing(IMP_MntScenario) then do;
78508     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78509     +****** DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
78510     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78511     +****** LENGTHS OF NEW CHARACTER VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
78512     +LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
78513     +****** LABELS FOR NEW VARIABLES ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
78514     +label P_MntScenario = 'Predicted: MntScenario';
MPRINT(EM_DIAGRAM):   label P_MntScenario = 'Predicted: MntScenario';
78515     +label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
78516     +****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
78517     +LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
78518     +DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
78519     +_ARBFMT_10 = ' ';
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
78520     +/* Initialize to avoid warning. */
78521     +****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   /* Initialize to avoid warning. */ ****** ASSIGN OBSERVATION TO NODE 
******;
78522     +IF NOT MISSING(MntCard_Games ) AND
78523     +146.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 146.5 <= MntCard_Games THEN DO;
78524     +IF NOT MISSING(MntPainting_Material ) AND
78525     +172 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 172 <= MntPainting_Material 
THEN DO;
78526     +P_MntScenario = 190.855072463768;
MPRINT(EM_DIAGRAM):   P_MntScenario = 190.855072463768;
78527     +END;
MPRINT(EM_DIAGRAM):   END;
78528     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78529     +IF NOT MISSING(MntMagazines ) AND
78530     +MntMagazines < 33.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND MntMagazines < 33.5 THEN DO;
78531     +IF NOT MISSING(MntPainting_Material ) AND
78532     +58 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 58 <= MntPainting_Material 
THEN DO;
78533     +P_MntScenario = 108.4;
MPRINT(EM_DIAGRAM):   P_MntScenario = 108.4;
78534     +END;
MPRINT(EM_DIAGRAM):   END;
78535     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78536     +IF NOT MISSING(Income ) AND
78537     +Income < 85245 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Income ) AND Income < 85245 THEN DO;
78538     +IF NOT MISSING(MntPainting_Material ) AND
78539     +28 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 28 <= MntPainting_Material 
THEN DO;
78540     +P_MntScenario = 53.2428571428571;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.2428571428571;
78541     +END;
MPRINT(EM_DIAGRAM):   END;
78542     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78543     +P_MntScenario = 29.3509933774834;
MPRINT(EM_DIAGRAM):   P_MntScenario = 29.3509933774834;
78544     +END;
MPRINT(EM_DIAGRAM):   END;
78545     +END;
MPRINT(EM_DIAGRAM):   END;
78546     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78547     +P_MntScenario = 79.8842105263158;
MPRINT(EM_DIAGRAM):   P_MntScenario = 79.8842105263158;
78548     +END;
MPRINT(EM_DIAGRAM):   END;
78549     +END;
MPRINT(EM_DIAGRAM):   END;
78550     +END;
MPRINT(EM_DIAGRAM):   END;
78551     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78552     +IF NOT MISSING(MntMagazines ) AND
78553     +71.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 71.5 <= MntMagazines THEN DO;
78554     +P_MntScenario = 141.806034482758;
MPRINT(EM_DIAGRAM):   P_MntScenario = 141.806034482758;
78555     +END;
MPRINT(EM_DIAGRAM):   END;
78556     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78557     +P_MntScenario = 104.139344262295;
MPRINT(EM_DIAGRAM):   P_MntScenario = 104.139344262295;
78558     +END;
MPRINT(EM_DIAGRAM):   END;
78559     +END;
MPRINT(EM_DIAGRAM):   END;
78560     +END;
MPRINT(EM_DIAGRAM):   END;
78561     +END;
MPRINT(EM_DIAGRAM):   END;
78562     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78563     +IF NOT MISSING(MntPainting_Material ) AND
78564     +34 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 34 <= MntPainting_Material 
THEN DO;
78565     +IF NOT MISSING(NumCatalogPurchases ) AND
78566     +4.5 <= NumCatalogPurchases THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 4.5 <= NumCatalogPurchases THEN 
DO;
78567     +P_MntScenario = 96.7777777777777;
MPRINT(EM_DIAGRAM):   P_MntScenario = 96.7777777777777;
78568     +END;
MPRINT(EM_DIAGRAM):   END;
78569     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78570     +P_MntScenario = 46.48;
MPRINT(EM_DIAGRAM):   P_MntScenario = 46.48;
78571     +END;
MPRINT(EM_DIAGRAM):   END;
78572     +END;
MPRINT(EM_DIAGRAM):   END;
78573     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78574     +IF NOT MISSING(MntMagazines ) AND
78575     +6.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 6.5 <= MntMagazines THEN DO;
78576     +IF NOT MISSING(MntMagazines ) AND
78577     +29.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 29.5 <= MntMagazines THEN DO;
78578     +P_MntScenario = 53.8666666666666;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.8666666666666;
78579     +END;
MPRINT(EM_DIAGRAM):   END;
78580     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78581     +IF NOT MISSING(MntPainting_Material ) AND
78582     +17.5 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 17.5 <= MntPainting_Material 
THEN DO;
78583     +P_MntScenario = 26.2857142857142;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.2857142857142;
78584     +END;
MPRINT(EM_DIAGRAM):   END;
78585     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78586     +P_MntScenario = 15.7768924302788;
MPRINT(EM_DIAGRAM):   P_MntScenario = 15.7768924302788;
78587     +END;
MPRINT(EM_DIAGRAM):   END;
78588     +END;
MPRINT(EM_DIAGRAM):   END;
78589     +END;
MPRINT(EM_DIAGRAM):   END;
78590     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78591     +IF NOT MISSING(MntPainting_Material ) AND
78592     +7 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 7 <= MntPainting_Material THEN 
DO;
78593     +IF NOT MISSING(MntPainting_Material ) AND
78594     +22 <= MntPainting_Material THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 22 <= MntPainting_Material 
THEN DO;
78595     +P_MntScenario = 26.1;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.1;
78596     +END;
MPRINT(EM_DIAGRAM):   END;
78597     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78598     +IF NOT MISSING(MntCard_Games ) AND
78599     +113 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 113 <= MntCard_Games THEN DO;
78600     +P_MntScenario = 24.5;
MPRINT(EM_DIAGRAM):   P_MntScenario = 24.5;
78601     +END;
MPRINT(EM_DIAGRAM):   END;
78602     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78603     +P_MntScenario = 11.4846625766871;
MPRINT(EM_DIAGRAM):   P_MntScenario = 11.4846625766871;
78604     +END;
MPRINT(EM_DIAGRAM):   END;
78605     +END;
MPRINT(EM_DIAGRAM):   END;
78606     +END;
MPRINT(EM_DIAGRAM):   END;
78607     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78608     +IF NOT MISSING(MntMagazines ) AND
78609     +1.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 1.5 <= MntMagazines THEN DO;
78610     +P_MntScenario = 5.89010989010989;
MPRINT(EM_DIAGRAM):   P_MntScenario = 5.89010989010989;
78611     +END;
MPRINT(EM_DIAGRAM):   END;
78612     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78613     +_ARBFMT_10 = PUT( Education , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Education , $10.);
78614     +%DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
78615     +IF _ARBFMT_10 IN ('BASIC' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('BASIC' ) THEN DO;
78616     +P_MntScenario = 9.08333333333333;
MPRINT(EM_DIAGRAM):   P_MntScenario = 9.08333333333333;
78617     +END;
MPRINT(EM_DIAGRAM):   END;
78618     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
78619     +P_MntScenario = 2.44278606965174;
MPRINT(EM_DIAGRAM):   P_MntScenario = 2.44278606965174;
78620     +END;
MPRINT(EM_DIAGRAM):   END;
78621     +END;
MPRINT(EM_DIAGRAM):   END;
78622     +END;
MPRINT(EM_DIAGRAM):   END;
78623     +END;
MPRINT(EM_DIAGRAM):   END;
78624     +END;
MPRINT(EM_DIAGRAM):   END;
78625     +END;
MPRINT(EM_DIAGRAM):   END;
78626     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78627     +****** END OF DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
78628     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
78629     +*;
MPRINT(EM_DIAGRAM):   *;
78630     +* ASSIGN VALUE TO: MntScenario;
MPRINT(EM_DIAGRAM):   * ASSIGN VALUE TO: MntScenario;
78631     +*;
MPRINT(EM_DIAGRAM):   *;
78632     +IMP_MntScenario = P_MNTSCENARIO;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = P_MNTSCENARIO;
78633     +END;
MPRINT(EM_DIAGRAM):   END;
78634     +*;
MPRINT(EM_DIAGRAM):   *;
78635     +* Drop prediction variables since they are for INPUTS not TARGETS;
MPRINT(EM_DIAGRAM):   * Drop prediction variables since they are for INPUTS not TARGETS;
78636     +* Replace _NODE_ by _XODE_ so it can be safely dropped;
MPRINT(EM_DIAGRAM):   * Replace _NODE_ by _XODE_ so it can be safely dropped;
78637     +*;
MPRINT(EM_DIAGRAM):   *;
78638     +drop
78639     +P_Income
78640     +P_MntBrandA__Material
78641     +P_MntScenario
78642     +;
MPRINT(EM_DIAGRAM):   drop P_Income P_MntBrandA__Material P_MntScenario ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
78643      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

78644      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
78645      quit;
78646      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
78647      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
78648      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
78649      retain ID 9 Node "Impt";
MPRINT(EM_DIAGRAM):   retain ID 9 Node "Impt";
78650      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
78651      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 200 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78652      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
78653      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78654      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 200 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78655      proc sort data=EMWS1.Filter_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
78656      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78657      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS1.FILTER_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 35 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78658      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78659      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
78660      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
78661      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78662      proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_train out=_meta(keep=NAME) noprint;
78663      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 39 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

78664      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
78665      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78666      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 39 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78667      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78668      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
78669      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78670      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 39 observations read from the data set WORK._META.
NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78671      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
78672      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
78672    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 160 rows and 5 columns.

78673      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78674      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
78675      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 160 observations read from the data set WORK._TEMPX.
NOTE: 160 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 706 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78676      filename _pref "C:\Users\misil\Desktop\DM
78676    ! 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas";
78677      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
78678      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
78679      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas.
78680     +if
78681     +( Income eq . or (Income<=147000))
78682     +and ( MntCard_Games eq . or (MntCard_Games<=1500))
78683     +and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=20))
78684     +and ( NumDealsPurchases eq . or (NumDealsPurchases<=14))
78685     +and ( NumWebVisitsMonth eq . or (NumWebVisitsMonth<=13))
78686     +then do;
MPRINT(EM_DIAGRAM):   if ( Income eq . or (Income<=147000)) and ( MntCard_Games eq . or 
(MntCard_Games<=1500)) and ( NumCatalogPurchases eq . or (NumCatalogPurchases<=20)) and ( 
NumDealsPurchases eq . or (NumDealsPurchases<=14)) and ( NumWebVisitsMonth eq . or 
(NumWebVisitsMonth<=13)) then do;
78687     +if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
78688     +else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
78689     +end;
MPRINT(EM_DIAGRAM):   end;
78690     +else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
78691     +label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
78692     +length M_FILTER 8;
MPRINT(EM_DIAGRAM):   length M_FILTER 8;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
78693      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78694      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
78695      quit;
78696      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
78697      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
78698      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
78699      retain ID 10 Node "Filter";
MPRINT(EM_DIAGRAM):   retain ID 10 Node "Filter";
78700      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
78701      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 14 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78702      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
78703      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78704      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 14 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78705      proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
78706      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78707      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS1.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 35 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78708      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78709      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
78710      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
78711      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78712      proc contents data=EMWS1.Filter_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Filter_train out=_meta(keep=NAME) noprint;
78713      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

78714      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
78715      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78716      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 35 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78717      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
78718      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
78719      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
78720      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This 
         might cause unexpected results.
NOTE: There were 35 observations read from the data set WORK._META.
NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78721      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
78722      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from
78722    ! work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR 
from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 10 rows and 5 columns.

78723      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

78724      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
78725      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 10 observations read from the data set WORK._TEMPX.
NOTE: 10 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 716 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78726      %macro varDept(fcmpdata=,id=);
78727      %global nobs&id scoreFlag&id;
78728      %let scoreFlag&id = 0;
78729      %if &id=1 or ^&fcmpStart %then %do;
78730      proc sort data=&fcmpdata out=_temp&id nodupkey;
78731      by NAME;
78732      %if EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY ne %then %do;
78733      where id=&id and (LHS in( %let j=1;
78734      %do %while(%scan( EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY, &j) ne );
78735      %let var = %scan( EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY, &j);
78736      "&var" %let j = %eval(&j+1);
78737      %end;
78738      ) or substr(LHS, 1, 3)='EM_');
78739      %end;
78740      %else %do;
78741      where id=&id and substr(LHS, 1, 3)='EM_';
78742      %end;
78743      run;
78744      %let dsid = %sysfunc(open(_temp&id));
78745      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
78746      %let dsid = %sysfunc(close(&dsid));
78747      %if &&nobs&id %then %do;
78748      %let scoreFlag&id = 1;
78749      %let fcmpStart = 1;
78750      %end;
78751      %else %let fcmpStart = 0;
78752      %end;
78753      %else %do;
78754      proc sort data=&fcmpdata out=_tempid;
78755      where id=&id;
78756      by LHS;
78757      run;
78758      %let dsid = %sysfunc(open(_tempid));
78759      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
78760      %let dsid = %sysfunc(close(&dsid));
78761      %if ^&&nobs&id %then %do;
78762      proc datasets lib=work nolist;
78763      delete _tempid;
78764      run;
78765      quit;
78766      %end;
78767      %else %do;
78768      data _tempAll;
78769      set %let j=%eval(&id-1);
78770      %do x=1 %to &j;
78771      %if &&nobs&x %then %do;
78772      _temp&x %end;
78773      %end;
78774      ;
78775      run;
78776      proc sql;
78777      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p,
78777    ! work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
78778      quit;
78779      data _temp&id;
78780      set _temp&id;
78781      where LHS ne '' and NAME ne '' and Node ne '';
78782      run;
78783      proc datasets lib=work nolist;
78784      delete _tempAll;
78785      run;
78786      %let dsid = %sysfunc(open(_temp&id));
78787      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
78788      %let dsid = %sysfunc(close(&dsid));
78789      %if ^&&nobs&id %then %do;
78790      proc datasets lib=work nolist;
78791      delete _temp&id;
78792      run;
78793      quit;
78794      %end;
78795      %else %do;
78796      %let scoreFlag&id = 1;
78797      data _temp&id;
78798      set _temp&id;
78799      where LHS ne NAME and node ne '';
78800      run;
78801      %let dsid = %sysfunc(open(_temp&id));
78802      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
78803      %let dsid = %sysfunc(close(&dsid));
78804      %if ^&&nobs&id %then %do;
78805      proc datasets lib=work nolist;
78806      delete _temp&id;
78807      run;
78808      quit;
78809      %end;
78810      %else %do;
78811      proc sort data=_temp&id nodupkey;
78812      by LHS NAME;
78813      run;
78814      %end;
78815      %end;
78816      %end;
78817      %end;
78818      %mend varDept;
78819      %macro optCode(outdata=);
78820      %global fcmpStart;
78821      %let fcmpStart = 0;
78822      %let outputVars = EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY;
78823      %let NumNodes=11;
78824      %do k=1 %to &NumNodes;
78825      %vardept(fcmpdata=&outdata, id=&k);
78826      %end;
78827      %mend optCode;
78828      %optcode(outData=EMWS1.Score_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_CLASSIFICATION" "EM_PROBABILITY" 
"EM_EVENTPROBABILITY" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;

NOTE: There were 4 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE (id=1) and (LHS in ('EM_CLASSIFICATION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') 
      or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 1 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 396 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 396 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._TEMP2 created, with 36 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 36 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 36 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 34 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 9 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 37 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp5 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._TEMP5 created, with 12 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 12 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP5 has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp5;
MPRINT(VARDEPT):   set _temp5;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 12 observations read from the data set WORK._TEMP5.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP5 has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp5 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 12 observations read from the data set WORK._TEMP5.
NOTE: 8 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP5 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=8;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 137 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=8;
NOTE: The data set WORK._TEMPID has 137 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: There were 4 observations read from the data set WORK._TEMP5.
NOTE: The data set WORK._TEMPALL has 41 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp8 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._TEMP8 created, with 94 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 94 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP8 has 94 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp8;
MPRINT(VARDEPT):   set _temp8;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 78 observations read from the data set WORK._TEMP8.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP8 has 78 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp8 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 78 observations read from the data set WORK._TEMP8.
NOTE: 40 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP8 has 38 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=9;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 160 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=9;
NOTE: The data set WORK._TEMPID has 160 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 _temp8 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: There were 4 observations read from the data set WORK._TEMP5.
NOTE: There were 38 observations read from the data set WORK._TEMP8.
NOTE: The data set WORK._TEMPALL has 79 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp9 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._TEMP9 created, with 60 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp9;
MPRINT(VARDEPT):   set _temp9;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 60 observations read from the data set WORK._TEMP9.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP9 has 60 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp9;
MPRINT(VARDEPT):   set _temp9;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 57 observations read from the data set WORK._TEMP9.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP9 has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp9 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 57 observations read from the data set WORK._TEMP9.
NOTE: 38 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP9 has 19 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=10;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=10;
NOTE: The data set WORK._TEMPID has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp5 _temp8 _temp9 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 34 observations read from the data set WORK._TEMP2.
NOTE: There were 4 observations read from the data set WORK._TEMP5.
NOTE: There were 38 observations read from the data set WORK._TEMP8.
NOTE: There were 19 observations read from the data set WORK._TEMP9.
NOTE: The data set WORK._TEMPALL has 98 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp10 as select p2.lhs, p2.name, p2.Node from work._tempAll 
p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._TEMP10 created, with 0 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp10;
MPRINT(VARDEPT):   set _temp10;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP10.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP10 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _temp10;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMP10 (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=11;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=11;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

78829      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
78830      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
78831      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
78832      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78833      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
78834      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
78835      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
78836      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78837      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
78838      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 p,
78838    ! EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
78838    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 
p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 19 rows and 3 columns.

78839      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78840      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
78841      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
78842      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 19 observations read from the data set WORK._CODEVAR3.
NOTE: There were 1 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78843      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
78844      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
78845      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
78846      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

78847      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
78848      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
78849      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
78850      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

78851      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
78852      create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 p,
78852    ! EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
78852    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 
p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR7 created, with 4 rows and 3 columns.

78853      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

78854      data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
78855      set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
78856      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\DM 2\Project;
MPRINT(EM_DIAGRAM):   * Project Name: WarGameStore_sasProject;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: WarGame classification;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 02JUN2018:17:19:15;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * IMPUTE VARIABLE: MntScenario;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_MntScenario 8;
MPRINT(EM_DIAGRAM):   format IMP_MntScenario BEST.;
MPRINT(EM_DIAGRAM):   label IMP_MntScenario = 'Imputed: MntScenario';
MPRINT(EM_DIAGRAM):   IMP_MntScenario = MntScenario;
MPRINT(EM_DIAGRAM):   if missing(IMP_MntScenario) then do;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
MPRINT(EM_DIAGRAM):   label P_MntScenario = 'Predicted: MntScenario';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
MPRINT(EM_DIAGRAM):   /* Initialize to avoid warning. */ ****** ASSIGN OBSERVATION TO NODE 
******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 146.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 172 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 190.855072463768;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND MntMagazines < 33.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 58 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 108.4;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Income ) AND Income < 85245 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 28 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.2428571428571;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 29.3509933774834;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 79.8842105263158;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 71.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 141.806034482758;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 104.139344262295;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 34 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 4.5 <= NumCatalogPurchases THEN 
DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 96.7777777777777;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 46.48;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 6.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 29.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.8666666666666;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 17.5 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.2857142857142;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 15.7768924302788;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 7 <= MntPainting_Material THEN 
DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 22 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 113 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 24.5;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 11.4846625766871;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 1.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 5.89010989010989;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Education , $10.);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('BASIC' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 9.08333333333333;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 2.44278606965174;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * ASSIGN VALUE TO: MntScenario;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = P_MNTSCENARIO;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * Drop prediction variables since they are for INPUTS not TARGETS;
MPRINT(EM_DIAGRAM):   * Replace _NODE_ by _XODE_ so it can be safely dropped;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   drop P_Income P_MntBrandA__Material P_MntScenario ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   campaign_acceptance = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + 
AcceptedCmp4 + AcceptedCmp5;
MPRINT(EM_DIAGRAM):   Childhome = 1*((Kidhome=1) | (Teenhome=1));
MPRINT(EM_DIAGRAM):   Mnt = IMP_MntScenario + MntMiniatures + MntCard_Games + MntMagazines + 
MntPainting_Material;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = IMP_MntScenario/Mnt;
MPRINT(EM_DIAGRAM):   MntMiniatures = MntMiniatures/Mnt;
MPRINT(EM_DIAGRAM):   MntCard_Games = MntCard_Games/Mnt;
MPRINT(EM_DIAGRAM):   MntMagazines = MntMagazines/Mnt;
MPRINT(EM_DIAGRAM):   MntPainting_Material = MntPainting_Material/Mnt;
MPRINT(EM_DIAGRAM):   IMP_MntBrandA__Material = IMP_MntBrandA__Material/Mnt;
MPRINT(EM_DIAGRAM):   Frq = NumCatalogPurchases + NumStorePurchases + NumWebPurchases;
MPRINT(EM_DIAGRAM):   NumCatalogPurchases = NumCatalogPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumStorePurchases = NumStorePurchases/Frq;
MPRINT(EM_DIAGRAM):   NumWebPurchases = NumWebPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumDealsPurchases = NumDealsPurchases/Frq;
MPRINT(EM_DIAGRAM):   average_purchase = Mnt / Frq;
MPRINT(EM_DIAGRAM):   age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   loyalty = 12*(year(today()) - year(Dt_Customer)) + 
month(today())-month(Dt_Customer);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label RANGE_Frq = 'Transformed Frq';
MPRINT(EM_DIAGRAM):   length RANGE_Frq 8;
MPRINT(EM_DIAGRAM):   if Frq eq . then RANGE_Frq = .;
MPRINT(EM_DIAGRAM):   else RANGE_Frq = (Frq - 10) / (40-10);
MPRINT(EM_DIAGRAM):   label RANGE_Recency = 'Transformed: Recency';
MPRINT(EM_DIAGRAM):   length RANGE_Recency 8;
MPRINT(EM_DIAGRAM):   if Recency eq . then RANGE_Recency = .;
MPRINT(EM_DIAGRAM):   else RANGE_Recency = (Recency - 0) / (99-0);
MPRINT(EM_DIAGRAM):   label RANGE_average_purchase = 'Transformed average_purchase';
MPRINT(EM_DIAGRAM):   length RANGE_average_purchase 8;
MPRINT(EM_DIAGRAM):   if average_purchase eq . then RANGE_average_purchase = .;
MPRINT(EM_DIAGRAM):   else RANGE_average_purchase = (average_purchase - 0.9) / 
(139.66666667-0.9);
MPRINT(EM_DIAGRAM):   label RANGE_campaign_acceptance = 'Transformed campaign_acceptance';
MPRINT(EM_DIAGRAM):   length RANGE_campaign_acceptance 8;
MPRINT(EM_DIAGRAM):   if campaign_acceptance eq . then RANGE_campaign_acceptance = .;
MPRINT(EM_DIAGRAM):   else RANGE_campaign_acceptance = (campaign_acceptance - 0) / (4-0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: Meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Neural6;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
MPRINT(EM_DIAGRAM):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(EM_DIAGRAM):   label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H18 = 'Hidden: H1=8' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * MntCard_Games ;
MPRINT(EM_DIAGRAM):   S_MntMagazines = -0.82293757807429 + 17.2690037990877 * MntMagazines ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
MPRINT(EM_DIAGRAM):   S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * RANGE_Recency ;
MPRINT(EM_DIAGRAM):   S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * 
MntCard_Games ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMagazines = -0.82293757807429 + 17.2690037990877 * 
MntMagazines ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * 
RANGE_Recency ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance 
= . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 0.20972421718057 * S_MntCard_Games + -0.10519753218003 * 
S_MntMagazines + 0.15656734847629 * S_NumCatalogPurchases + 0.63057160324877 * 
S_NumDealsPurchases + -0.00737690936149 * S_NumWebPurchases + 0.20053768659238 * S_RANGE_Frq + 
-1.12557480034141 * S_RANGE_Recency + -0.22476100695688 * S_RANGE_average_purchase + 
0.28567577425134 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H12 = 0.07368864080416 * S_MntCard_Games + -0.4223767992421 * 
S_MntMagazines + 0.17487060799852 * S_NumCatalogPurchases + -0.16663103701637 * 
S_NumDealsPurchases + 0.4469410823334 * S_NumWebPurchases + 0.07351068357053 * S_RANGE_Frq + 
0.2764433150472 * S_RANGE_Recency + 0.25947059452403 * S_RANGE_average_purchase + 
0.12894202604451 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H13 = 0.31080135867348 * S_MntCard_Games + 0.18451282806391 * 
S_MntMagazines + 0.1127627139197 * S_NumCatalogPurchases + 0.24603022042835 * 
S_NumDealsPurchases + -0.28013448748239 * S_NumWebPurchases + 0.12933786524903 * S_RANGE_Frq + 
0.34733298788257 * S_RANGE_Recency + 0.51115383261532 * S_RANGE_average_purchase + 
-0.26437219931513 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H14 = -0.57033383655748 * S_MntCard_Games + -0.33054700873328 * 
S_MntMagazines + -1.02671397545134 * S_NumCatalogPurchases + -0.41228604651309 * 
S_NumDealsPurchases + -0.21819906644753 * S_NumWebPurchases + 0.60269025654631 * S_RANGE_Frq + 
0.6046180501819 * S_RANGE_Recency + -0.42162410945573 * S_RANGE_average_purchase + 
-0.20008993427643 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H15 = 0.6093862111979 * S_MntCard_Games + 0.18205906140977 * 
S_MntMagazines + 0.49639052978093 * S_NumCatalogPurchases + 0.61953955047886 * 
S_NumDealsPurchases + -0.23923372893571 * S_NumWebPurchases + -0.19964591826134 * S_RANGE_Frq 
+ -0.20354696929195 * S_RANGE_Recency + 0.54178001423516 * S_RANGE_average_purchase + 
0.82116084363342 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H16 = -0.89765621146319 * S_MntCard_Games + 0.18624358536157 * 
S_MntMagazines + -0.41426005837921 * S_NumCatalogPurchases + -0.63819825018964 * 
S_NumDealsPurchases + -0.75564857992734 * S_NumWebPurchases + -0.24431914212986 * S_RANGE_Frq 
+ 1.47078024332987 * S_RANGE_Recency + -0.08214840144887 * S_RANGE_average_purchase + 
-0.87167436264292 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H17 = 0.03824306532902 * S_MntCard_Games + 0.09162051848061 * 
S_MntMagazines + 0.25990341633612 * S_NumCatalogPurchases + -0.58632763415232 * 
S_NumDealsPurchases + -0.02683058882616 * S_NumWebPurchases + 0.36070453911153 * S_RANGE_Frq + 
-0.46706817985413 * S_RANGE_Recency + 0.03188715672586 * S_RANGE_average_purchase + 
0.27713598915972 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H18 = -0.35178879490005 * S_MntCard_Games + -0.2853720173945 * 
S_MntMagazines + 0.36904553501501 * S_NumCatalogPurchases + 0.49484726303534 * 
S_NumDealsPurchases + -0.51224257122634 * S_NumWebPurchases + 0.31503193306354 * S_RANGE_Frq + 
-0.24985277238677 * S_RANGE_Recency + 0.061397741924 * S_RANGE_average_purchase + 
0.24571810164181 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27684891699167 * Marital_StatusDivorced + 
-0.33031859213239 * Marital_StatusMarried + 0.61699559997992 * Marital_StatusSingle + 
-0.16243553104357 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.50397359271861 * Marital_StatusDivorced + 
-0.23570256235163 * Marital_StatusMarried + 0.18671782880144 * Marital_StatusSingle + 
0.0300664326928 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.10864645717505 * Marital_StatusDivorced + 
-0.20555700211504 * Marital_StatusMarried + 0.1648370262569 * Marital_StatusSingle + 
-0.03166337233879 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.25764039105044 * Marital_StatusDivorced + 
0.05281900768859 * Marital_StatusMarried + -0.28955714634595 * Marital_StatusSingle + 
0.1811608851228 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.16052554933853 * Marital_StatusDivorced + 0.01235369787171 
* Marital_StatusMarried + 0.1227747816279 * Marital_StatusSingle + -0.78421505074531 * 
Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.09636185034972 * Marital_StatusDivorced + 
0.49379263355192 * Marital_StatusMarried + 0.11693446659268 * Marital_StatusSingle + 
0.39504907373164 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.63607617128916 * Marital_StatusDivorced + 
-0.69233427848009 * Marital_StatusMarried + 0.85408778865978 * Marital_StatusSingle + 
-0.23854465330987 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H18 = H18 + 0.28535498096797 * Marital_StatusDivorced + 
-0.22088583509449 * Marital_StatusMarried + -0.10230118240769 * Marital_StatusSingle + 
-0.41427540923153 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = 0.29714961909337 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 2.28692305168248 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 1.04684893652896 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -0.27835769163672 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = -1.48853670189635 + H15 ;
MPRINT(EM_DIAGRAM):   H16 = 2.02040716755866 + H16 ;
MPRINT(EM_DIAGRAM):   H17 = -2.1402631431051 + H17 ;
MPRINT(EM_DIAGRAM):   H18 = -1.77285171982666 + H18 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
MPRINT(EM_DIAGRAM):   H18 = TANH(H18 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   H16 = .;
MPRINT(EM_DIAGRAM):   H17 = .;
MPRINT(EM_DIAGRAM):   H18 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.28155484960035 * H11 + 0.37558662649004 * H12 + 
-0.01491883215668 * H13 + -1.79896740790015 * H14 + 1.54972455239658 * H15 + -2.83834486141497 
* H16 + 1.56015981413604 * H17 + 1.15123166934324 * H18 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.56259640307401 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.13673708920187;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.86326291079812;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LENGTH EM_EVENTPROBABILITY 8;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_DepVar1;
MPRINT(EM_DIAGRAM):   LENGTH EM_PROBABILITY 8;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for DepVar";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
79542      %let validvarany = 0;
79543      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
79544      set EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMINPUTVARS;
79545      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
79546      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
79547      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 35 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

79548      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
79549      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
79550      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 35 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

79551      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
79552      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
79553      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
79554      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
79555      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
79556      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
79557      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
79558      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
79559      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
79560      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
79561      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
79562      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
79563      end;
MPRINT(EM_DIAGRAM):   end;
79564      output;
MPRINT(EM_DIAGRAM):   output;
79565      end;
MPRINT(EM_DIAGRAM):   end;
79566      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 35 observations read from the data set WORK._TEMP2.
NOTE: There were 85 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

79567      proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
79568      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
79569      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 23 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 23 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\misil\AppData\Local\Temp\SAS Temporary 
Files\_TD19236_DESKTOP-61HCQ9U_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) 
in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\misil\AppData\Local\Temp\SAS Temporary 
Files\_TD19236_DESKTOP-61HCQ9U_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_DATA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: DESKTOP-61HCQ9U;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_GB;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\misil\Desktop\DM 2\Project;
MPRINT(EM_DIAGRAM):   * Project Name: WarGameStore_sasProject;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: WarGame classification;
MPRINT(EM_DIAGRAM):   * Generated by: misil;
MPRINT(EM_DIAGRAM):   * Date: 02JUN2018:17:19:15;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Imputation;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Impt;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * IMPUTE VARIABLE: MntScenario;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   length IMP_MntScenario 8;
MPRINT(EM_DIAGRAM):   format IMP_MntScenario BEST.;
MPRINT(EM_DIAGRAM):   label IMP_MntScenario = 'Imputed: MntScenario';
MPRINT(EM_DIAGRAM):   IMP_MntScenario = MntScenario;
MPRINT(EM_DIAGRAM):   if missing(IMP_MntScenario) then do;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
MPRINT(EM_DIAGRAM):   label P_MntScenario = 'Predicted: MntScenario';
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 146.5 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 172 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 190.855072463768;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND MntMagazines < 33.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 58 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 108.4;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Income ) AND Income < 85245 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 28 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.2428571428571;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 29.3509933774834;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 79.8842105263158;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 71.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 141.806034482758;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 104.139344262295;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 34 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NumCatalogPurchases ) AND 4.5 <= NumCatalogPurchases THEN 
DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 96.7777777777777;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 46.48;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 6.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 29.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 53.8666666666666;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 17.5 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.2857142857142;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 15.7768924302788;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 7 <= MntPainting_Material THEN 
DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntPainting_Material ) AND 22 <= MntPainting_Material 
THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 26.1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntCard_Games ) AND 113 <= MntCard_Games THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 24.5;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 11.4846625766871;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MntMagazines ) AND 1.5 <= MntMagazines THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 5.89010989010989;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Education , $10.);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('BASIC' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 9.08333333333333;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_MntScenario = 2.44278606965174;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * ASSIGN VALUE TO: MntScenario;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = P_MNTSCENARIO;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   * Drop prediction variables since they are for INPUTS not TARGETS;
MPRINT(EM_DIAGRAM):   * Replace _NODE_ by _XODE_ so it can be safely dropped;
MPRINT(EM_DIAGRAM):   *;
MPRINT(EM_DIAGRAM):   drop P_Income P_MntBrandA__Material P_MntScenario ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   campaign_acceptance = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + 
AcceptedCmp4 + AcceptedCmp5;
MPRINT(EM_DIAGRAM):   Childhome = 1*((Kidhome=1) | (Teenhome=1));
MPRINT(EM_DIAGRAM):   Mnt = IMP_MntScenario + MntMiniatures + MntCard_Games + MntMagazines + 
MntPainting_Material;
MPRINT(EM_DIAGRAM):   IMP_MntScenario = IMP_MntScenario/Mnt;
MPRINT(EM_DIAGRAM):   MntMiniatures = MntMiniatures/Mnt;
MPRINT(EM_DIAGRAM):   MntCard_Games = MntCard_Games/Mnt;
MPRINT(EM_DIAGRAM):   MntMagazines = MntMagazines/Mnt;
MPRINT(EM_DIAGRAM):   MntPainting_Material = MntPainting_Material/Mnt;
MPRINT(EM_DIAGRAM):   IMP_MntBrandA__Material = IMP_MntBrandA__Material/Mnt;
MPRINT(EM_DIAGRAM):   Frq = NumCatalogPurchases + NumStorePurchases + NumWebPurchases;
MPRINT(EM_DIAGRAM):   NumCatalogPurchases = NumCatalogPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumStorePurchases = NumStorePurchases/Frq;
MPRINT(EM_DIAGRAM):   NumWebPurchases = NumWebPurchases/Frq;
MPRINT(EM_DIAGRAM):   NumDealsPurchases = NumDealsPurchases/Frq;
MPRINT(EM_DIAGRAM):   average_purchase = Mnt / Frq;
MPRINT(EM_DIAGRAM):   age = year(today())-Year_Birth;
MPRINT(EM_DIAGRAM):   loyalty = 12*(year(today()) - year(Dt_Customer)) + 
month(today())-month(Dt_Customer);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: Meta2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label RANGE_Frq = 'Transformed Frq';
MPRINT(EM_DIAGRAM):   length RANGE_Frq 8;
MPRINT(EM_DIAGRAM):   if Frq eq . then RANGE_Frq = .;
MPRINT(EM_DIAGRAM):   else RANGE_Frq = (Frq - 10) / (40-10);
MPRINT(EM_DIAGRAM):   label RANGE_Recency = 'Transformed: Recency';
MPRINT(EM_DIAGRAM):   length RANGE_Recency 8;
MPRINT(EM_DIAGRAM):   if Recency eq . then RANGE_Recency = .;
MPRINT(EM_DIAGRAM):   else RANGE_Recency = (Recency - 0) / (99-0);
MPRINT(EM_DIAGRAM):   label RANGE_average_purchase = 'Transformed average_purchase';
MPRINT(EM_DIAGRAM):   length RANGE_average_purchase 8;
MPRINT(EM_DIAGRAM):   if average_purchase eq . then RANGE_average_purchase = .;
MPRINT(EM_DIAGRAM):   else RANGE_average_purchase = (average_purchase - 0.9) / 
(139.66666667-0.9);
MPRINT(EM_DIAGRAM):   label RANGE_campaign_acceptance = 'Transformed campaign_acceptance';
MPRINT(EM_DIAGRAM):   length RANGE_campaign_acceptance 8;
MPRINT(EM_DIAGRAM):   if campaign_acceptance eq . then RANGE_campaign_acceptance = .;
MPRINT(EM_DIAGRAM):   else RANGE_campaign_acceptance = (campaign_acceptance - 0) / (4-0);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Metadata Node;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: Meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Neural6;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
MPRINT(EM_DIAGRAM):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(EM_DIAGRAM):   label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(EM_DIAGRAM):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(EM_DIAGRAM):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(EM_DIAGRAM):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(EM_DIAGRAM):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H18 = 'Hidden: H1=8' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 0;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 0;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = -1;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Marital_StatusDivorced = .;
MPRINT(EM_DIAGRAM):   Marital_StatusMarried = .;
MPRINT(EM_DIAGRAM):   Marital_StatusSingle = .;
MPRINT(EM_DIAGRAM):   Marital_StatusTogether = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * MntCard_Games ;
MPRINT(EM_DIAGRAM):   S_MntMagazines = -0.82293757807429 + 17.2690037990877 * MntMagazines ;
MPRINT(EM_DIAGRAM):   S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
MPRINT(EM_DIAGRAM):   S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
MPRINT(EM_DIAGRAM):   S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * RANGE_Recency ;
MPRINT(EM_DIAGRAM):   S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MntCard_Games = -2.29552053621136 + 6.58526682455081 * 
MntCard_Games ;
MPRINT(EM_DIAGRAM):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
MPRINT(EM_DIAGRAM):   ELSE S_MntMagazines = -0.82293757807429 + 17.2690037990877 * 
MntMagazines ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumCatalogPurchases = -3.13390881283003 + 13.5906280879322 * 
NumCatalogPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumDealsPurchases = -1.41465463186291 + 11.0318603521921 * 
NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumWebPurchases = -5.24785908864246 + 12.283402083256 * 
NumWebPurchases ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Frq = -1.36303513338452 + 4.21654196784367 * RANGE_Frq ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_Recency = -1.65915928443681 + 3.37794970549188 * 
RANGE_Recency ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_average_purchase = -1.0387883165722 + 5.11361054117627 * 
RANGE_average_purchase ;
MPRINT(EM_DIAGRAM):   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance 
= . ;
MPRINT(EM_DIAGRAM):   ELSE S_RANGE_campaign_acceptance = -0.4736186337401 + 5.76461537066529 * 
RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 0.20972421718057 * S_MntCard_Games + -0.10519753218003 * 
S_MntMagazines + 0.15656734847629 * S_NumCatalogPurchases + 0.63057160324877 * 
S_NumDealsPurchases + -0.00737690936149 * S_NumWebPurchases + 0.20053768659238 * S_RANGE_Frq + 
-1.12557480034141 * S_RANGE_Recency + -0.22476100695688 * S_RANGE_average_purchase + 
0.28567577425134 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H12 = 0.07368864080416 * S_MntCard_Games + -0.4223767992421 * 
S_MntMagazines + 0.17487060799852 * S_NumCatalogPurchases + -0.16663103701637 * 
S_NumDealsPurchases + 0.4469410823334 * S_NumWebPurchases + 0.07351068357053 * S_RANGE_Frq + 
0.2764433150472 * S_RANGE_Recency + 0.25947059452403 * S_RANGE_average_purchase + 
0.12894202604451 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H13 = 0.31080135867348 * S_MntCard_Games + 0.18451282806391 * 
S_MntMagazines + 0.1127627139197 * S_NumCatalogPurchases + 0.24603022042835 * 
S_NumDealsPurchases + -0.28013448748239 * S_NumWebPurchases + 0.12933786524903 * S_RANGE_Frq + 
0.34733298788257 * S_RANGE_Recency + 0.51115383261532 * S_RANGE_average_purchase + 
-0.26437219931513 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H14 = -0.57033383655748 * S_MntCard_Games + -0.33054700873328 * 
S_MntMagazines + -1.02671397545134 * S_NumCatalogPurchases + -0.41228604651309 * 
S_NumDealsPurchases + -0.21819906644753 * S_NumWebPurchases + 0.60269025654631 * S_RANGE_Frq + 
0.6046180501819 * S_RANGE_Recency + -0.42162410945573 * S_RANGE_average_purchase + 
-0.20008993427643 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H15 = 0.6093862111979 * S_MntCard_Games + 0.18205906140977 * 
S_MntMagazines + 0.49639052978093 * S_NumCatalogPurchases + 0.61953955047886 * 
S_NumDealsPurchases + -0.23923372893571 * S_NumWebPurchases + -0.19964591826134 * S_RANGE_Frq 
+ -0.20354696929195 * S_RANGE_Recency + 0.54178001423516 * S_RANGE_average_purchase + 
0.82116084363342 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H16 = -0.89765621146319 * S_MntCard_Games + 0.18624358536157 * 
S_MntMagazines + -0.41426005837921 * S_NumCatalogPurchases + -0.63819825018964 * 
S_NumDealsPurchases + -0.75564857992734 * S_NumWebPurchases + -0.24431914212986 * S_RANGE_Frq 
+ 1.47078024332987 * S_RANGE_Recency + -0.08214840144887 * S_RANGE_average_purchase + 
-0.87167436264292 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H17 = 0.03824306532902 * S_MntCard_Games + 0.09162051848061 * 
S_MntMagazines + 0.25990341633612 * S_NumCatalogPurchases + -0.58632763415232 * 
S_NumDealsPurchases + -0.02683058882616 * S_NumWebPurchases + 0.36070453911153 * S_RANGE_Frq + 
-0.46706817985413 * S_RANGE_Recency + 0.03188715672586 * S_RANGE_average_purchase + 
0.27713598915972 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H18 = -0.35178879490005 * S_MntCard_Games + -0.2853720173945 * 
S_MntMagazines + 0.36904553501501 * S_NumCatalogPurchases + 0.49484726303534 * 
S_NumDealsPurchases + -0.51224257122634 * S_NumWebPurchases + 0.31503193306354 * S_RANGE_Frq + 
-0.24985277238677 * S_RANGE_Recency + 0.061397741924 * S_RANGE_average_purchase + 
0.24571810164181 * S_RANGE_campaign_acceptance ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.27684891699167 * Marital_StatusDivorced + 
-0.33031859213239 * Marital_StatusMarried + 0.61699559997992 * Marital_StatusSingle + 
-0.16243553104357 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.50397359271861 * Marital_StatusDivorced + 
-0.23570256235163 * Marital_StatusMarried + 0.18671782880144 * Marital_StatusSingle + 
0.0300664326928 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.10864645717505 * Marital_StatusDivorced + 
-0.20555700211504 * Marital_StatusMarried + 0.1648370262569 * Marital_StatusSingle + 
-0.03166337233879 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.25764039105044 * Marital_StatusDivorced + 
0.05281900768859 * Marital_StatusMarried + -0.28955714634595 * Marital_StatusSingle + 
0.1811608851228 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.16052554933853 * Marital_StatusDivorced + 0.01235369787171 
* Marital_StatusMarried + 0.1227747816279 * Marital_StatusSingle + -0.78421505074531 * 
Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H16 = H16 + -0.09636185034972 * Marital_StatusDivorced + 
0.49379263355192 * Marital_StatusMarried + 0.11693446659268 * Marital_StatusSingle + 
0.39504907373164 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H17 = H17 + 0.63607617128916 * Marital_StatusDivorced + 
-0.69233427848009 * Marital_StatusMarried + 0.85408778865978 * Marital_StatusSingle + 
-0.23854465330987 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H18 = H18 + 0.28535498096797 * Marital_StatusDivorced + 
-0.22088583509449 * Marital_StatusMarried + -0.10230118240769 * Marital_StatusSingle + 
-0.41427540923153 * Marital_StatusTogether ;
MPRINT(EM_DIAGRAM):   H11 = 0.29714961909337 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 2.28692305168248 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 1.04684893652896 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -0.27835769163672 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = -1.48853670189635 + H15 ;
MPRINT(EM_DIAGRAM):   H16 = 2.02040716755866 + H16 ;
MPRINT(EM_DIAGRAM):   H17 = -2.1402631431051 + H17 ;
MPRINT(EM_DIAGRAM):   H18 = -1.77285171982666 + H18 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
MPRINT(EM_DIAGRAM):   H18 = TANH(H18 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   H16 = .;
MPRINT(EM_DIAGRAM):   H17 = .;
MPRINT(EM_DIAGRAM):   H18 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 2.28155484960035 * H11 + 0.37558662649004 * H12 + 
-0.01491883215668 * H13 + -1.79896740790015 * H14 + 1.54972455239658 * H15 + -2.83834486141497 
* H16 + 1.56015981413604 * H17 + 1.15123166934324 * H18 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = -1.56259640307401 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.13673708920187;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.86326291079812;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LENGTH EM_EVENTPROBABILITY 8;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of DepVar';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_DepVar1;
MPRINT(EM_DIAGRAM):   LENGTH EM_PROBABILITY 8;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for DepVar";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_DepVar;
MPRINT(EM_DIAGRAM):   drop 'AcceptedCmp1'n 'AcceptedCmp2'n 'AcceptedCmp3'n 'AcceptedCmp4'n 
'AcceptedCmp5'n 'Complain'n 'Custid'n 'DepVar'n 'Dt_Customer'n 'Education'n 'Element1'n 
'Element2'n 'Element3'n 'Element4'n 'Element5'n 'Group'n 'Income'n 'Kidhome'n 
'Marital_Status'n 'MntBrandA__Material'n 'MntCard_Games'n 'MntMagazines'n 'MntMiniatures'n 
'MntPainting_Material'n 'MntScenario'n 'NumCatalogPurchases'n 'NumDealsPurchases'n 
'NumStorePurchases'n 'NumWebPurchases'n 'NumWebVisitsMonth'n 'Recency'n 'Teenhome'n 
'Year_Birth'n 'Z_CostContact'n 'Z_Revenue'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable P_Income in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable P_MntBrandA__Material in the DROP, KEEP, or RENAME list has never been 
         referenced.
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score_EMOUTPUTVARS noprint 
out=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
80326      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
80327      set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
80328      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
80329      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
80330      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
80331      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
80332      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
80333      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY')
80333    ! then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 
'EM_PROBABILITY') then FUNCTION = 'PREDICT';
80334      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 
'CLASSIFICATION';
80335      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
80336      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET')
80336    ! then FUNCTION = 'ASSESS' /* removed EM_ROI */
80337      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 
'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
80338      else do;
MPRINT(EM_DIAGRAM):   else do;
80339      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
80340      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
80341      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
80342      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then
80342    !  FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 
'RAT') then FUNCTION = 'RESIDUAL';
80343      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
80344      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then
80344    ! FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 
'IC') then FUNCTION = 'ASSESS';
80345      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
80346      end;
MPRINT(EM_DIAGRAM):   end;
80347      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 21 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80348      proc sort data=EMWS1.Neural6_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural6_CMeta_TRAIN out=WORK.META(KEEP=NAME 
CREATOR);
80349      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
80350      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.NEURAL6_CMETA_TRAIN.
NOTE: The data set WORK.META has 21 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80351      proc sort data=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMOUTPUTVARS;
80352      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
80353      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 21 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

80354      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMOUTPUTVARS;
80355      merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
80356      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))"
80356    ! FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE
80356    ! = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
80357      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
80358      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
80359      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
80360      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set WORK.META.
NOTE: There were 21 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 21 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80361      %let _cn = %sysfunc(getoption(CENTER));
80362      %let _nb = %sysfunc(getoption(NUMBER));
80363      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
80364      title;
MPRINT(EM_DIAGRAM):   title;
80365      proc print data=EMWS1.Score_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMINPUTVARS noobs label;
80366      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR
80366    !  = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL =
80366    ! "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
80367      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
80368      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
80369      run;

NOTE: There were 23 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80370      title10;
MPRINT(EM_DIAGRAM):   title10;
80371      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
80372      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
80373      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
80374      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
80375      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80376      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
80377      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
80378      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
80379      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

80380      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
80381      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 p,
80381    ! EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
80381    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 
p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 19 rows and 3 columns.

80382      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80383      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
80384      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
80385      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 19 observations read from the data set WORK._CODEVAR3.
NOTE: There were 1 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80386      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
80387      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
80388      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
80389      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80390      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
80391      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
80392      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
80393      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80394      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
80395      create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 p,
80395    ! EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
80395    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 
p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR7 created, with 4 rows and 3 columns.

80396      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

80397      data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
80398      set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
80399      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80400      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
80401      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
80402      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
80403      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80404      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
80405      set EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_EMSCOREVAR;
80406      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
80407      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IMPT_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80408      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
80409      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 p,
80409    ! EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
80409    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp9 
p, EMWS1.Impt_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 19 rows and 3 columns.

80410      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80411      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
80412      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
80413      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 19 observations read from the data set WORK._CODEVAR3.
NOTE: There were 1 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80414      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
80415      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
80416      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
80417      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

80418      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
80419      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
80420      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
80421      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

80422      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
80423      create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 p,
80423    ! EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or
80423    ! (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar7 as select p.lhs, p2.formula, p2.file from _temp5 
p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or 
(upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that 
      can not be optimized.
NOTE: Table WORK._CODEVAR7 created, with 4 rows and 3 columns.

80424      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.04 seconds
      

80425      data _CodeVar7;
MPRINT(EM_DIAGRAM):   data _CodeVar7;
80426      set _all_ _CodeVar7 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar7 _postall_;
80427      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 4 observations read from the data set WORK._CODEVAR7.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR7 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

80428      %let _cn = %sysfunc(getoption(CENTER));
80429      %let _nb = %sysfunc(getoption(NUMBER));
80430      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
80431      title;
MPRINT(EM_DIAGRAM):   title;
80432      proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
80433      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
80434      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))"
80434    ! FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))"
80434    ! CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
80435         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" 
LABEL = "Label";
80436      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
80437      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
80438      run;

NOTE: There were 21 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 29.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80439      title10;
MPRINT(EM_DIAGRAM):   title10;
80440      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
80441      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
80442      * Score: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for TRAIN data;
80443      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_TRAIN out=WORK.M2PSTQAF noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2PSTQAF;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2PSTQAF(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2PSTQAF;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2PSTQAF;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3TQB9SC NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08QZIFI(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   set WORK.M3TQB9SC;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural6_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural6_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "I_DepVar" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_DepVar0" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_DepVar1" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.SCORE_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
80793      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
80794      * Score: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for SCORE data;
80795      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Score_SCORE;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_SCORE out=WORK.M3DQBO3Y noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3DQBO3Y;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3DQBO3Y(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3DQBO3Y;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3DQBO3Y;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M34Y8VLQ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2PCFVKX(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   set WORK.M34Y8VLQ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT2_train noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "I_DepVar" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_DepVar0" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_DepVar1" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
