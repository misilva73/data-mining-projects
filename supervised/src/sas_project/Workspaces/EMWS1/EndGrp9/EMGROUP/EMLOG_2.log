*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                16:32:05 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:32:00 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                02 June 2018
Time:                16:32:00 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2U58EHU "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2U58EHU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMGROUP\EMLOG_2.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:32:00 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMREPORT.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMGROUP\EMOUTPUT_2.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:32:00 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMREPORT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
600447     proc freq data=EMWS1.EndGrp9_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EndGrp9_VariableSet noprint;
600448     table ROLE*LEVEL/out=WORK.EndGrp9META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EndGrp9META;
600449     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_VARIABLESET.
NOTE: The data set WORK.ENDGRP9META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
600450     proc print data=WORK.EndGrp9META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp9META label noobs;
600451     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
600452     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
600452   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
600452   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
600453     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
600454     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
600455     run;
 
NOTE: There were 8 observations read from the data set WORK.ENDGRP9META.
NOTE: The PROCEDURE PRINT printed page 401.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
600456     title10;
MPRINT(EM_DIAGRAM):   title10;
600457     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN EMWS1 Neural2_TRAIN
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN EMWS1 Neural2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural2_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
600486     data WORK.EndGrp9_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp9_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
600487     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
600488     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
600488   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
600488   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
600489        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
600489   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
600489   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
600490     set EMWS1.NEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
600491     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
600492     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
600493     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
600494     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
600495     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
600496     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
600497     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
600498     end;
MPRINT(EM_DIAGRAM):   end;
600499     output;
MPRINT(EM_DIAGRAM):   output;
600500     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP9_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
600501     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
600502     proc print data=WORK.EndGrp9_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp9_EVENT noobs label;
600503     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
600504     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
600505     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
600506     run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP9_EVENT.
NOTE: The PROCEDURE PRINT printed page 402.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
600507     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
600508     proc print data = EMWS1.Neural2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural2_DepVar_DM noobs label;
600509     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
600510     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
600511     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
600511   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
600511   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
600512     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
600513     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
600514     run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 403.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
600515     title10;
MPRINT(EM_DIAGRAM):   title10;
600516     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp9: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=296;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13534522176497;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=1891;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86465477823502;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="DepVar";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Neural2_DepVar_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Neural2_DepVar_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
600990     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
600991     * EndGrp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EndGrp9: Generation of macros and macro variables;
600992     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
600993     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
600994     %let EMEXCEPTIONSTRING=;
600995     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
600996     * TRAIN: EndGrp9;
MPRINT(EM_DIAGRAM):   * TRAIN: EndGrp9;
600997     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
600998     %let EM_ACTION = TRAIN;
600999     %let syscc = 0;
601000     %macro main;
601001        %if %upcase(&EM_ACTION) = TRAIN %then %do;
601002
601003            filename temp catalog 'sashelp.emutil.endgp_train.source';
601004            %include temp;
601005            filename temp;
601006
601007            %train;
601008
601009        %end;
601010        %else
601011           %if %upcase(&EM_ACTION) = SCORE %then %do;
601012
601013            filename temp catalog 'sashelp.emutil.endgp_score.source';
601014            %include temp;
601015            filename temp;
601016
601017            %score;
601018        %end;
601019        %else
601020        %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
601021
601022            filename temp catalog 'sashelp.emutil.endgp_postloop.source';
601023            %include temp;
601024            filename temp;
601025
601026            %postloop;
601027
601028        %end;
601029
601030        %doendm:
601031     %mend main;
601032
601033     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_TRAIN.SOURCE.
601034    +%macro copyModelDs(model=, key=);
601035    +   %let modelDs  = &em_lib..&model._&key;
601036    +   %let reportDs = &em_lib..&em_nodeid._&key;
601037    +   %if %sysfunc(exist(&modelDs)) %then %do;
601038    +       data &reportDs;
601039    +          length ModelId $16;
601040    +          retain ModelId "&model";
601041    +          set &modelDs;
601042    +       run;
601043    +   %end;
601044    +%mend copyModelDs;
601045    +
601046    +%macro traintarget(groupid=);
601047    +   %em_getname(key=emoutfit, type=DATA);
601048    +   %let targetname=;
601049    +   data _null_;
601050    +     set &em_lib..&groupid._&looptype;
601051    +     where _LOOP_ = &EMLOOPNUMBER;
601052    +     call symput('targetname', strip(_TARGET_));
601053    +   run;
601054    +   %let modelId =;
601055    +   data _null_;
601056    +      set &em_import_data_eminfo;
601057    +      where key = 'MODEL' and TARGET = "&targetname";
601058    +      call symput('modelId',   strip(data));
601059    +   run;
601060    +   %if "&modelId" ne "" %then %do;
601061    +       %copyModelDs(model=&modelid, key=EMRANK);
601062    +       %copyModelDs(model=&modelid, key=EMSCOREDIST);
601063    +       %copyModelDs(model=&modelid, key=EMOUTFIT);
601064    +       %copyModelDs(model=&modelid, key=EMCLASSIFICATION);
601065    +       %copyModelDs(model=&modelid, key=EMEVENREPORT);
601066    +       %copyModelDs(model=&modelid, key=EMRESIDUALS);
601067    +       %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N,
601067   !+CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
601068    +   %end;
601069    +
601070    +   %doendtgp:
601071    +%mend;
601072    +
601073    +%macro trainboost(groupid=);
601074    +
601075    +   %let boostinfoDs  = &em_lib..%sysfunc(strip(&groupid))_boostinfo;
601076    +   %let boostscoreDs = &em_lib..%sysfunc(strip(&groupid))_boostscore;
601077    +
601078    +   data _null_;
601079    +      retain index 0;
601080    +      set &boostinfoDs;
601081    +      call symput('targetname', strip(_target_));
601082    +   run;
601083    +
601084    +   %if "&em_import_data_eminfo" ne "" and %sysfunc(exist(&em_import_data_eminfo))
601084   !+%then %do;
601085    +       %let decmeta = ;
601086    +       data _null_;
601087    +          set &em_import_data_eminfo;
601088    +          where (key='DECMETA' and TARGET="&targetname");
601089    +          call symput('DECMETA', strip(data));
601090    +       run;
601091    +       %if "&decmeta" eq "" %then %do;
601092    +           %let emexceptionstring = EMTOOL.NOTARGETMODELED;
601093    +           %goto doendtb;
601094    +       %end;
601095    +
601096    +       %let predictedVars=;
601097    +       data _null_;
601098    +          set &decmeta;
601099    +          if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
601100    +          else
601101    +          if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
601102    +          else
601103    +          if _TYPE_ = 'PREDICTED' then call symput('predictedvars',
601103   !+strip(symget('predictedVars'))!!' '!!strip(variable));
601104    +       run;
601105    +       %if %index(&EM_DEBUG, _ALL_) %then %do;
601106    +           %put GROUPID: &GROUPID DECMETA: &DECMETA FROMVAR: &FROMVAR INTO: &INTOVAR
601106   !+ PREDICTED: &PREDICTEDVARS;
601107    +       %end;
601108    +   %end;
601109    +
601110    +   * ;
601111    +   * ENDGROUP &NODEID : Boosting scoring ;
601112    +   * ;
601113    +   data &em_lib..&groupid._boostscore;
601114    +      set &em_import_data;
601115    +      keep _WARN_ &targetname &fromvar &intovar &predictedvars;
601116    +      %if "%em_freq" ne "" %then %do ;
601117    +          keep %em_freq ;
601118    +      %end ;
601119    +   run;
601120    +   %em_model(TARGET=&targetname , ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y,
601120   !+CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
601121    +
601122    +   %doendtb:
601123    +
601124    +%mend trainboost;
601125    +
601126    +%macro trainbag(groupid=);
601127    +   %let baginfoDs  = &em_lib..%sysfunc(strip(&groupid))_baginfo;
601128    +   data _null_;
601129    +      retain index 0;
601130    +      set &baginfoDs;
601131    +      call symput('targetname', strip(_target_));
601132    +   run;
601133    +
601134    +   %let decmeta = ;
601135    +   data _null_;
601136    +       set &em_import_data_eminfo;
601137    +       where (key='DECMETA' and TARGET="&targetname");
601138    +       call symput('DECMETA', strip(data));
601139    +   run;
601140    +   %if "&decmeta" eq "" %then %do;
601141    +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
601142    +       %goto doendtg;
601143    +   %end;
601144    +
601145    +   %em_model(TARGET=&targetname, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=Y,
601145   !+CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
601146    +
601147    +   %doendtg:
601148    +%mend trainbag;
601149    +
601150    +%macro traingroup(groupid=);
601151    +   %let targetNum = 0;
601152    +
601153    +   data _temp1;
601154    +      set &em_lib..&groupid._eminfo;
601155    +      where key='MODEL';
601156    +   run;
601157    +   data _temp2;
601158    +      set &em_import_data_eminfo;
601159    +      where key='MODEL';
601160    +   run;
601161    +   proc sort data=_temp1; by TARGET DATA;
601162    +   proc sort data=_temp2; by TARGET DATA;
601163    +   data _temp2;
601164    +      merge _temp1(in=_a) _temp2(in=_b);
601165    +      by TARGET DATA;
601166    +      if ^_a and _b then output;
601167    +   run;
601168    +   data _null_;
601169    +      retain index 0;
601170    +      set _temp2 end=eof;
601171    +      index +1;
601172    +      where key ='MODEL';
601173    +      call symput('MODELID'!!strip(put(index, best.)), strip(data));
601174    +      call symput('TARGET'!!strip(put(index, best.)), strip(target));
601175    +      if eof then
601176    +         call symput('targetnum', strip(put(index, best.)));
601177    +   run;
601178    +   proc datasets lib=work nolist;
601179    +      delete _temp1 _temp2;
601180    +   run;
601181    +   %if "&targetNum" eq "0" %then %goto doendtgp;
601182    +
601183    +   %let modelString =;
601184    +   %do i=1 %to &targetnum;
601185    +        %if ^%sysfunc(indexw(&modelString, &&modelid&i)) %then %do;
601186    +            %copyModelDs(model=&&modelid&i, key=EMRANK);
601187    +            %copyModelDs(model=&&modelid&i, key=EMSCOREDIST);
601188    +            %copyModelDs(model=&&modelid&i, key=EMOUTFIT);
601189    +            %copyModelDs(model=&&modelid&i, key=EMCLASSIFICATION);
601190    +            %copyModelDs(model=&&modelid&i, key=EMEVENREPORT);
601191    +            %copyModelDs(model=&&modelid&i, key=EMRESIDUALS);
601192    +            %let modelString = &modelString &&modelid&i;
601193    +       %end;
601194    +       %em_model(TARGET=&&target&i, ASSESS=N, DECSCORECODE=N, FITSTATISTICS=N,
601194   !+CLASSIFICATION=N, RESIDUALS=N, PREDICTED=Y);
601195    +   %end;
601196    +
601197    +   %doendtgp:
601198    +
601199    +%mend traingroup;
601200    +
601201    +%macro getSize(data=, nobsvar=);
601202    +
601203    +   %if %sysfunc(exist(&data, DATA)) %then %do;
601204    +       %let dsid = %sysfunc(open(&data));
601205    +       %if &dsid %then %do;
601206    +           %let &&nobsvar = %sysfunc(attrn(&dsid, NLOBS));
601207    +           %let dsid = %sysfunc(close(&dsid));
601208    +       %end;
601209    +   %end;
601210    +    %if %sysfunc(exist(&data, VIEW)) %then %do;
601211    +        proc sql;
601212    +           reset noprint;
601213    +           select count(*) into :&nobsvar from &data;
601214    +        quit;
601215    +   %end;
601216    +
601217    +%mend getsize;
601218    +
601219    +%macro train;
601220    +
601221    +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %do;
601222    +      %let EM_TOOLTYPE=UTILITY;
601223    +      %if %sysfunc(exist(&em_data_eminfo)) %then %do;
601224    +          proc delete data=&em_data_eminfo;
601225    +          run;
601226    +      %end;
601227    +      %goto doendtr;
601228    +   %end;
601229    +
601230    +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
601230   !+%then %do;
601231    +       %let emexceptionstring = EMTOOL.NOTARGETMODELED;
601232    +       %goto doendtr;
601233    +   %end;
601234    +
601235    +   %let xgroupid = ;
601236    +   data _null_;
601237    +      set &em_import_data_eminfo;
601238    +      where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
601239    +      call symput('XGROUPID',  strip(data));
601240    +      call symput('LOOPTYPE', strip(key));
601241    +   run;
601242    +
601243    +   %if "&looptype" eq "BOOSTINFO" %then %do;
601244    +       %let nDataObs=0;
601245    +       %getSize(data=&em_import_data, nobsvar=nDataObs);
601246    +
601247    +       %let nStartObs=0;
601248    +       %getsize(data=&em_lib..&xgroupid._train, nobsvar=nStartObs);
601249    +
601250    +       %if &nDataObs ne &nStartObs %then %do;
601251    +           %let emexceptionstring = EMTOOL.BOOSTERRORNOBSCHANGED;
601252    +           %goto doendtr;
601253    +       %end;
601254    +
601255    +       %trainboost(groupid=&xgroupid);
601256    +   %end;
601257    +   %else
601258    +   %if "&looptype" eq "BAGINFO" %then %do;
601259    +       %trainbag(groupid=&xgroupid);
601260    +   %end;
601261    +   %else
601262    +   %if "&looptype" eq "GROUPINFO" %then %do;
601263    +       %traingroup(groupid=&xgroupid);
601264    +   %end;
601265    +   %else
601266    +   %if "&looptype" eq "TARGETINFO" %then %do;
601267    +       %traintarget(groupid=&xgroupid);
601268    +   %end;
601269    +
601270    +   data &em_data_eminfo;
601271    +      length TARGET KEY $32  DATA $43;
601272    +      TARGET=''; KEY='ENDGROUP'; DATA="&em_nodeid"; output;
601273    +   run;
601274    +
601275    +   %let EM_TOOLTYPE=MODEL;
601276    +
601277    +   %doendtr:
601278    +
601279    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.Neural2_EMINFO;
MPRINT(TRAIN):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(TRAIN):   call symput('XGROUPID', strip(data));
MPRINT(TRAIN):   call symput('LOOPTYPE', strip(key));
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _temp1;
MPRINT(TRAINGROUP):   set EMWS1.Grp10_eminfo;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRP10_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   set EMWS1.Neural2_EMINFO;
MPRINT(TRAINGROUP):   where key='MODEL';
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key='MODEL';
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp1;
MPRINT(TRAINGROUP):   by TARGET DATA;
NOTE: Input data set is empty.
NOTE: The data set WORK._TEMP1 has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   proc sort data=_temp2;
MPRINT(TRAINGROUP):   by TARGET DATA;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   data _temp2;
MPRINT(TRAINGROUP):   merge _temp1(in=_a) _temp2(in=_b);
MPRINT(TRAINGROUP):   by TARGET DATA;
MPRINT(TRAINGROUP):   if ^_a and _b then output;
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP1.
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):   data _null_;
MPRINT(TRAINGROUP):   retain index 0;
MPRINT(TRAINGROUP):   set _temp2 end=eof;
MPRINT(TRAINGROUP):   index +1;
MPRINT(TRAINGROUP):   where key ='MODEL';
MPRINT(TRAINGROUP):   call symput('MODELID'!!strip(put(index, best.)), strip(data));
MPRINT(TRAINGROUP):   call symput('TARGET'!!strip(put(index, best.)), strip(target));
MPRINT(TRAINGROUP):   if eof then call symput('targetnum', strip(put(index, best.)));
MPRINT(TRAINGROUP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):   proc datasets lib=work nolist;
MPRINT(TRAINGROUP):   delete _temp1 _temp2;
MPRINT(TRAINGROUP):   run;
 
NOTE: Deleting WORK._TEMP1 (memtype=DATA).
NOTE: Deleting WORK._TEMP2 (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(COPYMODELDS):   data EMWS1.EndGrp9_EMRANK;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural2";
MPRINT(COPYMODELDS):   set EMWS1.Neural2_EMRANK;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL2_EMRANK.
NOTE: The data set EMWS1.ENDGRP9_EMRANK has 20 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp9_EMSCOREDIST;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural2";
MPRINT(COPYMODELDS):   set EMWS1.Neural2_EMSCOREDIST;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL2_EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP9_EMSCOREDIST has 20 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp9_EMOUTFIT;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural2";
MPRINT(COPYMODELDS):   set EMWS1.Neural2_EMOUTFIT;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(COPYMODELDS):   data EMWS1.EndGrp9_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   length ModelId $16;
MPRINT(COPYMODELDS):   retain ModelId "Neural2";
MPRINT(COPYMODELDS):   set EMWS1.Neural2_EMCLASSIFICATION;
MPRINT(COPYMODELDS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL2_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP9_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(TRAINGROUP):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAINGROUP):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.EndGrp9_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   TARGET='';
MPRINT(TRAIN):   KEY='ENDGROUP';
MPRINT(TRAIN):   DATA="EndGrp9";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EndGrp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601280     *------------------------------------------------------------*;
601281     * End TRAIN: EndGrp9;
601282     *------------------------------------------------------------*;
601283
 
601284     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
601285     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
601286     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601287     ;
MPRINT(EM_DIAGRAM):   ;
601288     ;
MPRINT(EM_DIAGRAM):   ;
601289     ;
MPRINT(EM_DIAGRAM):   ;
601290     ;
MPRINT(EM_DIAGRAM):   ;
601291     quit;
MPRINT(EM_DIAGRAM):   quit;
601292     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601293     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
601294     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601295     /*; *"; *'; */
601296     ;
MPRINT(EM_DIAGRAM):   ;
601297     run;
MPRINT(EM_DIAGRAM):   run;
601298     quit;
MPRINT(EM_DIAGRAM):   quit;
601299     /* Reset EM Options */
601300     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
601301     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
601302     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:32:03 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                02 June 2018
Time:                16:32:03 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2ID4RIQ "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2ID4RIQ new;
MPRINT(EM_DIAGRAM):   run;
601404     %let EMEXCEPTIONSTRING=;
601405     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
601406     * SCORE: EndGrp9;
MPRINT(EM_DIAGRAM):   * SCORE: EndGrp9;
601407     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601408     %let EM_ACTION = SCORE;
601409     %let syscc = 0;
601410     %macro main;
601411        %if %upcase(&EM_ACTION) = TRAIN %then %do;
601412
601413            filename temp catalog 'sashelp.emutil.endgp_train.source';
601414            %include temp;
601415            filename temp;
601416
601417            %train;
601418
601419        %end;
601420        %else
601421           %if %upcase(&EM_ACTION) = SCORE %then %do;
601422
601423            filename temp catalog 'sashelp.emutil.endgp_score.source';
601424            %include temp;
601425            filename temp;
601426
601427            %score;
601428        %end;
601429        %else
601430        %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
601431
601432            filename temp catalog 'sashelp.emutil.endgp_postloop.source';
601433            %include temp;
601434            filename temp;
601435
601436            %postloop;
601437
601438        %end;
601439
601440        %doendm:
601441     %mend main;
601442
601443     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_SCORE.SOURCE.
601444    +%macro scoreTables(data=, out=, scoreref=, prescore=);
601446    +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW))) %then %do;
601447    +       data &out / view=&out;
601448    +          set &data
601450    +          %if "&prescore" = "Y" %then %do;
601451    +              (obs=1)
601452    +          %end;
601454    +          ;
601456    +          %inc &scoreref;
601458    +          %if "&prescore" eq "Y" %then %do;
601459    +              drop I_: R_:;
601460    +          %end;
601462    +       run;
601463    +   %end;
601465    +%mend scoretables;
601467    +%macro boostbagcode(groupid=, type=, EnsembleIndex=);
601468    +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
601469    +   data _null_;
601470    +      retain index 0;
601471    +      set &infoDs;
601472    +      call symput('targetname', strip(_target_));
601473    +      call symput('endloopnum', strip(_loop_));
601474    +   run;
601476    +   %let endgrp_decmeta=;
601477    +   %let endgrp_decdata=;
601479    +   data _null_;
601480    +      set &em_import_data_eminfo;
601481    +      where key in('MODEL', 'DECMETA', 'DECDATA') and TARGET="&targetname";
601482    +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
601483    +      else
601484    +      if key='DECDATA' then call symput('ENDGRP_DECDATA', strip(data));
601485    +      else call symput('MODELID', strip(data));
601486    +   run;
601488    +   %let headerString= Boosting;
601489    +   %let prefixString= _BoostVar;
601491    +   %if "&type" = "BAGINFO" %then %do;
601492    +        %let headerString = Bagging;
601493    +        %let prefixString= _BagVar;
601494    +   %end;
601496    +   %let targetType=;
601497    +   %let predictedVars=;
601498    +   data _null_;
601499    +      retain index;
601500    +      set &endgrp_decmeta end=eof;
601501    +      length tempvar $200;
601502    +      if _TYPE_='TARGET' then call symput('TARGETTYPE', strip(level));
601503    +      else
601504    +      if _TYPE_ = 'FROM' then call symput('FROMVAR', strip(variable));
601505    +      else
601506    +      if _TYPE_ = 'INTO' then call symput('INTOVAR', strip(variable));
601507    +      else
601508    +      if _TYPE_ = 'PREDICTED' then do;
601509    +         index+1;
601510    +         call symput('predvars'!!strip(put(index, best.)), strip(variable));
601511    +         tempvar = strip("&em_nodeid")!!'_'!!strip(variable);
601512    +         if length(tempvar)<=32 then call symput('tempvars'!!strip(put(index, best.)), strip(tempvar));
601513    +         else call symput('tempvars'!!strip(put(index, best.)), strip("&prefixString")!!strip(put(index, best.)));
601514    +      end;
601515    +      if eof then
601516    +         call symput('prednum', strip(put(index, best.)));
601517    +   run;
601519    +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
601520    +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
601522    +   filename loopflow "&em_user_loopflowcode";
601523    +   filename looppub "&em_user_looppubcode";
601525    +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
601526    +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
601528    +   %if "&emloopnumber" = "1" %then %do;
601529    +       data _null_;
601530    +          rc = fdelete('loopflow');
601531    +          rc = fdelete('looppub');
601532    +       run;
601533    +       data _null_;
601534    +          file loopflow;
601535    +          put "&em_codebar;";
601536    +          put "* &em_nodeid: ;" ;
601537    +          put "* User: &sysuserid;";
601538    +          put "* Date: &sysdate: &systime;";
601539    +          put "&em_codebar ;";
601540    +          put "* Ensemble Code;";
601541    +          put "&em_codebar ;";
601542    +          put "* &headerString: Loop=1;";
601543    +          put "* Temporary Variables;";
601544    +          %do i= 1 %to &prednum;
601545    +              put "drop &&tempvars&i;";
601546    +              put "&&tempvars&i = 0;";
601547    +          %end;
601548    +       run;
601549    +       %em_copyfile(infref=loopflow, outfref=looppub);
601550    +   %end;
601552    +   %let j=&emloopnumber;
601553    +   %do i = 1 %to &loopcodenum;
601554    +       %let fsourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
601555    +       %let psourceEntry = &em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
601557    +       %if (&&loopnode&i eq &em_nodeid ) or
601558    +           ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex )) %then %do;
601559    +           data _null_;
601560    +              file loopflow mod;
601561    +              put "&em_codebar;";
601562    +              put "* &&loopnode&i: &&loopdesc&i;" ;
601563    +              put "* User: &sysuserid;";
601564    +              put "* Date: &sysdate: &systime;";
601565    +              put "* &headerString: Loop=&j;";
601566    +              put "&em_codebar;";
601567    +           run;
601568    +           data _null_;
601569    +              file looppub mod;
601570    +              put "&em_codebar;";
601571    +              put "* &&loopnode&i: &&loopdesc&i;" ;
601572    +              put "* User: &sysuserid;";
601573    +              put "* Date: &sysdate: &systime;";
601574    +              put "* &headerString: Loop=&j;";
601575    +              put "&em_codebar;";
601576    +           run;
601577    +       %end;
601579    +       %if &&loopnode&i ne &em_nodeid %then %do;
601580    +           %if (&ensembleIndex = 0) or (&i=1 or &i>=&ensembleIndex ) %then %do;
601581    +               filename x catalog "&fsourceEntry";
601582    +               %em_copyfile(infref=x, outfref=loopflow, append=Y);
601583    +               filename x;
601585    +               filename y catalog "&psourceEntry";
601586    +               %em_copyfile(infref=y, outfref=looppub, append=Y);
601587    +               filename y;
601588    +           %end;
601589    +       %end;
601590    +       %else %do;
601591    +           %if "&j" ne "1" %then %do;
601592    +               %let weight = %eval(&j-1);
601593    +               data _null_;
601594    +                  file loopflow mod;
601595    +                  put "&em_codebar;";
601596    +                  %if "&j" ne "&endloopnum" %then %do;
601597    +                      put "* &headerString: accumulate probabilities for iteration: &j;";
601598    +                  %end;
601599    +                  %else %do;
601600    +                      put "* &headerString: accumulate final probabilities;";
601601    +                  %end;
601602    +                  put "&em_codebar;";
601603    +                  %do k=1 %to &prednum;
601604    +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
601605    +                  %end;
601606    +               run;
601607    +               data _null_;
601608    +                  file looppub mod;
601609    +                  put "&em_codebar;";
601610    +                  %if "&j" ne "&endloopnum" %then %do;
601611    +                      put "* &headerString: accumulate probabilities for iteration: &j;";
601612    +                  %end;
601613    +                  %else %do;
601614    +                      put "* &headerString: accumulate final probabilities;";
601615    +                  %end;
601616    +                  %do k=1 %to &prednum;
601617    +                      put "&&predvars&k = &&tempvars&k*(&weight/&j) + &&predvars&k*(1/&j);";
601618    +                  %end;
601619    +               run;
601620    +           %end;
601621    +           %if "&j" ne "&endloopnum" %then %do;
601622    +               data _null_;
601623    +                  file loopflow mod;
601624    +                  put "&em_codebar;";
601625    +                  put "* &headerString: Saving Probabilities for Next Iteration;";
601626    +                  put "&em_codebar;";
601627    +               %do k=1 %to &prednum;
601628    +                  put "&&tempvars&k = &&predvars&k;";
601629    +               %end;
601630    +               run;
601631    +               data _null_;
601632    +                  file looppub mod;
601633    +                  put "&em_codebar;";
601634    +                  put "* &headerString: Saving Probabilities for Next Iteration;";
601635    +                  put "&em_codebar;";
601636    +               %do k=1 %to &prednum;
601637    +                   put "&&tempvars&k = &&predvars&k;";
601638    +               %end;
601639    +               run;
601640    +           %end;
601642    +       %end;
601643    +   %end;
601645    +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
601646    +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
601648    +   filename loopflow;
601649    +   filename looppub;
601650    +   filename empub;
601652    +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
601653    +   %let gpTrain=;
601654    +   %let gpValidate=;
601655    +   %let gpTest=;
601657    +   data _null_;
601658    +      set &groupImportDs;
601659    +      select(upcase(port));
601660    +          when('DATA')     call symput('gpTrain',    strip(dataset));
601661    +          when('VALIDATE') call symput('gpValidate', strip(dataset));
601662    +          when('TEST')     call symput('gpTest',     strip(dataset));
601663    +       otherwise;
601664    +      end;
601665    +   run;
601667    +   %if "&gpTrain" ne "" %then %do;
601669    +       %scoreTables(data=&em_lib..&gpTrain,     out=&em_export_train,    scoreref=emflow, prescore=Y);
601671    +       %if &targetType ne INTERVAL %then %do;
601672    +           %makeClassificationVars(target=&targetname, data=&em_export_train, decmeta=&endgrp_decmeta, publish=N, fref=emflow);
601673    +       %end;
601675    +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
601677    +       %let decflow = %sysfunc(Pathname(WORK))&em_dsep._decflow.sas;
601679    +       %em_decidecode(data=&em_export_train , decdata=&ENDGRP_DECDATA , decmeta=&ENDGRP_DECMETA ,
601680    +                                                           noresfile=, resfile=%nrbquote(&decflow));
601682    +       filename _decflow "&decflow";
601683    +       %em_copyfile(infref=_decflow, outfref=emflow, append=Y);
601684    +       filename _decflow;
601686    +   %end;
601688    +   %if "&gpTrain" ne "" %then
601689    +        %scoreTables(data=&em_lib..%sysfunc(strip(&gpTrain)),     out=&em_export_train,    scoreref=emflow);
601690    +   %if "&gpValidate" ne "" %then
601691    +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),  out=&em_export_validate, scoreref=emflow);
601692    +   %if "&gpTest" ne "" %then
601693    +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),      out=&em_export_test,     scoreref=emflow);
601695    +   filename emflow;
601697    +%mend boostbagcode;
601699    +%macro score;
601701    +   filename _dec catalog "sashelp.emutil.em_decidecode.source";
601702    +   %inc _dec;
601703    +   filename _dec;
601705    +   %if ^%symexist(em_import_data_eminfo) or ("&emloopmode" eq "") %then %goto doendpl;
601707    +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo)) %then %do;
601708    +       %let emexceptionstring = nomodeltarget;
601709    +       %goto doendpl;
601710    +   %end;
601712    +   %LET GROUPID=;
601713    +   %let LOOPTYPE=;
601714    +   data _null_;
601715    +      set &em_import_data_eminfo;
601716    +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
601717    +      call symput('GROUPID',   strip(data));
601718    +      call symput('LOOPTYPE', strip(key));
601719    +   run;
601721    +   %em_getname(key=PATH, type=DATA);
601723    +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
601724    +   %include temp;
601725    +   filename temp;
601727    +   %em_gettrainpath(NODEID=&em_nodeid, OUTPATH= score_path);
601729    +   %if &emloopnumber = 1 and %sysfunc(exist(&em_user_path)) %then %do;
601730    +       %let deleteString = &em_nodeid._path;
601731    +       proc datasets lib=&em_lib nolist;
601732    +          delete &deleteString;
601733    +       run;
601734    +       quit;
601735    +   %end;
601737    +   %if ^%sysfunc(exist(WORK.score_path)) %then %goto doendpl;
601739    +   data score_path;
601740    +      retain LOOPID &emloopnumber;
601741    +      set score_path;
601742    +   run;
601744    +   proc append base=&em_user_path  data=score_path;
601745    +   run;
601747    +   %let EnsembleIndex=0;
601748    +   data _null_;
601749    +      retain index 0 ensembleIndex 0;
601750    +      set score_Path end=eof;
601751    +      if nodelabel = "&groupid" or index then do;
601752    +         index + 1;
601753    +         call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
601754    +         call symput('loopdesc'!!strip(put(index, best.)), strip(component));
601755    +      end;
601756    +      if component='Ensemble' then ensembleIndex = index;
601757    +      if eof then do;
601758    +         call symput('loopcodenum', strip(put(index, best.)));
601759    +         call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
601760    +      end;
601761    +   run;
601763    +   proc datasets lib=work nolist;
601764    +      delete score_Path;
601765    +   run;
601766    +   quit;
601768    +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
601769    +       %boostbagcode(groupid=&groupid, type=&looptype, EnsembleIndex=&EnsembleIndex);
601771    +   %doendpl:
601773    +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename _dec catalog "sashelp.emutil.em_decidecode.source";
NOTE: %INCLUDE (level 1) file _DEC is file SASHELP.EMUTIL.EM_DECIDECODE.SOURCE.
601774    +/*
601775    +       MACRO: EM_DECIDECODE
601776    +
601777    +       PURPOSE: Generate EM Decide Score Code for non-interval target.
601778    +       SUPPORT: Taiyeong Lee
601779    +
601780    +       HISTORY: 01OCT04 Initial code
601781    +       NOTE:    All parameters are optional, call %EM_DECIDECODE()
601782    +                to add the corresponding decision code
601783    +
601784    +*/
601785    +
601786    +
601787    +%macro  EM_DECIDECODE(data= , decdata= , decmeta= , noresfile=, resfile=);
601788    + %global m_data    m_decdata   m_decmeta  m_noresfile  m_resfile ;
601789    +
601790    +    %do;
601791    +    %let m_data      = &data;
601792    +    %let m_decdata   = &decdata;
601793    +    %let m_decmeta   = &decmeta;
601794    +    %let m_noresfile = &noresfile;
601795    +    %let m_resfile   = &resfile;
601796    +    dm "afa c=sashelp.emutil.decidecode.scl";
601797    +  %end;
601798    +%mend EM_DECIDECODE;
601799    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename _dec;
NOTE: Fileref _DEC has been deassigned.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Neural2_EMINFO;
MPRINT(SCORE):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(SCORE):   call symput('GROUPID', strip(data));
MPRINT(SCORE):   call symput('LOOPTYPE', strip(key));
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
601800    +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
601801    +   proc display c=sashelp.emcore.pathscorecode.scl;
601802    +   run;
601803    +%mend EM_GETTRAINPATH;
601804    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
601805     data score_path;
MPRINT(EM_GETTRAINPATH):   data score_path;
601806     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
601807     nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
601808     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
601809     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
601810     component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
601811     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
601812     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601813     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601814     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601815     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601816     output;
MPRINT(EM_GETTRAINPATH):   output;
601817     nodelabel="Filter";
MPRINT(EM_GETTRAINPATH):   nodelabel="Filter";
601818     parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
601819     description="Filtering";
MPRINT(EM_GETTRAINPATH):   description="Filtering";
601820     component="Filter";
MPRINT(EM_GETTRAINPATH):   component="Filter";
601821     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
601822     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601823     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601824     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601825     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601826     output;
MPRINT(EM_GETTRAINPATH):   output;
601827     nodelabel="Impt";
MPRINT(EM_GETTRAINPATH):   nodelabel="Impt";
601828     parent="Filter";
MPRINT(EM_GETTRAINPATH):   parent="Filter";
601829     description="Imputation";
MPRINT(EM_GETTRAINPATH):   description="Imputation";
601830     component="Impute";
MPRINT(EM_GETTRAINPATH):   component="Impute";
601831     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
601832     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601833     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601834     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601835     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601836     output;
MPRINT(EM_GETTRAINPATH):   output;
601837     nodelabel="EMCODE2";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE2";
601838     parent="Impt";
MPRINT(EM_GETTRAINPATH):   parent="Impt";
601839     description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
601840     component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
601841     tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
601842     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601843     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601844     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601845     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601846     output;
MPRINT(EM_GETTRAINPATH):   output;
601847     nodelabel="Meta2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta2";
601848     parent="EMCODE2";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE2";
601849     description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
601850     component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
601851     tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
601852     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601853     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601854     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601855     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601856     output;
MPRINT(EM_GETTRAINPATH):   output;
601857     nodelabel="EMCODE3";
MPRINT(EM_GETTRAINPATH):   nodelabel="EMCODE3";
601858     parent="Meta2";
MPRINT(EM_GETTRAINPATH):   parent="Meta2";
601859     description="SASHELP.EMCORE.EMCODETOOL.CLASS";
MPRINT(EM_GETTRAINPATH):   description="SASHELP.EMCORE.EMCODETOOL.CLASS";
601860     component="SASCode";
MPRINT(EM_GETTRAINPATH):   component="SASCode";
601861     tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
601862     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601863     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601864     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601865     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601866     output;
MPRINT(EM_GETTRAINPATH):   output;
601867     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
601868     parent="EMCODE3";
MPRINT(EM_GETTRAINPATH):   parent="EMCODE3";
601869     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
601870     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
601871     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
601872     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601873     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601874     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601875     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601876     output;
MPRINT(EM_GETTRAINPATH):   output;
601877     nodelabel="Meta";
MPRINT(EM_GETTRAINPATH):   nodelabel="Meta";
601878     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
601879     description="Metadata Node";
MPRINT(EM_GETTRAINPATH):   description="Metadata Node";
601880     component="Metadata";
MPRINT(EM_GETTRAINPATH):   component="Metadata";
601881     tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
601882     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601883     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601884     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601885     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601886     output;
MPRINT(EM_GETTRAINPATH):   output;
601887     nodelabel="Trans2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans2";
601888     parent="Meta";
MPRINT(EM_GETTRAINPATH):   parent="Meta";
601889     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
601890     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
601891     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
601892     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601893     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601894     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601895     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601896     output;
MPRINT(EM_GETTRAINPATH):   output;
601897     nodelabel="Grp10";
MPRINT(EM_GETTRAINPATH):   nodelabel="Grp10";
601898     parent="Trans2";
MPRINT(EM_GETTRAINPATH):   parent="Trans2";
601899     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
601900     component="StartGroup";
MPRINT(EM_GETTRAINPATH):   component="StartGroup";
601901     tooltype="UTILITY";
MPRINT(EM_GETTRAINPATH):   tooltype="UTILITY";
601902     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601903     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601904     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601905     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601906     output;
MPRINT(EM_GETTRAINPATH):   output;
601907     nodelabel="Neural2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural2";
601908     parent="Grp10";
MPRINT(EM_GETTRAINPATH):   parent="Grp10";
601909     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
601910     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
601911     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
601912     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601913     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601914     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601915     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601916     output;
MPRINT(EM_GETTRAINPATH):   output;
601917     nodelabel="EndGrp9";
MPRINT(EM_GETTRAINPATH):   nodelabel="EndGrp9";
601918     parent="Neural2";
MPRINT(EM_GETTRAINPATH):   parent="Neural2";
601919     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
601920     component="EndGroup";
MPRINT(EM_GETTRAINPATH):   component="EndGroup";
601921     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
601922     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
601923     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
601924     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
601925     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
601926     output;
MPRINT(EM_GETTRAINPATH):   output;
601927     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK.SCORE_PATH has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(SCORE):  ;
MPRINT(SCORE):   data score_path;
MPRINT(SCORE):   retain LOOPID 2;
MPRINT(SCORE):   set score_path;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: The data set WORK.SCORE_PATH has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc append base=EMWS1.EndGrp9_PATH data=score_path;
MPRINT(SCORE):   run;
 
NOTE: Appending WORK.SCORE_PATH to EMWS1.ENDGRP9_PATH.
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: 12 observations added.
NOTE: The data set EMWS1.ENDGRP9_PATH has 24 observations and 10 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   retain index 0 ensembleIndex 0;
MPRINT(SCORE):   set score_Path end=eof;
MPRINT(SCORE):   if nodelabel = "Grp10" or index then do;
MPRINT(SCORE):   index + 1;
MPRINT(SCORE):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(SCORE):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(SCORE):   end;
MPRINT(SCORE):   if component='Ensemble' then ensembleIndex = index;
MPRINT(SCORE):   if eof then do;
MPRINT(SCORE):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(SCORE):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: There were 12 observations read from the data set WORK.SCORE_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete score_Path;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.SCORE_PATH (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: EndGrp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601928     *------------------------------------------------------------*;
601929     * End SCORE: EndGrp9;
601930     *------------------------------------------------------------*;
601931
 
601932     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
601933     * EndGrp9: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * EndGrp9: Scoring DATA data;
601934     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
601935     data EMWS1.EndGrp9_TRAIN
601936     / view=EMWS1.EndGrp9_TRAIN
601937     ;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_TRAIN / view=EMWS1.EndGrp9_TRAIN ;
601938     set EMWS1.Neural2_TRAIN
601939     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_TRAIN ;
601940     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP9_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
601941     quit;
 
601943     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
601944     * EndGrp9: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp9: Computing metadata for TRAIN data;
601945     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp9_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp9_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp9_TRAIN out=WORK.M2RIJZIC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RIJZIC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RIJZIC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RIJZIC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RIJZIC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M04B05DA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M373LMYI(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   set WORK.M04B05DA;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp9";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp9";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
602291     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
602292     set EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMINFO;
602293     where DATA='EndGrp9' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp9' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
602294     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMINFO.
      WHERE (DATA='EndGrp9') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
602295     data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMINFO;
602296     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
602297     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
602298     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
602302     run;
602303     data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMINFO;
602304     set EMWS1.EndGrp9_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMINFO WORK.MODELTEMP_INFO;
602305     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602306     proc sort data = EMWS1.EndGrp9_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp9_EMINFO NOTHREADS;
602307     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
602308     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602309     proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
602310     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
602311     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
602312     proc sort data = EMWS1.EndGrp9_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp9_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
602313     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
602314     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602315     data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMINFO;
602316     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
602317     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
602318     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
602319     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
602320     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
602321     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
602322     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:32:04 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                02 June 2018
Time:                16:32:04 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2HPDCQB "C:\Users\misil\Desktop\DM 2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2HPDCQB new;
MPRINT(EM_DIAGRAM):   run;
602346     data EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMOUTFIT;
602347     set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
602348     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
602349     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
602350     if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
602351     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
602352     proc sort data=EMWS1.EndGrp9_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp9_EMREPORTFIT nothreads;
602353     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
602354     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602355     %let _EMwarndup = 0;
602356     %let _EMtargetdup =;
602357     %let _EMASEtargetdup =;
602358     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
602359     set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
602360     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
602361     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
602362     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
602363     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
602364     end;
MPRINT(EM_DIAGRAM):   end;
602365     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602366     proc sort data=EMWS1.Neural2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_CMeta_TRAIN out=WORK.SUBSETINMETA;
602367     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
602368     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 20 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
602369     proc sort data=EMWS1.EndGrp9_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp9_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
602370     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
602371     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 20 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
602372     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
602373     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
602374     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
602375     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 20 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 20 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
602376     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
602377     set EMWS1.EndGrp9_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_CMeta_TRAIN;
602378     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
602379     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP9_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
602380     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
602381     set EMWS1.EndGrp9_TRAIN(keep=
602382     F_DepVar
602383     I_DepVar
602384     P_DepVar0
602385     P_DepVar1
602386     R_DepVar0
602387     R_DepVar1
602388     U_DepVar
602389     _WARN_
602390     DepVar
602391     );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
602392     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2187 observations read from the data set EMWS1.GRP10_TRAIN.
NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2187 observations read from the data set EMWS1.NEURAL2_TRAIN.
NOTE: There were 2187 observations read from the data set EMWS1.ENDGRP9_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2187 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
606579     %let _cn = %sysfunc(getoption(CENTER));
606580     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
606581     proc print data=EMWS1.EndGrp9_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMREPORTFIT noobs label;
606582     var STAT LABEL TRAIN
606583     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
606584     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
606585     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
606586     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
606587     run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 404.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
606588     title10;
MPRINT(EM_DIAGRAM):   title10;
606589     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
606590     proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION nothreads;
606591     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
606592     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP9_EMCLASSIFICATION has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
606593     %let _cn = %sysfunc(getoption(CENTER));
606594     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
606595     proc print data=EMWS1.EndGrp9_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMCLASSIFICATION noobs label;
606596     var from into pct_row pct_col count percent
606597     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
The SAS System
 
606598     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
606599     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
606600     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
606601     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
606602     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
606603     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
606604     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
606605     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
606606     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
606607     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
606608     run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 405.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606609     title9;
MPRINT(EM_DIAGRAM):   title9;
606610     title10;
MPRINT(EM_DIAGRAM):   title10;
606611     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
606612     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
606613     modify EndGrp9_EMRANK;
MPRINT(EM_DIAGRAM):   modify EndGrp9_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
606614     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
606615     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
606616     run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP9_EMRANK.DATA.
606617     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
606618     %let _cn = %sysfunc(getoption(CENTER));
606619     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
606620     proc print data=EMWS1.EndGrp9_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMRANK label noobs;
606621     var
606622     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
606623     by
606624     notsorted DATAROLE
606625     notsorted TARGET
606626     notsorted TARGETLABEL
606627     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
606628     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
606629     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
606630     run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMRANK.
NOTE: The PROCEDURE PRINT printed page 406.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
606631     title10;
MPRINT(EM_DIAGRAM):   title10;
606632     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
606633     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
606634     modify EndGrp9_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify EndGrp9_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
606635     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
606636     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
606637     run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP9_EMSCOREDIST.DATA.
606638     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
606639     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
606640     set EMWS1.Grp10_GROUPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp10_GROUPINFO;
606641     where _LOOP_=2;
MPRINT(EM_DIAGRAM):   where _LOOP_=2;
606642     call symput('LOOP_WHERE', strip(_wheredesc_));
MPRINT(EM_DIAGRAM):   call symput('LOOP_WHERE', strip(_wheredesc_));
606643     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.GRP10_GROUPINFO.
      WHERE _LOOP_=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
606644     data temp;
MPRINT(EM_DIAGRAM):    data temp;
606645     length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
606646     format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
606647     label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
606648     set EMWS1.EndGrp9_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMRANK;
606649     _LOOP_ =2;
MPRINT(EM_DIAGRAM):   _LOOP_ =2;
606650     _WHERE_ ="^(cv_var =2)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =2)";
606651     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMRANK.
NOTE: The data set WORK.TEMP has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606652     data EMWS1.EndGrp9_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMRANK_LOOP;
606653     set EMWS1.EndGrp9_EMRANK_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMRANK_LOOP temp;
606654     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP9_EMRANK_LOOP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606655     data temp;
MPRINT(EM_DIAGRAM):    data temp;
606656     length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
606657     format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
606658     label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
606659     set EMWS1.EndGrp9_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMSCOREDIST;
606660     _LOOP_ =2;
MPRINT(EM_DIAGRAM):   _LOOP_ =2;
606661     _WHERE_ ="^(cv_var =2)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =2)";
606662     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMSCOREDIST.
NOTE: The data set WORK.TEMP has 20 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606663     data EMWS1.EndGrp9_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMSCOREDIST_LOOP;
606664     set EMWS1.EndGrp9_EMSCOREDIST_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMSCOREDIST_LOOP temp;
606665     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP9_EMSCOREDIST_LOOP has 40 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
606666     data temp;
MPRINT(EM_DIAGRAM):    data temp;
606667     length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
606668     format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
606669     label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
606670     set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
606671     _LOOP_ =2;
MPRINT(EM_DIAGRAM):   _LOOP_ =2;
606672     _WHERE_ ="^(cv_var =2)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =2)";
606673     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: The data set WORK.TEMP has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
606674     data EMWS1.EndGrp9_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMOUTFIT_LOOP;
606675     set EMWS1.EndGrp9_EMOUTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT_LOOP temp;
606676     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT_LOOP has 2 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
606677     data temp;
MPRINT(EM_DIAGRAM):    data temp;
606678     length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
606679     format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
606680     label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
606681     set EMWS1.EndGrp9_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMREPORTFIT;
606682     _LOOP_ =2;
MPRINT(EM_DIAGRAM):   _LOOP_ =2;
606683     _WHERE_ ="^(cv_var =2)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =2)";
606684     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT.
NOTE: The data set WORK.TEMP has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
606685     data EMWS1.EndGrp9_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMREPORTFIT_LOOP;
606686     set EMWS1.EndGrp9_EMREPORTFIT_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMREPORTFIT_LOOP temp;
606687     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT_LOOP.
NOTE: There were 21 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP9_EMREPORTFIT_LOOP has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606688     data temp;
MPRINT(EM_DIAGRAM):    data temp;
606689     length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
606690     format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
606691     label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
606692     set EMWS1.EndGrp9_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMCLASSIFICATION;
606693     _LOOP_ =2;
MPRINT(EM_DIAGRAM):   _LOOP_ =2;
606694     _WHERE_ ="^(cv_var =2)";
MPRINT(EM_DIAGRAM):   _WHERE_ ="^(cv_var =2)";
606695     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION.
NOTE: The data set WORK.TEMP has 4 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
606696     data EMWS1.EndGrp9_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMCLASSIFICATION_LOOP;
606697     set EMWS1.EndGrp9_EMCLASSIFICATION_LOOP temp;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMCLASSIFICATION_LOOP temp;
606698     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP has 8 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
