MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:39 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Post Grouping Log
Date:                02 June 2018
Time:                17:07:39 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3EXCGMT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3EXCGMT new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:39 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMOUTPUT.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:39 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
3639685    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3639686    set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
3639687    where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
3639688    call symput('EMGROUPMODE', strip(key));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPMODE', strip(key));
3639689    call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
3639690    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3639691    data WORK.M0L_65T3;
MPRINT(EM_DIAGRAM):    data WORK.M0L_65T3;
3639692    set WORK.M0L_65T3;
MPRINT(EM_DIAGRAM):   set WORK.M0L_65T3;
3639693    where upcase(NAME) in(
3639694    "DEPVAR"
3639695    );
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "DEPVAR" );
3639696    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.M0L_65T3.
      WHERE UPCASE(NAME)='DEPVAR';
NOTE: The data set WORK.M0L_65T3 has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

3639697    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN 
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN EMWS1 Neural2_TRAIN 
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN 
EMWS1.Neural2_TRAIN EMWS1.Neural2_TRAIN EMWS1 Neural2_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural2_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3639726    data WORK.EndGrp9_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp9_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS 
ORDER);
3639727    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3639728    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3639728  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3639728  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3639729       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3639729  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3639729  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3639730    set EMWS1.NEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL2_DEPVAR_DM( where=(_TYPE_="TARGET"));
3639731    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3639732    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3639733    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3639734    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3639735    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3639736    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3639737    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3639738    end;
MPRINT(EM_DIAGRAM):   end;
3639739    output;
MPRINT(EM_DIAGRAM):   output;
3639740    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP9_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3639741    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3639742    proc print data=WORK.EndGrp9_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp9_EVENT noobs label;
3639743    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3639744    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3639745    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3639746    run;

NOTE: There were 1 observations read from the data set WORK.ENDGRP9_EVENT.
NOTE: The PROCEDURE PRINT printed page 2394.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3639747    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"." 
3639748    proc print data = EMWS1.Neural2_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural2_DepVar_DM noobs label;
3639749    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3639750    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
3639751    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3639751  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3639751  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3639752    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3639753    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3639754    run;

NOTE: There were 7 observations read from the data set EMWS1.NEURAL2_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2395.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3639755    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp9: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3640217    %let EMEXCEPTIONSTRING=;
3640218    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3640219    * POSTLOOP: EndGrp9;
MPRINT(EM_DIAGRAM):   * POSTLOOP: EndGrp9;
3640220    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3640221    %let EM_ACTION = POSTLOOP;
3640222    %let syscc = 0;
3640223    %macro main;
3640224       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3640225    
3640226           filename temp catalog 'sashelp.emutil.endgp_train.source';
3640227           %include temp;
3640228           filename temp;
3640229    
3640230           %train;
3640231    
3640232       %end;
3640233       %else
3640234          %if %upcase(&EM_ACTION) = SCORE %then %do;
3640235    
3640236           filename temp catalog 'sashelp.emutil.endgp_score.source';
3640237           %include temp;
3640238           filename temp;
3640239    
3640240           %score;
3640241       %end;
3640242       %else
3640243       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3640244    
3640245           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3640246           %include temp;
3640247           filename temp;
3640248    
3640249           %postloop;
3640250    
3640251       %end;
3640252    
3640253       %doendm:
3640254    %mend main;
3640255    
3640256    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_POSTLOOP.SOURCE.
3640257   +%macro scoreTables(data=, out=, scoreref=, prescore=);
3640259   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW)))
3640259  !+%then %do;
3640260   +       data &out / view=&out;
3640261   +          set &data
3640264   +          %if "&prescore" = "Y" %then %do;
3640265   +              (obs=1)
3640266   +          %end;
3640268   +          ;
3640270   +       %let fexist = %sysfunc(fexist(&scoreref));
3640271   +       %if &fexist %then %do;
3640272   +          %inc &scoreref;
3640273   +       %end;
3640275   +       %if "&prescore" eq "Y" %then %do;
3640276   +          drop I_: R_:;
3640277   +       %end;
3640279   +       run;
3640280   +   %end;
3640282   +%mend scoretables;
3640284   +%macro postboostbag(groupid=, type=);
3640285   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3640286   +   data _null_;
3640287   +      retain index 0;
3640288   +      set &infoDs;
3640289   +      call symput('targetname', strip(_target_));
3640290   +   run;
3640292   +   data _null_;
3640293   +      set &em_import_data_eminfo;
3640294   +      where key in('MODEL', 'DECMETA') and TARGET="&targetname";
3640295   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
3640296   +      else call symput('MODELID', strip(data));
3640297   +   run;
3640299   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
3640300   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
3640302   +   filename loopflow "&em_user_loopflowcode";
3640303   +   filename looppub "&em_user_looppubcode";
3640305   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3640306   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3640308   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
3640309   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
3640311   +   filename loopflow;
3640312   +   filename looppub;
3640313   +   filename emflow;
3640314   +   filename empub;
3640316   +   %let EMGROUPASSMT = Y;
3640318   +   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y, DECSCORECODE=Y,
3640318  !+FITSTATISTICS=N, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3640320   +   %em_getname(key=emoutfit, type=DATA);
3640321   +   %em_getname(key=emoutfit_loop, type=DATA);
3640323   +   data &em_user_emoutfit;
3640324   +      set &em_user_emoutfit_loop end=eof;
3640325   +      drop _LOOP_ _WHERE_;
3640326   +      if eof then output;
3640327   +   run;
3640329   +%mend postboostbag;
3640331   +%macro postgroup(groupid=, type=);
3640332   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3640333   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3640335   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3640336   +   %let _XValidation = 0;
3640338   +   data _null_;
3640339   +      retain index 0;
3640340   +      set &infoDs end=eof;
3640341   +      index + 1;
3640342   +      call symput('loopwhere'!!strip(put(index, best.)), tranwrd(strip(_wheredesc_),
3640342  !+ '"', '""'));
3640343   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3640344   +      if eof and substr(_WHERE_, 1, 2)='^(' then
3640345   +         call symput('_XValidation', '1');
3640346   +   run;
3640348   +   %let grouptarget=;
3640349   +   /* Looping Over Groups Only.  Retrieve targets from EMINFO */
3640350   +   %if "&looptarget1" eq "" %then %do;
3640351   +      data _null_;
3640352   +         set &em_import_data_eminfo;
3640353   +         where key in('MODEL');
3640354   +         call symput('grouptarget', strip(symget('grouptarget'))!!'
3640354  !+'!!strip(target));
3640355   +      run;
3640356   +   %end;
3640358   +   %do j=1 %to &emloopnumber;
3640359   +       %let EnsembleIndex=0;
3640360   +       data _null_;
3640361   +          retain index 0 ensembleIndex 0;
3640362   +          set &em_user_path end=eof;
3640363   +          where LOOPID=&j;
3640364   +          if nodelabel = "&groupid" or index then do;
3640365   +             index + 1;
3640366   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3640367   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3640368   +             call symput('loopaccum'!!strip(put(index, best.)),
3640368  !+strip(accumulatedScoreCode));
3640369   +          end;
3640370   +          if component='Ensemble' then ensembleIndex = index;
3640371   +          if eof then do;
3640372   +             call symput('loopcodenum', strip(put(index, best.)));
3640373   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3640374   +          end;
3640375   +       run;
3640377   +       %do i = 1 %to &loopcodenum;
3640378   +           %let fsourceEntry =
3640378  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3640379   +           %let psourceEntry =
3640379  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3640381   +           %if (&&loopnode&i eq &em_nodeid ) or
3640382   +               ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or
3640382  !+&i>&ensembleIndex or &i=&ensembleIndex) ) %then %do;
3640384   +               data _null_;
3640385   +                  file emflow mod;
3640386   +                  put "&em_codebar;";
3640387   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3640388   +                  put "* User: &sysuserid;";
3640389   +                  put "* Date: &sysdate: &systime;";
3640390   +                  %if "&&loopwhere&j" ne "" %then %do;
3640391   +                      put "* Group: &&loopwhere&j;";
3640392   +                  %end;
3640393   +                  %if "&&looptarget&j" ne "" %then %do;
3640394   +                       put "* Target: &&looptarget&j;";
3640395   +                  %end;
3640396   +                  put "&em_codebar ;";
3640397   +               run;
3640398   +               data _null_;
3640399   +                   file empub mod;
3640400   +                   put "&em_codebar ;";
3640401   +                   put "* &&loopnode&i: &&loopdesc&i;" ;
3640402   +                   put "* User: &sysuserid;";
3640403   +                   put "* Date: &sysdate: &systime;";
3640404   +                   %if "&&loopwhere&j" ne "" %then %do;
3640405   +                       put "* Group: &&loopwhere&j;";
3640406   +                   %end;
3640407   +                   %if "&&looptarget&j" ne "" %then %do;
3640408   +                       put "* Target: &&looptarget&j;";
3640409   +                   %end;
3640410   +                   put "&em_codebar;";
3640411   +               run;
3640412   +           %end;
3640414   +           %if ("&&loopnode&i" ne "&em_nodeid" ) %then %do;
3640415   +               %if (&ensembleIndex = 0) or (&i=1 or &i>&ensembleIndex or
3640415  !+&i=&ensembleIndex) %then %do;
3640416   +                   %if "&&loopnode&i" eq "&groupid" and "&_XValidation" eq "1" %then
3640416  !+ %do;
3640417   +                       filename y catalog "&psourceEntry";
3640418   +                       %em_copyfile(infref=y, outfref=emflow, append=Y);
3640419   +                       filename y;
3640420   +                   %end;
3640421   +                   %else %do;
3640422   +                       filename x catalog "&fsourceEntry";
3640423   +                       %em_copyfile(infref=x, outfref=emflow, append=Y);
3640424   +                       filename x;
3640425   +                   %end;
3640427   +                   filename y catalog "&psourceEntry";
3640428   +                   %em_copyfile(infref=y, outfref=empub, append=Y);
3640429   +                   filename y;
3640430   +               %end;
3640431   +           %end;
3640432   +           %else %do;
3640433   +              %if "&&loopwhere&j" ne "" %then %do;
3640434   +                  data _null_;
3640435   +                     file emflow mod;
3640436   +                     put 'end;';
3640437   +                  run;
3640438   +                  data _null_;
3640439   +                     file empub mod;
3640440   +                     put 'end;';
3640441   +                  run;
3640442   +               %end;
3640443   +           %end;
3640444   +       %end;
3640445   +   %end;
3640446   +   filename emflow;
3640447   +   filename empub;
3640449   +   /* Stratify Model Need to Recompute All Assessment Reports */
3640450   +   %if "&grouptarget" eq "" %then %do;
3640451   +       %let assessTarget=;
3640452   +       %do j=1 %to &emloopnumber;
3640453   +           %let targetname = &&looptarget&j;
3640454   +           %if ^%index(&assesstarget, &targetname) and ("&targetname" ne "") %then
3640454  !+%do;
3640455   +               %let assesstarget = &assesstarget &targetname;
3640456   +               %let index = 1;
3640457   +               %do %while( %scan(%sysfunc(strip(&targetname)), &index) ne
3640457  !+%sysfunc(strip(&targetname)));
3640458   +                   %let index = %eval(&index + 1);
3640459   +               %end;
3640460   +               %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &index
3640460  !+,%str( ));
3640462   +               %if "&targetlevel" ne "INTERVAL" %then
3640463   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3640463  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3640464   +               %else
3640465   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3640465  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3640466   +           %end;
3640467   +       %end;
3640468   +   %end;
3640469   +   %else %do;
3640470   +       %do i=1 %to &em_num_target;
3640471   +           %let targetname = %scan(%em_target, &i, %str( )) ;
3640472   +           %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &i ,%str( ));
3640474   +           %if %sysfunc(indexw(&grouptarget, &targetname)) %then %do;
3640475   +              %if "&targetlevel" ne "INTERVAL" %then
3640476   +                  %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3640476  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3640477   +              %else
3640478   +                 %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3640478  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3640479   +           %end;
3640480   +           %else %do;
3640481   +               %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N,
3640481  !+DECSCORECODE=N, FITSTATISTICS=N, RESIDUALS=N, PREDICTED=N);
3640482   +           %end;
3640483   +       %end;
3640484   +   %end;
3640485   +   %let EMGROUPASSMT = N;
3640486   +%mend postgroup;
3640488   +%macro posttarget(groupid=, type=);
3640489   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3640490   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3640492   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3640493   +   data _null_;
3640494   +      retain index 0;
3640495   +      set &infoDs end=eof;
3640496   +      index + 1;
3640497   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3640498   +   run;
3640500   +   %do j=1 %to &emloopnumber;
3640501   +       %let EnsembleIndex=0;
3640502   +       data _null_;
3640503   +          retain index 0 ensembleIndex 0;
3640504   +          set &em_user_path end=eof;
3640505   +          where LOOPID=&j;
3640506   +          if nodelabel = "&groupid" or index then do;
3640507   +             index + 1;
3640508   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3640509   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3640510   +             call symput('loopaccum'!!strip(put(index, best.)),
3640510  !+strip(accumulatedScoreCode));
3640511   +          end;
3640512   +          if component='Ensemble' then ensembleIndex = index;
3640513   +          if eof then do;
3640514   +             call symput('loopcodenum', strip(put(index, best.)));
3640515   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3640516   +          end;
3640517   +       run;
3640519   +       %do i = 1 %to &loopcodenum;
3640520   +           %let fsourceEntry =
3640520  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3640521   +           %let psourceEntry =
3640521  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3640523   +           %if (&&loopnode&i ne &em_nodeid ) and
3640524   +               ( (&ensembleIndex = 0) or (&i>=&ensembleIndex) ) %then %do;
3640525   +               data _null_;
3640526   +                  file emflow mod;
3640527   +                  put "&em_codebar;";
3640528   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3640529   +                  put "* User: &sysuserid;";
3640530   +                  put "* Date: &sysdate: &systime;";
3640531   +                  put "* Target: &&looptarget&j;";
3640532   +                  put "&em_codebar ;";
3640533   +               run;
3640534   +               data _null_;
3640535   +                  file empub mod;
3640536   +                  put "&em_codebar ;";
3640537   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3640538   +                  put "* User: &sysuserid;";
3640539   +                  put "* Date: &sysdate: &systime;";
3640540   +                  put "* Target: &&looptarget&j;";
3640541   +                  put "&em_codebar;";
3640542   +               run;
3640544   +               filename x catalog "&fsourceEntry";
3640545   +               %em_copyfile(infref=x, outfref=emflow, append=Y);
3640546   +               filename x;
3640548   +               filename y catalog "&psourceEntry";
3640549   +               %em_copyfile(infref=y, outfref=empub, append=Y);
3640550   +               filename y;
3640551   +           %end;
3640552   +       %end;
3640553   +   %end;
3640554   +   filename emflow;
3640555   +   filename empub;
3640557   +   %do j=1 %to &emloopnumber;
3640558   +       %let targetname = &&looptarget&j;
3640559   +       %let k = 1;
3640560   +       %do %while( %scan(%sysfunc(strip(&targetname)), &k) ne
3640560  !+%sysfunc(strip(&targetname)));
3640561   +           %let k = %eval(&k + 1);
3640562   +       %end;
3640563   +       %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &k ,%str( ));
3640564   +       %if "&targetlevel" ne "INTERVAL" %then
3640565   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3640565  !+FITSTATISTICS=N, CLASSIFICATION=N, PREDICTED=Y);
3640566   +       %else
3640567   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3640567  !+FITSTATISTICS=N, RESIDUALS=N, PREDICTED=Y);
3640568   +       %let EMGROUPASSMT = N;
3640569   +   %end;
3640571   +%mend posttarget;
3640573   +%macro postloop;
3640575   +   %if ^%symexist(em_import_data_eminfo) %then %goto doendpl;
3640577   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
3640577  !+%then %do;
3640578   +       %let emexceptionstring = nomodeltarget;
3640579   +       %goto doendpl;
3640580   +   %end;
3640582   +   %let targetName=;
3640583   +   %let endgrp_decmeta=;
3640585   +   data _null_;
3640586   +      set &em_import_data_eminfo;
3640587   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
3640588   +      call symput('GROUPID',   strip(data));
3640589   +      call symput('LOOPTYPE', strip(key));
3640590   +   run;
3640592   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
3640593   +   %include temp;
3640594   +   filename temp;
3640596   +   %em_getname(key=PATH, type=DATA);
3640598   +   %if ^%sysfunc(exist(&em_user_path)) %then %goto doendpl;
3640600   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
3640602   +   %let gptrain=;
3640603   +   %let gpvalidate=;
3640604   +   %let gptest=;
3640606   +   data _null_;
3640607   +      set &groupImportDs;
3640608   +      select(upcase(port));
3640609   +          when('DATA')     call symput('gpTrain',    strip(dataset));
3640610   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
3640611   +          when('TEST')     call symput('gpTest',     strip(dataset));
3640612   +       otherwise;
3640613   +      end;
3640614   +   run;
3640615   +   %let gpTrain =&em_lib..%sysfunc(strip(&gpTrain));
3640617   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
3640617  !+%postboostbag(groupid=&groupid, type=&looptype);
3640618   +   %else
3640619   +   %if ("&looptype" eq "GROUPINFO") %then %postgroup(groupid=&groupid,
3640619  !+type=&looptype);
3640620   +   %else
3640621   +   %if ("&looptype" eq "TARGETINFO") %then %posttarget(groupid=&groupid,
3640621  !+type=&looptype);
3640623   +   %let deleteString = &em_nodeid._path;
3640625   +   proc sort data=&em_user_path nodupkey;
3640626   +      by nodelabel;
3640627   +   run;
3640628   +   %let loopnodenum=0;
3640629   +   data _null_;
3640630   +      retain index 0;
3640631   +      set &em_user_path end=eof;
3640632   +      if nodelabel = "&groupid" or index then do;
3640633   +         index + 1;
3640634   +         call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3640635   +      end;
3640636   +      if eof then do;
3640637   +         call symput('loopnodenum', strip(put(index, best.)));
3640638   +      end;
3640639   +   run;
3640640   +   proc datasets lib=&em_lib nolist;
3640641   +      delete &deleteString;
3640642   +      delete
3640643   +      %do i = 1 %to &loopnodenum;
3640644   +          %let loopcatalog = %sysfunc(strip(&&loopnode&i))_LOOP;
3640645   +          %if %sysfunc(cexist(&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP)) %then
3640645  !+%do;
3640647   +              &loopcatalog
3640648   +          %end;
3640649   +          %if &i = &loopnodenum %then %do;
3640650   +              / mt=catalog;
3640651   +          %end;
3640652   +      %end;
3640653   +   run;
3640654   +   quit;
3640656   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
3640658   +   %if "&gpTrain" ne "" and (("&looptype" eq "BOOSTINFO") or ("&looptype" eq
3640658  !+"BAGINFO")) %then %do;
3640660   +       %let targetType = ;
3640661   +       data _null_;
3640662   +          set &endgrp_decmeta;
3640663   +          where _TYPE_='TARGET';
3640664   +          call symput('TARGETTYPE', strip(level));
3640665   +       run;
3640667   +       filename empub "&EM_FILE_EMPUBLISHSCORECODE" MOD;
3640669   +       %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow,
3640669  !+prescore=Y);
3640671   +       %if &targetType ne 'INTERVAL' %then %do;
3640672   +           %makeClassificationVars(target=&target, data=&em_export_train,
3640672  !+decmeta=&endgrp_decmeta, publish=Y, fref=empub);
3640673   +       %end;
3640675   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
3640677   +       %em_model(TARGET=&targetname, ASSESS=Y, DECSCORECODE=Y, FITSTATISTICS=Y,
3640677  !+CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3640679   +       filename empub;
3640681   +   %end;
3640683   +   %if "&gpTrain" ne "" %then
3640684   +        %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow);
3640685   +   %if "&gpValidate" ne "" %then
3640686   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),
3640686  !+out=&em_export_validate, scoreref=emflow);
3640687   +   %if "&gpTest" ne "" %then
3640688   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),
3640688  !+out=&em_export_test,     scoreref=emflow);
3640690   +   filename emflow;
3640692   +   %doendpl:
3640694   +%mend postloop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Neural2_EMINFO;
MPRINT(POSTLOOP):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 
'INDEXINFO');
MPRINT(POSTLOOP):   call symput('GROUPID', strip(data));
MPRINT(POSTLOOP):   call symput('LOOPTYPE', strip(key));
MPRINT(POSTLOOP):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
3640695   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
3640696   +   proc display c=sashelp.emcore.pathscorecode.scl;
3640697   +   run;
3640698   +%mend EM_GETTRAINPATH;
3640699   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(POSTLOOP):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Grp10_importset;
MPRINT(POSTLOOP):   select(upcase(port));
MPRINT(POSTLOOP):   when('DATA') call symput('gpTrain', strip(dataset));
MPRINT(POSTLOOP):   when('VALIDATE') call symput('gpValidate', strip(dataset));
MPRINT(POSTLOOP):   when('TEST') call symput('gpTest', strip(dataset));
MPRINT(POSTLOOP):   otherwise;
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;

NOTE: There were 15 observations read from the data set EMWS1.GRP10_IMPORTSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas";
MPRINT(POSTGROUP):   filename empub "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas";
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0;
MPRINT(POSTGROUP):   set EMWS1.Grp10_GROUPINFO end=eof;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopwhere'!!strip(put(index, best.)), 
tranwrd(strip(_wheredesc_), '"', '""'));
MPRINT(POSTGROUP):   call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
MPRINT(POSTGROUP):   if eof and substr(_WHERE_, 1, 2)='^(' then call symput('_XValidation', 
'1');
MPRINT(POSTGROUP):   run;

NOTE: There were 10 observations read from the data set EMWS1.GRP10_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   set EMWS1.Neural2_EMINFO;
MPRINT(POSTGROUP):   where key in('MODEL');
MPRINT(POSTGROUP):   call symput('grouptarget', strip(symget('grouptarget'))!!' 
'!!strip(target));
MPRINT(POSTGROUP):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=1;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12761,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
The SAS System


NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11795,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12979,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12013,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=2;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12985,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12019,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=13203,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12237,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13240,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12274,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=13463,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=12497,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=25746,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=23814,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=25964,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24032,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=3;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=25970,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24038,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=26188,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=24256,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=26225,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=24293,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=26448,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=24516,
      Last Modified=02 June 2018 17:07:42 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=38731,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=35833,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=38949,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36051,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=4;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=38955,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36057,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=39173,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=36275,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=39210,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=36312,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=39433,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=36535,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51716,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=47852,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51934,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48070,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=5;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=51940,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48076,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=52158,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=48294,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=52195,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=48331,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=52418,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=48554,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=64701,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=59871,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=64919,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60089,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=6;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=64925,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60095,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=65143,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=60313,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=65180,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=60350,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=65403,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=60573,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77686,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=71890,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77904,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72108,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=7;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77910,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72114,
      Last Modified=02 June 2018 17:07:43 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=78128,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=72332,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=78165,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=72369,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=78388,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=72592,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=90671,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=83909,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=90889,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84127,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=8;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=90895,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84133,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=91113,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=84351,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=91150,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=84388,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=91373,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=84611,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103656,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=95928,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103874,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96146,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=9;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=103880,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96152,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=104098,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=96370,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=104135,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=96407,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=104358,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=96630,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=116641,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=107947,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=116859,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108165,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=10;
MPRINT(POSTGROUP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)), 
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
      WHERE LOOPID=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=116865,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp10: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108171,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=117084,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp10_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=108390,
      Last Modified=02 June 2018 17:07:44 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=117123,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural2: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108429,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural2_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=117347,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 357 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural2_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=108653,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 318 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=129630,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp9: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=119970,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMFLOW is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=129849,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;

NOTE: The file EMPUB is:
      
      Filename=C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=120189,
      Last Modified=02 June 2018 17:07:45 o'clock,
      Create Time=02 June 2018 17:07:42 o'clock

NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTGROUP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(POSTGROUP):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS 
CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "EMWS1.TRANS2_TRAIN";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   run;

NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):   proc sort data=EMWS1.EndGrp9_PATH nodupkey;
MPRINT(POSTLOOP):   by nodelabel;
MPRINT(POSTLOOP):   run;

NOTE: There were 120 observations read from the data set EMWS1.ENDGRP9_PATH.
NOTE: 108 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.ENDGRP9_PATH has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   retain index 0;
MPRINT(POSTLOOP):   set EMWS1.EndGrp9_PATH end=eof;
MPRINT(POSTLOOP):   if nodelabel = "Grp10" or index then do;
MPRINT(POSTLOOP):   index + 1;
MPRINT(POSTLOOP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   if eof then do;
MPRINT(POSTLOOP):   call symput('loopnodenum', strip(put(index, best.)));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;

NOTE: There were 12 observations read from the data set EMWS1.ENDGRP9_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(POSTLOOP):   proc datasets lib=EMWS1 nolist;
MPRINT(POSTLOOP):   delete EndGrp9_path;
MPRINT(POSTLOOP):   delete Grp10_LOOP Neural2_LOOP / mt=catalog;
MPRINT(POSTLOOP):   run;

NOTE: Deleting EMWS1.ENDGRP9_PATH (memtype=DATA).
NOTE: Deleting EMWS1.GRP10_LOOP (memtype=CATALOG).
NOTE: Deleting EMWS1.NEURAL2_LOOP (memtype=CATALOG).
MPRINT(POSTLOOP):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

MPRINT(POSTLOOP):   filename emflow "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas" MOD;
MPRINT(SCORETABLES):   data EMWS1.EndGrp9_TRAIN / view=EMWS1.EndGrp9_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN ;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM 
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMFLOWSCORE.sas.
3640700   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3640701   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3640702   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3640703   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3640704   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3640705   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3640706   +if (cv_var =1)  then do;
MPRINT(SCORETABLES):   if (cv_var =1) then do;
3640707   +_XVAL_=1;
MPRINT(SCORETABLES):   _XVAL_=1;
3640708   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3640709   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3640710   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3640711   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3640712   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3640713   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3640714   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3640715   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3640716   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3640717   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3640718   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3640719   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3640720   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3640721   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3640722   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3640723   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3640724   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3640725   +LENGTH _WARN_ $4
3640726   +      F_DepVar  $ 12
3640727   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3640728   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3640729   +
3640730   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3640731   +
3640732   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3640733   +
3640734   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3640735   +
3640736   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3640737   +
3640738   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3640739   +
3640740   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3640741   +
3640742   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3640743   +
3640744   +      label S_RANGE_campaign_acceptance =
3640745   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3640746   +
3640747   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3640748   +
3640749   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3640750   +
3640751   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3640752   +
3640753   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3640754   +
3640755   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3640756   +
3640757   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3640758   +
3640759   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3640760   +
3640761   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3640762   +
3640763   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3640764   +
3640765   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3640766   +
3640767   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3640768   +
3640769   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3640770   +
3640771   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3640772   +
3640773   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3640774   +
3640775   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3640776   +
3640777   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3640778   +
3640779   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3640780   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3640781   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3640782   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3640783   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3640784   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3640785   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3640786   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3640787   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3640788   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3640789   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3640790   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3640791   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3640792   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3640793   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3640794   +end;
MPRINT(SCORETABLES):   end;
3640795   +else do;
MPRINT(SCORETABLES):   else do;
3640796   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3640797   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3640798   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3640799   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3640800   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3640801   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3640802   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3640803   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3640804   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3640805   +         end;
MPRINT(SCORETABLES):   end;
3640806   +         else do;
MPRINT(SCORETABLES):   else do;
3640807   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3640808   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3640809   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3640810   +            end;
MPRINT(SCORETABLES):   end;
3640811   +         end;
MPRINT(SCORETABLES):   end;
3640812   +      end;
MPRINT(SCORETABLES):   end;
3640813   +      else do;
MPRINT(SCORETABLES):   else do;
3640814   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3640815   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3640816   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3640817   +         end;
MPRINT(SCORETABLES):   end;
3640818   +      end;
MPRINT(SCORETABLES):   end;
3640819   +   end;
MPRINT(SCORETABLES):   end;
3640820   +   else do;
MPRINT(SCORETABLES):   else do;
3640821   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3640822   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3640823   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3640824   +      end;
MPRINT(SCORETABLES):   end;
3640825   +      else do;
MPRINT(SCORETABLES):   else do;
3640826   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3640827   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3640828   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3640829   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3640830   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3640831   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3640832   +         end;
MPRINT(SCORETABLES):   end;
3640833   +      end;
MPRINT(SCORETABLES):   end;
3640834   +   end;
MPRINT(SCORETABLES):   end;
3640835   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3640836   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3640837   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3640838   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3640839   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3640840   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3640841   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3640842   +   end;
MPRINT(SCORETABLES):   end;
3640843   +end;
MPRINT(SCORETABLES):   end;
3640844   +
3640845   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640846   +*** Checking missing input Interval
3640847   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3640848   +
3640849   +IF NMISS(
3640850   +   MntCard_Games ,
3640851   +   MntMagazines ,
3640852   +   NumCatalogPurchases ,
3640853   +   NumDealsPurchases ,
3640854   +   NumWebPurchases ,
3640855   +   RANGE_Frq ,
3640856   +   RANGE_Recency ,
3640857   +   RANGE_average_purchase ,
3640858   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3640859   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3640860   +
3640861   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3640862   +END;
MPRINT(SCORETABLES):   END;
3640863   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640864   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3640865   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640866   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3640867   +   S_MntCard_Games  =    -2.31156446837705 +     6.59510598470666 *
3640868   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31156446837705 + 6.59510598470666 * MntCard_Games ;
3640869   +   S_MntMagazines  =    -0.82993850659197 +     17.3846945258151 *
3640870   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.82993850659197 + 17.3846945258151 * MntMagazines ;
3640871   +   S_NumCatalogPurchases  =    -3.15540482510862 +     13.6557751567801 *
3640872   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.15540482510862 + 13.6557751567801 * 
NumCatalogPurchases ;
3640873   +   S_NumDealsPurchases  =    -1.41430705305169 +     11.2350305819106 *
3640874   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41430705305169 + 11.2350305819106 * 
NumDealsPurchases ;
3640875   +   S_NumWebPurchases  =    -5.22401826640554 +     12.2322889441397 *
3640876   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22401826640554 + 12.2322889441397 * 
NumWebPurchases ;
3640877   +   S_RANGE_Frq  =     -1.3635769086371 +      4.2067525778295 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3635769086371 + 4.2067525778295 * RANGE_Frq ;
3640878   +   S_RANGE_Recency  =    -1.65294838876447 +     3.33689398469268 *
3640879   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65294838876447 + 3.33689398469268 * RANGE_Recency ;
3640880   +   S_RANGE_average_purchase  =    -1.04269542246556 +     5.17302041258597 *
3640881   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04269542246556 + 5.17302041258597 * 
RANGE_average_purchase ;
3640882   +   S_RANGE_campaign_acceptance
3640883   +          =    -0.47488645208526 +     5.72215312278801 *
3640884   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47488645208526 + 5.72215312278801 * 
RANGE_campaign_acceptance ;
3640885   +END;
MPRINT(SCORETABLES):   END;
3640886   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3640887   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3640888   +   ELSE S_MntCard_Games  =    -2.31156446837705 +     6.59510598470666 *
3640889   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31156446837705 + 6.59510598470666 * 
MntCard_Games ;
3640890   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3640891   +   ELSE S_MntMagazines  =    -0.82993850659197 +     17.3846945258151 *
3640892   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.82993850659197 + 17.3846945258151 * 
MntMagazines ;
3640893   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3640894   +   ELSE S_NumCatalogPurchases
3640895   +          =    -3.15540482510862 +     13.6557751567801 * NumCatalogPurchases
3640896   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.15540482510862 + 13.6557751567801 * 
NumCatalogPurchases ;
3640897   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3640898   +   ELSE S_NumDealsPurchases  =    -1.41430705305169 +     11.2350305819106 *
3640899   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41430705305169 + 11.2350305819106 * 
NumDealsPurchases ;
3640900   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3640901   +   ELSE S_NumWebPurchases  =    -5.22401826640554 +     12.2322889441397 *
3640902   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22401826640554 + 12.2322889441397 * 
NumWebPurchases ;
3640903   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3640904   +   ELSE S_RANGE_Frq  =     -1.3635769086371 +      4.2067525778295 * RANGE_Frq
3640905   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3635769086371 + 4.2067525778295 * RANGE_Frq ;
3640906   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3640907   +   ELSE S_RANGE_Recency  =    -1.65294838876447 +     3.33689398469268 *
3640908   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65294838876447 + 3.33689398469268 * 
RANGE_Recency ;
3640909   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3640910   +   ELSE S_RANGE_average_purchase
3640911   +          =    -1.04269542246556 +     5.17302041258597 *
3640912   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04269542246556 + 5.17302041258597 * 
RANGE_average_purchase ;
3640913   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3640914   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3640915   +   ELSE S_RANGE_campaign_acceptance
3640916   +          =    -0.47488645208526 +     5.72215312278801 *
3640917   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47488645208526 + 5.72215312278801 
* RANGE_campaign_acceptance ;
3640918   +END;
MPRINT(SCORETABLES):   END;
3640919   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640920   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3640921   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640922   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640923   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3640924   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640925   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3640926   +   H11  =    -0.21518959167306 * S_MntCard_Games  +    -0.06210359507781 *
3640927   +        S_MntMagazines  +    -0.15339706576075 * S_NumCatalogPurchases
3640928   +          +    -0.38045852747142 * S_NumDealsPurchases
3640929   +          +     0.59413199714834 * S_NumWebPurchases
3640930   +          +     0.23007089510057 * S_RANGE_Frq  +    -0.16820047282594 *
3640931   +        S_RANGE_Recency  +    -0.89061224128405 * S_RANGE_average_purchase
3640932   +          +    -0.56656141645824 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.21518959167306 * S_MntCard_Games + -0.06210359507781 * 
S_MntMagazines + -0.15339706576075 * S_NumCatalogPurchases + -0.38045852747142 * 
S_NumDealsPurchases + 0.59413199714834 * S_NumWebPurchases + 0.23007089510057 * S_RANGE_Frq + 
-0.16820047282594 * S_RANGE_Recency + -0.89061224128405 * S_RANGE_average_purchase + 
-0.56656141645824 * S_RANGE_campaign_acceptance ;
3640933   +   H12  =     1.57324601394081 * S_MntCard_Games  +     0.01880934238358 *
3640934   +        S_MntMagazines  +     0.91450968850396 * S_NumCatalogPurchases
3640935   +          +     1.01115474425001 * S_NumDealsPurchases
3640936   +          +     1.64341577325068 * S_NumWebPurchases
3640937   +          +     0.90539411141058 * S_RANGE_Frq  +     -2.0650626557677 *
3640938   +        S_RANGE_Recency  +     0.22010826704989 * S_RANGE_average_purchase
3640939   +          +     1.25932492895052 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.57324601394081 * S_MntCard_Games + 0.01880934238358 * 
S_MntMagazines + 0.91450968850396 * S_NumCatalogPurchases + 1.01115474425001 * 
S_NumDealsPurchases + 1.64341577325068 * S_NumWebPurchases + 0.90539411141058 * S_RANGE_Frq + 
-2.0650626557677 * S_RANGE_Recency + 0.22010826704989 * S_RANGE_average_purchase + 
1.25932492895052 * S_RANGE_campaign_acceptance ;
3640940   +   H13  =     1.83336756007907 * S_MntCard_Games  +     0.65486066189603 *
3640941   +        S_MntMagazines  +     4.46769074723863 * S_NumCatalogPurchases
3640942   +          +     1.68406266070005 * S_NumDealsPurchases
3640943   +          +     1.87559563692737 * S_NumWebPurchases
3640944   +          +      0.8262151835222 * S_RANGE_Frq  +    -5.72210305269959 *
3640945   +        S_RANGE_Recency  +     -0.5165708462315 * S_RANGE_average_purchase
3640946   +          +     1.36397011253976 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 1.83336756007907 * S_MntCard_Games + 0.65486066189603 * 
S_MntMagazines + 4.46769074723863 * S_NumCatalogPurchases + 1.68406266070005 * 
S_NumDealsPurchases + 1.87559563692737 * S_NumWebPurchases + 0.8262151835222 * S_RANGE_Frq + 
-5.72210305269959 * S_RANGE_Recency + -0.5165708462315 * S_RANGE_average_purchase + 
1.36397011253976 * S_RANGE_campaign_acceptance ;
3640947   +   H14  =     0.35996337027488 * S_MntCard_Games  +    -0.19562528281173 *
3640948   +        S_MntMagazines  +     0.25988025229605 * S_NumCatalogPurchases
3640949   +          +     0.35946834558513 * S_NumDealsPurchases
3640950   +          +     0.25751527569426 * S_NumWebPurchases
3640951   +          +     -0.0156487278754 * S_RANGE_Frq  +    -1.08495198963965 *
3640952   +        S_RANGE_Recency  +    -0.81074974773725 * S_RANGE_average_purchase
3640953   +          +     0.40813406121972 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 0.35996337027488 * S_MntCard_Games + -0.19562528281173 * 
S_MntMagazines + 0.25988025229605 * S_NumCatalogPurchases + 0.35946834558513 * 
S_NumDealsPurchases + 0.25751527569426 * S_NumWebPurchases + -0.0156487278754 * S_RANGE_Frq + 
-1.08495198963965 * S_RANGE_Recency + -0.81074974773725 * S_RANGE_average_purchase + 
0.40813406121972 * S_RANGE_campaign_acceptance ;
3640954   +   H11  = H11  +     0.01845333133098 * Marital_StatusDivorced
3640955   +          +    -0.45887454163869 * Marital_StatusMarried
3640956   +          +     0.32296933208625 * Marital_StatusSingle
3640957   +          +     0.09195193602454 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.01845333133098 * Marital_StatusDivorced + 
-0.45887454163869 * Marital_StatusMarried + 0.32296933208625 * Marital_StatusSingle + 
0.09195193602454 * Marital_StatusTogether ;
3640958   +   H12  = H12  +     0.77410211017628 * Marital_StatusDivorced
3640959   +          +    -0.05361702587662 * Marital_StatusMarried
3640960   +          +    -0.24853964359431 * Marital_StatusSingle
3640961   +          +    -0.53898299587562 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.77410211017628 * Marital_StatusDivorced + 
-0.05361702587662 * Marital_StatusMarried + -0.24853964359431 * Marital_StatusSingle + 
-0.53898299587562 * Marital_StatusTogether ;
3640962   +   H13  = H13  +    -2.08543813171107 * Marital_StatusDivorced
3640963   +          +     -0.1553040328917 * Marital_StatusMarried
3640964   +          +     1.19233727033357 * Marital_StatusSingle
3640965   +          +     0.56143018434213 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -2.08543813171107 * Marital_StatusDivorced + 
-0.1553040328917 * Marital_StatusMarried + 1.19233727033357 * Marital_StatusSingle + 
0.56143018434213 * Marital_StatusTogether ;
3640966   +   H14  = H14  +     1.19120627670676 * Marital_StatusDivorced
3640967   +          +    -1.54455745098084 * Marital_StatusMarried
3640968   +          +      1.1036952308067 * Marital_StatusSingle
3640969   +          +       -1.30072673594 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 1.19120627670676 * Marital_StatusDivorced + 
-1.54455745098084 * Marital_StatusMarried + 1.1036952308067 * Marital_StatusSingle + 
-1.30072673594 * Marital_StatusTogether ;
3640970   +   H11  =     1.42107314783708 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.42107314783708 + H11 ;
3640971   +   H12  =    -4.18133415476034 + H12 ;
MPRINT(SCORETABLES):   H12 = -4.18133415476034 + H12 ;
3640972   +   H13  =    -4.42926954372448 + H13 ;
MPRINT(SCORETABLES):   H13 = -4.42926954372448 + H13 ;
3640973   +   H14  =     0.39909521124273 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.39909521124273 + H14 ;
3640974   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3640975   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3640976   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3640977   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3640978   +END;
MPRINT(SCORETABLES):   END;
3640979   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3640980   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3640981   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3640982   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3640983   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3640984   +END;
MPRINT(SCORETABLES):   END;
3640985   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640986   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3640987   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3640988   +
3640989   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3640990   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3640991   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3640992   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3640993   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3640994   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3640995   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3640996   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3640997   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3640998   +end;
MPRINT(SCORETABLES):   end;
3640999   +else do;
MPRINT(SCORETABLES):   else do;
3641000   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3641001   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3641002   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3641003   +   end;
MPRINT(SCORETABLES):   end;
3641004   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3641005   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3641006   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3641007   +   end;
MPRINT(SCORETABLES):   end;
3641008   +   else do;
MPRINT(SCORETABLES):   else do;
3641009   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3641010   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3641011   +   end;
MPRINT(SCORETABLES):   end;
3641012   +end;
MPRINT(SCORETABLES):   end;
3641013   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641014   +   P_DepVar1  =    -7.06698666350446 * H11  +     2.91919266415309 * H12
3641015   +          +     3.01712564757281 * H13  +      6.5321791367424 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -7.06698666350446 * H11 + 2.91919266415309 * H12 + 
3.01712564757281 * H13 + 6.5321791367424 * H14 ;
3641016   +   P_DepVar1  =    -1.30062463195005 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.30062463195005 + P_DepVar1 ;
3641017   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3641018   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3641019   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3641020   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3641021   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3641022   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3641023   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3641024   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3641025   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3641026   +END;
MPRINT(SCORETABLES):   END;
3641027   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641028   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3641029   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3641030   +END;
MPRINT(SCORETABLES):   END;
3641031   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3641032   +   P_DepVar1  =     0.13881278538812;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13881278538812;
3641033   +   P_DepVar0  =     0.86118721461187;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86118721461187;
3641034   +END;
MPRINT(SCORETABLES):   END;
3641035   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3641036   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3641037   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3641038   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3641039   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3641040   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3641041   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3641042   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641043   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3641044   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641045   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3641046   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3641047   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3641048   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3641049   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3641050   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3641051   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3641052   +END;
MPRINT(SCORETABLES):   END;
3641053   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641054   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3641055   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641056   +drop
3641057   +S_MntCard_Games
3641058   +S_MntMagazines
3641059   +S_NumCatalogPurchases
3641060   +S_NumDealsPurchases
3641061   +S_NumWebPurchases
3641062   +S_RANGE_Frq
3641063   +S_RANGE_Recency
3641064   +S_RANGE_average_purchase
3641065   +S_RANGE_campaign_acceptance
3641066   +H11
3641067   +H12
3641068   +H13
3641069   +H14
3641070   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3641071   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641072   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3641073   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641074   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641075   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3641076   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641077   +end;
MPRINT(SCORETABLES):   end;
3641078   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641079   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3641080   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641081   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641082   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3641083   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641084   +if (cv_var =2)  then do;
MPRINT(SCORETABLES):   if (cv_var =2) then do;
3641085   +_XVAL_=2;
MPRINT(SCORETABLES):   _XVAL_=2;
3641086   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641087   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3641088   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641089   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641090   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3641091   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641092   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641093   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3641094   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641095   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3641096   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3641097   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3641098   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3641099   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3641100   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3641101   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3641102   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3641103   +LENGTH _WARN_ $4
3641104   +      F_DepVar  $ 12
3641105   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3641106   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3641107   +
3641108   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3641109   +
3641110   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3641111   +
3641112   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3641113   +
3641114   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3641115   +
3641116   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3641117   +
3641118   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3641119   +
3641120   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3641121   +
3641122   +      label S_RANGE_campaign_acceptance =
3641123   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3641124   +
3641125   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3641126   +
3641127   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3641128   +
3641129   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3641130   +
3641131   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3641132   +
3641133   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3641134   +
3641135   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3641136   +
3641137   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3641138   +
3641139   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3641140   +
3641141   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3641142   +
3641143   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3641144   +
3641145   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3641146   +
3641147   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3641148   +
3641149   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3641150   +
3641151   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3641152   +
3641153   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3641154   +
3641155   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3641156   +
3641157   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3641158   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3641159   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3641160   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3641161   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3641162   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3641163   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3641164   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3641165   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3641166   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641167   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641168   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641169   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641170   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3641171   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641172   +end;
MPRINT(SCORETABLES):   end;
3641173   +else do;
MPRINT(SCORETABLES):   else do;
3641174   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3641175   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3641176   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3641177   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3641178   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3641179   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3641180   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3641181   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3641182   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641183   +         end;
MPRINT(SCORETABLES):   end;
3641184   +         else do;
MPRINT(SCORETABLES):   else do;
3641185   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3641186   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3641187   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641188   +            end;
MPRINT(SCORETABLES):   end;
3641189   +         end;
MPRINT(SCORETABLES):   end;
3641190   +      end;
MPRINT(SCORETABLES):   end;
3641191   +      else do;
MPRINT(SCORETABLES):   else do;
3641192   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3641193   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3641194   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641195   +         end;
MPRINT(SCORETABLES):   end;
3641196   +      end;
MPRINT(SCORETABLES):   end;
3641197   +   end;
MPRINT(SCORETABLES):   end;
3641198   +   else do;
MPRINT(SCORETABLES):   else do;
3641199   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3641200   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3641201   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641202   +      end;
MPRINT(SCORETABLES):   end;
3641203   +      else do;
MPRINT(SCORETABLES):   else do;
3641204   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3641205   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3641206   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3641207   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3641208   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3641209   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641210   +         end;
MPRINT(SCORETABLES):   end;
3641211   +      end;
MPRINT(SCORETABLES):   end;
3641212   +   end;
MPRINT(SCORETABLES):   end;
3641213   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3641214   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641215   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641216   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641217   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641218   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3641219   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641220   +   end;
MPRINT(SCORETABLES):   end;
3641221   +end;
MPRINT(SCORETABLES):   end;
3641222   +
3641223   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641224   +*** Checking missing input Interval
3641225   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3641226   +
3641227   +IF NMISS(
3641228   +   MntCard_Games ,
3641229   +   MntMagazines ,
3641230   +   NumCatalogPurchases ,
3641231   +   NumDealsPurchases ,
3641232   +   NumWebPurchases ,
3641233   +   RANGE_Frq ,
3641234   +   RANGE_Recency ,
3641235   +   RANGE_average_purchase ,
3641236   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3641237   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3641238   +
3641239   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641240   +END;
MPRINT(SCORETABLES):   END;
3641241   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641242   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3641243   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641244   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641245   +   S_MntCard_Games  =     -2.3314771633274 +     6.67100502055196 *
3641246   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3314771633274 + 6.67100502055196 * MntCard_Games ;
3641247   +   S_MntMagazines  =    -0.83638305485207 +     17.4475268444983 *
3641248   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83638305485207 + 17.4475268444983 * MntMagazines ;
3641249   +   S_NumCatalogPurchases  =    -3.11226970633025 +     13.4853011673147 *
3641250   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11226970633025 + 13.4853011673147 * 
NumCatalogPurchases ;
3641251   +   S_NumDealsPurchases  =     -1.4130845582166 +     11.1389570401509 *
3641252   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.4130845582166 + 11.1389570401509 * 
NumDealsPurchases ;
3641253   +   S_NumWebPurchases  =    -5.21604554420205 +     12.2533885502562 *
3641254   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21604554420205 + 12.2533885502562 * 
NumWebPurchases ;
3641255   +   S_RANGE_Frq  =    -1.37131150947471 +     4.23296862557682 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37131150947471 + 4.23296862557682 * RANGE_Frq ;
3641256   +   S_RANGE_Recency  =     -1.6802354044387 +     3.35515556979043 *
3641257   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6802354044387 + 3.35515556979043 * RANGE_Recency ;
3641258   +   S_RANGE_average_purchase  =    -1.03596514755581 +     5.12642322504067 *
3641259   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03596514755581 + 5.12642322504067 * 
RANGE_average_purchase ;
3641260   +   S_RANGE_campaign_acceptance
3641261   +          =    -0.47461743142322 +     5.75062782560987 *
3641262   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47461743142322 + 5.75062782560987 * 
RANGE_campaign_acceptance ;
3641263   +END;
MPRINT(SCORETABLES):   END;
3641264   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641265   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3641266   +   ELSE S_MntCard_Games  =     -2.3314771633274 +     6.67100502055196 *
3641267   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3314771633274 + 6.67100502055196 * 
MntCard_Games ;
3641268   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3641269   +   ELSE S_MntMagazines  =    -0.83638305485207 +     17.4475268444983 *
3641270   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83638305485207 + 17.4475268444983 * 
MntMagazines ;
3641271   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3641272   +   ELSE S_NumCatalogPurchases
3641273   +          =    -3.11226970633025 +     13.4853011673147 * NumCatalogPurchases
3641274   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11226970633025 + 13.4853011673147 * 
NumCatalogPurchases ;
3641275   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3641276   +   ELSE S_NumDealsPurchases  =     -1.4130845582166 +     11.1389570401509 *
3641277   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.4130845582166 + 11.1389570401509 * 
NumDealsPurchases ;
3641278   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3641279   +   ELSE S_NumWebPurchases  =    -5.21604554420205 +     12.2533885502562 *
3641280   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21604554420205 + 12.2533885502562 * 
NumWebPurchases ;
3641281   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3641282   +   ELSE S_RANGE_Frq  =    -1.37131150947471 +     4.23296862557682 * RANGE_Frq
3641283   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37131150947471 + 4.23296862557682 * RANGE_Frq ;
3641284   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3641285   +   ELSE S_RANGE_Recency  =     -1.6802354044387 +     3.35515556979043 *
3641286   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6802354044387 + 3.35515556979043 * 
RANGE_Recency ;
3641287   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3641288   +   ELSE S_RANGE_average_purchase
3641289   +          =    -1.03596514755581 +     5.12642322504067 *
3641290   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03596514755581 + 5.12642322504067 * 
RANGE_average_purchase ;
3641291   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3641292   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3641293   +   ELSE S_RANGE_campaign_acceptance
3641294   +          =    -0.47461743142322 +     5.75062782560987 *
3641295   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47461743142322 + 5.75062782560987 
* RANGE_campaign_acceptance ;
3641296   +END;
MPRINT(SCORETABLES):   END;
3641297   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641298   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3641299   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641300   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641301   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3641302   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641303   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641304   +   H11  =    -0.58664407240649 * S_MntCard_Games  +     0.04427564019395 *
3641305   +        S_MntMagazines  +    -0.21259311204646 * S_NumCatalogPurchases
3641306   +          +    -0.46686820572644 * S_NumDealsPurchases
3641307   +          +    -0.15770585887476 * S_NumWebPurchases
3641308   +          +    -0.11449695255476 * S_RANGE_Frq  +      0.8499404568581 *
3641309   +        S_RANGE_Recency  +    -0.13948699525353 * S_RANGE_average_purchase
3641310   +          +    -0.76495470450703 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.58664407240649 * S_MntCard_Games + 0.04427564019395 * 
S_MntMagazines + -0.21259311204646 * S_NumCatalogPurchases + -0.46686820572644 * 
S_NumDealsPurchases + -0.15770585887476 * S_NumWebPurchases + -0.11449695255476 * S_RANGE_Frq 
+ 0.8499404568581 * S_RANGE_Recency + -0.13948699525353 * S_RANGE_average_purchase + 
-0.76495470450703 * S_RANGE_campaign_acceptance ;
3641311   +   H12  =     1.81486396170524 * S_MntCard_Games  +     0.89214424845629 *
3641312   +        S_MntMagazines  +     3.84695329004798 * S_NumCatalogPurchases
3641313   +          +     1.80491922996454 * S_NumDealsPurchases
3641314   +          +     0.59814719869096 * S_NumWebPurchases
3641315   +          +    -2.42719797402168 * S_RANGE_Frq  +    -2.09736702614838 *
3641316   +        S_RANGE_Recency  +     1.02783455289949 * S_RANGE_average_purchase
3641317   +          +     1.03548138383238 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.81486396170524 * S_MntCard_Games + 0.89214424845629 * 
S_MntMagazines + 3.84695329004798 * S_NumCatalogPurchases + 1.80491922996454 * 
S_NumDealsPurchases + 0.59814719869096 * S_NumWebPurchases + -2.42719797402168 * S_RANGE_Frq + 
-2.09736702614838 * S_RANGE_Recency + 1.02783455289949 * S_RANGE_average_purchase + 
1.03548138383238 * S_RANGE_campaign_acceptance ;
3641318   +   H13  =    -0.85391689715481 * S_MntCard_Games  +     -0.0386560888973 *
3641319   +        S_MntMagazines  +    -1.92483406816729 * S_NumCatalogPurchases
3641320   +          +    -0.03033489439656 * S_NumDealsPurchases
3641321   +          +    -1.40978645360092 * S_NumWebPurchases
3641322   +          +     0.60151449683119 * S_RANGE_Frq  +     1.89189484705669 *
3641323   +        S_RANGE_Recency  +    -4.88017912936048 * S_RANGE_average_purchase
3641324   +          +    -0.72511777397619 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.85391689715481 * S_MntCard_Games + -0.0386560888973 * 
S_MntMagazines + -1.92483406816729 * S_NumCatalogPurchases + -0.03033489439656 * 
S_NumDealsPurchases + -1.40978645360092 * S_NumWebPurchases + 0.60151449683119 * S_RANGE_Frq + 
1.89189484705669 * S_RANGE_Recency + -4.88017912936048 * S_RANGE_average_purchase + 
-0.72511777397619 * S_RANGE_campaign_acceptance ;
3641325   +   H14  =    -0.43485028402545 * S_MntCard_Games  +     0.64172222839884 *
3641326   +        S_MntMagazines  +     -0.8784281996428 * S_NumCatalogPurchases
3641327   +          +    -2.24916526286567 * S_NumDealsPurchases
3641328   +          +    -0.68554758569158 * S_NumWebPurchases
3641329   +          +    -0.78258120150609 * S_RANGE_Frq  +     2.01136757259804 *
3641330   +        S_RANGE_Recency  +     0.67073472368748 * S_RANGE_average_purchase
3641331   +          +    -0.52719957093529 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.43485028402545 * S_MntCard_Games + 0.64172222839884 * 
S_MntMagazines + -0.8784281996428 * S_NumCatalogPurchases + -2.24916526286567 * 
S_NumDealsPurchases + -0.68554758569158 * S_NumWebPurchases + -0.78258120150609 * S_RANGE_Frq 
+ 2.01136757259804 * S_RANGE_Recency + 0.67073472368748 * S_RANGE_average_purchase + 
-0.52719957093529 * S_RANGE_campaign_acceptance ;
3641332   +   H11  = H11  +    -0.32712535342374 * Marital_StatusDivorced
3641333   +          +     0.06559123499575 * Marital_StatusMarried
3641334   +          +    -0.12829467892161 * Marital_StatusSingle
3641335   +          +     0.36484202419169 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.32712535342374 * Marital_StatusDivorced + 
0.06559123499575 * Marital_StatusMarried + -0.12829467892161 * Marital_StatusSingle + 
0.36484202419169 * Marital_StatusTogether ;
3641336   +   H12  = H12  +    -0.10405533552018 * Marital_StatusDivorced
3641337   +          +    -2.36230210800026 * Marital_StatusMarried
3641338   +          +     2.18091126929848 * Marital_StatusSingle
3641339   +          +    -0.54203498360915 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.10405533552018 * Marital_StatusDivorced + 
-2.36230210800026 * Marital_StatusMarried + 2.18091126929848 * Marital_StatusSingle + 
-0.54203498360915 * Marital_StatusTogether ;
3641340   +   H13  = H13  +     1.18422430961868 * Marital_StatusDivorced
3641341   +          +     0.61187170284031 * Marital_StatusMarried
3641342   +          +     0.90844802365293 * Marital_StatusSingle
3641343   +          +    -0.77529471575804 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 1.18422430961868 * Marital_StatusDivorced + 
0.61187170284031 * Marital_StatusMarried + 0.90844802365293 * Marital_StatusSingle + 
-0.77529471575804 * Marital_StatusTogether ;
3641344   +   H14  = H14  +    -1.05629915889261 * Marital_StatusDivorced
3641345   +          +     1.72560959666488 * Marital_StatusMarried
3641346   +          +    -1.28333761282975 * Marital_StatusSingle
3641347   +          +     2.07957856063684 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -1.05629915889261 * Marital_StatusDivorced + 
1.72560959666488 * Marital_StatusMarried + -1.28333761282975 * Marital_StatusSingle + 
2.07957856063684 * Marital_StatusTogether ;
3641348   +   H11  =     1.67589148012169 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.67589148012169 + H11 ;
3641349   +   H12  =     0.63851137696779 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.63851137696779 + H12 ;
3641350   +   H13  =    -1.92524390148602 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.92524390148602 + H13 ;
3641351   +   H14  =    -1.83061373272693 + H14 ;
MPRINT(SCORETABLES):   H14 = -1.83061373272693 + H14 ;
3641352   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3641353   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3641354   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3641355   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3641356   +END;
MPRINT(SCORETABLES):   END;
3641357   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641358   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3641359   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3641360   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3641361   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3641362   +END;
MPRINT(SCORETABLES):   END;
3641363   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641364   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3641365   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641366   +
3641367   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3641368   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3641369   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3641370   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3641371   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3641372   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3641373   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3641374   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3641375   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3641376   +end;
MPRINT(SCORETABLES):   end;
3641377   +else do;
MPRINT(SCORETABLES):   else do;
3641378   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3641379   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3641380   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3641381   +   end;
MPRINT(SCORETABLES):   end;
3641382   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3641383   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3641384   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3641385   +   end;
MPRINT(SCORETABLES):   end;
3641386   +   else do;
MPRINT(SCORETABLES):   else do;
3641387   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3641388   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3641389   +   end;
MPRINT(SCORETABLES):   end;
3641390   +end;
MPRINT(SCORETABLES):   end;
3641391   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641392   +   P_DepVar1  =     -5.2259920780657 * H11  +     2.57293676402231 * H12
3641393   +          +     -2.8734803860115 * H13  +    -3.76254580589513 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.2259920780657 * H11 + 2.57293676402231 * H12 + 
-2.8734803860115 * H13 + -3.76254580589513 * H14 ;
3641394   +   P_DepVar1  =    -6.67432248025566 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -6.67432248025566 + P_DepVar1 ;
3641395   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3641396   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3641397   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3641398   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3641399   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3641400   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3641401   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3641402   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3641403   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3641404   +END;
MPRINT(SCORETABLES):   END;
3641405   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641406   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3641407   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3641408   +END;
MPRINT(SCORETABLES):   END;
3641409   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3641410   +   P_DepVar1  =     0.13534522176497;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13534522176497;
3641411   +   P_DepVar0  =     0.86465477823502;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86465477823502;
3641412   +END;
MPRINT(SCORETABLES):   END;
3641413   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3641414   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3641415   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3641416   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3641417   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3641418   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3641419   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3641420   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641421   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3641422   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641423   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3641424   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3641425   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3641426   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3641427   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3641428   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3641429   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3641430   +END;
MPRINT(SCORETABLES):   END;
3641431   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641432   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3641433   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641434   +drop
3641435   +S_MntCard_Games
3641436   +S_MntMagazines
3641437   +S_NumCatalogPurchases
3641438   +S_NumDealsPurchases
3641439   +S_NumWebPurchases
3641440   +S_RANGE_Frq
3641441   +S_RANGE_Recency
3641442   +S_RANGE_average_purchase
3641443   +S_RANGE_campaign_acceptance
3641444   +H11
3641445   +H12
3641446   +H13
3641447   +H14
3641448   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3641449   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641450   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3641451   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641452   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641453   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3641454   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641455   +end;
MPRINT(SCORETABLES):   end;
3641456   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641457   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3641458   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641459   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641460   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3641461   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641462   +if (cv_var =3)  then do;
MPRINT(SCORETABLES):   if (cv_var =3) then do;
3641463   +_XVAL_=3;
MPRINT(SCORETABLES):   _XVAL_=3;
3641464   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641465   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3641466   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641467   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641468   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3641469   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641470   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641471   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3641472   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641473   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3641474   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3641475   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3641476   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3641477   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3641478   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3641479   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3641480   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3641481   +LENGTH _WARN_ $4
3641482   +      F_DepVar  $ 12
3641483   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3641484   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3641485   +
3641486   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3641487   +
3641488   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3641489   +
3641490   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3641491   +
3641492   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3641493   +
3641494   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3641495   +
3641496   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3641497   +
3641498   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3641499   +
3641500   +      label S_RANGE_campaign_acceptance =
3641501   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3641502   +
3641503   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3641504   +
3641505   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3641506   +
3641507   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3641508   +
3641509   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3641510   +
3641511   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3641512   +
3641513   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3641514   +
3641515   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3641516   +
3641517   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3641518   +
3641519   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3641520   +
3641521   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3641522   +
3641523   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3641524   +
3641525   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3641526   +
3641527   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3641528   +
3641529   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3641530   +
3641531   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3641532   +
3641533   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3641534   +
3641535   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3641536   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3641537   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3641538   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3641539   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3641540   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3641541   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3641542   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3641543   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3641544   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641545   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641546   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641547   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641548   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3641549   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641550   +end;
MPRINT(SCORETABLES):   end;
3641551   +else do;
MPRINT(SCORETABLES):   else do;
3641552   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3641553   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3641554   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3641555   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3641556   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3641557   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3641558   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3641559   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3641560   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641561   +         end;
MPRINT(SCORETABLES):   end;
3641562   +         else do;
MPRINT(SCORETABLES):   else do;
3641563   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3641564   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3641565   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641566   +            end;
MPRINT(SCORETABLES):   end;
3641567   +         end;
MPRINT(SCORETABLES):   end;
3641568   +      end;
MPRINT(SCORETABLES):   end;
3641569   +      else do;
MPRINT(SCORETABLES):   else do;
3641570   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3641571   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3641572   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641573   +         end;
MPRINT(SCORETABLES):   end;
3641574   +      end;
MPRINT(SCORETABLES):   end;
3641575   +   end;
MPRINT(SCORETABLES):   end;
3641576   +   else do;
MPRINT(SCORETABLES):   else do;
3641577   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3641578   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3641579   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641580   +      end;
MPRINT(SCORETABLES):   end;
3641581   +      else do;
MPRINT(SCORETABLES):   else do;
3641582   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3641583   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3641584   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3641585   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3641586   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3641587   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641588   +         end;
MPRINT(SCORETABLES):   end;
3641589   +      end;
MPRINT(SCORETABLES):   end;
3641590   +   end;
MPRINT(SCORETABLES):   end;
3641591   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3641592   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641593   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641594   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641595   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641596   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3641597   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641598   +   end;
MPRINT(SCORETABLES):   end;
3641599   +end;
MPRINT(SCORETABLES):   end;
3641600   +
3641601   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641602   +*** Checking missing input Interval
3641603   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3641604   +
3641605   +IF NMISS(
3641606   +   MntCard_Games ,
3641607   +   MntMagazines ,
3641608   +   NumCatalogPurchases ,
3641609   +   NumDealsPurchases ,
3641610   +   NumWebPurchases ,
3641611   +   RANGE_Frq ,
3641612   +   RANGE_Recency ,
3641613   +   RANGE_average_purchase ,
3641614   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3641615   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3641616   +
3641617   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641618   +END;
MPRINT(SCORETABLES):   END;
3641619   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641620   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3641621   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641622   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641623   +   S_MntCard_Games  =    -2.31546327157414 +     6.63981708621388 *
3641624   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31546327157414 + 6.63981708621388 * MntCard_Games ;
3641625   +   S_MntMagazines  =    -0.83545276379253 +     17.2809026314296 *
3641626   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83545276379253 + 17.2809026314296 * MntMagazines ;
3641627   +   S_NumCatalogPurchases  =    -3.11826971063088 +     13.4823557193844 *
3641628   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11826971063088 + 13.4823557193844 * 
NumCatalogPurchases ;
3641629   +   S_NumDealsPurchases  =    -1.40785748867734 +     11.2393331689822 *
3641630   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40785748867734 + 11.2393331689822 * 
NumDealsPurchases ;
3641631   +   S_NumWebPurchases  =    -5.24017296813187 +     12.2988257493464 *
3641632   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.24017296813187 + 12.2988257493464 * 
NumWebPurchases ;
3641633   +   S_RANGE_Frq  =    -1.36310014060474 +     4.21335720799254 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36310014060474 + 4.21335720799254 * RANGE_Frq ;
3641634   +   S_RANGE_Recency  =    -1.65658304409189 +     3.33988344682397 *
3641635   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65658304409189 + 3.33988344682397 * RANGE_Recency ;
3641636   +   S_RANGE_average_purchase  =    -1.03709543371106 +     5.13785473062787 *
3641637   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03709543371106 + 5.13785473062787 * 
RANGE_average_purchase ;
3641638   +   S_RANGE_campaign_acceptance
3641639   +          =    -0.47664317866908 +     5.76666521497862 *
3641640   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47664317866908 + 5.76666521497862 * 
RANGE_campaign_acceptance ;
3641641   +END;
MPRINT(SCORETABLES):   END;
3641642   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641643   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3641644   +   ELSE S_MntCard_Games  =    -2.31546327157414 +     6.63981708621388 *
3641645   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31546327157414 + 6.63981708621388 * 
MntCard_Games ;
3641646   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3641647   +   ELSE S_MntMagazines  =    -0.83545276379253 +     17.2809026314296 *
3641648   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83545276379253 + 17.2809026314296 * 
MntMagazines ;
3641649   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3641650   +   ELSE S_NumCatalogPurchases
3641651   +          =    -3.11826971063088 +     13.4823557193844 * NumCatalogPurchases
3641652   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11826971063088 + 13.4823557193844 * 
NumCatalogPurchases ;
3641653   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3641654   +   ELSE S_NumDealsPurchases  =    -1.40785748867734 +     11.2393331689822 *
3641655   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40785748867734 + 11.2393331689822 * 
NumDealsPurchases ;
3641656   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3641657   +   ELSE S_NumWebPurchases  =    -5.24017296813187 +     12.2988257493464 *
3641658   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.24017296813187 + 12.2988257493464 * 
NumWebPurchases ;
3641659   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3641660   +   ELSE S_RANGE_Frq  =    -1.36310014060474 +     4.21335720799254 * RANGE_Frq
3641661   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36310014060474 + 4.21335720799254 * RANGE_Frq ;
3641662   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3641663   +   ELSE S_RANGE_Recency  =    -1.65658304409189 +     3.33988344682397 *
3641664   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65658304409189 + 3.33988344682397 * 
RANGE_Recency ;
3641665   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3641666   +   ELSE S_RANGE_average_purchase
3641667   +          =    -1.03709543371106 +     5.13785473062787 *
3641668   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03709543371106 + 5.13785473062787 * 
RANGE_average_purchase ;
3641669   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3641670   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3641671   +   ELSE S_RANGE_campaign_acceptance
3641672   +          =    -0.47664317866908 +     5.76666521497862 *
3641673   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47664317866908 + 5.76666521497862 
* RANGE_campaign_acceptance ;
3641674   +END;
MPRINT(SCORETABLES):   END;
3641675   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641676   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3641677   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641678   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641679   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3641680   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641681   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641682   +   H11  =    -0.95159763742737 * S_MntCard_Games  +    -0.05930033210208 *
3641683   +        S_MntMagazines  +    -0.46369377595598 * S_NumCatalogPurchases
3641684   +          +    -0.71828575527308 * S_NumDealsPurchases
3641685   +          +     0.72175915463572 * S_NumWebPurchases
3641686   +          +    -0.02721804114204 * S_RANGE_Frq  +     0.36483359370581 *
3641687   +        S_RANGE_Recency  +    -1.02511208521402 * S_RANGE_average_purchase
3641688   +          +    -1.00281357028663 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.95159763742737 * S_MntCard_Games + -0.05930033210208 * 
S_MntMagazines + -0.46369377595598 * S_NumCatalogPurchases + -0.71828575527308 * 
S_NumDealsPurchases + 0.72175915463572 * S_NumWebPurchases + -0.02721804114204 * S_RANGE_Frq + 
0.36483359370581 * S_RANGE_Recency + -1.02511208521402 * S_RANGE_average_purchase + 
-1.00281357028663 * S_RANGE_campaign_acceptance ;
3641689   +   H12  =     0.88544323829992 * S_MntCard_Games  +     -0.1292100547113 *
3641690   +        S_MntMagazines  +     0.61355458725462 * S_NumCatalogPurchases
3641691   +          +     0.45609368663338 * S_NumDealsPurchases
3641692   +          +     1.14249602577347 * S_NumWebPurchases
3641693   +          +     0.32239591805483 * S_RANGE_Frq  +    -1.00627728554225 *
3641694   +        S_RANGE_Recency  +     0.00864309690338 * S_RANGE_average_purchase
3641695   +          +     0.64642973811332 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.88544323829992 * S_MntCard_Games + -0.1292100547113 * 
S_MntMagazines + 0.61355458725462 * S_NumCatalogPurchases + 0.45609368663338 * 
S_NumDealsPurchases + 1.14249602577347 * S_NumWebPurchases + 0.32239591805483 * S_RANGE_Frq + 
-1.00627728554225 * S_RANGE_Recency + 0.00864309690338 * S_RANGE_average_purchase + 
0.64642973811332 * S_RANGE_campaign_acceptance ;
3641696   +   H13  =     0.91465559043208 * S_MntCard_Games  +     1.60185256608225 *
3641697   +        S_MntMagazines  +     0.58220001015119 * S_NumCatalogPurchases
3641698   +          +     0.86485360711709 * S_NumDealsPurchases
3641699   +          +    -0.18411998400036 * S_NumWebPurchases
3641700   +          +     2.15550130645497 * S_RANGE_Frq  +    -2.75029813769576 *
3641701   +        S_RANGE_Recency  +     0.21418617747743 * S_RANGE_average_purchase
3641702   +          +     0.67174710486219 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.91465559043208 * S_MntCard_Games + 1.60185256608225 * 
S_MntMagazines + 0.58220001015119 * S_NumCatalogPurchases + 0.86485360711709 * 
S_NumDealsPurchases + -0.18411998400036 * S_NumWebPurchases + 2.15550130645497 * S_RANGE_Frq + 
-2.75029813769576 * S_RANGE_Recency + 0.21418617747743 * S_RANGE_average_purchase + 
0.67174710486219 * S_RANGE_campaign_acceptance ;
3641703   +   H14  =     0.02346304827756 * S_MntCard_Games  +    -0.17975920016533 *
3641704   +        S_MntMagazines  +     0.43171475323249 * S_NumCatalogPurchases
3641705   +          +     0.45804570016672 * S_NumDealsPurchases
3641706   +          +    -0.00327391077761 * S_NumWebPurchases
3641707   +          +    -0.40016334661428 * S_RANGE_Frq  +    -1.07476459817445 *
3641708   +        S_RANGE_Recency  +    -0.48388792657135 * S_RANGE_average_purchase
3641709   +          +     0.45359264368951 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 0.02346304827756 * S_MntCard_Games + -0.17975920016533 * 
S_MntMagazines + 0.43171475323249 * S_NumCatalogPurchases + 0.45804570016672 * 
S_NumDealsPurchases + -0.00327391077761 * S_NumWebPurchases + -0.40016334661428 * S_RANGE_Frq 
+ -1.07476459817445 * S_RANGE_Recency + -0.48388792657135 * S_RANGE_average_purchase + 
0.45359264368951 * S_RANGE_campaign_acceptance ;
3641710   +   H11  = H11  +    -0.05020702296064 * Marital_StatusDivorced
3641711   +          +    -0.27783775328566 * Marital_StatusMarried
3641712   +          +     0.41792170023956 * Marital_StatusSingle
3641713   +          +     0.66954209444883 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.05020702296064 * Marital_StatusDivorced + 
-0.27783775328566 * Marital_StatusMarried + 0.41792170023956 * Marital_StatusSingle + 
0.66954209444883 * Marital_StatusTogether ;
3641714   +   H12  = H12  +     0.03602057864252 * Marital_StatusDivorced
3641715   +          +    -0.27641128813992 * Marital_StatusMarried
3641716   +          +     0.06489930829034 * Marital_StatusSingle
3641717   +          +     -0.3814810531945 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 0.03602057864252 * Marital_StatusDivorced + 
-0.27641128813992 * Marital_StatusMarried + 0.06489930829034 * Marital_StatusSingle + 
-0.3814810531945 * Marital_StatusTogether ;
3641718   +   H13  = H13  +    -0.97086102798257 * Marital_StatusDivorced
3641719   +          +     0.05055097297857 * Marital_StatusMarried
3641720   +          +    -2.47105525732925 * Marital_StatusSingle
3641721   +          +     3.91976123296698 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.97086102798257 * Marital_StatusDivorced + 
0.05055097297857 * Marital_StatusMarried + -2.47105525732925 * Marital_StatusSingle + 
3.91976123296698 * Marital_StatusTogether ;
3641722   +   H14  = H14  +     0.62636170131578 * Marital_StatusDivorced
3641723   +          +    -1.04521401952276 * Marital_StatusMarried
3641724   +          +     1.60656915217756 * Marital_StatusSingle
3641725   +          +    -1.00849875563632 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.62636170131578 * Marital_StatusDivorced + 
-1.04521401952276 * Marital_StatusMarried + 1.60656915217756 * Marital_StatusSingle + 
-1.00849875563632 * Marital_StatusTogether ;
3641726   +   H11  =     2.71165461748586 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.71165461748586 + H11 ;
3641727   +   H12  =    -2.43153300571041 + H12 ;
MPRINT(SCORETABLES):   H12 = -2.43153300571041 + H12 ;
3641728   +   H13  =      0.3107235037097 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.3107235037097 + H13 ;
3641729   +   H14  =    -0.02426852215646 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.02426852215646 + H14 ;
3641730   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3641731   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3641732   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3641733   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3641734   +END;
MPRINT(SCORETABLES):   END;
3641735   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641736   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3641737   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3641738   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3641739   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3641740   +END;
MPRINT(SCORETABLES):   END;
3641741   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641742   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3641743   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641744   +
3641745   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3641746   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3641747   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3641748   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3641749   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3641750   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3641751   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3641752   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3641753   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3641754   +end;
MPRINT(SCORETABLES):   end;
3641755   +else do;
MPRINT(SCORETABLES):   else do;
3641756   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3641757   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3641758   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3641759   +   end;
MPRINT(SCORETABLES):   end;
3641760   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3641761   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3641762   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3641763   +   end;
MPRINT(SCORETABLES):   end;
3641764   +   else do;
MPRINT(SCORETABLES):   else do;
3641765   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3641766   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3641767   +   end;
MPRINT(SCORETABLES):   end;
3641768   +end;
MPRINT(SCORETABLES):   end;
3641769   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3641770   +   P_DepVar1  =    -4.92720548468911 * H11  +     5.39612231889743 * H12
3641771   +          +     3.02975072305625 * H13  +     5.45129485619237 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.92720548468911 * H11 + 5.39612231889743 * H12 + 
3.02975072305625 * H13 + 5.45129485619237 * H14 ;
3641772   +   P_DepVar1  =    -0.46564494162165 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.46564494162165 + P_DepVar1 ;
3641773   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3641774   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3641775   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3641776   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3641777   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3641778   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3641779   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3641780   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3641781   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3641782   +END;
MPRINT(SCORETABLES):   END;
3641783   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3641784   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3641785   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3641786   +END;
MPRINT(SCORETABLES):   END;
3641787   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3641788   +   P_DepVar1  =     0.13613749434644;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13613749434644;
3641789   +   P_DepVar0  =     0.86386250565355;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86386250565355;
3641790   +END;
MPRINT(SCORETABLES):   END;
3641791   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3641792   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3641793   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3641794   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3641795   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3641796   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3641797   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3641798   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641799   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3641800   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641801   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3641802   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3641803   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3641804   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3641805   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3641806   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3641807   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3641808   +END;
MPRINT(SCORETABLES):   END;
3641809   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641810   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3641811   +********************************;
MPRINT(SCORETABLES):   ********************************;
3641812   +drop
3641813   +S_MntCard_Games
3641814   +S_MntMagazines
3641815   +S_NumCatalogPurchases
3641816   +S_NumDealsPurchases
3641817   +S_NumWebPurchases
3641818   +S_RANGE_Frq
3641819   +S_RANGE_Recency
3641820   +S_RANGE_average_purchase
3641821   +S_RANGE_campaign_acceptance
3641822   +H11
3641823   +H12
3641824   +H13
3641825   +H14
3641826   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3641827   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641828   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3641829   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641830   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641831   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3641832   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641833   +end;
MPRINT(SCORETABLES):   end;
3641834   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641835   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3641836   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641837   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641838   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3641839   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641840   +if (cv_var =4)  then do;
MPRINT(SCORETABLES):   if (cv_var =4) then do;
3641841   +_XVAL_=4;
MPRINT(SCORETABLES):   _XVAL_=4;
3641842   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3641843   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3641844   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3641845   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3641846   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3641847   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3641848   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641849   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3641850   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3641851   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3641852   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3641853   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3641854   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3641855   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3641856   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3641857   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3641858   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3641859   +LENGTH _WARN_ $4
3641860   +      F_DepVar  $ 12
3641861   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3641862   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3641863   +
3641864   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3641865   +
3641866   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3641867   +
3641868   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3641869   +
3641870   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3641871   +
3641872   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3641873   +
3641874   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3641875   +
3641876   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3641877   +
3641878   +      label S_RANGE_campaign_acceptance =
3641879   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3641880   +
3641881   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3641882   +
3641883   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3641884   +
3641885   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3641886   +
3641887   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3641888   +
3641889   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3641890   +
3641891   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3641892   +
3641893   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3641894   +
3641895   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3641896   +
3641897   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3641898   +
3641899   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3641900   +
3641901   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3641902   +
3641903   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3641904   +
3641905   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3641906   +
3641907   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3641908   +
3641909   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3641910   +
3641911   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3641912   +
3641913   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3641914   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3641915   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3641916   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3641917   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3641918   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3641919   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3641920   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3641921   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3641922   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641923   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641924   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641925   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641926   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3641927   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641928   +end;
MPRINT(SCORETABLES):   end;
3641929   +else do;
MPRINT(SCORETABLES):   else do;
3641930   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3641931   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3641932   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3641933   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3641934   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3641935   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3641936   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3641937   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3641938   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641939   +         end;
MPRINT(SCORETABLES):   end;
3641940   +         else do;
MPRINT(SCORETABLES):   else do;
3641941   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3641942   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3641943   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641944   +            end;
MPRINT(SCORETABLES):   end;
3641945   +         end;
MPRINT(SCORETABLES):   end;
3641946   +      end;
MPRINT(SCORETABLES):   end;
3641947   +      else do;
MPRINT(SCORETABLES):   else do;
3641948   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3641949   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3641950   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641951   +         end;
MPRINT(SCORETABLES):   end;
3641952   +      end;
MPRINT(SCORETABLES):   end;
3641953   +   end;
MPRINT(SCORETABLES):   end;
3641954   +   else do;
MPRINT(SCORETABLES):   else do;
3641955   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3641956   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3641957   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641958   +      end;
MPRINT(SCORETABLES):   end;
3641959   +      else do;
MPRINT(SCORETABLES):   else do;
3641960   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3641961   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3641962   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3641963   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3641964   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3641965   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3641966   +         end;
MPRINT(SCORETABLES):   end;
3641967   +      end;
MPRINT(SCORETABLES):   end;
3641968   +   end;
MPRINT(SCORETABLES):   end;
3641969   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3641970   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3641971   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3641972   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3641973   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3641974   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3641975   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641976   +   end;
MPRINT(SCORETABLES):   end;
3641977   +end;
MPRINT(SCORETABLES):   end;
3641978   +
3641979   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641980   +*** Checking missing input Interval
3641981   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3641982   +
3641983   +IF NMISS(
3641984   +   MntCard_Games ,
3641985   +   MntMagazines ,
3641986   +   NumCatalogPurchases ,
3641987   +   NumDealsPurchases ,
3641988   +   NumWebPurchases ,
3641989   +   RANGE_Frq ,
3641990   +   RANGE_Recency ,
3641991   +   RANGE_average_purchase ,
3641992   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3641993   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3641994   +
3641995   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3641996   +END;
MPRINT(SCORETABLES):   END;
3641997   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3641998   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3641999   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642000   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642001   +   S_MntCard_Games  =    -2.31794845074192 +      6.6165403464733 *
3642002   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31794845074192 + 6.6165403464733 * MntCard_Games ;
3642003   +   S_MntMagazines  =     -0.8457617351151 +     17.4200332414951 *
3642004   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8457617351151 + 17.4200332414951 * MntMagazines ;
3642005   +   S_NumCatalogPurchases  =    -3.09562753979671 +     13.4088989358536 *
3642006   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09562753979671 + 13.4088989358536 * 
NumCatalogPurchases ;
3642007   +   S_NumDealsPurchases  =    -1.40973685572431 +     11.1787722399161 *
3642008   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40973685572431 + 11.1787722399161 * 
NumDealsPurchases ;
3642009   +   S_NumWebPurchases  =    -5.23103772254043 +     12.2474028261424 *
3642010   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23103772254043 + 12.2474028261424 * 
NumWebPurchases ;
3642011   +   S_RANGE_Frq  =    -1.36705344962706 +     4.20086816738957 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36705344962706 + 4.20086816738957 * RANGE_Frq ;
3642012   +   S_RANGE_Recency  =    -1.66914546300377 +     3.36131125248371 *
3642013   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66914546300377 + 3.36131125248371 * RANGE_Recency ;
3642014   +   S_RANGE_average_purchase  =    -1.04689232103311 +      5.1803582366391 *
3642015   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04689232103311 + 5.1803582366391 * 
RANGE_average_purchase ;
3642016   +   S_RANGE_campaign_acceptance
3642017   +          =    -0.47446182923085 +      5.8029818101147 *
3642018   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47446182923085 + 5.8029818101147 * 
RANGE_campaign_acceptance ;
3642019   +END;
MPRINT(SCORETABLES):   END;
3642020   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642021   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3642022   +   ELSE S_MntCard_Games  =    -2.31794845074192 +      6.6165403464733 *
3642023   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31794845074192 + 6.6165403464733 * 
MntCard_Games ;
3642024   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3642025   +   ELSE S_MntMagazines  =     -0.8457617351151 +     17.4200332414951 *
3642026   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8457617351151 + 17.4200332414951 * 
MntMagazines ;
3642027   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3642028   +   ELSE S_NumCatalogPurchases
3642029   +          =    -3.09562753979671 +     13.4088989358536 * NumCatalogPurchases
3642030   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09562753979671 + 13.4088989358536 * 
NumCatalogPurchases ;
3642031   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3642032   +   ELSE S_NumDealsPurchases  =    -1.40973685572431 +     11.1787722399161 *
3642033   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40973685572431 + 11.1787722399161 * 
NumDealsPurchases ;
3642034   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3642035   +   ELSE S_NumWebPurchases  =    -5.23103772254043 +     12.2474028261424 *
3642036   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23103772254043 + 12.2474028261424 * 
NumWebPurchases ;
3642037   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3642038   +   ELSE S_RANGE_Frq  =    -1.36705344962706 +     4.20086816738957 * RANGE_Frq
3642039   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36705344962706 + 4.20086816738957 * RANGE_Frq ;
3642040   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3642041   +   ELSE S_RANGE_Recency  =    -1.66914546300377 +     3.36131125248371 *
3642042   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66914546300377 + 3.36131125248371 * 
RANGE_Recency ;
3642043   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3642044   +   ELSE S_RANGE_average_purchase
3642045   +          =    -1.04689232103311 +      5.1803582366391 *
3642046   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04689232103311 + 5.1803582366391 * 
RANGE_average_purchase ;
3642047   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3642048   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3642049   +   ELSE S_RANGE_campaign_acceptance
3642050   +          =    -0.47446182923085 +      5.8029818101147 *
3642051   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47446182923085 + 5.8029818101147 
* RANGE_campaign_acceptance ;
3642052   +END;
MPRINT(SCORETABLES):   END;
3642053   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642054   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3642055   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642056   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642057   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3642058   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642059   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642060   +   H11  =     0.27097674541538 * S_MntCard_Games  +    -0.42145206487387 *
3642061   +        S_MntMagazines  +     0.57342975468747 * S_NumCatalogPurchases
3642062   +          +     -0.4880869297994 * S_NumDealsPurchases
3642063   +          +     0.21831079418415 * S_NumWebPurchases
3642064   +          +     0.05751817466476 * S_RANGE_Frq  +    -0.78464038585433 *
3642065   +        S_RANGE_Recency  +    -0.59287029920038 * S_RANGE_average_purchase
3642066   +          +     0.29503605655266 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.27097674541538 * S_MntCard_Games + -0.42145206487387 * 
S_MntMagazines + 0.57342975468747 * S_NumCatalogPurchases + -0.4880869297994 * 
S_NumDealsPurchases + 0.21831079418415 * S_NumWebPurchases + 0.05751817466476 * S_RANGE_Frq + 
-0.78464038585433 * S_RANGE_Recency + -0.59287029920038 * S_RANGE_average_purchase + 
0.29503605655266 * S_RANGE_campaign_acceptance ;
3642067   +   H12  =     2.01563732353333 * S_MntCard_Games  +    -1.13525087324524 *
3642068   +        S_MntMagazines  +     0.47308333545062 * S_NumCatalogPurchases
3642069   +          +     1.46883250865313 * S_NumDealsPurchases
3642070   +          +     0.92573892944721 * S_NumWebPurchases
3642071   +          +     1.48876001099715 * S_RANGE_Frq  +    -1.43655552060551 *
3642072   +        S_RANGE_Recency  +      2.7848678010433 * S_RANGE_average_purchase
3642073   +          +      1.3882696849176 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.01563732353333 * S_MntCard_Games + -1.13525087324524 * 
S_MntMagazines + 0.47308333545062 * S_NumCatalogPurchases + 1.46883250865313 * 
S_NumDealsPurchases + 0.92573892944721 * S_NumWebPurchases + 1.48876001099715 * S_RANGE_Frq + 
-1.43655552060551 * S_RANGE_Recency + 2.7848678010433 * S_RANGE_average_purchase + 
1.3882696849176 * S_RANGE_campaign_acceptance ;
3642074   +   H13  =     0.35738615742778 * S_MntCard_Games  +     0.50020048231188 *
3642075   +        S_MntMagazines  +     0.10578456872503 * S_NumCatalogPurchases
3642076   +          +     0.95550481178545 * S_NumDealsPurchases
3642077   +          +      0.2727549995755 * S_NumWebPurchases
3642078   +          +    -0.16351598963122 * S_RANGE_Frq  +    -0.67914008967481 *
3642079   +        S_RANGE_Recency  +     0.57472204442916 * S_RANGE_average_purchase
3642080   +          +     0.70132558956805 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.35738615742778 * S_MntCard_Games + 0.50020048231188 * 
S_MntMagazines + 0.10578456872503 * S_NumCatalogPurchases + 0.95550481178545 * 
S_NumDealsPurchases + 0.2727549995755 * S_NumWebPurchases + -0.16351598963122 * S_RANGE_Frq + 
-0.67914008967481 * S_RANGE_Recency + 0.57472204442916 * S_RANGE_average_purchase + 
0.70132558956805 * S_RANGE_campaign_acceptance ;
3642081   +   H14  =    -2.39258052128248 * S_MntCard_Games  +     0.11619821834936 *
3642082   +        S_MntMagazines  +     -2.4931916841367 * S_NumCatalogPurchases
3642083   +          +    -1.41726844954188 * S_NumDealsPurchases
3642084   +          +     0.57969176169603 * S_NumWebPurchases
3642085   +          +     0.11066295439195 * S_RANGE_Frq  +     2.54448089194722 *
3642086   +        S_RANGE_Recency  +     0.90037372915142 * S_RANGE_average_purchase
3642087   +          +    -0.82025280459884 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -2.39258052128248 * S_MntCard_Games + 0.11619821834936 * 
S_MntMagazines + -2.4931916841367 * S_NumCatalogPurchases + -1.41726844954188 * 
S_NumDealsPurchases + 0.57969176169603 * S_NumWebPurchases + 0.11066295439195 * S_RANGE_Frq + 
2.54448089194722 * S_RANGE_Recency + 0.90037372915142 * S_RANGE_average_purchase + 
-0.82025280459884 * S_RANGE_campaign_acceptance ;
3642088   +   H11  = H11  +     0.27693909097361 * Marital_StatusDivorced
3642089   +          +    -1.48328883105655 * Marital_StatusMarried
3642090   +          +     0.83633918483564 * Marital_StatusSingle
3642091   +          +    -1.14590972763604 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.27693909097361 * Marital_StatusDivorced + 
-1.48328883105655 * Marital_StatusMarried + 0.83633918483564 * Marital_StatusSingle + 
-1.14590972763604 * Marital_StatusTogether ;
3642092   +   H12  = H12  +    -0.48878138343554 * Marital_StatusDivorced
3642093   +          +     2.12128157671221 * Marital_StatusMarried
3642094   +          +    -2.73999821570886 * Marital_StatusSingle
3642095   +          +     3.13494720969484 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.48878138343554 * Marital_StatusDivorced + 
2.12128157671221 * Marital_StatusMarried + -2.73999821570886 * Marital_StatusSingle + 
3.13494720969484 * Marital_StatusTogether ;
3642096   +   H13  = H13  +    -0.23310592040664 * Marital_StatusDivorced
3642097   +          +     0.67807503690967 * Marital_StatusMarried
3642098   +          +    -0.61586064014749 * Marital_StatusSingle
3642099   +          +     0.12473686345761 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.23310592040664 * Marital_StatusDivorced + 
0.67807503690967 * Marital_StatusMarried + -0.61586064014749 * Marital_StatusSingle + 
0.12473686345761 * Marital_StatusTogether ;
3642100   +   H14  = H14  +    -3.97893890762608 * Marital_StatusDivorced
3642101   +          +     2.41858308859111 * Marital_StatusMarried
3642102   +          +    -5.72618336954809 * Marital_StatusSingle
3642103   +          +     1.53336202109456 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -3.97893890762608 * Marital_StatusDivorced + 
2.41858308859111 * Marital_StatusMarried + -5.72618336954809 * Marital_StatusSingle + 
1.53336202109456 * Marital_StatusTogether ;
3642104   +   H11  =    -0.80593517070457 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.80593517070457 + H11 ;
3642105   +   H12  =    -1.90160786475955 + H12 ;
MPRINT(SCORETABLES):   H12 = -1.90160786475955 + H12 ;
3642106   +   H13  =    -1.22263184655973 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.22263184655973 + H13 ;
3642107   +   H14  =     0.10836610551326 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.10836610551326 + H14 ;
3642108   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3642109   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3642110   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3642111   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3642112   +END;
MPRINT(SCORETABLES):   END;
3642113   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642114   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3642115   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3642116   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3642117   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3642118   +END;
MPRINT(SCORETABLES):   END;
3642119   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642120   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3642121   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642122   +
3642123   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3642124   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3642125   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3642126   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3642127   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3642128   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3642129   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3642130   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642131   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642132   +end;
MPRINT(SCORETABLES):   end;
3642133   +else do;
MPRINT(SCORETABLES):   else do;
3642134   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3642135   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3642136   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3642137   +   end;
MPRINT(SCORETABLES):   end;
3642138   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3642139   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3642140   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3642141   +   end;
MPRINT(SCORETABLES):   end;
3642142   +   else do;
MPRINT(SCORETABLES):   else do;
3642143   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642144   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642145   +   end;
MPRINT(SCORETABLES):   end;
3642146   +end;
MPRINT(SCORETABLES):   end;
3642147   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642148   +   P_DepVar1  =     7.61381200617707 * H11  +     2.65978447688456 * H12
3642149   +          +     6.64998732577946 * H13  +    -2.53281811040002 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = 7.61381200617707 * H11 + 2.65978447688456 * H12 + 
6.64998732577946 * H13 + -2.53281811040002 * H14 ;
3642150   +   P_DepVar1  =    -2.42490318335132 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.42490318335132 + P_DepVar1 ;
3642151   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3642152   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3642153   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3642154   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3642155   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3642156   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3642157   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3642158   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3642159   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3642160   +END;
MPRINT(SCORETABLES):   END;
3642161   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642162   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3642163   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3642164   +END;
MPRINT(SCORETABLES):   END;
3642165   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3642166   +   P_DepVar1  =     0.13707451701931;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13707451701931;
3642167   +   P_DepVar0  =     0.86292548298068;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86292548298068;
3642168   +END;
MPRINT(SCORETABLES):   END;
3642169   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3642170   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3642171   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3642172   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3642173   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3642174   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3642175   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3642176   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642177   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3642178   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642179   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3642180   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3642181   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3642182   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3642183   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3642184   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3642185   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3642186   +END;
MPRINT(SCORETABLES):   END;
3642187   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642188   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3642189   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642190   +drop
3642191   +S_MntCard_Games
3642192   +S_MntMagazines
3642193   +S_NumCatalogPurchases
3642194   +S_NumDealsPurchases
3642195   +S_NumWebPurchases
3642196   +S_RANGE_Frq
3642197   +S_RANGE_Recency
3642198   +S_RANGE_average_purchase
3642199   +S_RANGE_campaign_acceptance
3642200   +H11
3642201   +H12
3642202   +H13
3642203   +H14
3642204   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3642205   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642206   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3642207   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642208   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642209   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3642210   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642211   +end;
MPRINT(SCORETABLES):   end;
3642212   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642213   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3642214   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642215   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642216   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3642217   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642218   +if (cv_var =5)  then do;
MPRINT(SCORETABLES):   if (cv_var =5) then do;
3642219   +_XVAL_=5;
MPRINT(SCORETABLES):   _XVAL_=5;
3642220   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642221   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3642222   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642223   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642224   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3642225   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642226   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642227   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3642228   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642229   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3642230   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3642231   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3642232   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3642233   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3642234   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3642235   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3642236   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3642237   +LENGTH _WARN_ $4
3642238   +      F_DepVar  $ 12
3642239   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3642240   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3642241   +
3642242   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3642243   +
3642244   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3642245   +
3642246   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3642247   +
3642248   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3642249   +
3642250   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3642251   +
3642252   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3642253   +
3642254   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3642255   +
3642256   +      label S_RANGE_campaign_acceptance =
3642257   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3642258   +
3642259   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3642260   +
3642261   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3642262   +
3642263   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3642264   +
3642265   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3642266   +
3642267   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3642268   +
3642269   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3642270   +
3642271   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3642272   +
3642273   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3642274   +
3642275   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3642276   +
3642277   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3642278   +
3642279   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3642280   +
3642281   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3642282   +
3642283   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3642284   +
3642285   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3642286   +
3642287   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3642288   +
3642289   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3642290   +
3642291   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3642292   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3642293   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3642294   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3642295   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3642296   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3642297   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3642298   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3642299   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3642300   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3642301   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3642302   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3642303   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3642304   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3642305   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642306   +end;
MPRINT(SCORETABLES):   end;
3642307   +else do;
MPRINT(SCORETABLES):   else do;
3642308   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3642309   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3642310   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3642311   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3642312   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3642313   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3642314   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3642315   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3642316   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642317   +         end;
MPRINT(SCORETABLES):   end;
3642318   +         else do;
MPRINT(SCORETABLES):   else do;
3642319   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3642320   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3642321   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642322   +            end;
MPRINT(SCORETABLES):   end;
3642323   +         end;
MPRINT(SCORETABLES):   end;
3642324   +      end;
MPRINT(SCORETABLES):   end;
3642325   +      else do;
MPRINT(SCORETABLES):   else do;
3642326   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3642327   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3642328   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642329   +         end;
MPRINT(SCORETABLES):   end;
3642330   +      end;
MPRINT(SCORETABLES):   end;
3642331   +   end;
MPRINT(SCORETABLES):   end;
3642332   +   else do;
MPRINT(SCORETABLES):   else do;
3642333   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3642334   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3642335   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642336   +      end;
MPRINT(SCORETABLES):   end;
3642337   +      else do;
MPRINT(SCORETABLES):   else do;
3642338   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3642339   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3642340   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3642341   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3642342   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3642343   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642344   +         end;
MPRINT(SCORETABLES):   end;
3642345   +      end;
MPRINT(SCORETABLES):   end;
3642346   +   end;
MPRINT(SCORETABLES):   end;
3642347   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3642348   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3642349   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3642350   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3642351   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3642352   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3642353   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642354   +   end;
MPRINT(SCORETABLES):   end;
3642355   +end;
MPRINT(SCORETABLES):   end;
3642356   +
3642357   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642358   +*** Checking missing input Interval
3642359   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3642360   +
3642361   +IF NMISS(
3642362   +   MntCard_Games ,
3642363   +   MntMagazines ,
3642364   +   NumCatalogPurchases ,
3642365   +   NumDealsPurchases ,
3642366   +   NumWebPurchases ,
3642367   +   RANGE_Frq ,
3642368   +   RANGE_Recency ,
3642369   +   RANGE_average_purchase ,
3642370   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3642371   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3642372   +
3642373   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642374   +END;
MPRINT(SCORETABLES):   END;
3642375   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642376   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3642377   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642378   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642379   +   S_MntCard_Games  =    -2.33365199762263 +     6.64496562600808 *
3642380   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.33365199762263 + 6.64496562600808 * MntCard_Games ;
3642381   +   S_MntMagazines  =    -0.83717196203092 +     17.3697736457069 *
3642382   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83717196203092 + 17.3697736457069 * MntMagazines ;
3642383   +   S_NumCatalogPurchases  =    -3.11726302007955 +     13.4865837242738 *
3642384   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11726302007955 + 13.4865837242738 * 
NumCatalogPurchases ;
3642385   +   S_NumDealsPurchases  =     -1.4111958946165 +     11.1996448217085 *
3642386   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.4111958946165 + 11.1996448217085 * 
NumDealsPurchases ;
3642387   +   S_NumWebPurchases  =    -5.23185914106725 +        12.2771775229 *
3642388   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23185914106725 + 12.2771775229 * NumWebPurchases 
;
3642389   +   S_RANGE_Frq  =     -1.3603946264234 +      4.2206625418108 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3603946264234 + 4.2206625418108 * RANGE_Frq ;
3642390   +   S_RANGE_Recency  =    -1.66686959497139 +     3.35906763293638 *
3642391   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66686959497139 + 3.35906763293638 * RANGE_Recency ;
3642392   +   S_RANGE_average_purchase  =    -1.03730746994139 +     5.14308263365786 *
3642393   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03730746994139 + 5.14308263365786 * 
RANGE_average_purchase ;
3642394   +   S_RANGE_campaign_acceptance
3642395   +          =    -0.47415905331353 +      5.6617153987546 *
3642396   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47415905331353 + 5.6617153987546 * 
RANGE_campaign_acceptance ;
3642397   +END;
MPRINT(SCORETABLES):   END;
3642398   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642399   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3642400   +   ELSE S_MntCard_Games  =    -2.33365199762263 +     6.64496562600808 *
3642401   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.33365199762263 + 6.64496562600808 * 
MntCard_Games ;
3642402   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3642403   +   ELSE S_MntMagazines  =    -0.83717196203092 +     17.3697736457069 *
3642404   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83717196203092 + 17.3697736457069 * 
MntMagazines ;
3642405   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3642406   +   ELSE S_NumCatalogPurchases
3642407   +          =    -3.11726302007955 +     13.4865837242738 * NumCatalogPurchases
3642408   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11726302007955 + 13.4865837242738 * 
NumCatalogPurchases ;
3642409   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3642410   +   ELSE S_NumDealsPurchases  =     -1.4111958946165 +     11.1996448217085 *
3642411   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.4111958946165 + 11.1996448217085 * 
NumDealsPurchases ;
3642412   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3642413   +   ELSE S_NumWebPurchases  =    -5.23185914106725 +        12.2771775229 *
3642414   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23185914106725 + 12.2771775229 * 
NumWebPurchases ;
3642415   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3642416   +   ELSE S_RANGE_Frq  =     -1.3603946264234 +      4.2206625418108 * RANGE_Frq
3642417   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3603946264234 + 4.2206625418108 * RANGE_Frq ;
3642418   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3642419   +   ELSE S_RANGE_Recency  =    -1.66686959497139 +     3.35906763293638 *
3642420   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66686959497139 + 3.35906763293638 * 
RANGE_Recency ;
3642421   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3642422   +   ELSE S_RANGE_average_purchase
3642423   +          =    -1.03730746994139 +     5.14308263365786 *
3642424   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03730746994139 + 5.14308263365786 * 
RANGE_average_purchase ;
3642425   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3642426   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3642427   +   ELSE S_RANGE_campaign_acceptance
3642428   +          =    -0.47415905331353 +      5.6617153987546 *
3642429   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47415905331353 + 5.6617153987546 
* RANGE_campaign_acceptance ;
3642430   +END;
MPRINT(SCORETABLES):   END;
3642431   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642432   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3642433   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642434   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642435   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3642436   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642437   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642438   +   H11  =    -1.20166513010284 * S_MntCard_Games  +     0.87814444022471 *
3642439   +        S_MntMagazines  +    -1.52375265894652 * S_NumCatalogPurchases
3642440   +          +     0.66411203535248 * S_NumDealsPurchases
3642441   +          +    -1.51135962252052 * S_NumWebPurchases
3642442   +          +     0.04844124841059 * S_RANGE_Frq  +     2.35653997981589 *
3642443   +        S_RANGE_Recency  +     0.70094402615693 * S_RANGE_average_purchase
3642444   +          +    -1.47063107788616 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -1.20166513010284 * S_MntCard_Games + 0.87814444022471 * 
S_MntMagazines + -1.52375265894652 * S_NumCatalogPurchases + 0.66411203535248 * 
S_NumDealsPurchases + -1.51135962252052 * S_NumWebPurchases + 0.04844124841059 * S_RANGE_Frq + 
2.35653997981589 * S_RANGE_Recency + 0.70094402615693 * S_RANGE_average_purchase + 
-1.47063107788616 * S_RANGE_campaign_acceptance ;
3642445   +   H12  =    -0.10018095371109 * S_MntCard_Games  +    -0.03220849594213 *
3642446   +        S_MntMagazines  +    -0.06373994199117 * S_NumCatalogPurchases
3642447   +          +    -0.40812267233813 * S_NumDealsPurchases
3642448   +          +      0.3397779962395 * S_NumWebPurchases
3642449   +          +    -0.15412477592589 * S_RANGE_Frq  +      0.3316667608018 *
3642450   +        S_RANGE_Recency  +    -0.13978985362291 * S_RANGE_average_purchase
3642451   +          +    -0.16412457083062 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.10018095371109 * S_MntCard_Games + -0.03220849594213 * 
S_MntMagazines + -0.06373994199117 * S_NumCatalogPurchases + -0.40812267233813 * 
S_NumDealsPurchases + 0.3397779962395 * S_NumWebPurchases + -0.15412477592589 * S_RANGE_Frq + 
0.3316667608018 * S_RANGE_Recency + -0.13978985362291 * S_RANGE_average_purchase + 
-0.16412457083062 * S_RANGE_campaign_acceptance ;
3642452   +   H13  =    -2.80181902707167 * S_MntCard_Games  +    -3.42989742869599 *
3642453   +        S_MntMagazines  +    -3.68155920105875 * S_NumCatalogPurchases
3642454   +          +     -1.8429511005016 * S_NumDealsPurchases
3642455   +          +    -1.97721989029183 * S_NumWebPurchases
3642456   +          +     1.76018940957803 * S_RANGE_Frq  +     1.64257985048582 *
3642457   +        S_RANGE_Recency  +    -3.62734782980333 * S_RANGE_average_purchase
3642458   +          +    -3.97736696910839 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -2.80181902707167 * S_MntCard_Games + -3.42989742869599 * 
S_MntMagazines + -3.68155920105875 * S_NumCatalogPurchases + -1.8429511005016 * 
S_NumDealsPurchases + -1.97721989029183 * S_NumWebPurchases + 1.76018940957803 * S_RANGE_Frq + 
1.64257985048582 * S_RANGE_Recency + -3.62734782980333 * S_RANGE_average_purchase + 
-3.97736696910839 * S_RANGE_campaign_acceptance ;
3642459   +   H14  =     1.38808059608473 * S_MntCard_Games  +    -0.04853175680039 *
3642460   +        S_MntMagazines  +     0.80389803835189 * S_NumCatalogPurchases
3642461   +          +     1.03570141014036 * S_NumDealsPurchases
3642462   +          +     1.69935018492612 * S_NumWebPurchases
3642463   +          +     0.49167186145492 * S_RANGE_Frq  +    -2.23253002671794 *
3642464   +        S_RANGE_Recency  +      0.1031921078093 * S_RANGE_average_purchase
3642465   +          +     1.25581958471462 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 1.38808059608473 * S_MntCard_Games + -0.04853175680039 * 
S_MntMagazines + 0.80389803835189 * S_NumCatalogPurchases + 1.03570141014036 * 
S_NumDealsPurchases + 1.69935018492612 * S_NumWebPurchases + 0.49167186145492 * S_RANGE_Frq + 
-2.23253002671794 * S_RANGE_Recency + 0.1031921078093 * S_RANGE_average_purchase + 
1.25581958471462 * S_RANGE_campaign_acceptance ;
3642466   +   H11  = H11  +    -3.05816750520044 * Marital_StatusDivorced
3642467   +          +     0.83971743732196 * Marital_StatusMarried
3642468   +          +    -3.00150956581766 * Marital_StatusSingle
3642469   +          +     1.04640872826216 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -3.05816750520044 * Marital_StatusDivorced + 
0.83971743732196 * Marital_StatusMarried + -3.00150956581766 * Marital_StatusSingle + 
1.04640872826216 * Marital_StatusTogether ;
3642470   +   H12  = H12  +    -0.33281828437091 * Marital_StatusDivorced
3642471   +          +     0.05523929454438 * Marital_StatusMarried
3642472   +          +    -0.17598493161594 * Marital_StatusSingle
3642473   +          +     0.68618051709211 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.33281828437091 * Marital_StatusDivorced + 
0.05523929454438 * Marital_StatusMarried + -0.17598493161594 * Marital_StatusSingle + 
0.68618051709211 * Marital_StatusTogether ;
3642474   +   H13  = H13  +     3.83978668353026 * Marital_StatusDivorced
3642475   +          +    -0.49987008400828 * Marital_StatusMarried
3642476   +          +     1.05910041992932 * Marital_StatusSingle
3642477   +          +    -2.57816872028472 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 3.83978668353026 * Marital_StatusDivorced + 
-0.49987008400828 * Marital_StatusMarried + 1.05910041992932 * Marital_StatusSingle + 
-2.57816872028472 * Marital_StatusTogether ;
3642478   +   H14  = H14  +    -0.70727379983715 * Marital_StatusDivorced
3642479   +          +    -0.20837801748244 * Marital_StatusMarried
3642480   +          +     -1.3056348463658 * Marital_StatusSingle
3642481   +          +     0.55518800554475 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.70727379983715 * Marital_StatusDivorced + 
-0.20837801748244 * Marital_StatusMarried + -1.3056348463658 * Marital_StatusSingle + 
0.55518800554475 * Marital_StatusTogether ;
3642482   +   H11  =     4.51476126469688 + H11 ;
MPRINT(SCORETABLES):   H11 = 4.51476126469688 + H11 ;
3642483   +   H12  =     0.92293546988078 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.92293546988078 + H12 ;
3642484   +   H13  =    -0.08524560772109 + H13 ;
MPRINT(SCORETABLES):   H13 = -0.08524560772109 + H13 ;
3642485   +   H14  =    -3.91364057834773 + H14 ;
MPRINT(SCORETABLES):   H14 = -3.91364057834773 + H14 ;
3642486   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3642487   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3642488   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3642489   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3642490   +END;
MPRINT(SCORETABLES):   END;
3642491   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642492   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3642493   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3642494   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3642495   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3642496   +END;
MPRINT(SCORETABLES):   END;
3642497   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642498   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3642499   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642500   +
3642501   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3642502   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3642503   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3642504   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3642505   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3642506   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3642507   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3642508   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642509   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642510   +end;
MPRINT(SCORETABLES):   end;
3642511   +else do;
MPRINT(SCORETABLES):   else do;
3642512   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3642513   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3642514   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3642515   +   end;
MPRINT(SCORETABLES):   end;
3642516   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3642517   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3642518   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3642519   +   end;
MPRINT(SCORETABLES):   end;
3642520   +   else do;
MPRINT(SCORETABLES):   else do;
3642521   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642522   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642523   +   end;
MPRINT(SCORETABLES):   end;
3642524   +end;
MPRINT(SCORETABLES):   end;
3642525   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642526   +   P_DepVar1  =    -2.71783093261211 * H11  +    -6.03455714157428 * H12
3642527   +          +    -2.02154799751405 * H13  +     3.48879430410728 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.71783093261211 * H11 + -6.03455714157428 * H12 + 
-2.02154799751405 * H13 + 3.48879430410728 * H14 ;
3642528   +   P_DepVar1  =     1.92791168167485 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 1.92791168167485 + P_DepVar1 ;
3642529   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3642530   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3642531   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3642532   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3642533   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3642534   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3642535   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3642536   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3642537   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3642538   +END;
MPRINT(SCORETABLES):   END;
3642539   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642540   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3642541   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3642542   +END;
MPRINT(SCORETABLES):   END;
3642543   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3642544   +   P_DepVar1  =     0.13897691263014;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13897691263014;
3642545   +   P_DepVar0  =     0.86102308736985;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86102308736985;
3642546   +END;
MPRINT(SCORETABLES):   END;
3642547   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3642548   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3642549   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3642550   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3642551   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3642552   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3642553   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3642554   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642555   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3642556   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642557   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3642558   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3642559   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3642560   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3642561   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3642562   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3642563   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3642564   +END;
MPRINT(SCORETABLES):   END;
3642565   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642566   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3642567   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642568   +drop
3642569   +S_MntCard_Games
3642570   +S_MntMagazines
3642571   +S_NumCatalogPurchases
3642572   +S_NumDealsPurchases
3642573   +S_NumWebPurchases
3642574   +S_RANGE_Frq
3642575   +S_RANGE_Recency
3642576   +S_RANGE_average_purchase
3642577   +S_RANGE_campaign_acceptance
3642578   +H11
3642579   +H12
3642580   +H13
3642581   +H14
3642582   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3642583   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642584   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3642585   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642586   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642587   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3642588   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642589   +end;
MPRINT(SCORETABLES):   end;
3642590   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642591   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3642592   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642593   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642594   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3642595   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642596   +if (cv_var =6)  then do;
MPRINT(SCORETABLES):   if (cv_var =6) then do;
3642597   +_XVAL_=6;
MPRINT(SCORETABLES):   _XVAL_=6;
3642598   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642599   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3642600   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642601   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642602   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3642603   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642604   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642605   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3642606   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642607   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3642608   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3642609   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3642610   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3642611   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3642612   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3642613   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3642614   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3642615   +LENGTH _WARN_ $4
3642616   +      F_DepVar  $ 12
3642617   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3642618   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3642619   +
3642620   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3642621   +
3642622   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3642623   +
3642624   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3642625   +
3642626   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3642627   +
3642628   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3642629   +
3642630   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3642631   +
3642632   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3642633   +
3642634   +      label S_RANGE_campaign_acceptance =
3642635   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3642636   +
3642637   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3642638   +
3642639   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3642640   +
3642641   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3642642   +
3642643   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3642644   +
3642645   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3642646   +
3642647   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3642648   +
3642649   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3642650   +
3642651   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3642652   +
3642653   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3642654   +
3642655   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3642656   +
3642657   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3642658   +
3642659   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3642660   +
3642661   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3642662   +
3642663   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3642664   +
3642665   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3642666   +
3642667   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3642668   +
3642669   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3642670   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3642671   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3642672   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3642673   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3642674   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3642675   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3642676   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3642677   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3642678   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3642679   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3642680   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3642681   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3642682   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3642683   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642684   +end;
MPRINT(SCORETABLES):   end;
3642685   +else do;
MPRINT(SCORETABLES):   else do;
3642686   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3642687   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3642688   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3642689   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3642690   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3642691   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3642692   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3642693   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3642694   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642695   +         end;
MPRINT(SCORETABLES):   end;
3642696   +         else do;
MPRINT(SCORETABLES):   else do;
3642697   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3642698   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3642699   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642700   +            end;
MPRINT(SCORETABLES):   end;
3642701   +         end;
MPRINT(SCORETABLES):   end;
3642702   +      end;
MPRINT(SCORETABLES):   end;
3642703   +      else do;
MPRINT(SCORETABLES):   else do;
3642704   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3642705   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3642706   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642707   +         end;
MPRINT(SCORETABLES):   end;
3642708   +      end;
MPRINT(SCORETABLES):   end;
3642709   +   end;
MPRINT(SCORETABLES):   end;
3642710   +   else do;
MPRINT(SCORETABLES):   else do;
3642711   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3642712   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3642713   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642714   +      end;
MPRINT(SCORETABLES):   end;
3642715   +      else do;
MPRINT(SCORETABLES):   else do;
3642716   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3642717   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3642718   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3642719   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3642720   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3642721   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3642722   +         end;
MPRINT(SCORETABLES):   end;
3642723   +      end;
MPRINT(SCORETABLES):   end;
3642724   +   end;
MPRINT(SCORETABLES):   end;
3642725   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3642726   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3642727   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3642728   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3642729   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3642730   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3642731   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642732   +   end;
MPRINT(SCORETABLES):   end;
3642733   +end;
MPRINT(SCORETABLES):   end;
3642734   +
3642735   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642736   +*** Checking missing input Interval
3642737   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3642738   +
3642739   +IF NMISS(
3642740   +   MntCard_Games ,
3642741   +   MntMagazines ,
3642742   +   NumCatalogPurchases ,
3642743   +   NumDealsPurchases ,
3642744   +   NumWebPurchases ,
3642745   +   RANGE_Frq ,
3642746   +   RANGE_Recency ,
3642747   +   RANGE_average_purchase ,
3642748   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3642749   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3642750   +
3642751   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3642752   +END;
MPRINT(SCORETABLES):   END;
3642753   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642754   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3642755   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642756   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642757   +   S_MntCard_Games  =    -2.32172166483063 +     6.63106403138651 *
3642758   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32172166483063 + 6.63106403138651 * MntCard_Games ;
3642759   +   S_MntMagazines  =    -0.83846928953031 +     17.5763611670304 *
3642760   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83846928953031 + 17.5763611670304 * MntMagazines ;
3642761   +   S_NumCatalogPurchases  =     -3.1096594460943 +     13.4003729898173 *
3642762   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.1096594460943 + 13.4003729898173 * 
NumCatalogPurchases ;
3642763   +   S_NumDealsPurchases  =    -1.40932386997325 +     11.1791913132312 *
3642764   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40932386997325 + 11.1791913132312 * 
NumDealsPurchases ;
3642765   +   S_NumWebPurchases  =    -5.20438750907928 +     12.2155987914564 *
3642766   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.20438750907928 + 12.2155987914564 * 
NumWebPurchases ;
3642767   +   S_RANGE_Frq  =    -1.36793353933378 +     4.19804238584688 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36793353933378 + 4.19804238584688 * RANGE_Frq ;
3642768   +   S_RANGE_Recency  =      -1.665917420063 +      3.3528926556089 *
3642769   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.665917420063 + 3.3528926556089 * RANGE_Recency ;
3642770   +   S_RANGE_average_purchase  =    -1.04139293554519 +     5.15500943092228 *
3642771   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04139293554519 + 5.15500943092228 * 
RANGE_average_purchase ;
3642772   +   S_RANGE_campaign_acceptance
3642773   +          =    -0.46945499551264 +     5.74284751792168 *
3642774   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.46945499551264 + 5.74284751792168 * 
RANGE_campaign_acceptance ;
3642775   +END;
MPRINT(SCORETABLES):   END;
3642776   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642777   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3642778   +   ELSE S_MntCard_Games  =    -2.32172166483063 +     6.63106403138651 *
3642779   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32172166483063 + 6.63106403138651 * 
MntCard_Games ;
3642780   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3642781   +   ELSE S_MntMagazines  =    -0.83846928953031 +     17.5763611670304 *
3642782   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83846928953031 + 17.5763611670304 * 
MntMagazines ;
3642783   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3642784   +   ELSE S_NumCatalogPurchases
3642785   +          =     -3.1096594460943 +     13.4003729898173 * NumCatalogPurchases
3642786   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.1096594460943 + 13.4003729898173 * 
NumCatalogPurchases ;
3642787   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3642788   +   ELSE S_NumDealsPurchases  =    -1.40932386997325 +     11.1791913132312 *
3642789   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40932386997325 + 11.1791913132312 * 
NumDealsPurchases ;
3642790   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3642791   +   ELSE S_NumWebPurchases  =    -5.20438750907928 +     12.2155987914564 *
3642792   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.20438750907928 + 12.2155987914564 * 
NumWebPurchases ;
3642793   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3642794   +   ELSE S_RANGE_Frq  =    -1.36793353933378 +     4.19804238584688 * RANGE_Frq
3642795   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36793353933378 + 4.19804238584688 * RANGE_Frq ;
3642796   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3642797   +   ELSE S_RANGE_Recency  =      -1.665917420063 +      3.3528926556089 *
3642798   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.665917420063 + 3.3528926556089 * 
RANGE_Recency ;
3642799   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3642800   +   ELSE S_RANGE_average_purchase
3642801   +          =    -1.04139293554519 +     5.15500943092228 *
3642802   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04139293554519 + 5.15500943092228 * 
RANGE_average_purchase ;
3642803   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3642804   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3642805   +   ELSE S_RANGE_campaign_acceptance
3642806   +          =    -0.46945499551264 +     5.74284751792168 *
3642807   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.46945499551264 + 5.74284751792168 
* RANGE_campaign_acceptance ;
3642808   +END;
MPRINT(SCORETABLES):   END;
3642809   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642810   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3642811   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642812   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642813   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3642814   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642815   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642816   +   H11  =     0.40537823711859 * S_MntCard_Games  +     0.86300583368803 *
3642817   +        S_MntMagazines  +     0.44071523292589 * S_NumCatalogPurchases
3642818   +          +     0.61873907623209 * S_NumDealsPurchases
3642819   +          +    -0.38897161100975 * S_NumWebPurchases
3642820   +          +     0.39842173725337 * S_RANGE_Frq  +    -0.76244505848389 *
3642821   +        S_RANGE_Recency  +    -0.17718136559087 * S_RANGE_average_purchase
3642822   +          +     0.39768127260047 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.40537823711859 * S_MntCard_Games + 0.86300583368803 * 
S_MntMagazines + 0.44071523292589 * S_NumCatalogPurchases + 0.61873907623209 * 
S_NumDealsPurchases + -0.38897161100975 * S_NumWebPurchases + 0.39842173725337 * S_RANGE_Frq + 
-0.76244505848389 * S_RANGE_Recency + -0.17718136559087 * S_RANGE_average_purchase + 
0.39768127260047 * S_RANGE_campaign_acceptance ;
3642823   +   H12  =     2.21251511947992 * S_MntCard_Games  +    -0.30241301704982 *
3642824   +        S_MntMagazines  +     0.40093736180104 * S_NumCatalogPurchases
3642825   +          +     1.31825829519464 * S_NumDealsPurchases
3642826   +          +     1.24106025876758 * S_NumWebPurchases
3642827   +          +     2.02862791283351 * S_RANGE_Frq  +    -1.49266135019022 *
3642828   +        S_RANGE_Recency  +     3.90303276947875 * S_RANGE_average_purchase
3642829   +          +     2.03249022570337 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.21251511947992 * S_MntCard_Games + -0.30241301704982 * 
S_MntMagazines + 0.40093736180104 * S_NumCatalogPurchases + 1.31825829519464 * 
S_NumDealsPurchases + 1.24106025876758 * S_NumWebPurchases + 2.02862791283351 * S_RANGE_Frq + 
-1.49266135019022 * S_RANGE_Recency + 3.90303276947875 * S_RANGE_average_purchase + 
2.03249022570337 * S_RANGE_campaign_acceptance ;
3642830   +   H13  =     0.56750095244226 * S_MntCard_Games  +     -0.2473620776099 *
3642831   +        S_MntMagazines  +     0.35059866314978 * S_NumCatalogPurchases
3642832   +          +     0.18043065038934 * S_NumDealsPurchases
3642833   +          +     0.82466813315332 * S_NumWebPurchases
3642834   +          +     0.05213608244622 * S_RANGE_Frq  +    -0.74358774806704 *
3642835   +        S_RANGE_Recency  +     0.04814831629328 * S_RANGE_average_purchase
3642836   +          +     0.53626586155471 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.56750095244226 * S_MntCard_Games + -0.2473620776099 * 
S_MntMagazines + 0.35059866314978 * S_NumCatalogPurchases + 0.18043065038934 * 
S_NumDealsPurchases + 0.82466813315332 * S_NumWebPurchases + 0.05213608244622 * S_RANGE_Frq + 
-0.74358774806704 * S_RANGE_Recency + 0.04814831629328 * S_RANGE_average_purchase + 
0.53626586155471 * S_RANGE_campaign_acceptance ;
3642837   +   H14  =     0.40795881676429 * S_MntCard_Games  +     0.91080913273251 *
3642838   +        S_MntMagazines  +    -0.41926313946551 * S_NumCatalogPurchases
3642839   +          +    -0.38792494607064 * S_NumDealsPurchases
3642840   +          +     0.69052548025581 * S_NumWebPurchases
3642841   +          +     1.15310917069851 * S_RANGE_Frq  +     0.78392830221604 *
3642842   +        S_RANGE_Recency  +    -0.04710315225299 * S_RANGE_average_purchase
3642843   +          +    -0.26960838783746 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 0.40795881676429 * S_MntCard_Games + 0.91080913273251 * 
S_MntMagazines + -0.41926313946551 * S_NumCatalogPurchases + -0.38792494607064 * 
S_NumDealsPurchases + 0.69052548025581 * S_NumWebPurchases + 1.15310917069851 * S_RANGE_Frq + 
0.78392830221604 * S_RANGE_Recency + -0.04710315225299 * S_RANGE_average_purchase + 
-0.26960838783746 * S_RANGE_campaign_acceptance ;
3642844   +   H11  = H11  +      0.4184274752428 * Marital_StatusDivorced
3642845   +          +     0.10739283454837 * Marital_StatusMarried
3642846   +          +    -0.13287779203629 * Marital_StatusSingle
3642847   +          +    -1.45615684496595 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.4184274752428 * Marital_StatusDivorced + 0.10739283454837 
* Marital_StatusMarried + -0.13287779203629 * Marital_StatusSingle + -1.45615684496595 * 
Marital_StatusTogether ;
3642848   +   H12  = H12  +    -1.86707045079453 * Marital_StatusDivorced
3642849   +          +      3.2751583590714 * Marital_StatusMarried
3642850   +          +     -4.4371344101509 * Marital_StatusSingle
3642851   +          +     3.51745474428269 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -1.86707045079453 * Marital_StatusDivorced + 
3.2751583590714 * Marital_StatusMarried + -4.4371344101509 * Marital_StatusSingle + 
3.51745474428269 * Marital_StatusTogether ;
3642852   +   H13  = H13  +       0.200313335424 * Marital_StatusDivorced
3642853   +          +     0.05332926588755 * Marital_StatusMarried
3642854   +          +     0.28099421851791 * Marital_StatusSingle
3642855   +          +    -0.39951033439742 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.200313335424 * Marital_StatusDivorced + 0.05332926588755 
* Marital_StatusMarried + 0.28099421851791 * Marital_StatusSingle + -0.39951033439742 * 
Marital_StatusTogether ;
3642856   +   H14  = H14  +     0.18046514074743 * Marital_StatusDivorced
3642857   +          +     2.11753729018576 * Marital_StatusMarried
3642858   +          +    -2.46591719959114 * Marital_StatusSingle
3642859   +          +    -0.74038175528648 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.18046514074743 * Marital_StatusDivorced + 
2.11753729018576 * Marital_StatusMarried + -2.46591719959114 * Marital_StatusSingle + 
-0.74038175528648 * Marital_StatusTogether ;
3642860   +   H11  =    -1.15243402779036 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.15243402779036 + H11 ;
3642861   +   H12  =    -0.86310188448761 + H12 ;
MPRINT(SCORETABLES):   H12 = -0.86310188448761 + H12 ;
3642862   +   H13  =     -1.5581644524236 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.5581644524236 + H13 ;
3642863   +   H14  =    -0.00456723128744 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.00456723128744 + H14 ;
3642864   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3642865   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3642866   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3642867   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3642868   +END;
MPRINT(SCORETABLES):   END;
3642869   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642870   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3642871   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3642872   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3642873   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3642874   +END;
MPRINT(SCORETABLES):   END;
3642875   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642876   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3642877   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642878   +
3642879   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3642880   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3642881   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3642882   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3642883   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3642884   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3642885   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3642886   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642887   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642888   +end;
MPRINT(SCORETABLES):   end;
3642889   +else do;
MPRINT(SCORETABLES):   else do;
3642890   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3642891   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3642892   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3642893   +   end;
MPRINT(SCORETABLES):   end;
3642894   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3642895   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3642896   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3642897   +   end;
MPRINT(SCORETABLES):   end;
3642898   +   else do;
MPRINT(SCORETABLES):   else do;
3642899   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3642900   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3642901   +   end;
MPRINT(SCORETABLES):   end;
3642902   +end;
MPRINT(SCORETABLES):   end;
3642903   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3642904   +   P_DepVar1  =     4.93734731924067 * H11  +     2.99507663665038 * H12
3642905   +          +     6.31047353793964 * H13  +     -3.6438575378703 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.93734731924067 * H11 + 2.99507663665038 * H12 + 
6.31047353793964 * H13 + -3.6438575378703 * H14 ;
3642906   +   P_DepVar1  =    -0.71411558742548 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.71411558742548 + P_DepVar1 ;
3642907   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3642908   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3642909   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3642910   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3642911   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3642912   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3642913   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3642914   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3642915   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3642916   +END;
MPRINT(SCORETABLES):   END;
3642917   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3642918   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3642919   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3642920   +END;
MPRINT(SCORETABLES):   END;
3642921   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3642922   +   P_DepVar1  =     0.13560090702947;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13560090702947;
3642923   +   P_DepVar0  =     0.86439909297052;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86439909297052;
3642924   +END;
MPRINT(SCORETABLES):   END;
3642925   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3642926   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3642927   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3642928   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3642929   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3642930   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3642931   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3642932   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642933   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3642934   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3642935   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3642936   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3642937   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3642938   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3642939   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3642940   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3642941   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3642942   +END;
MPRINT(SCORETABLES):   END;
3642943   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642944   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3642945   +********************************;
MPRINT(SCORETABLES):   ********************************;
3642946   +drop
3642947   +S_MntCard_Games
3642948   +S_MntMagazines
3642949   +S_NumCatalogPurchases
3642950   +S_NumDealsPurchases
3642951   +S_NumWebPurchases
3642952   +S_RANGE_Frq
3642953   +S_RANGE_Recency
3642954   +S_RANGE_average_purchase
3642955   +S_RANGE_campaign_acceptance
3642956   +H11
3642957   +H12
3642958   +H13
3642959   +H14
3642960   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3642961   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642962   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3642963   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642964   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642965   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3642966   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642967   +end;
MPRINT(SCORETABLES):   end;
3642968   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642969   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3642970   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642971   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642972   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3642973   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642974   +if (cv_var =7)  then do;
MPRINT(SCORETABLES):   if (cv_var =7) then do;
3642975   +_XVAL_=7;
MPRINT(SCORETABLES):   _XVAL_=7;
3642976   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3642977   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3642978   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3642979   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3642980   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3642981   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3642982   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642983   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3642984   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3642985   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3642986   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3642987   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3642988   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3642989   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3642990   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3642991   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3642992   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3642993   +LENGTH _WARN_ $4
3642994   +      F_DepVar  $ 12
3642995   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3642996   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3642997   +
3642998   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3642999   +
3643000   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3643001   +
3643002   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3643003   +
3643004   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3643005   +
3643006   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3643007   +
3643008   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3643009   +
3643010   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3643011   +
3643012   +      label S_RANGE_campaign_acceptance =
3643013   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3643014   +
3643015   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3643016   +
3643017   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3643018   +
3643019   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3643020   +
3643021   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3643022   +
3643023   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3643024   +
3643025   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3643026   +
3643027   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3643028   +
3643029   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3643030   +
3643031   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3643032   +
3643033   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3643034   +
3643035   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3643036   +
3643037   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3643038   +
3643039   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3643040   +
3643041   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3643042   +
3643043   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3643044   +
3643045   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3643046   +
3643047   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3643048   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3643049   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3643050   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3643051   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3643052   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3643053   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3643054   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3643055   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3643056   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643057   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643058   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643059   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643060   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3643061   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643062   +end;
MPRINT(SCORETABLES):   end;
3643063   +else do;
MPRINT(SCORETABLES):   else do;
3643064   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3643065   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3643066   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3643067   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3643068   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3643069   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3643070   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3643071   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3643072   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643073   +         end;
MPRINT(SCORETABLES):   end;
3643074   +         else do;
MPRINT(SCORETABLES):   else do;
3643075   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3643076   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3643077   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643078   +            end;
MPRINT(SCORETABLES):   end;
3643079   +         end;
MPRINT(SCORETABLES):   end;
3643080   +      end;
MPRINT(SCORETABLES):   end;
3643081   +      else do;
MPRINT(SCORETABLES):   else do;
3643082   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3643083   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3643084   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643085   +         end;
MPRINT(SCORETABLES):   end;
3643086   +      end;
MPRINT(SCORETABLES):   end;
3643087   +   end;
MPRINT(SCORETABLES):   end;
3643088   +   else do;
MPRINT(SCORETABLES):   else do;
3643089   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3643090   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3643091   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643092   +      end;
MPRINT(SCORETABLES):   end;
3643093   +      else do;
MPRINT(SCORETABLES):   else do;
3643094   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3643095   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3643096   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3643097   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3643098   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3643099   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643100   +         end;
MPRINT(SCORETABLES):   end;
3643101   +      end;
MPRINT(SCORETABLES):   end;
3643102   +   end;
MPRINT(SCORETABLES):   end;
3643103   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3643104   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643105   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643106   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643107   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643108   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3643109   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643110   +   end;
MPRINT(SCORETABLES):   end;
3643111   +end;
MPRINT(SCORETABLES):   end;
3643112   +
3643113   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643114   +*** Checking missing input Interval
3643115   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3643116   +
3643117   +IF NMISS(
3643118   +   MntCard_Games ,
3643119   +   MntMagazines ,
3643120   +   NumCatalogPurchases ,
3643121   +   NumDealsPurchases ,
3643122   +   NumWebPurchases ,
3643123   +   RANGE_Frq ,
3643124   +   RANGE_Recency ,
3643125   +   RANGE_average_purchase ,
3643126   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3643127   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3643128   +
3643129   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643130   +END;
MPRINT(SCORETABLES):   END;
3643131   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643132   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3643133   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643134   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643135   +   S_MntCard_Games  =    -2.32566901622815 +     6.62675550768494 *
3643136   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32566901622815 + 6.62675550768494 * MntCard_Games ;
3643137   +   S_MntMagazines  =    -0.83833893673669 +     17.3539259376186 *
3643138   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83833893673669 + 17.3539259376186 * MntMagazines ;
3643139   +   S_NumCatalogPurchases  =    -3.10580222135279 +     13.4664328633376 *
3643140   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10580222135279 + 13.4664328633376 * 
NumCatalogPurchases ;
3643141   +   S_NumDealsPurchases  =    -1.41036512227264 +     11.2086682392144 *
3643142   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41036512227264 + 11.2086682392144 * 
NumDealsPurchases ;
3643143   +   S_NumWebPurchases  =    -5.18578405186423 +     12.1737656630904 *
3643144   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.18578405186423 + 12.1737656630904 * 
NumWebPurchases ;
3643145   +   S_RANGE_Frq  =    -1.36570914571755 +     4.22091770312363 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36570914571755 + 4.22091770312363 * RANGE_Frq ;
3643146   +   S_RANGE_Recency  =    -1.65196701596613 +     3.33661306496431 *
3643147   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65196701596613 + 3.33661306496431 * RANGE_Recency ;
3643148   +   S_RANGE_average_purchase  =    -1.03999041798286 +     5.11900418743914 *
3643149   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03999041798286 + 5.11900418743914 * 
RANGE_average_purchase ;
3643150   +   S_RANGE_campaign_acceptance
3643151   +          =    -0.47683012986905 +     5.81023866522069 *
3643152   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47683012986905 + 5.81023866522069 * 
RANGE_campaign_acceptance ;
3643153   +END;
MPRINT(SCORETABLES):   END;
3643154   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643155   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3643156   +   ELSE S_MntCard_Games  =    -2.32566901622815 +     6.62675550768494 *
3643157   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32566901622815 + 6.62675550768494 * 
MntCard_Games ;
3643158   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3643159   +   ELSE S_MntMagazines  =    -0.83833893673669 +     17.3539259376186 *
3643160   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83833893673669 + 17.3539259376186 * 
MntMagazines ;
3643161   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3643162   +   ELSE S_NumCatalogPurchases
3643163   +          =    -3.10580222135279 +     13.4664328633376 * NumCatalogPurchases
3643164   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10580222135279 + 13.4664328633376 * 
NumCatalogPurchases ;
3643165   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3643166   +   ELSE S_NumDealsPurchases  =    -1.41036512227264 +     11.2086682392144 *
3643167   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41036512227264 + 11.2086682392144 * 
NumDealsPurchases ;
3643168   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3643169   +   ELSE S_NumWebPurchases  =    -5.18578405186423 +     12.1737656630904 *
3643170   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.18578405186423 + 12.1737656630904 * 
NumWebPurchases ;
3643171   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3643172   +   ELSE S_RANGE_Frq  =    -1.36570914571755 +     4.22091770312363 * RANGE_Frq
3643173   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36570914571755 + 4.22091770312363 * RANGE_Frq ;
3643174   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3643175   +   ELSE S_RANGE_Recency  =    -1.65196701596613 +     3.33661306496431 *
3643176   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65196701596613 + 3.33661306496431 * 
RANGE_Recency ;
3643177   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3643178   +   ELSE S_RANGE_average_purchase
3643179   +          =    -1.03999041798286 +     5.11900418743914 *
3643180   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03999041798286 + 5.11900418743914 * 
RANGE_average_purchase ;
3643181   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3643182   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3643183   +   ELSE S_RANGE_campaign_acceptance
3643184   +          =    -0.47683012986905 +     5.81023866522069 *
3643185   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47683012986905 + 5.81023866522069 
* RANGE_campaign_acceptance ;
3643186   +END;
MPRINT(SCORETABLES):   END;
3643187   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643188   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3643189   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643190   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643191   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3643192   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643193   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643194   +   H11  =    -1.99078124279021 * S_MntCard_Games  +    -2.57677671258674 *
3643195   +        S_MntMagazines  +    -0.57119038535153 * S_NumCatalogPurchases
3643196   +          +     6.00002833311921 * S_NumDealsPurchases
3643197   +          +    -2.06894608739513 * S_NumWebPurchases
3643198   +          +    -2.74918114690321 * S_RANGE_Frq  +    -0.71523517014041 *
3643199   +        S_RANGE_Recency  +     2.34905964819595 * S_RANGE_average_purchase
3643200   +          +    -1.21011047998039 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -1.99078124279021 * S_MntCard_Games + -2.57677671258674 * 
S_MntMagazines + -0.57119038535153 * S_NumCatalogPurchases + 6.00002833311921 * 
S_NumDealsPurchases + -2.06894608739513 * S_NumWebPurchases + -2.74918114690321 * S_RANGE_Frq 
+ -0.71523517014041 * S_RANGE_Recency + 2.34905964819595 * S_RANGE_average_purchase + 
-1.21011047998039 * S_RANGE_campaign_acceptance ;
3643201   +   H12  =    -0.17796907220939 * S_MntCard_Games  +      0.1766280739958 *
3643202   +        S_MntMagazines  +    -0.19608002461057 * S_NumCatalogPurchases
3643203   +          +    -0.42117275267292 * S_NumDealsPurchases
3643204   +          +     0.18416379321253 * S_NumWebPurchases
3643205   +          +     0.17114106029508 * S_RANGE_Frq  +     0.53348547844022 *
3643206   +        S_RANGE_Recency  +     0.03106905265578 * S_RANGE_average_purchase
3643207   +          +    -0.31203098287819 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = -0.17796907220939 * S_MntCard_Games + 0.1766280739958 * 
S_MntMagazines + -0.19608002461057 * S_NumCatalogPurchases + -0.42117275267292 * 
S_NumDealsPurchases + 0.18416379321253 * S_NumWebPurchases + 0.17114106029508 * S_RANGE_Frq + 
0.53348547844022 * S_RANGE_Recency + 0.03106905265578 * S_RANGE_average_purchase + 
-0.31203098287819 * S_RANGE_campaign_acceptance ;
3643208   +   H13  =    -1.62052228197969 * S_MntCard_Games  +    -0.92947816225903 *
3643209   +        S_MntMagazines  +      -2.554973318951 * S_NumCatalogPurchases
3643210   +          +     0.07785502002185 * S_NumDealsPurchases
3643211   +          +    -2.76835867548817 * S_NumWebPurchases
3643212   +          +     0.80442036207394 * S_RANGE_Frq  +     1.72317698692754 *
3643213   +        S_RANGE_Recency  +    -6.57338524838029 * S_RANGE_average_purchase
3643214   +          +    -1.51036740216942 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.62052228197969 * S_MntCard_Games + -0.92947816225903 * 
S_MntMagazines + -2.554973318951 * S_NumCatalogPurchases + 0.07785502002185 * 
S_NumDealsPurchases + -2.76835867548817 * S_NumWebPurchases + 0.80442036207394 * S_RANGE_Frq + 
1.72317698692754 * S_RANGE_Recency + -6.57338524838029 * S_RANGE_average_purchase + 
-1.51036740216942 * S_RANGE_campaign_acceptance ;
3643215   +   H14  =     1.22081025065353 * S_MntCard_Games  +     0.32300001813479 *
3643216   +        S_MntMagazines  +     0.34640799570748 * S_NumCatalogPurchases
3643217   +          +     0.11222129003533 * S_NumDealsPurchases
3643218   +          +     2.08004102142272 * S_NumWebPurchases
3643219   +          +     0.77957399132416 * S_RANGE_Frq  +    -1.31984990566252 *
3643220   +        S_RANGE_Recency  +       0.786157499993 * S_RANGE_average_purchase
3643221   +          +     0.44606768863213 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = 1.22081025065353 * S_MntCard_Games + 0.32300001813479 * 
S_MntMagazines + 0.34640799570748 * S_NumCatalogPurchases + 0.11222129003533 * 
S_NumDealsPurchases + 2.08004102142272 * S_NumWebPurchases + 0.77957399132416 * S_RANGE_Frq + 
-1.31984990566252 * S_RANGE_Recency + 0.786157499993 * S_RANGE_average_purchase + 
0.44606768863213 * S_RANGE_campaign_acceptance ;
3643222   +   H11  = H11  +    -6.90881416541971 * Marital_StatusDivorced
3643223   +          +     5.22895561161197 * Marital_StatusMarried
3643224   +          +      2.1994135574997 * Marital_StatusSingle
3643225   +          +    -2.69988652560093 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -6.90881416541971 * Marital_StatusDivorced + 
5.22895561161197 * Marital_StatusMarried + 2.1994135574997 * Marital_StatusSingle + 
-2.69988652560093 * Marital_StatusTogether ;
3643226   +   H12  = H12  +    -0.11590996559238 * Marital_StatusDivorced
3643227   +          +    -0.01750822029069 * Marital_StatusMarried
3643228   +          +    -0.38106683420781 * Marital_StatusSingle
3643229   +          +     0.32992266074323 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.11590996559238 * Marital_StatusDivorced + 
-0.01750822029069 * Marital_StatusMarried + -0.38106683420781 * Marital_StatusSingle + 
0.32992266074323 * Marital_StatusTogether ;
3643230   +   H13  = H13  +    -1.36446224818749 * Marital_StatusDivorced
3643231   +          +    -0.68514521746406 * Marital_StatusMarried
3643232   +          +    -0.38283453186995 * Marital_StatusSingle
3643233   +          +    -4.69372202448851 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.36446224818749 * Marital_StatusDivorced + 
-0.68514521746406 * Marital_StatusMarried + -0.38283453186995 * Marital_StatusSingle + 
-4.69372202448851 * Marital_StatusTogether ;
3643234   +   H14  = H14  +    -2.99668945539283 * Marital_StatusDivorced
3643235   +          +    -1.64251562837726 * Marital_StatusMarried
3643236   +          +    -2.05182634514975 * Marital_StatusSingle
3643237   +          +    -1.91427467318923 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -2.99668945539283 * Marital_StatusDivorced + 
-1.64251562837726 * Marital_StatusMarried + -2.05182634514975 * Marital_StatusSingle + 
-1.91427467318923 * Marital_StatusTogether ;
3643238   +   H11  =     4.55554931841287 + H11 ;
MPRINT(SCORETABLES):   H11 = 4.55554931841287 + H11 ;
3643239   +   H12  =      0.4980934825475 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.4980934825475 + H12 ;
3643240   +   H13  =    -1.00667598615787 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.00667598615787 + H13 ;
3643241   +   H14  =    -1.97041305642299 + H14 ;
MPRINT(SCORETABLES):   H14 = -1.97041305642299 + H14 ;
3643242   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3643243   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3643244   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3643245   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3643246   +END;
MPRINT(SCORETABLES):   END;
3643247   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643248   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3643249   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3643250   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3643251   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3643252   +END;
MPRINT(SCORETABLES):   END;
3643253   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643254   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3643255   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643256   +
3643257   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3643258   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3643259   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3643260   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3643261   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3643262   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3643263   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3643264   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3643265   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3643266   +end;
MPRINT(SCORETABLES):   end;
3643267   +else do;
MPRINT(SCORETABLES):   else do;
3643268   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3643269   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3643270   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3643271   +   end;
MPRINT(SCORETABLES):   end;
3643272   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3643273   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3643274   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3643275   +   end;
MPRINT(SCORETABLES):   end;
3643276   +   else do;
MPRINT(SCORETABLES):   else do;
3643277   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3643278   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3643279   +   end;
MPRINT(SCORETABLES):   end;
3643280   +end;
MPRINT(SCORETABLES):   end;
3643281   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643282   +   P_DepVar1  =    -2.51798029802435 * H11  +    -10.4449196962588 * H12
3643283   +          +    -2.90917039781381 * H13  +     3.72704010181487 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.51798029802435 * H11 + -10.4449196962588 * H12 + 
-2.90917039781381 * H13 + 3.72704010181487 * H14 ;
3643284   +   P_DepVar1  =     -1.5940076973692 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.5940076973692 + P_DepVar1 ;
3643285   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3643286   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3643287   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3643288   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3643289   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3643290   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3643291   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3643292   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3643293   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3643294   +END;
MPRINT(SCORETABLES):   END;
3643295   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643296   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3643297   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3643298   +END;
MPRINT(SCORETABLES):   END;
3643299   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3643300   +   P_DepVar1  =     0.13489871086556;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13489871086556;
3643301   +   P_DepVar0  =     0.86510128913443;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86510128913443;
3643302   +END;
MPRINT(SCORETABLES):   END;
3643303   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3643304   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3643305   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3643306   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3643307   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3643308   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3643309   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3643310   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643311   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3643312   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643313   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3643314   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3643315   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3643316   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3643317   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3643318   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3643319   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3643320   +END;
MPRINT(SCORETABLES):   END;
3643321   +********************************;
MPRINT(SCORETABLES):   ********************************;
3643322   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3643323   +********************************;
MPRINT(SCORETABLES):   ********************************;
3643324   +drop
3643325   +S_MntCard_Games
3643326   +S_MntMagazines
3643327   +S_NumCatalogPurchases
3643328   +S_NumDealsPurchases
3643329   +S_NumWebPurchases
3643330   +S_RANGE_Frq
3643331   +S_RANGE_Recency
3643332   +S_RANGE_average_purchase
3643333   +S_RANGE_campaign_acceptance
3643334   +H11
3643335   +H12
3643336   +H13
3643337   +H14
3643338   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3643339   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643340   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3643341   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643342   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643343   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3643344   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643345   +end;
MPRINT(SCORETABLES):   end;
3643346   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643347   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3643348   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643349   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643350   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3643351   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643352   +if (cv_var =8)  then do;
MPRINT(SCORETABLES):   if (cv_var =8) then do;
3643353   +_XVAL_=8;
MPRINT(SCORETABLES):   _XVAL_=8;
3643354   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643355   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3643356   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643357   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643358   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3643359   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643360   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3643361   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3643362   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3643363   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3643364   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3643365   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3643366   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3643367   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3643368   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3643369   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3643370   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3643371   +LENGTH _WARN_ $4
3643372   +      F_DepVar  $ 12
3643373   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3643374   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3643375   +
3643376   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3643377   +
3643378   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3643379   +
3643380   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3643381   +
3643382   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3643383   +
3643384   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3643385   +
3643386   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3643387   +
3643388   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3643389   +
3643390   +      label S_RANGE_campaign_acceptance =
3643391   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3643392   +
3643393   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3643394   +
3643395   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3643396   +
3643397   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3643398   +
3643399   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3643400   +
3643401   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3643402   +
3643403   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3643404   +
3643405   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3643406   +
3643407   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3643408   +
3643409   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3643410   +
3643411   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3643412   +
3643413   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3643414   +
3643415   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3643416   +
3643417   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3643418   +
3643419   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3643420   +
3643421   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3643422   +
3643423   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3643424   +
3643425   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3643426   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3643427   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3643428   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3643429   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3643430   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3643431   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3643432   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3643433   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3643434   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643435   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643436   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643437   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643438   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3643439   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643440   +end;
MPRINT(SCORETABLES):   end;
3643441   +else do;
MPRINT(SCORETABLES):   else do;
3643442   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3643443   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3643444   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3643445   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3643446   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3643447   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3643448   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3643449   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3643450   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643451   +         end;
MPRINT(SCORETABLES):   end;
3643452   +         else do;
MPRINT(SCORETABLES):   else do;
3643453   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3643454   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3643455   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643456   +            end;
MPRINT(SCORETABLES):   end;
3643457   +         end;
MPRINT(SCORETABLES):   end;
3643458   +      end;
MPRINT(SCORETABLES):   end;
3643459   +      else do;
MPRINT(SCORETABLES):   else do;
3643460   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3643461   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3643462   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643463   +         end;
MPRINT(SCORETABLES):   end;
3643464   +      end;
MPRINT(SCORETABLES):   end;
3643465   +   end;
MPRINT(SCORETABLES):   end;
3643466   +   else do;
MPRINT(SCORETABLES):   else do;
3643467   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3643468   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3643469   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643470   +      end;
MPRINT(SCORETABLES):   end;
3643471   +      else do;
MPRINT(SCORETABLES):   else do;
3643472   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3643473   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3643474   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3643475   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3643476   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3643477   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643478   +         end;
MPRINT(SCORETABLES):   end;
3643479   +      end;
MPRINT(SCORETABLES):   end;
3643480   +   end;
MPRINT(SCORETABLES):   end;
3643481   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3643482   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643483   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643484   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643485   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643486   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3643487   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643488   +   end;
MPRINT(SCORETABLES):   end;
3643489   +end;
MPRINT(SCORETABLES):   end;
3643490   +
3643491   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643492   +*** Checking missing input Interval
3643493   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3643494   +
3643495   +IF NMISS(
3643496   +   MntCard_Games ,
3643497   +   MntMagazines ,
3643498   +   NumCatalogPurchases ,
3643499   +   NumDealsPurchases ,
3643500   +   NumWebPurchases ,
3643501   +   RANGE_Frq ,
3643502   +   RANGE_Recency ,
3643503   +   RANGE_average_purchase ,
3643504   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3643505   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3643506   +
3643507   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643508   +END;
MPRINT(SCORETABLES):   END;
3643509   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643510   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3643511   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643512   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643513   +   S_MntCard_Games  =     -2.3061471677236 +     6.62411925379739 *
3643514   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3061471677236 + 6.62411925379739 * MntCard_Games ;
3643515   +   S_MntMagazines  =    -0.83644618203261 +     17.2055527557928 *
3643516   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83644618203261 + 17.2055527557928 * MntMagazines ;
3643517   +   S_NumCatalogPurchases  =    -3.12006402430299 +     13.5160200409435 *
3643518   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12006402430299 + 13.5160200409435 * 
NumCatalogPurchases ;
3643519   +   S_NumDealsPurchases  =    -1.41102881448386 +     11.1924289330432 *
3643520   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41102881448386 + 11.1924289330432 * 
NumDealsPurchases ;
3643521   +   S_NumWebPurchases  =    -5.24057308105718 +      12.271546597467 *
3643522   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.24057308105718 + 12.271546597467 * 
NumWebPurchases ;
3643523   +   S_RANGE_Frq  =    -1.36420385813888 +     4.22157760848426 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36420385813888 + 4.22157760848426 * RANGE_Frq ;
3643524   +   S_RANGE_Recency  =    -1.65803902925655 +     3.34972940227475 *
3643525   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65803902925655 + 3.34972940227475 * RANGE_Recency ;
3643526   +   S_RANGE_average_purchase  =    -1.03776593003366 +     5.17054066293141 *
3643527   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03776593003366 + 5.17054066293141 * 
RANGE_average_purchase ;
3643528   +   S_RANGE_campaign_acceptance
3643529   +          =    -0.47401292353208 +     5.72192038652706 *
3643530   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47401292353208 + 5.72192038652706 * 
RANGE_campaign_acceptance ;
3643531   +END;
MPRINT(SCORETABLES):   END;
3643532   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643533   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3643534   +   ELSE S_MntCard_Games  =     -2.3061471677236 +     6.62411925379739 *
3643535   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3061471677236 + 6.62411925379739 * 
MntCard_Games ;
3643536   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3643537   +   ELSE S_MntMagazines  =    -0.83644618203261 +     17.2055527557928 *
3643538   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83644618203261 + 17.2055527557928 * 
MntMagazines ;
3643539   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3643540   +   ELSE S_NumCatalogPurchases
3643541   +          =    -3.12006402430299 +     13.5160200409435 * NumCatalogPurchases
3643542   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12006402430299 + 13.5160200409435 * 
NumCatalogPurchases ;
3643543   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3643544   +   ELSE S_NumDealsPurchases  =    -1.41102881448386 +     11.1924289330432 *
3643545   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41102881448386 + 11.1924289330432 * 
NumDealsPurchases ;
3643546   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3643547   +   ELSE S_NumWebPurchases  =    -5.24057308105718 +      12.271546597467 *
3643548   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.24057308105718 + 12.271546597467 * 
NumWebPurchases ;
3643549   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3643550   +   ELSE S_RANGE_Frq  =    -1.36420385813888 +     4.22157760848426 * RANGE_Frq
3643551   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36420385813888 + 4.22157760848426 * RANGE_Frq ;
3643552   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3643553   +   ELSE S_RANGE_Recency  =    -1.65803902925655 +     3.34972940227475 *
3643554   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65803902925655 + 3.34972940227475 * 
RANGE_Recency ;
3643555   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3643556   +   ELSE S_RANGE_average_purchase
3643557   +          =    -1.03776593003366 +     5.17054066293141 *
3643558   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03776593003366 + 5.17054066293141 * 
RANGE_average_purchase ;
3643559   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3643560   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3643561   +   ELSE S_RANGE_campaign_acceptance
3643562   +          =    -0.47401292353208 +     5.72192038652706 *
3643563   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47401292353208 + 5.72192038652706 
* RANGE_campaign_acceptance ;
3643564   +END;
MPRINT(SCORETABLES):   END;
3643565   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643566   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3643567   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643568   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643569   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3643570   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643571   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643572   +   H11  =    -0.84085392840898 * S_MntCard_Games  +    -0.06632767331811 *
3643573   +        S_MntMagazines  +    -0.51902229955706 * S_NumCatalogPurchases
3643574   +          +    -0.51079335948103 * S_NumDealsPurchases
3643575   +          +    -0.51236736824871 * S_NumWebPurchases
3643576   +          +    -0.21815401068497 * S_RANGE_Frq  +     1.06312975930581 *
3643577   +        S_RANGE_Recency  +    -0.32932357735513 * S_RANGE_average_purchase
3643578   +          +    -1.00005481405525 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.84085392840898 * S_MntCard_Games + -0.06632767331811 * 
S_MntMagazines + -0.51902229955706 * S_NumCatalogPurchases + -0.51079335948103 * 
S_NumDealsPurchases + -0.51236736824871 * S_NumWebPurchases + -0.21815401068497 * S_RANGE_Frq 
+ 1.06312975930581 * S_RANGE_Recency + -0.32932357735513 * S_RANGE_average_purchase + 
-1.00005481405525 * S_RANGE_campaign_acceptance ;
3643579   +   H12  =     0.26729022814889 * S_MntCard_Games  +    -0.08272798533593 *
3643580   +        S_MntMagazines  +     0.19376857003897 * S_NumCatalogPurchases
3643581   +          +     0.83924298716214 * S_NumDealsPurchases
3643582   +          +    -0.03025455994063 * S_NumWebPurchases
3643583   +          +    -1.07836941827622 * S_RANGE_Frq  +    -0.24926396105368 *
3643584   +        S_RANGE_Recency  +     0.19525479496428 * S_RANGE_average_purchase
3643585   +          +     0.44149626307863 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.26729022814889 * S_MntCard_Games + -0.08272798533593 * 
S_MntMagazines + 0.19376857003897 * S_NumCatalogPurchases + 0.83924298716214 * 
S_NumDealsPurchases + -0.03025455994063 * S_NumWebPurchases + -1.07836941827622 * S_RANGE_Frq 
+ -0.24926396105368 * S_RANGE_Recency + 0.19525479496428 * S_RANGE_average_purchase + 
0.44149626307863 * S_RANGE_campaign_acceptance ;
3643586   +   H13  =    -1.04339016093567 * S_MntCard_Games  +     0.17402739732699 *
3643587   +        S_MntMagazines  +     -1.3192753012206 * S_NumCatalogPurchases
3643588   +          +    -0.69611690098417 * S_NumDealsPurchases
3643589   +          +    -0.45213064280598 * S_NumWebPurchases
3643590   +          +     0.68898849624792 * S_RANGE_Frq  +     2.11841535848534 *
3643591   +        S_RANGE_Recency  +    -2.36813364977242 * S_RANGE_average_purchase
3643592   +          +    -0.84229612563544 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.04339016093567 * S_MntCard_Games + 0.17402739732699 * 
S_MntMagazines + -1.3192753012206 * S_NumCatalogPurchases + -0.69611690098417 * 
S_NumDealsPurchases + -0.45213064280598 * S_NumWebPurchases + 0.68898849624792 * S_RANGE_Frq + 
2.11841535848534 * S_RANGE_Recency + -2.36813364977242 * S_RANGE_average_purchase + 
-0.84229612563544 * S_RANGE_campaign_acceptance ;
3643593   +   H14  =    -0.90192904122583 * S_MntCard_Games  +    -1.10916462036723 *
3643594   +        S_MntMagazines  +    -1.25440323658795 * S_NumCatalogPurchases
3643595   +          +    -2.98411447551456 * S_NumDealsPurchases
3643596   +          +    -0.03862249576008 * S_NumWebPurchases
3643597   +          +    -1.56178268313126 * S_RANGE_Frq  +     3.63341570445644 *
3643598   +        S_RANGE_Recency  +     1.38467403332559 * S_RANGE_average_purchase
3643599   +          +    -0.91805089491933 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.90192904122583 * S_MntCard_Games + -1.10916462036723 * 
S_MntMagazines + -1.25440323658795 * S_NumCatalogPurchases + -2.98411447551456 * 
S_NumDealsPurchases + -0.03862249576008 * S_NumWebPurchases + -1.56178268313126 * S_RANGE_Frq 
+ 3.63341570445644 * S_RANGE_Recency + 1.38467403332559 * S_RANGE_average_purchase + 
-0.91805089491933 * S_RANGE_campaign_acceptance ;
3643600   +   H11  = H11  +    -0.01339291874133 * Marital_StatusDivorced
3643601   +          +    -0.46476039538126 * Marital_StatusMarried
3643602   +          +     -0.1248759165448 * Marital_StatusSingle
3643603   +          +     0.27822576952513 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.01339291874133 * Marital_StatusDivorced + 
-0.46476039538126 * Marital_StatusMarried + -0.1248759165448 * Marital_StatusSingle + 
0.27822576952513 * Marital_StatusTogether ;
3643604   +   H12  = H12  +     3.04776337179674 * Marital_StatusDivorced
3643605   +          +    -2.76159888087079 * Marital_StatusMarried
3643606   +          +     2.08067448006719 * Marital_StatusSingle
3643607   +          +    -2.72500211096495 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + 3.04776337179674 * Marital_StatusDivorced + 
-2.76159888087079 * Marital_StatusMarried + 2.08067448006719 * Marital_StatusSingle + 
-2.72500211096495 * Marital_StatusTogether ;
3643608   +   H13  = H13  +     0.00592814807394 * Marital_StatusDivorced
3643609   +          +      0.9993082608617 * Marital_StatusMarried
3643610   +          +      0.0399231652124 * Marital_StatusSingle
3643611   +          +    -0.11706308039723 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.00592814807394 * Marital_StatusDivorced + 0.9993082608617 
* Marital_StatusMarried + 0.0399231652124 * Marital_StatusSingle + -0.11706308039723 * 
Marital_StatusTogether ;
3643612   +   H14  = H14  +     -2.9427283610642 * Marital_StatusDivorced
3643613   +          +     2.30335388241854 * Marital_StatusMarried
3643614   +          +    -0.64954132281012 * Marital_StatusSingle
3643615   +          +     1.54845795971404 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -2.9427283610642 * Marital_StatusDivorced + 
2.30335388241854 * Marital_StatusMarried + -0.64954132281012 * Marital_StatusSingle + 
1.54845795971404 * Marital_StatusTogether ;
3643616   +   H11  =     2.38100793491637 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.38100793491637 + H11 ;
3643617   +   H12  =     2.50151964840725 + H12 ;
MPRINT(SCORETABLES):   H12 = 2.50151964840725 + H12 ;
3643618   +   H13  =     0.25489155779536 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.25489155779536 + H13 ;
3643619   +   H14  =    -2.49389063805424 + H14 ;
MPRINT(SCORETABLES):   H14 = -2.49389063805424 + H14 ;
3643620   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3643621   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3643622   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3643623   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3643624   +END;
MPRINT(SCORETABLES):   END;
3643625   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643626   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3643627   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3643628   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3643629   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3643630   +END;
MPRINT(SCORETABLES):   END;
3643631   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643632   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3643633   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643634   +
3643635   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3643636   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3643637   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3643638   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3643639   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3643640   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3643641   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3643642   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3643643   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3643644   +end;
MPRINT(SCORETABLES):   end;
3643645   +else do;
MPRINT(SCORETABLES):   else do;
3643646   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3643647   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3643648   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3643649   +   end;
MPRINT(SCORETABLES):   end;
3643650   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3643651   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3643652   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3643653   +   end;
MPRINT(SCORETABLES):   end;
3643654   +   else do;
MPRINT(SCORETABLES):   else do;
3643655   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3643656   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3643657   +   end;
MPRINT(SCORETABLES):   end;
3643658   +end;
MPRINT(SCORETABLES):   end;
3643659   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643660   +   P_DepVar1  =    -4.47459288631957 * H11  +     2.93340393867413 * H12
3643661   +          +    -4.36299402823251 * H13  +    -3.52632967301212 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -4.47459288631957 * H11 + 2.93340393867413 * H12 + 
-4.36299402823251 * H13 + -3.52632967301212 * H14 ;
3643662   +   P_DepVar1  =    -7.77365536443336 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -7.77365536443336 + P_DepVar1 ;
3643663   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3643664   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3643665   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3643666   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3643667   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3643668   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3643669   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3643670   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3643671   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3643672   +END;
MPRINT(SCORETABLES):   END;
3643673   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643674   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3643675   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3643676   +END;
MPRINT(SCORETABLES):   END;
3643677   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3643678   +   P_DepVar1  =     0.13663186563776;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13663186563776;
3643679   +   P_DepVar0  =     0.86336813436223;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86336813436223;
3643680   +END;
MPRINT(SCORETABLES):   END;
3643681   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3643682   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3643683   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3643684   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3643685   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3643686   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3643687   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3643688   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643689   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3643690   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643691   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3643692   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3643693   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3643694   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3643695   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3643696   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3643697   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3643698   +END;
MPRINT(SCORETABLES):   END;
3643699   +********************************;
MPRINT(SCORETABLES):   ********************************;
3643700   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3643701   +********************************;
MPRINT(SCORETABLES):   ********************************;
3643702   +drop
3643703   +S_MntCard_Games
3643704   +S_MntMagazines
3643705   +S_NumCatalogPurchases
3643706   +S_NumDealsPurchases
3643707   +S_NumWebPurchases
3643708   +S_RANGE_Frq
3643709   +S_RANGE_Recency
3643710   +S_RANGE_average_purchase
3643711   +S_RANGE_campaign_acceptance
3643712   +H11
3643713   +H12
3643714   +H13
3643715   +H14
3643716   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3643717   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643718   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3643719   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643720   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643721   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3643722   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643723   +end;
MPRINT(SCORETABLES):   end;
3643724   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643725   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3643726   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643727   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643728   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3643729   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643730   +if (cv_var =9)  then do;
MPRINT(SCORETABLES):   if (cv_var =9) then do;
3643731   +_XVAL_=9;
MPRINT(SCORETABLES):   _XVAL_=9;
3643732   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3643733   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3643734   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3643735   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3643736   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3643737   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3643738   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3643739   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3643740   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3643741   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3643742   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3643743   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3643744   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3643745   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3643746   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3643747   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3643748   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3643749   +LENGTH _WARN_ $4
3643750   +      F_DepVar  $ 12
3643751   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3643752   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3643753   +
3643754   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3643755   +
3643756   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3643757   +
3643758   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3643759   +
3643760   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3643761   +
3643762   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3643763   +
3643764   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3643765   +
3643766   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3643767   +
3643768   +      label S_RANGE_campaign_acceptance =
3643769   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3643770   +
3643771   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3643772   +
3643773   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3643774   +
3643775   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3643776   +
3643777   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3643778   +
3643779   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3643780   +
3643781   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3643782   +
3643783   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3643784   +
3643785   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3643786   +
3643787   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3643788   +
3643789   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3643790   +
3643791   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3643792   +
3643793   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3643794   +
3643795   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3643796   +
3643797   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3643798   +
3643799   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3643800   +
3643801   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3643802   +
3643803   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3643804   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3643805   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3643806   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3643807   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3643808   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3643809   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3643810   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3643811   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3643812   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643813   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643814   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643815   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643816   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3643817   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643818   +end;
MPRINT(SCORETABLES):   end;
3643819   +else do;
MPRINT(SCORETABLES):   else do;
3643820   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3643821   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3643822   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3643823   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3643824   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3643825   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3643826   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3643827   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3643828   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643829   +         end;
MPRINT(SCORETABLES):   end;
3643830   +         else do;
MPRINT(SCORETABLES):   else do;
3643831   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3643832   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3643833   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643834   +            end;
MPRINT(SCORETABLES):   end;
3643835   +         end;
MPRINT(SCORETABLES):   end;
3643836   +      end;
MPRINT(SCORETABLES):   end;
3643837   +      else do;
MPRINT(SCORETABLES):   else do;
3643838   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3643839   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3643840   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643841   +         end;
MPRINT(SCORETABLES):   end;
3643842   +      end;
MPRINT(SCORETABLES):   end;
3643843   +   end;
MPRINT(SCORETABLES):   end;
3643844   +   else do;
MPRINT(SCORETABLES):   else do;
3643845   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3643846   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3643847   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643848   +      end;
MPRINT(SCORETABLES):   end;
3643849   +      else do;
MPRINT(SCORETABLES):   else do;
3643850   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3643851   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3643852   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3643853   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3643854   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3643855   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3643856   +         end;
MPRINT(SCORETABLES):   end;
3643857   +      end;
MPRINT(SCORETABLES):   end;
3643858   +   end;
MPRINT(SCORETABLES):   end;
3643859   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3643860   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3643861   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3643862   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3643863   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3643864   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3643865   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643866   +   end;
MPRINT(SCORETABLES):   end;
3643867   +end;
MPRINT(SCORETABLES):   end;
3643868   +
3643869   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643870   +*** Checking missing input Interval
3643871   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3643872   +
3643873   +IF NMISS(
3643874   +   MntCard_Games ,
3643875   +   MntMagazines ,
3643876   +   NumCatalogPurchases ,
3643877   +   NumDealsPurchases ,
3643878   +   NumWebPurchases ,
3643879   +   RANGE_Frq ,
3643880   +   RANGE_Recency ,
3643881   +   RANGE_average_purchase ,
3643882   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3643883   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3643884   +
3643885   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3643886   +END;
MPRINT(SCORETABLES):   END;
3643887   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643888   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3643889   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643890   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643891   +   S_MntCard_Games  =    -2.32305063803042 +     6.62296326392696 *
3643892   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32305063803042 + 6.62296326392696 * MntCard_Games ;
3643893   +   S_MntMagazines  =    -0.83743715165094 +     17.2557683681788 *
3643894   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83743715165094 + 17.2557683681788 * MntMagazines ;
3643895   +   S_NumCatalogPurchases  =    -3.10529221517931 +     13.4443396287062 *
3643896   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10529221517931 + 13.4443396287062 * 
NumCatalogPurchases ;
3643897   +   S_NumDealsPurchases  =    -1.41942573823989 +     11.1591434336611 *
3643898   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41942573823989 + 11.1591434336611 * 
NumDealsPurchases ;
3643899   +   S_NumWebPurchases  =    -5.22935751211101 +     12.2529435207201 *
3643900   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22935751211101 + 12.2529435207201 * 
NumWebPurchases ;
3643901   +   S_RANGE_Frq  =    -1.36631161721433 +     4.23876448101209 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36631161721433 + 4.23876448101209 * RANGE_Frq ;
3643902   +   S_RANGE_Recency  =    -1.66510588698585 +     3.34389270312286 *
3643903   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66510588698585 + 3.34389270312286 * RANGE_Recency ;
3643904   +   S_RANGE_average_purchase  =    -1.03662703247946 +     5.13922454231074 *
3643905   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03662703247946 + 5.13922454231074 * 
RANGE_average_purchase ;
3643906   +   S_RANGE_campaign_acceptance
3643907   +          =    -0.48150797928749 +     5.76771283006363 *
3643908   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.48150797928749 + 5.76771283006363 * 
RANGE_campaign_acceptance ;
3643909   +END;
MPRINT(SCORETABLES):   END;
3643910   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3643911   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3643912   +   ELSE S_MntCard_Games  =    -2.32305063803042 +     6.62296326392696 *
3643913   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32305063803042 + 6.62296326392696 * 
MntCard_Games ;
3643914   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3643915   +   ELSE S_MntMagazines  =    -0.83743715165094 +     17.2557683681788 *
3643916   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83743715165094 + 17.2557683681788 * 
MntMagazines ;
3643917   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3643918   +   ELSE S_NumCatalogPurchases
3643919   +          =    -3.10529221517931 +     13.4443396287062 * NumCatalogPurchases
3643920   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10529221517931 + 13.4443396287062 * 
NumCatalogPurchases ;
3643921   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3643922   +   ELSE S_NumDealsPurchases  =    -1.41942573823989 +     11.1591434336611 *
3643923   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41942573823989 + 11.1591434336611 * 
NumDealsPurchases ;
3643924   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3643925   +   ELSE S_NumWebPurchases  =    -5.22935751211101 +     12.2529435207201 *
3643926   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22935751211101 + 12.2529435207201 * 
NumWebPurchases ;
3643927   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3643928   +   ELSE S_RANGE_Frq  =    -1.36631161721433 +     4.23876448101209 * RANGE_Frq
3643929   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36631161721433 + 4.23876448101209 * RANGE_Frq ;
3643930   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3643931   +   ELSE S_RANGE_Recency  =    -1.66510588698585 +     3.34389270312286 *
3643932   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66510588698585 + 3.34389270312286 * 
RANGE_Recency ;
3643933   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3643934   +   ELSE S_RANGE_average_purchase
3643935   +          =    -1.03662703247946 +     5.13922454231074 *
3643936   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03662703247946 + 5.13922454231074 * 
RANGE_average_purchase ;
3643937   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3643938   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3643939   +   ELSE S_RANGE_campaign_acceptance
3643940   +          =    -0.48150797928749 +     5.76771283006363 *
3643941   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.48150797928749 + 5.76771283006363 
* RANGE_campaign_acceptance ;
3643942   +END;
MPRINT(SCORETABLES):   END;
3643943   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643944   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3643945   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643946   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643947   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3643948   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3643949   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3643950   +   H11  =    -0.39747320333835 * S_MntCard_Games  +    -0.25183122929337 *
3643951   +        S_MntMagazines  +    -0.57773877568295 * S_NumCatalogPurchases
3643952   +          +     -0.6322169381628 * S_NumDealsPurchases
3643953   +          +      0.5252802099865 * S_NumWebPurchases
3643954   +          +     0.23485789050863 * S_RANGE_Frq  +    -0.07574564241971 *
3643955   +        S_RANGE_Recency  +    -0.65914660665246 * S_RANGE_average_purchase
3643956   +          +    -0.81529806931608 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.39747320333835 * S_MntCard_Games + -0.25183122929337 * 
S_MntMagazines + -0.57773877568295 * S_NumCatalogPurchases + -0.6322169381628 * 
S_NumDealsPurchases + 0.5252802099865 * S_NumWebPurchases + 0.23485789050863 * S_RANGE_Frq + 
-0.07574564241971 * S_RANGE_Recency + -0.65914660665246 * S_RANGE_average_purchase + 
-0.81529806931608 * S_RANGE_campaign_acceptance ;
3643957   +   H12  =     1.20158491407123 * S_MntCard_Games  +     0.29157626460589 *
3643958   +        S_MntMagazines  +     0.65840999134004 * S_NumCatalogPurchases
3643959   +          +     0.53843038360722 * S_NumDealsPurchases
3643960   +          +     1.28210274981786 * S_NumWebPurchases
3643961   +          +     0.73697515362549 * S_RANGE_Frq  +    -1.44164502696012 *
3643962   +        S_RANGE_Recency  +     0.23708411342304 * S_RANGE_average_purchase
3643963   +          +     0.62790597066881 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.20158491407123 * S_MntCard_Games + 0.29157626460589 * 
S_MntMagazines + 0.65840999134004 * S_NumCatalogPurchases + 0.53843038360722 * 
S_NumDealsPurchases + 1.28210274981786 * S_NumWebPurchases + 0.73697515362549 * S_RANGE_Frq + 
-1.44164502696012 * S_RANGE_Recency + 0.23708411342304 * S_RANGE_average_purchase + 
0.62790597066881 * S_RANGE_campaign_acceptance ;
3643964   +   H13  =     0.79913669001804 * S_MntCard_Games  +     0.51463308209166 *
3643965   +        S_MntMagazines  +     1.59364944460266 * S_NumCatalogPurchases
3643966   +          +     0.87208087897651 * S_NumDealsPurchases
3643967   +          +     0.66504425377177 * S_NumWebPurchases
3643968   +          +    -0.02933118675441 * S_RANGE_Frq  +    -2.52732528398839 *
3643969   +        S_RANGE_Recency  +     0.38444758941878 * S_RANGE_average_purchase
3643970   +          +     0.95012294848935 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.79913669001804 * S_MntCard_Games + 0.51463308209166 * 
S_MntMagazines + 1.59364944460266 * S_NumCatalogPurchases + 0.87208087897651 * 
S_NumDealsPurchases + 0.66504425377177 * S_NumWebPurchases + -0.02933118675441 * S_RANGE_Frq + 
-2.52732528398839 * S_RANGE_Recency + 0.38444758941878 * S_RANGE_average_purchase + 
0.95012294848935 * S_RANGE_campaign_acceptance ;
3643971   +   H14  =    -0.27694654560829 * S_MntCard_Games  +     -1.2311099665442 *
3643972   +        S_MntMagazines  +    -0.66153887083111 * S_NumCatalogPurchases
3643973   +          +      0.1794623946668 * S_NumDealsPurchases
3643974   +          +    -0.71091962201945 * S_NumWebPurchases
3643975   +          +    -0.40720505986114 * S_RANGE_Frq  +    -0.45786381523031 *
3643976   +        S_RANGE_Recency  +    -0.98056066826381 * S_RANGE_average_purchase
3643977   +          +      0.1188918651258 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.27694654560829 * S_MntCard_Games + -1.2311099665442 * 
S_MntMagazines + -0.66153887083111 * S_NumCatalogPurchases + 0.1794623946668 * 
S_NumDealsPurchases + -0.71091962201945 * S_NumWebPurchases + -0.40720505986114 * S_RANGE_Frq 
+ -0.45786381523031 * S_RANGE_Recency + -0.98056066826381 * S_RANGE_average_purchase + 
0.1188918651258 * S_RANGE_campaign_acceptance ;
3643978   +   H11  = H11  +    -0.58048496810146 * Marital_StatusDivorced
3643979   +          +    -0.31374219533616 * Marital_StatusMarried
3643980   +          +     0.53011056146455 * Marital_StatusSingle
3643981   +          +     0.43514875932913 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.58048496810146 * Marital_StatusDivorced + 
-0.31374219533616 * Marital_StatusMarried + 0.53011056146455 * Marital_StatusSingle + 
0.43514875932913 * Marital_StatusTogether ;
3643982   +   H12  = H12  +    -0.01485740060133 * Marital_StatusDivorced
3643983   +          +      0.0633317557359 * Marital_StatusMarried
3643984   +          +      -0.167359925907 * Marital_StatusSingle
3643985   +          +    -0.08355825292542 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.01485740060133 * Marital_StatusDivorced + 
0.0633317557359 * Marital_StatusMarried + -0.167359925907 * Marital_StatusSingle + 
-0.08355825292542 * Marital_StatusTogether ;
3643986   +   H13  = H13  +     0.18543704566327 * Marital_StatusDivorced
3643987   +          +    -0.59482428144644 * Marital_StatusMarried
3643988   +          +     0.60377790114405 * Marital_StatusSingle
3643989   +          +     0.01729261240134 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.18543704566327 * Marital_StatusDivorced + 
-0.59482428144644 * Marital_StatusMarried + 0.60377790114405 * Marital_StatusSingle + 
0.01729261240134 * Marital_StatusTogether ;
3643990   +   H14  = H14  +     0.08644018468789 * Marital_StatusDivorced
3643991   +          +    -1.46189018350601 * Marital_StatusMarried
3643992   +          +     1.66381672788945 * Marital_StatusSingle
3643993   +          +    -1.01705305957212 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.08644018468789 * Marital_StatusDivorced + 
-1.46189018350601 * Marital_StatusMarried + 1.66381672788945 * Marital_StatusSingle + 
-1.01705305957212 * Marital_StatusTogether ;
3643994   +   H11  =     1.75584857347424 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.75584857347424 + H11 ;
3643995   +   H12  =    -3.58708107273373 + H12 ;
MPRINT(SCORETABLES):   H12 = -3.58708107273373 + H12 ;
3643996   +   H13  =    -1.39264546682791 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.39264546682791 + H13 ;
3643997   +   H14  =     1.54301093968012 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.54301093968012 + H14 ;
3643998   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3643999   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3644000   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3644001   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3644002   +END;
MPRINT(SCORETABLES):   END;
3644003   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3644004   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3644005   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3644006   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3644007   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3644008   +END;
MPRINT(SCORETABLES):   END;
3644009   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644010   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3644011   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644012   +
3644013   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3644014   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3644015   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3644016   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3644017   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3644018   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3644019   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3644020   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3644021   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3644022   +end;
MPRINT(SCORETABLES):   end;
3644023   +else do;
MPRINT(SCORETABLES):   else do;
3644024   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3644025   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3644026   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3644027   +   end;
MPRINT(SCORETABLES):   end;
3644028   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3644029   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3644030   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3644031   +   end;
MPRINT(SCORETABLES):   end;
3644032   +   else do;
MPRINT(SCORETABLES):   else do;
3644033   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3644034   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3644035   +   end;
MPRINT(SCORETABLES):   end;
3644036   +end;
MPRINT(SCORETABLES):   end;
3644037   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3644038   +   P_DepVar1  =    -5.78876508187939 * H11  +     6.85471535213297 * H12
3644039   +          +     5.43753421268608 * H13  +     5.73512129927081 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.78876508187939 * H11 + 6.85471535213297 * H12 + 
5.43753421268608 * H13 + 5.73512129927081 * H14 ;
3644040   +   P_DepVar1  =    -0.07610032788675 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.07610032788675 + P_DepVar1 ;
3644041   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3644042   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3644043   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3644044   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3644045   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3644046   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3644047   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3644048   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3644049   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3644050   +END;
MPRINT(SCORETABLES):   END;
3644051   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3644052   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3644053   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3644054   +END;
MPRINT(SCORETABLES):   END;
3644055   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3644056   +   P_DepVar1  =     0.13681368136813;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13681368136813;
3644057   +   P_DepVar0  =     0.86318631863186;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86318631863186;
3644058   +END;
MPRINT(SCORETABLES):   END;
3644059   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3644060   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3644061   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3644062   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3644063   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3644064   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3644065   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3644066   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644067   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3644068   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644069   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3644070   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3644071   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3644072   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3644073   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3644074   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3644075   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3644076   +END;
MPRINT(SCORETABLES):   END;
3644077   +********************************;
MPRINT(SCORETABLES):   ********************************;
3644078   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3644079   +********************************;
MPRINT(SCORETABLES):   ********************************;
3644080   +drop
3644081   +S_MntCard_Games
3644082   +S_MntMagazines
3644083   +S_NumCatalogPurchases
3644084   +S_NumDealsPurchases
3644085   +S_NumWebPurchases
3644086   +S_RANGE_Frq
3644087   +S_RANGE_Recency
3644088   +S_RANGE_average_purchase
3644089   +S_RANGE_campaign_acceptance
3644090   +H11
3644091   +H12
3644092   +H13
3644093   +H14
3644094   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3644095   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3644096   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3644097   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3644098   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3644099   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3644100   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3644101   +end;
MPRINT(SCORETABLES):   end;
3644102   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3644103   +* Grp10: StartGroup;
MPRINT(SCORETABLES):   * Grp10: StartGroup;
3644104   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3644105   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3644106   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3644107   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3644108   +if (cv_var =10)  then do;
MPRINT(SCORETABLES):   if (cv_var =10) then do;
3644109   +_XVAL_=10;
MPRINT(SCORETABLES):   _XVAL_=10;
3644110   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3644111   +* Neural2: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural2: NeuralNetwork;
3644112   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3644113   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3644114   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3644115   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3644116   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3644117   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3644118   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3644119   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3644120   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3644121   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3644122   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3644123   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3644124   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3644125   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3644126   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3644127   +LENGTH _WARN_ $4
3644128   +      F_DepVar  $ 12
3644129   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3644130   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3644131   +
3644132   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3644133   +
3644134   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3644135   +
3644136   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3644137   +
3644138   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3644139   +
3644140   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3644141   +
3644142   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3644143   +
3644144   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3644145   +
3644146   +      label S_RANGE_campaign_acceptance =
3644147   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard: 
RANGE_campaign_acceptance' ;
3644148   +
3644149   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3644150   +
3644151   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3644152   +
3644153   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3644154   +
3644155   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3644156   +
3644157   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3644158   +
3644159   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3644160   +
3644161   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3644162   +
3644163   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3644164   +
3644165   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3644166   +
3644167   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3644168   +
3644169   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3644170   +
3644171   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3644172   +
3644173   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3644174   +
3644175   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3644176   +
3644177   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3644178   +
3644179   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3644180   +
3644181   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3644182   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3644183   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle 
Marital_StatusTogether ;
3644184   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3644185   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3644186   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3644187   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3644188   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3644189   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3644190   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3644191   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3644192   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3644193   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3644194   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3644195   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3644196   +end;
MPRINT(SCORETABLES):   end;
3644197   +else do;
MPRINT(SCORETABLES):   else do;
3644198   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3644199   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3644200   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3644201   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3644202   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3644203   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3644204   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3644205   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3644206   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3644207   +         end;
MPRINT(SCORETABLES):   end;
3644208   +         else do;
MPRINT(SCORETABLES):   else do;
3644209   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3644210   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3644211   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3644212   +            end;
MPRINT(SCORETABLES):   end;
3644213   +         end;
MPRINT(SCORETABLES):   end;
3644214   +      end;
MPRINT(SCORETABLES):   end;
3644215   +      else do;
MPRINT(SCORETABLES):   else do;
3644216   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3644217   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3644218   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3644219   +         end;
MPRINT(SCORETABLES):   end;
3644220   +      end;
MPRINT(SCORETABLES):   end;
3644221   +   end;
MPRINT(SCORETABLES):   end;
3644222   +   else do;
MPRINT(SCORETABLES):   else do;
3644223   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3644224   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3644225   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3644226   +      end;
MPRINT(SCORETABLES):   end;
3644227   +      else do;
MPRINT(SCORETABLES):   else do;
3644228   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3644229   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3644230   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3644231   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3644232   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3644233   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3644234   +         end;
MPRINT(SCORETABLES):   end;
3644235   +      end;
MPRINT(SCORETABLES):   end;
3644236   +   end;
MPRINT(SCORETABLES):   end;
3644237   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3644238   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3644239   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3644240   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3644241   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3644242   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3644243   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3644244   +   end;
MPRINT(SCORETABLES):   end;
3644245   +end;
MPRINT(SCORETABLES):   end;
3644246   +
3644247   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644248   +*** Checking missing input Interval
3644249   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3644250   +
3644251   +IF NMISS(
3644252   +   MntCard_Games ,
3644253   +   MntMagazines ,
3644254   +   NumCatalogPurchases ,
3644255   +   NumDealsPurchases ,
3644256   +   NumWebPurchases ,
3644257   +   RANGE_Frq ,
3644258   +   RANGE_Recency ,
3644259   +   RANGE_average_purchase ,
3644260   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases , 
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase , 
RANGE_campaign_acceptance ) THEN DO;
3644261   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3644262   +
3644263   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3644264   +END;
MPRINT(SCORETABLES):   END;
3644265   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644266   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3644267   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644268   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3644269   +   S_MntCard_Games  =    -2.32306683642362 +     6.64440143064057 *
3644270   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32306683642362 + 6.64440143064057 * MntCard_Games ;
3644271   +   S_MntMagazines  =     -0.8326349550427 +     17.3213238239665 *
3644272   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8326349550427 + 17.3213238239665 * MntMagazines ;
3644273   +   S_NumCatalogPurchases  =    -3.11737047598908 +     13.4517200503034 *
3644274   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11737047598908 + 13.4517200503034 * 
NumCatalogPurchases ;
3644275   +   S_NumDealsPurchases  =    -1.40243414266772 +      11.066701075263 *
3644276   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40243414266772 + 11.066701075263 * 
NumDealsPurchases ;
3644277   +   S_NumWebPurchases  =    -5.19320795284518 +     12.1994437373791 *
3644278   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.19320795284518 + 12.1994437373791 * 
NumWebPurchases ;
3644279   +   S_RANGE_Frq  =     -1.3726315861319 +     4.21345365238671 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3726315861319 + 4.21345365238671 * RANGE_Frq ;
3644280   +   S_RANGE_Recency  =    -1.65546662453613 +     3.34191160413408 *
3644281   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65546662453613 + 3.34191160413408 * RANGE_Recency ;
3644282   +   S_RANGE_average_purchase  =    -1.04621472524172 +     5.15342531332181 *
3644283   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04621472524172 + 5.15342531332181 * 
RANGE_average_purchase ;
3644284   +   S_RANGE_campaign_acceptance
3644285   +          =     -0.4757305509719 +     5.72447160921904 *
3644286   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.4757305509719 + 5.72447160921904 * 
RANGE_campaign_acceptance ;
3644287   +END;
MPRINT(SCORETABLES):   END;
3644288   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3644289   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3644290   +   ELSE S_MntCard_Games  =    -2.32306683642362 +     6.64440143064057 *
3644291   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32306683642362 + 6.64440143064057 * 
MntCard_Games ;
3644292   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
The SAS System

MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3644293   +   ELSE S_MntMagazines  =     -0.8326349550427 +     17.3213238239665 *
3644294   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8326349550427 + 17.3213238239665 * 
MntMagazines ;
3644295   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3644296   +   ELSE S_NumCatalogPurchases
3644297   +          =    -3.11737047598908 +     13.4517200503034 * NumCatalogPurchases
3644298   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11737047598908 + 13.4517200503034 * 
NumCatalogPurchases ;
3644299   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3644300   +   ELSE S_NumDealsPurchases  =    -1.40243414266772 +      11.066701075263 *
3644301   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40243414266772 + 11.066701075263 * 
NumDealsPurchases ;
3644302   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3644303   +   ELSE S_NumWebPurchases  =    -5.19320795284518 +     12.1994437373791 *
3644304   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.19320795284518 + 12.1994437373791 * 
NumWebPurchases ;
3644305   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3644306   +   ELSE S_RANGE_Frq  =     -1.3726315861319 +     4.21345365238671 * RANGE_Frq
3644307   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3726315861319 + 4.21345365238671 * RANGE_Frq ;
3644308   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3644309   +   ELSE S_RANGE_Recency  =    -1.65546662453613 +     3.34191160413408 *
3644310   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65546662453613 + 3.34191160413408 * 
RANGE_Recency ;
3644311   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3644312   +   ELSE S_RANGE_average_purchase
3644313   +          =    -1.04621472524172 +     5.15342531332181 *
3644314   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04621472524172 + 5.15342531332181 * 
RANGE_average_purchase ;
3644315   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3644316   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN 
S_RANGE_campaign_acceptance = . ;
3644317   +   ELSE S_RANGE_campaign_acceptance
3644318   +          =     -0.4757305509719 +     5.72447160921904 *
3644319   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.4757305509719 + 5.72447160921904 
* RANGE_campaign_acceptance ;
3644320   +END;
MPRINT(SCORETABLES):   END;
3644321   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644322   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3644323   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644324   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644325   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3644326   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644327   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3644328   +   H11  =     0.75525037431632 * S_MntCard_Games  +     -0.0602675572468 *
3644329   +        S_MntMagazines  +     0.52777427810495 * S_NumCatalogPurchases
3644330   +          +     0.27583533466874 * S_NumDealsPurchases
3644331   +          +     0.76271291879637 * S_NumWebPurchases
3644332   +          +     0.30340338019094 * S_RANGE_Frq  +    -1.02707640626287 *
3644333   +        S_RANGE_Recency  +    -0.38300412057701 * S_RANGE_average_purchase
3644334   +          +     0.68032298362558 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.75525037431632 * S_MntCard_Games + -0.0602675572468 * 
S_MntMagazines + 0.52777427810495 * S_NumCatalogPurchases + 0.27583533466874 * 
S_NumDealsPurchases + 0.76271291879637 * S_NumWebPurchases + 0.30340338019094 * S_RANGE_Frq + 
-1.02707640626287 * S_RANGE_Recency + -0.38300412057701 * S_RANGE_average_purchase + 
0.68032298362558 * S_RANGE_campaign_acceptance ;
3644335   +   H12  =     0.47806778642517 * S_MntCard_Games  +     0.05636363647243 *
3644336   +        S_MntMagazines  +      0.5084225157267 * S_NumCatalogPurchases
3644337   +          +     0.21187618261366 * S_NumDealsPurchases
3644338   +          +     0.17244894453521 * S_NumWebPurchases
3644339   +          +    -0.01760961858995 * S_RANGE_Frq  +    -0.72166427107812 *
3644340   +        S_RANGE_Recency  +     0.60977391024352 * S_RANGE_average_purchase
3644341   +          +      0.4497141957076 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 0.47806778642517 * S_MntCard_Games + 0.05636363647243 * 
S_MntMagazines + 0.5084225157267 * S_NumCatalogPurchases + 0.21187618261366 * 
S_NumDealsPurchases + 0.17244894453521 * S_NumWebPurchases + -0.01760961858995 * S_RANGE_Frq + 
-0.72166427107812 * S_RANGE_Recency + 0.60977391024352 * S_RANGE_average_purchase + 
0.4497141957076 * S_RANGE_campaign_acceptance ;
3644342   +   H13  =     0.22520686667104 * S_MntCard_Games  +     0.07008615610518 *
3644343   +        S_MntMagazines  +     0.27908300811076 * S_NumCatalogPurchases
3644344   +          +     0.58061061400439 * S_NumDealsPurchases
3644345   +          +    -0.29460176989457 * S_NumWebPurchases
3644346   +          +     -0.2087437154579 * S_RANGE_Frq  +    -0.43988038680839 *
3644347   +        S_RANGE_Recency  +     0.42921927126075 * S_RANGE_average_purchase
3644348   +          +     0.40092335605499 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.22520686667104 * S_MntCard_Games + 0.07008615610518 * 
S_MntMagazines + 0.27908300811076 * S_NumCatalogPurchases + 0.58061061400439 * 
S_NumDealsPurchases + -0.29460176989457 * S_NumWebPurchases + -0.2087437154579 * S_RANGE_Frq + 
-0.43988038680839 * S_RANGE_Recency + 0.42921927126075 * S_RANGE_average_purchase + 
0.40092335605499 * S_RANGE_campaign_acceptance ;
3644349   +   H14  =    -0.12114041230111 * S_MntCard_Games  +     2.82426882703342 *
3644350   +        S_MntMagazines  +      1.4703541186633 * S_NumCatalogPurchases
3644351   +          +    -1.39222263493324 * S_NumDealsPurchases
3644352   +          +    -0.01242310356622 * S_NumWebPurchases
3644353   +          +     -2.0244597584446 * S_RANGE_Frq  +     4.29554790292568 *
3644354   +        S_RANGE_Recency  +     1.66587267213908 * S_RANGE_average_purchase
3644355   +          +     -0.5030223320679 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.12114041230111 * S_MntCard_Games + 2.82426882703342 * 
S_MntMagazines + 1.4703541186633 * S_NumCatalogPurchases + -1.39222263493324 * 
S_NumDealsPurchases + -0.01242310356622 * S_NumWebPurchases + -2.0244597584446 * S_RANGE_Frq + 
4.29554790292568 * S_RANGE_Recency + 1.66587267213908 * S_RANGE_average_purchase + 
-0.5030223320679 * S_RANGE_campaign_acceptance ;
3644356   +   H11  = H11  +    -1.48420315753577 * Marital_StatusDivorced
3644357   +          +    -1.10788973466081 * Marital_StatusMarried
3644358   +          +     0.99955126456583 * Marital_StatusSingle
3644359   +          +    -0.85325918804561 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -1.48420315753577 * Marital_StatusDivorced + 
-1.10788973466081 * Marital_StatusMarried + 0.99955126456583 * Marital_StatusSingle + 
-0.85325918804561 * Marital_StatusTogether ;
3644360   +   H12  = H12  +     -0.0230798511959 * Marital_StatusDivorced
3644361   +          +     0.53290050341248 * Marital_StatusMarried
3644362   +          +    -0.27349118697354 * Marital_StatusSingle
3644363   +          +      4.2093372055739 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.0230798511959 * Marital_StatusDivorced + 
0.53290050341248 * Marital_StatusMarried + -0.27349118697354 * Marital_StatusSingle + 
4.2093372055739 * Marital_StatusTogether ;
3644364   +   H13  = H13  +     1.02169563403557 * Marital_StatusDivorced
3644365   +          +    -0.16256637908196 * Marital_StatusMarried
3644366   +          +    -0.91505977559829 * Marital_StatusSingle
3644367   +          +    -0.98393293754833 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 1.02169563403557 * Marital_StatusDivorced + 
-0.16256637908196 * Marital_StatusMarried + -0.91505977559829 * Marital_StatusSingle + 
-0.98393293754833 * Marital_StatusTogether ;
3644368   +   H14  = H14  +      0.2999547382482 * Marital_StatusDivorced
3644369   +          +     1.94590092915485 * Marital_StatusMarried
3644370   +          +    -1.81198870406739 * Marital_StatusSingle
3644371   +          +     0.61551797878247 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.2999547382482 * Marital_StatusDivorced + 1.94590092915485 
* Marital_StatusMarried + -1.81198870406739 * Marital_StatusSingle + 0.61551797878247 * 
Marital_StatusTogether ;
3644372   +   H11  =    -0.79889108856419 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.79889108856419 + H11 ;
3644373   +   H12  =     0.17812066021268 + H12 ;
MPRINT(SCORETABLES):   H12 = 0.17812066021268 + H12 ;
3644374   +   H13  =    -1.15860140621335 + H13 ;
MPRINT(SCORETABLES):   H13 = -1.15860140621335 + H13 ;
3644375   +   H14  =    -6.01942347095941 + H14 ;
MPRINT(SCORETABLES):   H14 = -6.01942347095941 + H14 ;
3644376   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3644377   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3644378   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3644379   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3644380   +END;
MPRINT(SCORETABLES):   END;
3644381   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3644382   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3644383   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3644384   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3644385   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3644386   +END;
MPRINT(SCORETABLES):   END;
3644387   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644388   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3644389   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644390   +
3644391   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3644392   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3644393   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3644394   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3644395   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3644396   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3644397   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3644398   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3644399   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3644400   +end;
MPRINT(SCORETABLES):   end;
3644401   +else do;
MPRINT(SCORETABLES):   else do;
3644402   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3644403   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3644404   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3644405   +   end;
MPRINT(SCORETABLES):   end;
3644406   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3644407   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3644408   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3644409   +   end;
MPRINT(SCORETABLES):   end;
3644410   +   else do;
MPRINT(SCORETABLES):   else do;
3644411   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3644412   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3644413   +   end;
MPRINT(SCORETABLES):   end;
3644414   +end;
MPRINT(SCORETABLES):   end;
3644415   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3644416   +   P_DepVar1  =     5.41128576998932 * H11  +     5.24924389532338 * H12
3644417   +          +     5.85075926215742 * H13  +    -2.65431976161038 * H14 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.41128576998932 * H11 + 5.24924389532338 * H12 + 
5.85075926215742 * H13 + -2.65431976161038 * H14 ;
3644418   +   P_DepVar1  =     -5.4942687120233 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -5.4942687120233 + P_DepVar1 ;
3644419   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3644420   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3644421   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3644422   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3644423   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3644424   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3644425   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3644426   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3644427   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3644428   +END;
MPRINT(SCORETABLES):   END;
3644429   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3644430   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3644431   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3644432   +END;
MPRINT(SCORETABLES):   END;
3644433   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3644434   +   P_DepVar1  =     0.13534522176497;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13534522176497;
3644435   +   P_DepVar0  =     0.86465477823502;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86465477823502;
3644436   +END;
MPRINT(SCORETABLES):   END;
3644437   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3644438   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3644439   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3644440   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3644441   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3644442   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3644443   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3644444   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644445   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3644446   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3644447   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3644448   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3644449   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3644450   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3644451   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3644452   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3644453   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3644454   +END;
MPRINT(SCORETABLES):   END;
3644455   +********************************;
MPRINT(SCORETABLES):   ********************************;
3644456   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3644457   +********************************;
MPRINT(SCORETABLES):   ********************************;
3644458   +drop
3644459   +S_MntCard_Games
3644460   +S_MntMagazines
3644461   +S_NumCatalogPurchases
3644462   +S_NumDealsPurchases
3644463   +S_NumWebPurchases
3644464   +S_RANGE_Frq
3644465   +S_RANGE_Recency
3644466   +S_RANGE_average_purchase
3644467   +S_RANGE_campaign_acceptance
3644468   +H11
3644469   +H12
3644470   +H13
3644471   +H14
3644472   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases 
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase 
S_RANGE_campaign_acceptance H11 H12 H13 H14 ;
3644473   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3644474   +* EndGrp9: EndGroup;
MPRINT(SCORETABLES):   * EndGrp9: EndGroup;
3644475   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3644476   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3644477   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3644478   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3644479   +end;
MPRINT(SCORETABLES):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;

NOTE: DATA STEP view saved on file EMWS1.ENDGRP9_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.20 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.21 seconds
      

MPRINT(POSTLOOP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End POSTLOOP: EndGrp9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3644480    *------------------------------------------------------------*;
3644481    * End POSTLOOP: EndGrp9;
3644482    *------------------------------------------------------------*;
3644483    

NOTE: There were 10 observations read from the data set EMWS1.GRP10_EMLOOPINFO.
NOTE: The data set EMWS1.ENDGRP9_EMLOOPINFO has 10 observations and 3 variables.
3644484    proc print data=EMWS1.EndGrp9_EMLOOPINFO noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.EndGrp9_EMLOOPINFO noobs label;
3644485    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rptgroupsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Group Summary";
MPRINT(EM_DIAGRAM):   run;
3644486    run;

NOTE: There were 10 observations read from the data set EMWS1.ENDGRP9_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2396.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3644487    title9;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ 
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.EndGrp9_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ 
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of 
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" 
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_= 
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: 
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ 
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_DepVar) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
3644511    data EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMOUTFIT;
3644512    set WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set WORK.OUTFITDATA;
3644513    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3644514    data EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMOUTFIT;
3644515    set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
3644516    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3644517    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3644517  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3644518    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3644519    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3644520    proc sort data=EMWS1.EndGrp9_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp9_EMREPORTFIT nothreads;
3644521    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3644522    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

3644523    %let _EMwarndup = 0;
3644524    %let _EMtargetdup =;
3644525    %let _EMASEtargetdup =;
3644526    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3644527    set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
3644528    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3644529    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3644530    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3644531    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3644532    end;
MPRINT(EM_DIAGRAM):   end;
3644533    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3644534    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3644535    * EndGrp9: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp9: Computing metadata for TRAIN data;
3644536    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp9_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp9_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp9_TRAIN out=WORK.M2UOMV_U noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2UOMV_U;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2UOMV_U(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2UOMV_U;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2UOMV_U;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2_F1K81 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0C1R576(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   set WORK.M2_F1K81;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp9";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp9";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp9";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3644887    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3644888    set EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMINFO;
3644889    where DATA='EndGrp9' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp9' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
3644890    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMINFO.
      WHERE (DATA='EndGrp9') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3644891    data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMINFO;
3644892    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3644893    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3644894    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.ENDGRP9_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
3644898    run;
3644899    data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMINFO;
3644900    set EMWS1.EndGrp9_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMINFO WORK.MODELTEMP_INFO;
3644901    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3644902    proc sort data = EMWS1.EndGrp9_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp9_EMINFO NOTHREADS;
3644903    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3644904    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3644905    proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3644906    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3644907    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3644908    proc sort data = EMWS1.EndGrp9_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp9_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3644909    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3644910    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3644911    data EMWS1.EndGrp9_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMINFO;
3644912    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3644913    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3644914    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP9_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3644915    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3644916    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3644917    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3644918    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp9: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp9: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3645380    %let EMEXCEPTIONSTRING=;
3645381    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3645382    * POSTLOOPREPORT: EndGrp9;
MPRINT(EM_DIAGRAM):   * POSTLOOPREPORT: EndGrp9;
3645383    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3645384    %let EM_ACTION = POSTLOOPREPORT;
3645385    %let syscc = 0;
3645386    %macro main;
3645387       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3645388    
3645389           filename temp catalog 'sashelp.emutil.endgp_train.source';
3645390           %include temp;
3645391           filename temp;
3645392    
3645393           %train;
3645394    
3645395       %end;
3645396       %else
3645397          %if %upcase(&EM_ACTION) = SCORE %then %do;
3645398    
3645399           filename temp catalog 'sashelp.emutil.endgp_score.source';
3645400           %include temp;
3645401           filename temp;
3645402    
3645403           %score;
3645404       %end;
3645405       %else
3645406       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3645407    
3645408           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3645409           %include temp;
3645410           filename temp;
3645411    
3645412           %postloop;
3645413    
3645414       %end;
3645415    
3645416       %doendm:
3645417    %mend main;
3645418    
3645419    %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
3645420    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3645421    * End POSTLOOPREPORT: EndGrp9;
MPRINT(EM_DIAGRAM):   * End POSTLOOPREPORT: EndGrp9;
3645422    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3645423    

3645424    proc sort data=EMWS1.Neural2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_CMeta_TRAIN out=WORK.SUBSETINMETA;
3645425    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3645426    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3645427    proc sort data=EMWS1.EndGrp9_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp9_VariableSet out=WORK.SUBSETVARSET(keep=NAME 
REPORT);
3645428    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3645429    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.ENDGRP9_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3645430    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3645431    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3645432    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3645433    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3645434    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3645435    set EMWS1.EndGrp9_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_CMeta_TRAIN;
3645436    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3645436  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 
'ASSESS', 'COST');
3645437    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.ENDGRP9_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3645438    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3645439    set EMWS1.EndGrp9_TRAIN(keep=
3645440    F_DepVar
3645441    I_DepVar
3645442    P_DepVar0
3645443    P_DepVar1
3645444    R_DepVar0
3645445    R_DepVar1
3645446    U_DepVar
3645447    _WARN_
3645448    DepVar
3645449    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1 
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
3645450    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: View EMWS1.ENDGRP9_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
      
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.ENDGRP9_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2437 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.EndGrp9_2JXN80L nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EndGrp9_2JXN80L;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 
CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.EndGrp9_2JXN80L(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp9_2JXN80L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp9_2JXN80L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ 
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;

MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS 
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC 
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB 
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST 
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE 
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS 
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370537546 _NEVENTS 
334 _NNONEVENTS 2103 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2437));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 2.5984511730912E-11 OVLMAX 0.9999999988 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2437 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
(2437/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2437)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2437/20) ) / ( 
AVGNUMRESP / (2437/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2437/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * 
((20-GROUP+1)* 2437/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - 
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - 
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - 
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - 
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - 
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - 
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - 
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - 
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - 
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - 
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - 
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - 
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - 
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - 
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - 
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - 
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - 
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - 
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - 
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) 
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number 
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = 
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = 
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB = 
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = 
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS 
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior 
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" 
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative 
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = 
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" 
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound 
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" 
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min 
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = 
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = 
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC 
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior 
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response" 
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of 
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative 
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC 
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative 
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best 
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift" 
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % 
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" 
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = 
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3649737    %let grouptarget=0;
3649738    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3649739    set EMWS1.Grp10_EMLOOPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp10_EMLOOPINFO;
3649740    if _TARGET_ ne "" then do;
MPRINT(EM_DIAGRAM):   if _TARGET_ ne "" then do;
3649741    call symput('grouptarget', '1');
MPRINT(EM_DIAGRAM):   call symput('grouptarget', '1');
3649742    stop;
MPRINT(EM_DIAGRAM):   stop;
3649743    end;
MPRINT(EM_DIAGRAM):   end;
3649744    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _TARGET_ is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.GRP10_EMLOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3649745    data work.EMOUTFIT;
MPRINT(EM_DIAGRAM):    data work.EMOUTFIT;
3649746    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649747    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649748    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649748  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649749    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649750    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649751    set EMWS1.EndGrp9_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT;
3649752    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT.
NOTE: The data set WORK.EMOUTFIT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649753    data EMWS1.EndGrp9_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMOUTFIT_LOOP;
3649754    set EMWS1.EndGrp9_EMOUTFIT_LOOP work.EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMOUTFIT_LOOP work.EMOUTFIT;
3649755    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.ENDGRP9_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMOUTFIT_LOOP has 11 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649756    data work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):    data work.EMREPORTFIT;
3649757    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649758    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649759    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649759  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649760    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649761    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649762    set EMWS1.EndGrp9_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMREPORTFIT;
3649763    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT.
NOTE: The data set WORK.EMREPORTFIT has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649764    data EMWS1.EndGrp9_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMREPORTFIT_LOOP;
3649765    set EMWS1.EndGrp9_EMREPORTFIT_LOOP work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMREPORTFIT_LOOP work.EMREPORTFIT;
3649766    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 210 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT_LOOP.
NOTE: There were 9 observations read from the data set WORK.EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP9_EMREPORTFIT_LOOP has 219 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649767    data work.EMRANK;
MPRINT(EM_DIAGRAM):    data work.EMRANK;
3649768    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649769    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649770    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649770  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649771    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649772    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649773    set EMWS1.EndGrp9_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMRANK;
3649774    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMRANK.
NOTE: The data set WORK.EMRANK has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649775    data EMWS1.EndGrp9_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMRANK_LOOP;
3649776    set EMWS1.EndGrp9_EMRANK_LOOP work.EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMRANK_LOOP work.EMRANK;
3649777    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set EMWS1.ENDGRP9_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMRANK.
NOTE: The data set EMWS1.ENDGRP9_EMRANK_LOOP has 220 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649778    data work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data work.EMSCOREDIST;
3649779    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649780    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649781    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649781  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649782    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649783    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649784    set EMWS1.EndGrp9_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMSCOREDIST;
3649785    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.ENDGRP9_EMSCOREDIST.
NOTE: The data set WORK.EMSCOREDIST has 20 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649786    data EMWS1.EndGrp9_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMSCOREDIST_LOOP;
3649787    set EMWS1.EndGrp9_EMSCOREDIST_LOOP work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMSCOREDIST_LOOP work.EMSCOREDIST;
3649788    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set EMWS1.ENDGRP9_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP9_EMSCOREDIST_LOOP has 220 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649789    data work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data work.EMCLASSIFICATION;
3649790    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649791    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649792    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649792  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649793    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649794    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649795    set EMWS1.EndGrp9_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMCLASSIFICATION;
3649796    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION.
NOTE: The data set WORK.EMCLASSIFICATION has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649797    data EMWS1.EndGrp9_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMCLASSIFICATION_LOOP;
3649798    set EMWS1.EndGrp9_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
3649799    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3649800    proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP out=_temp;
3649801    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3649802    where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
MPRINT(EM_DIAGRAM):   where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
3649803    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP.
      WHERE (_type_='PREDICTION') and correct and (INTO not = ' ') and (FROM not = ' ');
NOTE: The data set WORK._TEMP has 22 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649804    data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL totalCount
3649804  ! totalPercent);
MPRINT(EM_DIAGRAM):   data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
totalCount totalPercent);
3649805    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3649806    retain totalCount totalPercent;
MPRINT(EM_DIAGRAM):   retain totalCount totalPercent;
3649807    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3649808    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3649809    totalCount = count;
MPRINT(EM_DIAGRAM):   totalCount = count;
3649810    totalPercent = percent;
MPRINT(EM_DIAGRAM):   totalPercent = percent;
3649811    end;
MPRINT(EM_DIAGRAM):   end;
3649812    else do;
MPRINT(EM_DIAGRAM):   else do;
3649813    totalCount + count;
MPRINT(EM_DIAGRAM):   totalCount + count;
3649814    totalPercent + percent;
MPRINT(EM_DIAGRAM):   totalPercent + percent;
3649815    end;
MPRINT(EM_DIAGRAM):   end;
3649816    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3649817    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TOTAL has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649818    data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL eventCount
3649818  ! eventPercent);
MPRINT(EM_DIAGRAM):   data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
eventCount eventPercent);
3649819    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3649820    where strip(FROM) eq strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) eq strip(EVENT);
3649821    by _LOOP_ DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ DATAROLE TARGET;
3649822    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3649823    eventCount = count;
MPRINT(EM_DIAGRAM):   eventCount = count;
3649824    eventPercent = percent;
MPRINT(EM_DIAGRAM):   eventPercent = percent;
3649825    end;
MPRINT(EM_DIAGRAM):   end;
3649826    else do;
MPRINT(EM_DIAGRAM):   else do;
3649827    eventCount + count;
MPRINT(EM_DIAGRAM):   eventCount + count;
3649828    eventPercent + percent;
MPRINT(EM_DIAGRAM):   eventPercent + percent;
3649829    end;
MPRINT(EM_DIAGRAM):   end;
3649830    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3649831    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable first.modelid is uninitialized.
NOTE: Variable last.modelid is uninitialized.
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM)=STRIP(EVENT);
NOTE: The data set WORK._EVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649832    data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL neventCount
3649832  ! neventPercent);
MPRINT(EM_DIAGRAM):   data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL 
neventCount neventPercent);
3649833    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3649834    retain neventCount neventPercent 0;
MPRINT(EM_DIAGRAM):   retain neventCount neventPercent 0;
3649835    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3649836    where strip(FROM) ne strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) ne strip(EVENT);
3649837    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then 
do;
3649838    neventCount = count;
MPRINT(EM_DIAGRAM):   neventCount = count;
3649839    neventPercent = percent;
MPRINT(EM_DIAGRAM):   neventPercent = percent;
3649840    end;
MPRINT(EM_DIAGRAM):   end;
3649841    else do;
MPRINT(EM_DIAGRAM):   else do;
3649842    neventCount + count;
MPRINT(EM_DIAGRAM):   neventCount + count;
3649843    neventPercent + percent;
MPRINT(EM_DIAGRAM):   neventPercent + percent;
3649844    end;
MPRINT(EM_DIAGRAM):   end;
3649845    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then 
output;
3649846    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM) not = STRIP(EVENT);
NOTE: The data set WORK._NEVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3649847    data EMWS1.EndGrp9_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMMISC_LOOP;
3649848    merge _total _event _nevent;
MPRINT(EM_DIAGRAM):   merge _total _event _nevent;
3649849    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3649850    label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,   NOQUOTE))"
3649850  ! targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3649850  ! eventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctEvent_vlabel,  NOQUOTE))"
3649851       eventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,  NOQUOTE))"
3649851  ! neventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctNEvent_vlabel, NOQUOTE))"
3649851  ! neventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumNEvent_vlabel, NOQUOTE))"
3649852       totalPercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel,    NOQUOTE))"
3649852  !  totalCount = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalcount_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable" targetLabel = "Target Label" 
eventPercent = "Percentage of Events" eventCount = "Number of Events" neventPercent = 
"Percentage of Nonevents" neventCount = "Number of Nonevents" totalPercent = "Total 
Percentage" totalCount = "Total Count";
3649853    if neventCount = . then neventCount = 0;
MPRINT(EM_DIAGRAM):   if neventCount = . then neventCount = 0;
3649854    if eventCount = . then eventCount = 0;
MPRINT(EM_DIAGRAM):   if eventCount = . then eventCount = 0;
3649855    if neventPercent = . then neventPercent = 0;
MPRINT(EM_DIAGRAM):   if neventPercent = . then neventPercent = 0;
3649856    if eventPercent = . then eventPercent = 0;
MPRINT(EM_DIAGRAM):   if eventPercent = . then eventPercent = 0;
3649857    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TOTAL.
NOTE: There were 11 observations read from the data set WORK._EVENT.
NOTE: There were 11 observations read from the data set WORK._NEVENT.
NOTE: The data set EMWS1.ENDGRP9_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

3649858    proc sort data=EMWS1.EndGrp9_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp9_EMMISC_LOOP;
3649859    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3649860    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.ENDGRP9_EMMISC_LOOP.
NOTE: The data set EMWS1.ENDGRP9_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3649861    data work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data work.EMEVENTREPORT;
3649862    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3649863    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3649864    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3649864  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3649865    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3649866    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3649867    set EMWS1.EndGrp9_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMEVENTREPORT;
3649868    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMEVENTREPORT.
NOTE: The data set WORK.EMEVENTREPORT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649869    data EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
3649870    set work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set work.EMEVENTREPORT;
3649871    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.EMEVENTREPORT.
NOTE: The data set EMWS1.ENDGRP9_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649872    %let _cn = %sysfunc(getoption(CENTER));
3649873    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3649874    proc print data=EMWS1.EndGrp9_EMREPORTFIT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMREPORTFIT_LOOP noobs label;
3649875    var STAT LABEL TRAIN
3649876    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
3649877    by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
MPRINT(EM_DIAGRAM):   by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
3649878    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3649879    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3649880    run;

NOTE: There were 219 observations read from the data set EMWS1.ENDGRP9_EMREPORTFIT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2397.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649881    title10;
MPRINT(EM_DIAGRAM):   title10;
3649882    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3649883    proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP nothreads;
3649884    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3649885    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 44 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP.
NOTE: The data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649886    %let _cn = %sysfunc(getoption(CENTER));
3649887    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3649888    proc print data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMCLASSIFICATION_LOOP noobs label;
3649889    var from into pct_row pct_col count percent
3649890    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3649891    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3649892    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3649893    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3649894    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3649895    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3649896    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3649897    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3649898    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3649899    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3649900    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3649901    run;

NOTE: There were 44 observations read from the data set EMWS1.ENDGRP9_EMCLASSIFICATION_LOOP.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2398.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

3649902    title9;
MPRINT(EM_DIAGRAM):   title9;
3649903    title10;
MPRINT(EM_DIAGRAM):   title10;
3649904    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3649905    %let _cn = %sysfunc(getoption(CENTER));
3649906    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3649907    data EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
3649908    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3649908  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT 
FALSEEVENT TRUEEVENT 8;
3649909    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3649909  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3649909  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3649909  ! FALSEEVENT
3649910    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3649910  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3649910  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3649911       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target 
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True 
Positive" TRUENEVENT = "True Negative";
3649912    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3649913    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3649914    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3649915    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3649916    set EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp9_EMEVENTREPORT_LOOP;
3649917    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMEVENTREPORT_LOOP.
NOTE: The data set EMWS1.ENDGRP9_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

3649918    proc print data=EMWS1.EndGrp9_EMEVENTREPORT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMEVENTREPORT_LOOP noobs label;
3649919    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3649920    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3649921    by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted TARGETLABEL;
3649922    run;

NOTE: There were 1 observations read from the data set EMWS1.ENDGRP9_EMEVENTREPORT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2399.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3649923    title10;
MPRINT(EM_DIAGRAM):   title10;
3649924    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3649925    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3649926    modify EndGrp9_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp9_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3649927    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3649928    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3649928  ! ;
MPRINT(EM_DIAGRAM):   run;
3649929    run;

NOTE: MODIFY was successful for EMWS1.ENDGRP9_EMRANK_LOOP.DATA.
3649930    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

3649931    %let _cn = %sysfunc(getoption(CENTER));
3649932    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3649933    proc print data=EMWS1.EndGrp9_EMRANK_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMRANK_LOOP label noobs;
3649934    var
3649935    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3649936    by
3649937    notsorted DATAROLE
3649938    notsorted _WHERE_
3649939    notsorted TARGET
3649940    notsorted TARGETLABEL
3649941    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL ;
3649942    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3649943    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3649944    run;

NOTE: There were 220 observations read from the data set EMWS1.ENDGRP9_EMRANK_LOOP.
NOTE: The PROCEDURE PRINT printed page 2400.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

3649945    title10;
MPRINT(EM_DIAGRAM):   title10;
3649946    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3649947    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3649948    modify EndGrp9_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp9_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3649949    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3649949  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3649950    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3649950  ! ;
MPRINT(EM_DIAGRAM):   run;
3649951    run;

NOTE: MODIFY was successful for EMWS1.ENDGRP9_EMSCOREDIST_LOOP.DATA.
3649952    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

3649953    %let _cn = %sysfunc(getoption(CENTER));
3649954    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3649955    proc print data=EMWS1.EndGrp9_EMSCOREDIST_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp9_EMSCOREDIST_LOOP label noobs;
3649956    var
3649957    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
3649958    by
3649959    notsorted DATAROLE
3649960    notsorted _WHERE_
3649961    notsorted TARGET
3649962    notsorted TARGETLABEL
3649963    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted 
TARGETLABEL ;
3649964    where TARGET in(
3649965    "DepVar"
3649966    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
3649967    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3649968    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
3649969    run;

NOTE: There were 220 observations read from the data set EMWS1.ENDGRP9_EMSCOREDIST_LOOP.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 2401.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

3649970    title10;
MPRINT(EM_DIAGRAM):   title10;
3649971    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3649972    %let emexceptionstring =;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:53 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMOUTPUT.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:07:53 o'clock" 
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM 
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp9\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp9_EMREPORT;
MPRINT(EM_DIAGRAM):   length ID 8 KEY $30 VALUE $512;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='PROPERTIES';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SETTINGS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="VARIABLES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMTRAINVARIABLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLLOG";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\EMLOG.log";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLOUTPUT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="NOTES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FLOWCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SASCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Scoring";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="MISCLASSIFICATIONMANY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMMISC_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="TOTALPERCENT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FITSTATPLOT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMOUTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="_ANYNUMERIC_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSRANKOVERLAY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMRANK_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="DECILE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="LIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BASELIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BESTLIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSSCOREDIST";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMSCOREDIST_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="SCORE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFNONEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEX";
MPRINT(EM_DIAGRAM):   VALUE="DATAROLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="NROWS";
MPRINT(EM_DIAGRAM):   VALUE="1";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="REPORTFITSTAT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMREPORTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="eventratestat";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMEVENTREPORT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="miningresult";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Gp";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp9_EMLOOPINFO";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
