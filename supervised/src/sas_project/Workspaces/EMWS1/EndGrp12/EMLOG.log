*------------------------------------------------------------*
User:                misil
Date:                02 June 2018
Time:                17:08:26 o'clock
Site:                70107571
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:12 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Post Grouping Log
Date:                02 June 2018
Time:                17:08:12 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0QVMRBC "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0QVMRBC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:12 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:12 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
3671697    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3671698    set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
3671699    where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
3671700    call symput('EMGROUPMODE', strip(key));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPMODE', strip(key));
3671701    call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
3671702    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3671703    data WORK.M13_PA8J;
MPRINT(EM_DIAGRAM):    data WORK.M13_PA8J;
3671704    set WORK.M13_PA8J;
MPRINT(EM_DIAGRAM):   set WORK.M13_PA8J;
3671705    where upcase(NAME) in(
3671706    "DEPVAR"
3671707    );
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "DEPVAR" );
3671708    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M13_PA8J.
      WHERE UPCASE(NAME)='DEPVAR';
NOTE: The data set WORK.M13_PA8J has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3671709    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Neural4_TRAIN EMWS1.Neural4_TRAIN
EMWS1.Neural4_TRAIN EMWS1.Neural4_TRAIN EMWS1 Neural4_TRAIN
EMWS1.Neural4_TRAIN EMWS1.Neural4_TRAIN
EMWS1.Neural4_TRAIN EMWS1.Neural4_TRAIN EMWS1 Neural4_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Neural4_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural4_DepVar_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
3671738    data WORK.EndGrp12_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.EndGrp12_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
3671739    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3671740    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3671740  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3671740  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3671741       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3671741  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3671741  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3671742    set EMWS1.NEURAL4_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL4_DEPVAR_DM( where=(_TYPE_="TARGET"));
3671743    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3671744    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3671745    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3671746    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3671747    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3671748    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3671749    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3671750    end;
MPRINT(EM_DIAGRAM):   end;
3671751    output;
MPRINT(EM_DIAGRAM):   output;
3671752    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.ENDGRP12_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3671753    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3671754    proc print data=WORK.EndGrp12_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EndGrp12_EVENT noobs label;
3671755    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3671756    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3671757    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3671758    run;
 
NOTE: There were 1 observations read from the data set WORK.ENDGRP12_EVENT.
NOTE: The PROCEDURE PRINT printed page 2410.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3671759    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
3671760    proc print data = EMWS1.Neural4_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural4_DepVar_DM noobs label;
3671761    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3671762    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
3671763    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3671763  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3671763  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3671764    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3671765    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3671766    run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL4_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2411.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3671767    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp12: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp12: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3672229    %let EMEXCEPTIONSTRING=;
3672230    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3672231    * POSTLOOP: EndGrp12;
MPRINT(EM_DIAGRAM):   * POSTLOOP: EndGrp12;
3672232    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3672233    %let EM_ACTION = POSTLOOP;
3672234    %let syscc = 0;
3672235    %macro main;
3672236       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3672237
3672238           filename temp catalog 'sashelp.emutil.endgp_train.source';
3672239           %include temp;
3672240           filename temp;
3672241
3672242           %train;
3672243
3672244       %end;
3672245       %else
3672246          %if %upcase(&EM_ACTION) = SCORE %then %do;
3672247
3672248           filename temp catalog 'sashelp.emutil.endgp_score.source';
3672249           %include temp;
3672250           filename temp;
3672251
3672252           %score;
3672253       %end;
3672254       %else
3672255       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3672256
3672257           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3672258           %include temp;
3672259           filename temp;
3672260
3672261           %postloop;
3672262
3672263       %end;
3672264
3672265       %doendm:
3672266    %mend main;
3672267
3672268    %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.endgp_postloop.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.ENDGP_POSTLOOP.SOURCE.
3672269   +%macro scoreTables(data=, out=, scoreref=, prescore=);
3672271   +   %if ("&data" ne "") and (%sysfunc(exist(&data)) or %sysfunc(exist(&data, VIEW)))
3672271  !+%then %do;
3672272   +       data &out / view=&out;
3672273   +          set &data
3672276   +          %if "&prescore" = "Y" %then %do;
3672277   +              (obs=1)
3672278   +          %end;
3672280   +          ;
3672282   +       %let fexist = %sysfunc(fexist(&scoreref));
3672283   +       %if &fexist %then %do;
3672284   +          %inc &scoreref;
3672285   +       %end;
3672287   +       %if "&prescore" eq "Y" %then %do;
3672288   +          drop I_: R_:;
3672289   +       %end;
3672291   +       run;
3672292   +   %end;
3672294   +%mend scoretables;
3672296   +%macro postboostbag(groupid=, type=);
3672297   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3672298   +   data _null_;
3672299   +      retain index 0;
3672300   +      set &infoDs;
3672301   +      call symput('targetname', strip(_target_));
3672302   +   run;
3672304   +   data _null_;
3672305   +      set &em_import_data_eminfo;
3672306   +      where key in('MODEL', 'DECMETA') and TARGET="&targetname";
3672307   +      if key='DECMETA' then call symput('ENDGRP_DECMETA', strip(data));
3672308   +      else call symput('MODELID', strip(data));
3672309   +   run;
3672311   +   %em_getname(key=LOOPFLOWCODE, type=FILE, extension=sas);
3672312   +   %em_getname(key=LOOPPUBCODE,  type=FILE, extension=sas);
3672314   +   filename loopflow "&em_user_loopflowcode";
3672315   +   filename looppub "&em_user_looppubcode";
3672317   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3672318   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3672320   +   %em_copyfile(infref=loopflow, outfref=emflow, append=N);
3672321   +   %em_copyfile(infref=looppub,  outfref=empub,  append=N);
3672323   +   filename loopflow;
3672324   +   filename looppub;
3672325   +   filename emflow;
3672326   +   filename empub;
3672328   +   %let EMGROUPASSMT = Y;
3672330   +   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y, DECSCORECODE=Y,
3672330  !+FITSTATISTICS=N, CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3672332   +   %em_getname(key=emoutfit, type=DATA);
3672333   +   %em_getname(key=emoutfit_loop, type=DATA);
3672335   +   data &em_user_emoutfit;
3672336   +      set &em_user_emoutfit_loop end=eof;
3672337   +      drop _LOOP_ _WHERE_;
3672338   +      if eof then output;
3672339   +   run;
3672341   +%mend postboostbag;
3672343   +%macro postgroup(groupid=, type=);
3672344   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3672345   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3672347   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3672348   +   %let _XValidation = 0;
3672350   +   data _null_;
3672351   +      retain index 0;
3672352   +      set &infoDs end=eof;
3672353   +      index + 1;
3672354   +      call symput('loopwhere'!!strip(put(index, best.)), tranwrd(strip(_wheredesc_),
3672354  !+ '"', '""'));
3672355   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3672356   +      if eof and substr(_WHERE_, 1, 2)='^(' then
3672357   +         call symput('_XValidation', '1');
3672358   +   run;
3672360   +   %let grouptarget=;
3672361   +   /* Looping Over Groups Only.  Retrieve targets from EMINFO */
3672362   +   %if "&looptarget1" eq "" %then %do;
3672363   +      data _null_;
3672364   +         set &em_import_data_eminfo;
3672365   +         where key in('MODEL');
3672366   +         call symput('grouptarget', strip(symget('grouptarget'))!!'
3672366  !+'!!strip(target));
3672367   +      run;
3672368   +   %end;
3672370   +   %do j=1 %to &emloopnumber;
3672371   +       %let EnsembleIndex=0;
3672372   +       data _null_;
3672373   +          retain index 0 ensembleIndex 0;
3672374   +          set &em_user_path end=eof;
3672375   +          where LOOPID=&j;
3672376   +          if nodelabel = "&groupid" or index then do;
3672377   +             index + 1;
3672378   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3672379   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3672380   +             call symput('loopaccum'!!strip(put(index, best.)),
3672380  !+strip(accumulatedScoreCode));
3672381   +          end;
3672382   +          if component='Ensemble' then ensembleIndex = index;
3672383   +          if eof then do;
3672384   +             call symput('loopcodenum', strip(put(index, best.)));
3672385   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3672386   +          end;
3672387   +       run;
3672389   +       %do i = 1 %to &loopcodenum;
3672390   +           %let fsourceEntry =
3672390  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3672391   +           %let psourceEntry =
3672391  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3672393   +           %if (&&loopnode&i eq &em_nodeid ) or
3672394   +               ( (&&loopnode&i ne &em_nodeid) and (&ensembleIndex = 0) or (&i=1 or
3672394  !+&i>&ensembleIndex or &i=&ensembleIndex) ) %then %do;
3672396   +               data _null_;
3672397   +                  file emflow mod;
3672398   +                  put "&em_codebar;";
3672399   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3672400   +                  put "* User: &sysuserid;";
3672401   +                  put "* Date: &sysdate: &systime;";
3672402   +                  %if "&&loopwhere&j" ne "" %then %do;
3672403   +                      put "* Group: &&loopwhere&j;";
3672404   +                  %end;
3672405   +                  %if "&&looptarget&j" ne "" %then %do;
3672406   +                       put "* Target: &&looptarget&j;";
3672407   +                  %end;
3672408   +                  put "&em_codebar ;";
3672409   +               run;
3672410   +               data _null_;
3672411   +                   file empub mod;
3672412   +                   put "&em_codebar ;";
3672413   +                   put "* &&loopnode&i: &&loopdesc&i;" ;
3672414   +                   put "* User: &sysuserid;";
3672415   +                   put "* Date: &sysdate: &systime;";
3672416   +                   %if "&&loopwhere&j" ne "" %then %do;
3672417   +                       put "* Group: &&loopwhere&j;";
3672418   +                   %end;
3672419   +                   %if "&&looptarget&j" ne "" %then %do;
3672420   +                       put "* Target: &&looptarget&j;";
3672421   +                   %end;
3672422   +                   put "&em_codebar;";
3672423   +               run;
3672424   +           %end;
3672426   +           %if ("&&loopnode&i" ne "&em_nodeid" ) %then %do;
3672427   +               %if (&ensembleIndex = 0) or (&i=1 or &i>&ensembleIndex or
3672427  !+&i=&ensembleIndex) %then %do;
3672428   +                   %if "&&loopnode&i" eq "&groupid" and "&_XValidation" eq "1" %then
3672428  !+ %do;
3672429   +                       filename y catalog "&psourceEntry";
3672430   +                       %em_copyfile(infref=y, outfref=emflow, append=Y);
3672431   +                       filename y;
3672432   +                   %end;
3672433   +                   %else %do;
3672434   +                       filename x catalog "&fsourceEntry";
3672435   +                       %em_copyfile(infref=x, outfref=emflow, append=Y);
3672436   +                       filename x;
3672437   +                   %end;
3672439   +                   filename y catalog "&psourceEntry";
3672440   +                   %em_copyfile(infref=y, outfref=empub, append=Y);
3672441   +                   filename y;
3672442   +               %end;
3672443   +           %end;
3672444   +           %else %do;
3672445   +              %if "&&loopwhere&j" ne "" %then %do;
3672446   +                  data _null_;
3672447   +                     file emflow mod;
3672448   +                     put 'end;';
3672449   +                  run;
3672450   +                  data _null_;
3672451   +                     file empub mod;
3672452   +                     put 'end;';
3672453   +                  run;
3672454   +               %end;
3672455   +           %end;
3672456   +       %end;
3672457   +   %end;
3672458   +   filename emflow;
3672459   +   filename empub;
3672461   +   /* Stratify Model Need to Recompute All Assessment Reports */
3672462   +   %if "&grouptarget" eq "" %then %do;
3672463   +       %let assessTarget=;
3672464   +       %do j=1 %to &emloopnumber;
3672465   +           %let targetname = &&looptarget&j;
3672466   +           %if ^%index(&assesstarget, &targetname) and ("&targetname" ne "") %then
3672466  !+%do;
3672467   +               %let assesstarget = &assesstarget &targetname;
3672468   +               %let index = 1;
3672469   +               %do %while( %scan(%sysfunc(strip(&targetname)), &index) ne
3672469  !+%sysfunc(strip(&targetname)));
3672470   +                   %let index = %eval(&index + 1);
3672471   +               %end;
3672472   +               %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &index
3672472  !+,%str( ));
The SAS System
 
3672474   +               %if "&targetlevel" ne "INTERVAL" %then
3672475   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3672475  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3672476   +               %else
3672477   +                   %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3672477  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3672478   +           %end;
3672479   +       %end;
3672480   +   %end;
3672481   +   %else %do;
3672482   +       %do i=1 %to &em_num_target;
3672483   +           %let targetname = %scan(%em_target, &i, %str( )) ;
3672484   +           %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &i ,%str( ));
3672486   +           %if %sysfunc(indexw(&grouptarget, &targetname)) %then %do;
3672487   +              %if "&targetlevel" ne "INTERVAL" %then
3672488   +                  %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3672488  !+DECSCORECODE=Y, FITSTATISTICS=Y, CLASSIFICATION=Y, PREDICTED=Y);
3672489   +              %else
3672490   +                 %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=Y,
3672490  !+DECSCORECODE=Y, FITSTATISTICS=Y, RESIDUALS=Y, PREDICTED=Y);
3672491   +           %end;
3672492   +           %else %do;
3672493   +               %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N,
3672493  !+DECSCORECODE=N, FITSTATISTICS=N, RESIDUALS=N, PREDICTED=N);
3672494   +           %end;
3672495   +       %end;
3672496   +   %end;
3672497   +   %let EMGROUPASSMT = N;
3672498   +%mend postgroup;
3672500   +%macro posttarget(groupid=, type=);
3672501   +   filename emflow "&EM_FILE_EMFLOWSCORECODE";
3672502   +   filename empub "&EM_FILE_EMPUBLISHSCORECODE";
3672504   +   %let infoDs = &em_lib..%sysfunc(strip(&groupid))_&type;
3672505   +   data _null_;
3672506   +      retain index 0;
3672507   +      set &infoDs end=eof;
3672508   +      index + 1;
3672509   +      call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
3672510   +   run;
3672512   +   %do j=1 %to &emloopnumber;
3672513   +       %let EnsembleIndex=0;
3672514   +       data _null_;
3672515   +          retain index 0 ensembleIndex 0;
3672516   +          set &em_user_path end=eof;
3672517   +          where LOOPID=&j;
3672518   +          if nodelabel = "&groupid" or index then do;
3672519   +             index + 1;
3672520   +             call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3672521   +             call symput('loopdesc'!!strip(put(index, best.)),  strip(component));
3672522   +             call symput('loopaccum'!!strip(put(index, best.)),
3672522  !+strip(accumulatedScoreCode));
3672523   +          end;
3672524   +          if component='Ensemble' then ensembleIndex = index;
3672525   +          if eof then do;
3672526   +             call symput('loopcodenum', strip(put(index, best.)));
3672527   +             call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
3672528   +          end;
3672529   +       run;
3672531   +       %do i = 1 %to &loopcodenum;
3672532   +           %let fsourceEntry =
3672532  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMFLOWCODE_&j..source;
3672533   +           %let psourceEntry =
3672533  !+&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP.EMPUBLISHCODE_&j..source;
3672535   +           %if (&&loopnode&i ne &em_nodeid ) and
3672536   +               ( (&ensembleIndex = 0) or (&i>=&ensembleIndex) ) %then %do;
3672537   +               data _null_;
3672538   +                  file emflow mod;
3672539   +                  put "&em_codebar;";
3672540   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3672541   +                  put "* User: &sysuserid;";
3672542   +                  put "* Date: &sysdate: &systime;";
3672543   +                  put "* Target: &&looptarget&j;";
3672544   +                  put "&em_codebar ;";
3672545   +               run;
3672546   +               data _null_;
3672547   +                  file empub mod;
3672548   +                  put "&em_codebar ;";
3672549   +                  put "* &&loopnode&i: &&loopdesc&i;" ;
3672550   +                  put "* User: &sysuserid;";
3672551   +                  put "* Date: &sysdate: &systime;";
3672552   +                  put "* Target: &&looptarget&j;";
3672553   +                  put "&em_codebar;";
3672554   +               run;
3672556   +               filename x catalog "&fsourceEntry";
3672557   +               %em_copyfile(infref=x, outfref=emflow, append=Y);
3672558   +               filename x;
3672560   +               filename y catalog "&psourceEntry";
3672561   +               %em_copyfile(infref=y, outfref=empub, append=Y);
3672562   +               filename y;
3672563   +           %end;
3672564   +       %end;
3672565   +   %end;
3672566   +   filename emflow;
3672567   +   filename empub;
3672569   +   %do j=1 %to &emloopnumber;
3672570   +       %let targetname = &&looptarget&j;
3672571   +       %let k = 1;
3672572   +       %do %while( %scan(%sysfunc(strip(&targetname)), &k) ne
3672572  !+%sysfunc(strip(&targetname)));
3672573   +           %let k = %eval(&k + 1);
3672574   +       %end;
3672575   +       %let targetlevel = %scan(%sysfunc(strip(%em_target_level)), &k ,%str( ));
3672576   +       %if "&targetlevel" ne "INTERVAL" %then
3672577   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3672577  !+FITSTATISTICS=N, CLASSIFICATION=N, PREDICTED=Y);
3672578   +       %else
3672579   +           %em_model(DATA=&gptrain, TARGET=&targetname , ASSESS=N, DECSCORECODE=N,
3672579  !+FITSTATISTICS=N, RESIDUALS=N, PREDICTED=Y);
3672580   +       %let EMGROUPASSMT = N;
3672581   +   %end;
3672583   +%mend posttarget;
3672585   +%macro postloop;
3672587   +   %if ^%symexist(em_import_data_eminfo) %then %goto doendpl;
3672589   +   %if "&em_import_data_eminfo" eq "" or ^%sysfunc(exist(&em_import_data_eminfo))
3672589  !+%then %do;
3672590   +       %let emexceptionstring = nomodeltarget;
3672591   +       %goto doendpl;
3672592   +   %end;
3672594   +   %let targetName=;
3672595   +   %let endgrp_decmeta=;
3672597   +   data _null_;
3672598   +      set &em_import_data_eminfo;
3672599   +      where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
3672600   +      call symput('GROUPID',   strip(data));
3672601   +      call symput('LOOPTYPE', strip(key));
3672602   +   run;
3672604   +   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
3672605   +   %include temp;
3672606   +   filename temp;
3672608   +   %em_getname(key=PATH, type=DATA);
3672610   +   %if ^%sysfunc(exist(&em_user_path)) %then %goto doendpl;
3672612   +   %let groupImportDs = &em_lib..%sysfunc(strip(&groupid))_importset;
3672614   +   %let gptrain=;
3672615   +   %let gpvalidate=;
3672616   +   %let gptest=;
3672618   +   data _null_;
3672619   +      set &groupImportDs;
3672620   +      select(upcase(port));
3672621   +          when('DATA')     call symput('gpTrain',    strip(dataset));
3672622   +          when('VALIDATE') call symput('gpValidate', strip(dataset));
3672623   +          when('TEST')     call symput('gpTest',     strip(dataset));
3672624   +       otherwise;
3672625   +      end;
3672626   +   run;
3672627   +   %let gpTrain =&em_lib..%sysfunc(strip(&gpTrain));
3672629   +   %if ("&looptype" eq "BOOSTINFO") or ("&looptype" eq "BAGINFO") %then
3672629  !+%postboostbag(groupid=&groupid, type=&looptype);
3672630   +   %else
3672631   +   %if ("&looptype" eq "GROUPINFO") %then %postgroup(groupid=&groupid,
3672631  !+type=&looptype);
3672632   +   %else
3672633   +   %if ("&looptype" eq "TARGETINFO") %then %posttarget(groupid=&groupid,
3672633  !+type=&looptype);
3672635   +   %let deleteString = &em_nodeid._path;
3672637   +   proc sort data=&em_user_path nodupkey;
3672638   +      by nodelabel;
3672639   +   run;
3672640   +   %let loopnodenum=0;
3672641   +   data _null_;
3672642   +      retain index 0;
3672643   +      set &em_user_path end=eof;
3672644   +      if nodelabel = "&groupid" or index then do;
3672645   +         index + 1;
3672646   +         call symput('loopnode'!!strip(put(index, best.)),  strip(nodelabel));
3672647   +      end;
3672648   +      if eof then do;
3672649   +         call symput('loopnodenum', strip(put(index, best.)));
3672650   +      end;
3672651   +   run;
3672652   +   proc datasets lib=&em_lib nolist;
3672653   +      delete &deleteString;
3672654   +      delete
3672655   +      %do i = 1 %to &loopnodenum;
3672656   +          %let loopcatalog = %sysfunc(strip(&&loopnode&i))_LOOP;
3672657   +          %if %sysfunc(cexist(&em_lib..%sysfunc(strip(&&loopnode&i))_LOOP)) %then
3672657  !+%do;
3672659   +              &loopcatalog
3672660   +          %end;
3672661   +          %if &i = &loopnodenum %then %do;
3672662   +              / mt=catalog;
3672663   +          %end;
3672664   +      %end;
3672665   +   run;
3672666   +   quit;
3672668   +   filename emflow "&EM_FILE_EMFLOWSCORECODE" MOD;
3672670   +   %if "&gpTrain" ne "" and (("&looptype" eq "BOOSTINFO") or ("&looptype" eq
3672670  !+"BAGINFO")) %then %do;
3672672   +       %let targetType = ;
3672673   +       data _null_;
3672674   +          set &endgrp_decmeta;
3672675   +          where _TYPE_='TARGET';
3672676   +          call symput('TARGETTYPE', strip(level));
3672677   +       run;
3672679   +       filename empub "&EM_FILE_EMPUBLISHSCORECODE" MOD;
3672681   +       %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow,
3672681  !+prescore=Y);
3672683   +       %if &targetType ne 'INTERVAL' %then %do;
3672684   +           %makeClassificationVars(target=&target, data=&em_export_train,
3672684  !+decmeta=&endgrp_decmeta, publish=Y, fref=empub);
3672685   +       %end;
3672687   +       %makeResidualVars(target=&targetname, decmeta=&endgrp_decmeta, fref=emflow);
3672689   +       %em_model(TARGET=&targetname, ASSESS=Y, DECSCORECODE=Y, FITSTATISTICS=Y,
3672689  !+CLASSIFICATION=Y, RESIDUALS=Y, PREDICTED=Y);
3672691   +       filename empub;
3672693   +   %end;
3672695   +   %if "&gpTrain" ne "" %then
3672696   +        %scoreTables(data=&gpTrain,     out=&em_export_train,    scoreref=emflow);
3672697   +   %if "&gpValidate" ne "" %then
3672698   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpValidate)),
3672698  !+out=&em_export_validate, scoreref=emflow);
3672699   +   %if "&gpTest" ne "" %then
3672700   +       %scoreTables(data=&em_lib..%sysfunc(strip(&gpTest)),
3672700  !+out=&em_export_test,     scoreref=emflow);
3672702   +   filename emflow;
3672704   +   %doendpl:
3672706   +%mend postloop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Neural4_EMINFO;
MPRINT(POSTLOOP):   where key in('GROUPINFO','BOOSTINFO', 'BAGINFO', 'TARGETINFO',
'INDEXINFO');
MPRINT(POSTLOOP):   call symput('GROUPID', strip(data));
MPRINT(POSTLOOP):   call symput('LOOPTYPE', strip(key));
MPRINT(POSTLOOP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE key in ('BAGINFO', 'BOOSTINFO', 'GROUPINFO', 'INDEXINFO', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTLOOP):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
3672707   +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
3672708   +   proc display c=sashelp.emcore.pathscorecode.scl;
3672709   +   run;
3672710   +%mend EM_GETTRAINPATH;
3672711   +
NOTE: %INCLUDE (level 1) ending.
MPRINT(POSTLOOP):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(POSTLOOP):  ;
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   set EMWS1.Grp12_importset;
MPRINT(POSTLOOP):   select(upcase(port));
MPRINT(POSTLOOP):   when('DATA') call symput('gpTrain', strip(dataset));
MPRINT(POSTLOOP):   when('VALIDATE') call symput('gpValidate', strip(dataset));
MPRINT(POSTLOOP):   when('TEST') call symput('gpTest', strip(dataset));
MPRINT(POSTLOOP):   otherwise;
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.GRP12_IMPORTSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas";
MPRINT(POSTGROUP):   filename empub "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas";
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0;
MPRINT(POSTGROUP):   set EMWS1.Grp12_GROUPINFO end=eof;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopwhere'!!strip(put(index, best.)),
tranwrd(strip(_wheredesc_), '"', '""'));
MPRINT(POSTGROUP):   call symput('looptarget'!!strip(put(index, best.)), strip(_target_));
MPRINT(POSTGROUP):   if eof and substr(_WHERE_, 1, 2)='^(' then call symput('_XValidation',
'1');
MPRINT(POSTGROUP):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.GRP12_GROUPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   set EMWS1.Neural4_EMINFO;
MPRINT(POSTGROUP):   where key in('MODEL');
MPRINT(POSTGROUP):   call symput('grouptarget', strip(symget('grouptarget'))!!'
'!!strip(target));
MPRINT(POSTGROUP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE key='MODEL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=1;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=218,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=255,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_1.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=478,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=16241,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =1);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15275,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=16460,
      Last Modified=02 June 2018 17:08:14 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15494,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=2;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=16466,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15500,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=16684,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=15718,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=16721,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15755,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=16944,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_2.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=15978,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=32707,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =2);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=30775,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=32926,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=30994,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=3;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=32932,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=31000,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=33150,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=31218,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=33187,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=31255,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=33410,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_3.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=31478,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=49173,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =3);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=46275,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=49392,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=46494,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=4;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=49398,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=46500,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=49616,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=46718,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=49653,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=46755,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=49876,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_4.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=46978,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=65639,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =4);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61775,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=65858,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=61994,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=5;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=65864,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62000,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=66082,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=62218,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=66119,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62255,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=66342,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_5.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=62478,
      Last Modified=02 June 2018 17:08:15 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82105,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =5);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77275,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82324,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77494,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=6;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82330,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77500,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=82548,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=77718,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=82585,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=77755,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=82808,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_6.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=77978,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=98571,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =6);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92775,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=98790,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=92994,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=7;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=98796,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=93000,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=99014,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=93218,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=99051,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=93255,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=99274,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_7.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=93478,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=115037,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =7);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108275,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=115256,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108494,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=8;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=115262,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108500,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=115480,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=108718,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=115517,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108755,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=115740,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_8.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=108978,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=131503,
      Last Modified=02 June 2018 17:08:16 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =8);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=123775,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=131722,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=123994,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=9;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=131728,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=124000,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=131946,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=124218,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 9.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=131983,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=124255,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=132206,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_9.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=124478,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=147969,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =9);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=139275,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=148188,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=139494,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   retain index 0 ensembleIndex 0;
MPRINT(POSTGROUP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTGROUP):   where LOOPID=10;
MPRINT(POSTGROUP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTGROUP):   index + 1;
MPRINT(POSTGROUP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTGROUP):   call symput('loopdesc'!!strip(put(index, best.)), strip(component));
MPRINT(POSTGROUP):   call symput('loopaccum'!!strip(put(index, best.)),
strip(accumulatedScoreCode));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   if component='Ensemble' then ensembleIndex = index;
MPRINT(POSTGROUP):   if eof then do;
MPRINT(POSTGROUP):   call symput('loopcodenum', strip(put(index, best.)));
MPRINT(POSTGROUP):   call symput('EnsembleIndex', strip(put(ensembleIndex, best.)));
MPRINT(POSTGROUP):   end;
MPRINT(POSTGROUP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
      WHERE LOOPID=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=148194,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Grp12: StartGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=139500,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=148413,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMFLOW.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Grp12_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=139719,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 2 records were written to the file EMPUB.
      The minimum record length was 10.
      The maximum record length was 25.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=148452,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* Neural4: NeuralNetwork;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=139758,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename x catalog "EMWS1.Neural4_LOOP.EMFLOWCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file emflow MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=148676,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 427 records were written to the file EMFLOW.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(POSTGROUP):   filename y catalog "EMWS1.Neural4_LOOP.EMPUBLISHCODE_10.source";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file empub MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("y",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=139982,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 388 records were written to the file EMPUB.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):  ;
MPRINT(POSTGROUP):   filename y;
NOTE: Fileref Y has been deassigned.
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=164439,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMFLOW.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put "*------------------------------------------------------------* ;";
MPRINT(POSTGROUP):   put "* EndGrp12: EndGroup;" ;
MPRINT(POSTGROUP):   put "* User: misil;";
MPRINT(POSTGROUP):   put "* Date: 02JUN18: 16:25;";
MPRINT(POSTGROUP):   put "* Group: ^(cv_var =10);";
MPRINT(POSTGROUP):   put "*------------------------------------------------------------*;";
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=154779,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 6 records were written to the file EMPUB.
      The minimum record length was 14.
      The maximum record length was 64.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file emflow mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMFLOW is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=164659,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMFLOW.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   data _null_;
MPRINT(POSTGROUP):   file empub mod;
MPRINT(POSTGROUP):   put 'end;';
MPRINT(POSTGROUP):   run;
 
NOTE: The file EMPUB is:
 
      Filename=C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=154999,
      Last Modified=02 June 2018 17:08:17 o'clock,
      Create Time=02 June 2018 17:08:14 o'clock
 
NOTE: 1 record was written to the file EMPUB.
      The minimum record length was 4.
      The maximum record length was 4.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTGROUP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(POSTGROUP):   filename empub;
NOTE: Fileref EMPUB has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   set WORK.EM_USER_MODEL end=eof;
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   if eof then do;
MPRINT(EM_MODEL):   data = "EMWS1.TRANS2_TRAIN";
MPRINT(EM_MODEL):   target = "DepVar";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   output;
MPRINT(EM_MODEL):   end;
MPRINT(EM_MODEL):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_USER_MODEL.
NOTE: The data set WORK.EM_USER_MODEL has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   proc sort data=EMWS1.EndGrp12_PATH nodupkey;
MPRINT(POSTLOOP):   by nodelabel;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 120 observations read from the data set EMWS1.ENDGRP12_PATH.
NOTE: 108 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.ENDGRP12_PATH has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   data _null_;
MPRINT(POSTLOOP):   retain index 0;
MPRINT(POSTLOOP):   set EMWS1.EndGrp12_PATH end=eof;
MPRINT(POSTLOOP):   if nodelabel = "Grp12" or index then do;
MPRINT(POSTLOOP):   index + 1;
MPRINT(POSTLOOP):   call symput('loopnode'!!strip(put(index, best.)), strip(nodelabel));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   if eof then do;
MPRINT(POSTLOOP):   call symput('loopnodenum', strip(put(index, best.)));
MPRINT(POSTLOOP):   end;
MPRINT(POSTLOOP):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.ENDGRP12_PATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(POSTLOOP):   proc datasets lib=EMWS1 nolist;
MPRINT(POSTLOOP):   delete EndGrp12_path;
MPRINT(POSTLOOP):   delete Grp12_LOOP Neural4_LOOP / mt=catalog;
MPRINT(POSTLOOP):   run;
 
NOTE: Deleting EMWS1.ENDGRP12_PATH (memtype=DATA).
NOTE: Deleting EMWS1.GRP12_LOOP (memtype=CATALOG).
NOTE: Deleting EMWS1.NEURAL4_LOOP (memtype=CATALOG).
MPRINT(POSTLOOP):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(POSTLOOP):   filename emflow "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas" MOD;
MPRINT(SCORETABLES):   data EMWS1.EndGrp12_TRAIN / view=EMWS1.EndGrp12_TRAIN;
MPRINT(SCORETABLES):   set EMWS1.Trans2_TRAIN ;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\misil\Desktop\DM
      2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMFLOWSCORE.sas.
3672712   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3672713   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3672714   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3672715   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3672716   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3672717   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3672718   +if (cv_var =1)  then do;
MPRINT(SCORETABLES):   if (cv_var =1) then do;
3672719   +_XVAL_=1;
MPRINT(SCORETABLES):   _XVAL_=1;
3672720   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3672721   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3672722   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3672723   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3672724   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3672725   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3672726   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3672727   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3672728   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3672729   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3672730   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3672731   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3672732   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3672733   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3672734   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3672735   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3672736   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3672737   +LENGTH _WARN_ $4
3672738   +      F_DepVar  $ 12
3672739   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3672740   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3672741   +
3672742   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3672743   +
3672744   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3672745   +
3672746   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3672747   +
3672748   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3672749   +
3672750   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3672751   +
3672752   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3672753   +
3672754   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3672755   +
3672756   +      label S_RANGE_campaign_acceptance =
3672757   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3672758   +
3672759   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3672760   +
3672761   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3672762   +
3672763   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3672764   +
3672765   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3672766   +
3672767   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3672768   +
3672769   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3672770   +
3672771   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3672772   +
3672773   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3672774   +
3672775   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3672776   +
3672777   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3672778   +
3672779   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3672780   +
3672781   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3672782   +
3672783   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3672784   +
3672785   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3672786   +
3672787   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3672788   +
3672789   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3672790   +
3672791   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3672792   +
3672793   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3672794   +
3672795   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3672796   +
3672797   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3672798   +
3672799   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3672800   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3672801   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3672802   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3672803   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3672804   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3672805   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3672806   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3672807   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3672808   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3672809   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3672810   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3672811   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3672812   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3672813   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3672814   +end;
MPRINT(SCORETABLES):   end;
3672815   +else do;
MPRINT(SCORETABLES):   else do;
3672816   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3672817   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3672818   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3672819   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3672820   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3672821   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3672822   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3672823   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3672824   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3672825   +         end;
MPRINT(SCORETABLES):   end;
3672826   +         else do;
MPRINT(SCORETABLES):   else do;
3672827   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3672828   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3672829   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3672830   +            end;
MPRINT(SCORETABLES):   end;
3672831   +         end;
MPRINT(SCORETABLES):   end;
3672832   +      end;
MPRINT(SCORETABLES):   end;
3672833   +      else do;
MPRINT(SCORETABLES):   else do;
3672834   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3672835   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3672836   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3672837   +         end;
MPRINT(SCORETABLES):   end;
3672838   +      end;
MPRINT(SCORETABLES):   end;
3672839   +   end;
MPRINT(SCORETABLES):   end;
3672840   +   else do;
MPRINT(SCORETABLES):   else do;
3672841   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3672842   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3672843   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3672844   +      end;
MPRINT(SCORETABLES):   end;
3672845   +      else do;
MPRINT(SCORETABLES):   else do;
3672846   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3672847   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3672848   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3672849   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3672850   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3672851   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3672852   +         end;
MPRINT(SCORETABLES):   end;
3672853   +      end;
MPRINT(SCORETABLES):   end;
3672854   +   end;
MPRINT(SCORETABLES):   end;
3672855   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3672856   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3672857   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3672858   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3672859   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3672860   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3672861   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3672862   +   end;
MPRINT(SCORETABLES):   end;
3672863   +end;
MPRINT(SCORETABLES):   end;
3672864   +
3672865   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672866   +*** Checking missing input Interval
3672867   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3672868   +
3672869   +IF NMISS(
3672870   +   MntCard_Games ,
3672871   +   MntMagazines ,
3672872   +   NumCatalogPurchases ,
3672873   +   NumDealsPurchases ,
3672874   +   NumWebPurchases ,
3672875   +   RANGE_Frq ,
3672876   +   RANGE_Recency ,
3672877   +   RANGE_average_purchase ,
3672878   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3672879   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3672880   +
3672881   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3672882   +END;
MPRINT(SCORETABLES):   END;
3672883   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672884   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3672885   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672886   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3672887   +   S_MntCard_Games  =    -2.32158995038862 +     6.64121458421225 *
3672888   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32158995038862 + 6.64121458421225 * MntCard_Games ;
3672889   +   S_MntMagazines  =    -0.83537353117501 +     17.3108808931593 *
3672890   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83537353117501 + 17.3108808931593 * MntMagazines ;
3672891   +   S_NumCatalogPurchases  =    -3.12357871086055 +     13.5202672669706 *
3672892   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12357871086055 + 13.5202672669706 *
NumCatalogPurchases ;
3672893   +   S_NumDealsPurchases  =    -1.41780479317678 +     11.2440893303082 *
3672894   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41780479317678 + 11.2440893303082 *
NumDealsPurchases ;
3672895   +   S_NumWebPurchases  =    -5.18358312919826 +     12.1697437005332 *
3672896   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.18358312919826 + 12.1697437005332 *
NumWebPurchases ;
3672897   +   S_RANGE_Frq  =    -1.36749907896913 +     4.22287702686988 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36749907896913 + 4.22287702686988 * RANGE_Frq ;
3672898   +   S_RANGE_Recency  =    -1.66587101163314 +     3.35148857096611 *
3672899   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.66587101163314 + 3.35148857096611 * RANGE_Recency ;
3672900   +   S_RANGE_average_purchase  =    -1.04341611930738 +      5.1645310509114 *
3672901   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04341611930738 + 5.1645310509114 *
RANGE_average_purchase ;
3672902   +   S_RANGE_campaign_acceptance
3672903   +          =    -0.47463154918021 +     5.74512803760441 *
3672904   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47463154918021 + 5.74512803760441 *
RANGE_campaign_acceptance ;
3672905   +END;
MPRINT(SCORETABLES):   END;
3672906   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3672907   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3672908   +   ELSE S_MntCard_Games  =    -2.32158995038862 +     6.64121458421225 *
3672909   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32158995038862 + 6.64121458421225 *
MntCard_Games ;
3672910   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3672911   +   ELSE S_MntMagazines  =    -0.83537353117501 +     17.3108808931593 *
3672912   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83537353117501 + 17.3108808931593 *
MntMagazines ;
3672913   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3672914   +   ELSE S_NumCatalogPurchases
3672915   +          =    -3.12357871086055 +     13.5202672669706 * NumCatalogPurchases
3672916   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12357871086055 + 13.5202672669706 *
NumCatalogPurchases ;
3672917   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3672918   +   ELSE S_NumDealsPurchases  =    -1.41780479317678 +     11.2440893303082 *
3672919   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41780479317678 + 11.2440893303082 *
NumDealsPurchases ;
3672920   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3672921   +   ELSE S_NumWebPurchases  =    -5.18358312919826 +     12.1697437005332 *
3672922   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.18358312919826 + 12.1697437005332 *
NumWebPurchases ;
3672923   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3672924   +   ELSE S_RANGE_Frq  =    -1.36749907896913 +     4.22287702686988 * RANGE_Frq
3672925   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36749907896913 + 4.22287702686988 * RANGE_Frq ;
3672926   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3672927   +   ELSE S_RANGE_Recency  =    -1.66587101163314 +     3.35148857096611 *
3672928   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.66587101163314 + 3.35148857096611 *
RANGE_Recency ;
3672929   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3672930   +   ELSE S_RANGE_average_purchase
3672931   +          =    -1.04341611930738 +      5.1645310509114 *
3672932   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04341611930738 + 5.1645310509114 *
RANGE_average_purchase ;
3672933   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3672934   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3672935   +   ELSE S_RANGE_campaign_acceptance
3672936   +          =    -0.47463154918021 +     5.74512803760441 *
3672937   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47463154918021 + 5.74512803760441
* RANGE_campaign_acceptance ;
3672938   +END;
MPRINT(SCORETABLES):   END;
3672939   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672940   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3672941   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672942   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672943   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3672944   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3672945   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3672946   +   H11  =     0.80576447742642 * S_MntCard_Games  +    -1.35457147304872 *
3672947   +        S_MntMagazines  +     0.35218158554069 * S_NumCatalogPurchases
3672948   +          +      2.6917843303321 * S_NumDealsPurchases
3672949   +          +     0.10694094449806 * S_NumWebPurchases
3672950   +          +    -0.26411587698141 * S_RANGE_Frq  +    -3.89455917519443 *
3672951   +        S_RANGE_Recency  +     0.03220879020743 * S_RANGE_average_purchase
3672952   +          +     0.88916200760373 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.80576447742642 * S_MntCard_Games + -1.35457147304872 *
S_MntMagazines + 0.35218158554069 * S_NumCatalogPurchases + 2.6917843303321 *
S_NumDealsPurchases + 0.10694094449806 * S_NumWebPurchases + -0.26411587698141 * S_RANGE_Frq +
-3.89455917519443 * S_RANGE_Recency + 0.03220879020743 * S_RANGE_average_purchase +
0.88916200760373 * S_RANGE_campaign_acceptance ;
3672953   +   H12  =     1.36526961146596 * S_MntCard_Games  +    -0.29383406957632 *
3672954   +        S_MntMagazines  +     0.87396260869998 * S_NumCatalogPurchases
3672955   +          +    -0.67586558030577 * S_NumDealsPurchases
3672956   +          +     1.25282510601775 * S_NumWebPurchases
3672957   +          +     0.11996368318406 * S_RANGE_Frq  +     0.02456253711424 *
3672958   +        S_RANGE_Recency  +     2.77446647220359 * S_RANGE_average_purchase
3672959   +          +     0.49759696402306 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.36526961146596 * S_MntCard_Games + -0.29383406957632 *
S_MntMagazines + 0.87396260869998 * S_NumCatalogPurchases + -0.67586558030577 *
S_NumDealsPurchases + 1.25282510601775 * S_NumWebPurchases + 0.11996368318406 * S_RANGE_Frq +
0.02456253711424 * S_RANGE_Recency + 2.77446647220359 * S_RANGE_average_purchase +
0.49759696402306 * S_RANGE_campaign_acceptance ;
3672960   +   H13  =     1.76993818523586 * S_MntCard_Games  +     0.07671546432538 *
3672961   +        S_MntMagazines  +    -0.65924080183409 * S_NumCatalogPurchases
3672962   +          +     0.03672063839352 * S_NumDealsPurchases
3672963   +          +     -0.5607404707598 * S_NumWebPurchases
3672964   +          +     1.64295687294151 * S_RANGE_Frq  +     1.72231219092298 *
3672965   +        S_RANGE_Recency  +     2.75738897743958 * S_RANGE_average_purchase
3672966   +          +     1.48077549719556 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 1.76993818523586 * S_MntCard_Games + 0.07671546432538 *
S_MntMagazines + -0.65924080183409 * S_NumCatalogPurchases + 0.03672063839352 *
S_NumDealsPurchases + -0.5607404707598 * S_NumWebPurchases + 1.64295687294151 * S_RANGE_Frq +
1.72231219092298 * S_RANGE_Recency + 2.75738897743958 * S_RANGE_average_purchase +
1.48077549719556 * S_RANGE_campaign_acceptance ;
3672967   +   H14  =    -0.83808113655998 * S_MntCard_Games  +    -1.18102279779449 *
3672968   +        S_MntMagazines  +    -3.00417863513758 * S_NumCatalogPurchases
3672969   +          +    -1.38026865729183 * S_NumDealsPurchases
3672970   +          +    -2.08311550808261 * S_NumWebPurchases
3672971   +          +     0.74467771591758 * S_RANGE_Frq  +      2.2526203958792 *
3672972   +        S_RANGE_Recency  +    -2.02872294176561 * S_RANGE_average_purchase
3672973   +          +    -1.69782888990197 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -0.83808113655998 * S_MntCard_Games + -1.18102279779449 *
S_MntMagazines + -3.00417863513758 * S_NumCatalogPurchases + -1.38026865729183 *
S_NumDealsPurchases + -2.08311550808261 * S_NumWebPurchases + 0.74467771591758 * S_RANGE_Frq +
2.2526203958792 * S_RANGE_Recency + -2.02872294176561 * S_RANGE_average_purchase +
-1.69782888990197 * S_RANGE_campaign_acceptance ;
3672974   +   H15  =     1.24050599188407 * S_MntCard_Games  +     0.30620053052458 *
3672975   +        S_MntMagazines  +     1.26072053241866 * S_NumCatalogPurchases
3672976   +          +     0.80364251906053 * S_NumDealsPurchases
3672977   +          +    -0.88243749551443 * S_NumWebPurchases
3672978   +          +    -1.04786104922245 * S_RANGE_Frq  +     0.18201126503282 *
3672979   +        S_RANGE_Recency  +     1.00954737159995 * S_RANGE_average_purchase
3672980   +          +     1.90299996531116 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 1.24050599188407 * S_MntCard_Games + 0.30620053052458 *
S_MntMagazines + 1.26072053241866 * S_NumCatalogPurchases + 0.80364251906053 *
S_NumDealsPurchases + -0.88243749551443 * S_NumWebPurchases + -1.04786104922245 * S_RANGE_Frq
+ 0.18201126503282 * S_RANGE_Recency + 1.00954737159995 * S_RANGE_average_purchase +
1.90299996531116 * S_RANGE_campaign_acceptance ;
3672981   +   H16  =       -2.22887166717 * S_MntCard_Games  +     0.49102368438131 *
3672982   +        S_MntMagazines  +    -0.69782041997387 * S_NumCatalogPurchases
3672983   +          +    -1.71786850048814 * S_NumDealsPurchases
3672984   +          +    -1.13965228587366 * S_NumWebPurchases
3672985   +          +    -0.48468186953053 * S_RANGE_Frq  +     3.41349666158838 *
3672986   +        S_RANGE_Recency  +    -0.05067611634858 * S_RANGE_average_purchase
3672987   +          +    -1.77354356314709 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.22887166717 * S_MntCard_Games + 0.49102368438131 *
S_MntMagazines + -0.69782041997387 * S_NumCatalogPurchases + -1.71786850048814 *
S_NumDealsPurchases + -1.13965228587366 * S_NumWebPurchases + -0.48468186953053 * S_RANGE_Frq
+ 3.41349666158838 * S_RANGE_Recency + -0.05067611634858 * S_RANGE_average_purchase +
-1.77354356314709 * S_RANGE_campaign_acceptance ;
3672988   +   H17  =     1.21331094636484 * S_MntCard_Games  +      1.6576967882863 *
3672989   +        S_MntMagazines  +     0.77924888279639 * S_NumCatalogPurchases
3672990   +          +    -3.59930830396134 * S_NumDealsPurchases
3672991   +          +      0.5875252071535 * S_NumWebPurchases
3672992   +          +      0.5637641308047 * S_RANGE_Frq  +    -0.29376987598858 *
3672993   +        S_RANGE_Recency  +    -0.37854770541401 * S_RANGE_average_purchase
3672994   +          +     0.45927773902461 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.21331094636484 * S_MntCard_Games + 1.6576967882863 *
S_MntMagazines + 0.77924888279639 * S_NumCatalogPurchases + -3.59930830396134 *
S_NumDealsPurchases + 0.5875252071535 * S_NumWebPurchases + 0.5637641308047 * S_RANGE_Frq +
-0.29376987598858 * S_RANGE_Recency + -0.37854770541401 * S_RANGE_average_purchase +
0.45927773902461 * S_RANGE_campaign_acceptance ;
3672995   +   H18  =    -0.79856913796006 * S_MntCard_Games  +    -0.36354034752909 *
3672996   +        S_MntMagazines  +     -0.6027135915373 * S_NumCatalogPurchases
3672997   +          +      0.8588261478081 * S_NumDealsPurchases
3672998   +          +    -1.25022991106658 * S_NumWebPurchases
3672999   +          +     1.09522773351835 * S_RANGE_Frq  +     0.45268492372094 *
3673000   +        S_RANGE_Recency  +     0.56583674153212 * S_RANGE_average_purchase
3673001   +          +    -0.27621518108586 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -0.79856913796006 * S_MntCard_Games + -0.36354034752909 *
S_MntMagazines + -0.6027135915373 * S_NumCatalogPurchases + 0.8588261478081 *
S_NumDealsPurchases + -1.25022991106658 * S_NumWebPurchases + 1.09522773351835 * S_RANGE_Frq +
0.45268492372094 * S_RANGE_Recency + 0.56583674153212 * S_RANGE_average_purchase +
-0.27621518108586 * S_RANGE_campaign_acceptance ;
3673002   +   H11  = H11  +    -0.59592397594998 * Marital_StatusDivorced
3673003   +          +    -0.99181346828724 * Marital_StatusMarried
3673004   +          +     1.78518851015998 * Marital_StatusSingle
3673005   +          +    -1.28204155071452 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.59592397594998 * Marital_StatusDivorced +
-0.99181346828724 * Marital_StatusMarried + 1.78518851015998 * Marital_StatusSingle +
-1.28204155071452 * Marital_StatusTogether ;
3673006   +   H12  = H12  +    -0.87976795343943 * Marital_StatusDivorced
3673007   +          +    -0.81699174808825 * Marital_StatusMarried
3673008   +          +      -0.420673453835 * Marital_StatusSingle
3673009   +          +    -1.01312240229347 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.87976795343943 * Marital_StatusDivorced +
-0.81699174808825 * Marital_StatusMarried + -0.420673453835 * Marital_StatusSingle +
-1.01312240229347 * Marital_StatusTogether ;
3673010   +   H13  = H13  +     0.36265928725449 * Marital_StatusDivorced
3673011   +          +    -0.70183278240755 * Marital_StatusMarried
3673012   +          +     1.66197322493248 * Marital_StatusSingle
3673013   +          +     0.09776695363865 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.36265928725449 * Marital_StatusDivorced +
-0.70183278240755 * Marital_StatusMarried + 1.66197322493248 * Marital_StatusSingle +
0.09776695363865 * Marital_StatusTogether ;
3673014   +   H14  = H14  +     0.39086532185327 * Marital_StatusDivorced
3673015   +          +     0.31670124145102 * Marital_StatusMarried
3673016   +          +     1.22201646850428 * Marital_StatusSingle
3673017   +          +     0.02859020147883 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.39086532185327 * Marital_StatusDivorced +
0.31670124145102 * Marital_StatusMarried + 1.22201646850428 * Marital_StatusSingle +
0.02859020147883 * Marital_StatusTogether ;
3673018   +   H15  = H15  +     1.22476748872775 * Marital_StatusDivorced
3673019   +          +     0.31258910389387 * Marital_StatusMarried
3673020   +          +    -2.37908758176686 * Marital_StatusSingle
3673021   +          +      0.3061511900017 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.22476748872775 * Marital_StatusDivorced +
0.31258910389387 * Marital_StatusMarried + -2.37908758176686 * Marital_StatusSingle +
0.3061511900017 * Marital_StatusTogether ;
3673022   +   H16  = H16  +    -0.14426401759108 * Marital_StatusDivorced
3673023   +          +     0.60358647444286 * Marital_StatusMarried
3673024   +          +    -0.39939888307411 * Marital_StatusSingle
3673025   +          +      0.1106989376483 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.14426401759108 * Marital_StatusDivorced +
0.60358647444286 * Marital_StatusMarried + -0.39939888307411 * Marital_StatusSingle +
0.1106989376483 * Marital_StatusTogether ;
3673026   +   H17  = H17  +     3.62922640689884 * Marital_StatusDivorced
3673027   +          +    -1.58346503236298 * Marital_StatusMarried
3673028   +          +     0.81076355743056 * Marital_StatusSingle
3673029   +          +    -3.27911968871886 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 3.62922640689884 * Marital_StatusDivorced +
-1.58346503236298 * Marital_StatusMarried + 0.81076355743056 * Marital_StatusSingle +
-3.27911968871886 * Marital_StatusTogether ;
3673030   +   H18  = H18  +    -0.00102233027897 * Marital_StatusDivorced
3673031   +          +    -0.09434650628152 * Marital_StatusMarried
3673032   +          +     2.48303989443063 * Marital_StatusSingle
3673033   +          +    -2.58925053257948 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + -0.00102233027897 * Marital_StatusDivorced +
-0.09434650628152 * Marital_StatusMarried + 2.48303989443063 * Marital_StatusSingle +
-2.58925053257948 * Marital_StatusTogether ;
3673034   +   H11  =     1.71815420702989 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.71815420702989 + H11 ;
3673035   +   H12  =      2.8088069036768 + H12 ;
MPRINT(SCORETABLES):   H12 = 2.8088069036768 + H12 ;
3673036   +   H13  =     1.94747896127441 + H13 ;
MPRINT(SCORETABLES):   H13 = 1.94747896127441 + H13 ;
3673037   +   H14  =     1.22463507943939 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.22463507943939 + H14 ;
3673038   +   H15  =    -3.37918141755026 + H15 ;
MPRINT(SCORETABLES):   H15 = -3.37918141755026 + H15 ;
3673039   +   H16  =     4.75953150279443 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.75953150279443 + H16 ;
3673040   +   H17  =    -5.14236164764026 + H17 ;
MPRINT(SCORETABLES):   H17 = -5.14236164764026 + H17 ;
3673041   +   H18  =    -2.48034152998133 + H18 ;
MPRINT(SCORETABLES):   H18 = -2.48034152998133 + H18 ;
3673042   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3673043   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3673044   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3673045   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3673046   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3673047   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3673048   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3673049   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3673050   +END;
MPRINT(SCORETABLES):   END;
3673051   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673052   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3673053   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3673054   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3673055   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3673056   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3673057   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3673058   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3673059   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3673060   +END;
MPRINT(SCORETABLES):   END;
3673061   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673062   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3673063   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673064   +
3673065   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3673066   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3673067   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3673068   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3673069   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3673070   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3673071   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3673072   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673073   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673074   +end;
MPRINT(SCORETABLES):   end;
3673075   +else do;
MPRINT(SCORETABLES):   else do;
3673076   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3673077   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3673078   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3673079   +   end;
MPRINT(SCORETABLES):   end;
3673080   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3673081   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3673082   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3673083   +   end;
MPRINT(SCORETABLES):   end;
3673084   +   else do;
MPRINT(SCORETABLES):   else do;
3673085   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673086   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673087   +   end;
MPRINT(SCORETABLES):   end;
3673088   +end;
MPRINT(SCORETABLES):   end;
3673089   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673090   +   P_DepVar1  =     5.49854447270409 * H11  +     3.01682818161719 * H12
3673091   +          +     -2.7559139537414 * H13  +    -3.00000863833896 * H14
3673092   +          +     3.81327888856657 * H15  +    -5.25472435383228 * H16
3673093   +          +      5.2332553255765 * H17  +     4.33261180486614 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.49854447270409 * H11 + 3.01682818161719 * H12 +
-2.7559139537414 * H13 + -3.00000863833896 * H14 + 3.81327888856657 * H15 + -5.25472435383228
* H16 + 5.2332553255765 * H17 + 4.33261180486614 * H18 ;
3673094   +   P_DepVar1  =    -1.24334717109242 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.24334717109242 + P_DepVar1 ;
3673095   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3673096   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3673097   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3673098   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3673099   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3673100   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3673101   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3673102   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3673103   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3673104   +END;
MPRINT(SCORETABLES):   END;
3673105   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673106   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3673107   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3673108   +END;
MPRINT(SCORETABLES):   END;
3673109   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3673110   +   P_DepVar1  =     0.13481615978211;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13481615978211;
3673111   +   P_DepVar0  =     0.86518384021788;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86518384021788;
3673112   +END;
MPRINT(SCORETABLES):   END;
3673113   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3673114   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3673115   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3673116   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3673117   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3673118   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3673119   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3673120   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673121   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3673122   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673123   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3673124   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3673125   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3673126   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3673127   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3673128   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3673129   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3673130   +END;
MPRINT(SCORETABLES):   END;
3673131   +********************************;
MPRINT(SCORETABLES):   ********************************;
3673132   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3673133   +********************************;
MPRINT(SCORETABLES):   ********************************;
3673134   +drop
3673135   +S_MntCard_Games
3673136   +S_MntMagazines
3673137   +S_NumCatalogPurchases
3673138   +S_NumDealsPurchases
3673139   +S_NumWebPurchases
3673140   +S_RANGE_Frq
3673141   +S_RANGE_Recency
3673142   +S_RANGE_average_purchase
3673143   +S_RANGE_campaign_acceptance
3673144   +H11
3673145   +H12
3673146   +H13
3673147   +H14
3673148   +H15
3673149   +H16
3673150   +H17
3673151   +H18
3673152   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3673153   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673154   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3673155   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673156   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673157   +* Group: ^(cv_var =1);
MPRINT(SCORETABLES):   * Group: ^(cv_var =1);
3673158   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673159   +end;
MPRINT(SCORETABLES):   end;
3673160   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673161   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3673162   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673163   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673164   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3673165   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673166   +if (cv_var =2)  then do;
MPRINT(SCORETABLES):   if (cv_var =2) then do;
3673167   +_XVAL_=2;
MPRINT(SCORETABLES):   _XVAL_=2;
3673168   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673169   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3673170   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673171   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673172   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3673173   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673174   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3673175   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3673176   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3673177   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3673178   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3673179   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3673180   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3673181   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3673182   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3673183   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3673184   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3673185   +LENGTH _WARN_ $4
3673186   +      F_DepVar  $ 12
3673187   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3673188   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3673189   +
3673190   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3673191   +
3673192   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3673193   +
3673194   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3673195   +
3673196   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3673197   +
3673198   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3673199   +
3673200   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3673201   +
3673202   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3673203   +
3673204   +      label S_RANGE_campaign_acceptance =
3673205   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3673206   +
3673207   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3673208   +
3673209   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3673210   +
3673211   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3673212   +
3673213   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3673214   +
3673215   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3673216   +
3673217   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3673218   +
3673219   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3673220   +
3673221   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3673222   +
3673223   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3673224   +
3673225   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3673226   +
3673227   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3673228   +
3673229   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3673230   +
3673231   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3673232   +
3673233   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3673234   +
3673235   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3673236   +
3673237   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3673238   +
3673239   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3673240   +
3673241   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3673242   +
3673243   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3673244   +
3673245   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3673246   +
3673247   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3673248   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3673249   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3673250   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3673251   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3673252   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3673253   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3673254   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3673255   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3673256   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3673257   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3673258   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3673259   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3673260   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3673261   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673262   +end;
MPRINT(SCORETABLES):   end;
3673263   +else do;
MPRINT(SCORETABLES):   else do;
3673264   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3673265   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3673266   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3673267   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3673268   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3673269   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3673270   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3673271   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3673272   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673273   +         end;
MPRINT(SCORETABLES):   end;
3673274   +         else do;
MPRINT(SCORETABLES):   else do;
3673275   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3673276   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3673277   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673278   +            end;
MPRINT(SCORETABLES):   end;
3673279   +         end;
MPRINT(SCORETABLES):   end;
3673280   +      end;
MPRINT(SCORETABLES):   end;
3673281   +      else do;
MPRINT(SCORETABLES):   else do;
3673282   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3673283   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3673284   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673285   +         end;
MPRINT(SCORETABLES):   end;
3673286   +      end;
MPRINT(SCORETABLES):   end;
3673287   +   end;
MPRINT(SCORETABLES):   end;
3673288   +   else do;
MPRINT(SCORETABLES):   else do;
3673289   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3673290   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3673291   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673292   +      end;
MPRINT(SCORETABLES):   end;
3673293   +      else do;
MPRINT(SCORETABLES):   else do;
3673294   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3673295   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3673296   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3673297   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3673298   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3673299   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673300   +         end;
MPRINT(SCORETABLES):   end;
3673301   +      end;
MPRINT(SCORETABLES):   end;
3673302   +   end;
MPRINT(SCORETABLES):   end;
3673303   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3673304   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3673305   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3673306   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3673307   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3673308   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3673309   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673310   +   end;
MPRINT(SCORETABLES):   end;
3673311   +end;
MPRINT(SCORETABLES):   end;
3673312   +
3673313   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673314   +*** Checking missing input Interval
3673315   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3673316   +
3673317   +IF NMISS(
3673318   +   MntCard_Games ,
3673319   +   MntMagazines ,
3673320   +   NumCatalogPurchases ,
3673321   +   NumDealsPurchases ,
3673322   +   NumWebPurchases ,
3673323   +   RANGE_Frq ,
3673324   +   RANGE_Recency ,
3673325   +   RANGE_average_purchase ,
3673326   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3673327   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3673328   +
3673329   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673330   +END;
MPRINT(SCORETABLES):   END;
3673331   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673332   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3673333   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673334   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673335   +   S_MntCard_Games  =     -2.3063560069152 +     6.62416950216796 *
3673336   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3063560069152 + 6.62416950216796 * MntCard_Games ;
3673337   +   S_MntMagazines  =    -0.84169834173248 +     17.6417751108648 *
3673338   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.84169834173248 + 17.6417751108648 * MntMagazines ;
3673339   +   S_NumCatalogPurchases  =    -3.11011256166134 +     13.4898542129399 *
3673340   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11011256166134 + 13.4898542129399 *
NumCatalogPurchases ;
3673341   +   S_NumDealsPurchases  =    -1.41128624775244 +     11.1349959321211 *
3673342   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41128624775244 + 11.1349959321211 *
NumDealsPurchases ;
3673343   +   S_NumWebPurchases  =    -5.27035729619396 +     12.3347494448517 *
3673344   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.27035729619396 + 12.3347494448517 *
NumWebPurchases ;
3673345   +   S_RANGE_Frq  =    -1.36427086122772 +     4.23029226870147 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36427086122772 + 4.23029226870147 * RANGE_Frq ;
3673346   +   S_RANGE_Recency  =    -1.67522852341756 +     3.36507752684168 *
3673347   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67522852341756 + 3.36507752684168 * RANGE_Recency ;
3673348   +   S_RANGE_average_purchase  =    -1.03709862959284 +     5.14678120415437 *
3673349   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03709862959284 + 5.14678120415437 *
RANGE_average_purchase ;
3673350   +   S_RANGE_campaign_acceptance
3673351   +          =    -0.47658047626349 +     5.79279284288184 *
3673352   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47658047626349 + 5.79279284288184 *
RANGE_campaign_acceptance ;
3673353   +END;
MPRINT(SCORETABLES):   END;
3673354   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673355   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3673356   +   ELSE S_MntCard_Games  =     -2.3063560069152 +     6.62416950216796 *
3673357   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3063560069152 + 6.62416950216796 *
MntCard_Games ;
3673358   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3673359   +   ELSE S_MntMagazines  =    -0.84169834173248 +     17.6417751108648 *
3673360   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.84169834173248 + 17.6417751108648 *
MntMagazines ;
3673361   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3673362   +   ELSE S_NumCatalogPurchases
3673363   +          =    -3.11011256166134 +     13.4898542129399 * NumCatalogPurchases
3673364   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11011256166134 + 13.4898542129399 *
NumCatalogPurchases ;
3673365   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3673366   +   ELSE S_NumDealsPurchases  =    -1.41128624775244 +     11.1349959321211 *
3673367   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41128624775244 + 11.1349959321211 *
NumDealsPurchases ;
3673368   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3673369   +   ELSE S_NumWebPurchases  =    -5.27035729619396 +     12.3347494448517 *
3673370   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.27035729619396 + 12.3347494448517 *
NumWebPurchases ;
3673371   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3673372   +   ELSE S_RANGE_Frq  =    -1.36427086122772 +     4.23029226870147 * RANGE_Frq
3673373   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36427086122772 + 4.23029226870147 * RANGE_Frq ;
3673374   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3673375   +   ELSE S_RANGE_Recency  =    -1.67522852341756 +     3.36507752684168 *
3673376   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67522852341756 + 3.36507752684168 *
RANGE_Recency ;
3673377   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3673378   +   ELSE S_RANGE_average_purchase
3673379   +          =    -1.03709862959284 +     5.14678120415437 *
3673380   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03709862959284 + 5.14678120415437 *
RANGE_average_purchase ;
3673381   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3673382   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3673383   +   ELSE S_RANGE_campaign_acceptance
3673384   +          =    -0.47658047626349 +     5.79279284288184 *
3673385   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47658047626349 + 5.79279284288184
* RANGE_campaign_acceptance ;
3673386   +END;
MPRINT(SCORETABLES):   END;
3673387   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673388   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3673389   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673390   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673391   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3673392   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673393   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673394   +   H11  =     1.06872425081828 * S_MntCard_Games  +    -1.69756334816622 *
3673395   +        S_MntMagazines  +     1.53208960867325 * S_NumCatalogPurchases
3673396   +          +     3.44292727544114 * S_NumDealsPurchases
3673397   +          +     1.33192442115421 * S_NumWebPurchases
3673398   +          +    -1.35143476551573 * S_RANGE_Frq  +    -5.58840023248086 *
3673399   +        S_RANGE_Recency  +     1.00577636583058 * S_RANGE_average_purchase
3673400   +          +      1.6509431362054 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.06872425081828 * S_MntCard_Games + -1.69756334816622 *
S_MntMagazines + 1.53208960867325 * S_NumCatalogPurchases + 3.44292727544114 *
S_NumDealsPurchases + 1.33192442115421 * S_NumWebPurchases + -1.35143476551573 * S_RANGE_Frq +
-5.58840023248086 * S_RANGE_Recency + 1.00577636583058 * S_RANGE_average_purchase +
1.6509431362054 * S_RANGE_campaign_acceptance ;
3673401   +   H12  =     2.25877853220999 * S_MntCard_Games  +    -0.81085273427265 *
3673402   +        S_MntMagazines  +     2.12096777159388 * S_NumCatalogPurchases
3673403   +          +    -0.39846912895335 * S_NumDealsPurchases
3673404   +          +     1.56492982854452 * S_NumWebPurchases
3673405   +          +    -0.05573861568193 * S_RANGE_Frq  +    -0.24559686063366 *
3673406   +        S_RANGE_Recency  +     1.97782342625951 * S_RANGE_average_purchase
3673407   +          +     0.17117316402053 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.25877853220999 * S_MntCard_Games + -0.81085273427265 *
S_MntMagazines + 2.12096777159388 * S_NumCatalogPurchases + -0.39846912895335 *
S_NumDealsPurchases + 1.56492982854452 * S_NumWebPurchases + -0.05573861568193 * S_RANGE_Frq +
-0.24559686063366 * S_RANGE_Recency + 1.97782342625951 * S_RANGE_average_purchase +
0.17117316402053 * S_RANGE_campaign_acceptance ;
3673408   +   H13  =    -1.16799872489828 * S_MntCard_Games  +    -0.50209336337088 *
3673409   +        S_MntMagazines  +     0.21146163370697 * S_NumCatalogPurchases
3673410   +          +    -0.49525982350876 * S_NumDealsPurchases
3673411   +          +    -1.45216899717025 * S_NumWebPurchases
3673412   +          +    -3.11397600906276 * S_RANGE_Frq  +     0.78732061680889 *
3673413   +        S_RANGE_Recency  +     1.51671446299595 * S_RANGE_average_purchase
3673414   +          +     1.02919843930597 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -1.16799872489828 * S_MntCard_Games + -0.50209336337088 *
S_MntMagazines + 0.21146163370697 * S_NumCatalogPurchases + -0.49525982350876 *
S_NumDealsPurchases + -1.45216899717025 * S_NumWebPurchases + -3.11397600906276 * S_RANGE_Frq
+ 0.78732061680889 * S_RANGE_Recency + 1.51671446299595 * S_RANGE_average_purchase +
1.02919843930597 * S_RANGE_campaign_acceptance ;
3673415   +   H14  =    -1.71060481943118 * S_MntCard_Games  +    -0.04400777191739 *
3673416   +        S_MntMagazines  +    -2.66178565356974 * S_NumCatalogPurchases
3673417   +          +     -1.5609388836264 * S_NumDealsPurchases
3673418   +          +    -1.33984174195977 * S_NumWebPurchases
3673419   +          +     4.18897316969988 * S_RANGE_Frq  +     4.33787212210179 *
3673420   +        S_RANGE_Recency  +    -8.76927165547739 * S_RANGE_average_purchase
3673421   +          +    -2.05798168761449 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -1.71060481943118 * S_MntCard_Games + -0.04400777191739 *
S_MntMagazines + -2.66178565356974 * S_NumCatalogPurchases + -1.5609388836264 *
S_NumDealsPurchases + -1.33984174195977 * S_NumWebPurchases + 4.18897316969988 * S_RANGE_Frq +
4.33787212210179 * S_RANGE_Recency + -8.76927165547739 * S_RANGE_average_purchase +
-2.05798168761449 * S_RANGE_campaign_acceptance ;
3673422   +   H15  =     2.29675886502878 * S_MntCard_Games  +      1.0067757647335 *
3673423   +        S_MntMagazines  +     1.49566864729483 * S_NumCatalogPurchases
3673424   +          +     1.67090258752372 * S_NumDealsPurchases
3673425   +          +    -2.30563474261713 * S_NumWebPurchases
3673426   +          +     -1.9559412205393 * S_RANGE_Frq  +     0.49746968375869 *
3673427   +        S_RANGE_Recency  +     3.42682491040292 * S_RANGE_average_purchase
3673428   +          +     4.04069474273956 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 2.29675886502878 * S_MntCard_Games + 1.0067757647335 *
S_MntMagazines + 1.49566864729483 * S_NumCatalogPurchases + 1.67090258752372 *
S_NumDealsPurchases + -2.30563474261713 * S_NumWebPurchases + -1.9559412205393 * S_RANGE_Frq +
0.49746968375869 * S_RANGE_Recency + 3.42682491040292 * S_RANGE_average_purchase +
4.04069474273956 * S_RANGE_campaign_acceptance ;
3673429   +   H16  =    -3.19345328654988 * S_MntCard_Games  +     1.34422778064519 *
3673430   +        S_MntMagazines  +    -1.33371680548985 * S_NumCatalogPurchases
3673431   +          +     -2.6396760970557 * S_NumDealsPurchases
3673432   +          +    -1.98572805510277 * S_NumWebPurchases
3673433   +          +     0.55452648578999 * S_RANGE_Frq  +     4.05098683749668 *
3673434   +        S_RANGE_Recency  +     0.27895562652407 * S_RANGE_average_purchase
3673435   +          +    -2.53317010349368 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -3.19345328654988 * S_MntCard_Games + 1.34422778064519 *
S_MntMagazines + -1.33371680548985 * S_NumCatalogPurchases + -2.6396760970557 *
S_NumDealsPurchases + -1.98572805510277 * S_NumWebPurchases + 0.55452648578999 * S_RANGE_Frq +
4.05098683749668 * S_RANGE_Recency + 0.27895562652407 * S_RANGE_average_purchase +
-2.53317010349368 * S_RANGE_campaign_acceptance ;
3673436   +   H17  =     1.79730759338383 * S_MntCard_Games  +     1.82440721766096 *
3673437   +        S_MntMagazines  +     1.78830569560485 * S_NumCatalogPurchases
3673438   +          +    -3.98590819789344 * S_NumDealsPurchases
3673439   +          +     1.89990476412564 * S_NumWebPurchases
3673440   +          +     3.43573727762451 * S_RANGE_Frq  +    -0.98741787969498 *
3673441   +        S_RANGE_Recency  +    -0.49926615924858 * S_RANGE_average_purchase
3673442   +          +     0.25531979883756 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.79730759338383 * S_MntCard_Games + 1.82440721766096 *
S_MntMagazines + 1.78830569560485 * S_NumCatalogPurchases + -3.98590819789344 *
S_NumDealsPurchases + 1.89990476412564 * S_NumWebPurchases + 3.43573727762451 * S_RANGE_Frq +
-0.98741787969498 * S_RANGE_Recency + -0.49926615924858 * S_RANGE_average_purchase +
0.25531979883756 * S_RANGE_campaign_acceptance ;
3673443   +   H18  =    -3.42561967196229 * S_MntCard_Games  +     1.27333696665313 *
3673444   +        S_MntMagazines  +    -0.08292836162979 * S_NumCatalogPurchases
3673445   +          +     1.60158606746744 * S_NumDealsPurchases
3673446   +          +    -2.87033435927584 * S_NumWebPurchases
3673447   +          +     1.33411237078854 * S_RANGE_Frq  +    -0.78619769600546 *
3673448   +        S_RANGE_Recency  +     0.59519734896788 * S_RANGE_average_purchase
3673449   +          +     1.56875225497046 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -3.42561967196229 * S_MntCard_Games + 1.27333696665313 *
S_MntMagazines + -0.08292836162979 * S_NumCatalogPurchases + 1.60158606746744 *
S_NumDealsPurchases + -2.87033435927584 * S_NumWebPurchases + 1.33411237078854 * S_RANGE_Frq +
-0.78619769600546 * S_RANGE_Recency + 0.59519734896788 * S_RANGE_average_purchase +
1.56875225497046 * S_RANGE_campaign_acceptance ;
3673450   +   H11  = H11  +    -3.19112682327416 * Marital_StatusDivorced
3673451   +          +    -1.99592856361111 * Marital_StatusMarried
3673452   +          +      1.6851179229142 * Marital_StatusSingle
3673453   +          +    -4.06494718526604 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -3.19112682327416 * Marital_StatusDivorced +
-1.99592856361111 * Marital_StatusMarried + 1.6851179229142 * Marital_StatusSingle +
-4.06494718526604 * Marital_StatusTogether ;
3673454   +   H12  = H12  +    -0.93154261839155 * Marital_StatusDivorced
3673455   +          +    -1.84423577751012 * Marital_StatusMarried
3673456   +          +     0.19788004318521 * Marital_StatusSingle
3673457   +          +     0.28393896588415 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.93154261839155 * Marital_StatusDivorced +
-1.84423577751012 * Marital_StatusMarried + 0.19788004318521 * Marital_StatusSingle +
0.28393896588415 * Marital_StatusTogether ;
3673458   +   H13  = H13  +    -0.12276534577898 * Marital_StatusDivorced
3673459   +          +     0.17032341587436 * Marital_StatusMarried
3673460   +          +     0.82859931587127 * Marital_StatusSingle
3673461   +          +     2.10702343843002 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.12276534577898 * Marital_StatusDivorced +
0.17032341587436 * Marital_StatusMarried + 0.82859931587127 * Marital_StatusSingle +
2.10702343843002 * Marital_StatusTogether ;
3673462   +   H14  = H14  +    -0.31092579627974 * Marital_StatusDivorced
3673463   +          +     1.03585233348264 * Marital_StatusMarried
3673464   +          +     0.03449224905668 * Marital_StatusSingle
3673465   +          +     0.23624395362825 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.31092579627974 * Marital_StatusDivorced +
1.03585233348264 * Marital_StatusMarried + 0.03449224905668 * Marital_StatusSingle +
0.23624395362825 * Marital_StatusTogether ;
3673466   +   H15  = H15  +     2.31595147576561 * Marital_StatusDivorced
3673467   +          +    -1.28148725704748 * Marital_StatusMarried
3673468   +          +    -1.35365468586708 * Marital_StatusSingle
3673469   +          +    -1.94896075656268 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 2.31595147576561 * Marital_StatusDivorced +
-1.28148725704748 * Marital_StatusMarried + -1.35365468586708 * Marital_StatusSingle +
-1.94896075656268 * Marital_StatusTogether ;
3673470   +   H16  = H16  +      0.0913131143307 * Marital_StatusDivorced
3673471   +          +     1.05488641252162 * Marital_StatusMarried
3673472   +          +    -1.92288978579906 * Marital_StatusSingle
3673473   +          +     0.59220341534154 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.0913131143307 * Marital_StatusDivorced + 1.05488641252162
* Marital_StatusMarried + -1.92288978579906 * Marital_StatusSingle + 0.59220341534154 *
Marital_StatusTogether ;
3673474   +   H17  = H17  +     4.39602764556567 * Marital_StatusDivorced
3673475   +          +    -2.74235193033458 * Marital_StatusMarried
3673476   +          +      1.5354504198187 * Marital_StatusSingle
3673477   +          +    -4.56025113235954 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 4.39602764556567 * Marital_StatusDivorced +
-2.74235193033458 * Marital_StatusMarried + 1.5354504198187 * Marital_StatusSingle +
-4.56025113235954 * Marital_StatusTogether ;
3673478   +   H18  = H18  +     1.54722708107151 * Marital_StatusDivorced
3673479   +          +     1.34941655349342 * Marital_StatusMarried
3673480   +          +     1.31151316100857 * Marital_StatusSingle
3673481   +          +    -2.49802971799109 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 1.54722708107151 * Marital_StatusDivorced +
1.34941655349342 * Marital_StatusMarried + 1.31151316100857 * Marital_StatusSingle +
-2.49802971799109 * Marital_StatusTogether ;
3673482   +   H11  =      1.2452494805381 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.2452494805381 + H11 ;
3673483   +   H12  =     3.85373820207069 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.85373820207069 + H12 ;
3673484   +   H13  =     2.84207622254752 + H13 ;
MPRINT(SCORETABLES):   H13 = 2.84207622254752 + H13 ;
3673485   +   H14  =     1.36475181691342 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.36475181691342 + H14 ;
3673486   +   H15  =    -5.31177669994247 + H15 ;
MPRINT(SCORETABLES):   H15 = -5.31177669994247 + H15 ;
3673487   +   H16  =      4.9756032171456 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.9756032171456 + H16 ;
3673488   +   H17  =    -9.37088827177256 + H17 ;
MPRINT(SCORETABLES):   H17 = -9.37088827177256 + H17 ;
3673489   +   H18  =    -7.30874469087501 + H18 ;
MPRINT(SCORETABLES):   H18 = -7.30874469087501 + H18 ;
3673490   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3673491   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3673492   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3673493   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3673494   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3673495   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3673496   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3673497   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3673498   +END;
MPRINT(SCORETABLES):   END;
3673499   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673500   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3673501   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3673502   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3673503   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3673504   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3673505   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3673506   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3673507   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3673508   +END;
MPRINT(SCORETABLES):   END;
3673509   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673510   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3673511   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673512   +
3673513   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3673514   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3673515   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3673516   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3673517   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3673518   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3673519   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3673520   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673521   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673522   +end;
MPRINT(SCORETABLES):   end;
3673523   +else do;
MPRINT(SCORETABLES):   else do;
3673524   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3673525   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3673526   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3673527   +   end;
MPRINT(SCORETABLES):   end;
3673528   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3673529   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3673530   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3673531   +   end;
MPRINT(SCORETABLES):   end;
3673532   +   else do;
MPRINT(SCORETABLES):   else do;
3673533   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673534   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673535   +   end;
MPRINT(SCORETABLES):   end;
3673536   +end;
MPRINT(SCORETABLES):   end;
3673537   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673538   +   P_DepVar1  =     7.39261319169792 * H11  +     3.53452214711161 * H12
3673539   +          +    -3.02190741428114 * H13  +    -5.38872594544035 * H14
3673540   +          +      5.3262605766228 * H15  +    -8.86920682846347 * H16
3673541   +          +      9.2148807973194 * H17  +      5.9525204889752 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 7.39261319169792 * H11 + 3.53452214711161 * H12 +
-3.02190741428114 * H13 + -5.38872594544035 * H14 + 5.3262605766228 * H15 + -8.86920682846347
* H16 + 9.2148807973194 * H17 + 5.9525204889752 * H18 ;
3673542   +   P_DepVar1  =     -1.5916596336252 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.5916596336252 + P_DepVar1 ;
3673543   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3673544   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3673545   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3673546   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3673547   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3673548   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3673549   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3673550   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3673551   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3673552   +END;
MPRINT(SCORETABLES):   END;
3673553   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673554   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3673555   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3673556   +END;
MPRINT(SCORETABLES):   END;
3673557   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3673558   +   P_DepVar1  =     0.13563950842057;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13563950842057;
3673559   +   P_DepVar0  =     0.86436049157942;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86436049157942;
3673560   +END;
MPRINT(SCORETABLES):   END;
3673561   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3673562   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3673563   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3673564   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3673565   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3673566   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3673567   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3673568   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673569   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3673570   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673571   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3673572   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3673573   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3673574   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3673575   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3673576   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3673577   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3673578   +END;
MPRINT(SCORETABLES):   END;
3673579   +********************************;
MPRINT(SCORETABLES):   ********************************;
3673580   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3673581   +********************************;
MPRINT(SCORETABLES):   ********************************;
3673582   +drop
3673583   +S_MntCard_Games
3673584   +S_MntMagazines
3673585   +S_NumCatalogPurchases
3673586   +S_NumDealsPurchases
3673587   +S_NumWebPurchases
3673588   +S_RANGE_Frq
3673589   +S_RANGE_Recency
3673590   +S_RANGE_average_purchase
3673591   +S_RANGE_campaign_acceptance
3673592   +H11
3673593   +H12
3673594   +H13
3673595   +H14
3673596   +H15
3673597   +H16
3673598   +H17
3673599   +H18
3673600   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3673601   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673602   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3673603   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673604   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673605   +* Group: ^(cv_var =2);
MPRINT(SCORETABLES):   * Group: ^(cv_var =2);
3673606   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673607   +end;
MPRINT(SCORETABLES):   end;
3673608   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673609   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3673610   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673611   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673612   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3673613   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673614   +if (cv_var =3)  then do;
MPRINT(SCORETABLES):   if (cv_var =3) then do;
3673615   +_XVAL_=3;
MPRINT(SCORETABLES):   _XVAL_=3;
3673616   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3673617   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3673618   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3673619   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3673620   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3673621   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3673622   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3673623   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3673624   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3673625   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3673626   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3673627   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3673628   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3673629   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3673630   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3673631   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3673632   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3673633   +LENGTH _WARN_ $4
3673634   +      F_DepVar  $ 12
3673635   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3673636   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3673637   +
3673638   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3673639   +
3673640   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3673641   +
3673642   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3673643   +
3673644   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3673645   +
3673646   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3673647   +
3673648   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3673649   +
3673650   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3673651   +
3673652   +      label S_RANGE_campaign_acceptance =
3673653   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3673654   +
3673655   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3673656   +
3673657   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3673658   +
3673659   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3673660   +
3673661   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3673662   +
3673663   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3673664   +
3673665   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3673666   +
3673667   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3673668   +
3673669   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3673670   +
3673671   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3673672   +
3673673   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3673674   +
3673675   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3673676   +
3673677   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3673678   +
3673679   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3673680   +
3673681   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3673682   +
3673683   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3673684   +
3673685   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3673686   +
3673687   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3673688   +
3673689   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3673690   +
3673691   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3673692   +
3673693   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3673694   +
3673695   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3673696   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3673697   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3673698   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3673699   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3673700   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3673701   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3673702   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3673703   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3673704   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3673705   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3673706   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3673707   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3673708   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3673709   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673710   +end;
MPRINT(SCORETABLES):   end;
3673711   +else do;
MPRINT(SCORETABLES):   else do;
3673712   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3673713   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3673714   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3673715   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3673716   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3673717   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3673718   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3673719   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3673720   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673721   +         end;
MPRINT(SCORETABLES):   end;
3673722   +         else do;
MPRINT(SCORETABLES):   else do;
3673723   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3673724   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3673725   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673726   +            end;
MPRINT(SCORETABLES):   end;
3673727   +         end;
MPRINT(SCORETABLES):   end;
3673728   +      end;
MPRINT(SCORETABLES):   end;
3673729   +      else do;
MPRINT(SCORETABLES):   else do;
3673730   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3673731   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3673732   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673733   +         end;
MPRINT(SCORETABLES):   end;
3673734   +      end;
MPRINT(SCORETABLES):   end;
3673735   +   end;
MPRINT(SCORETABLES):   end;
3673736   +   else do;
MPRINT(SCORETABLES):   else do;
3673737   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3673738   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3673739   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673740   +      end;
MPRINT(SCORETABLES):   end;
3673741   +      else do;
MPRINT(SCORETABLES):   else do;
3673742   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3673743   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3673744   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3673745   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3673746   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3673747   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3673748   +         end;
MPRINT(SCORETABLES):   end;
3673749   +      end;
MPRINT(SCORETABLES):   end;
3673750   +   end;
MPRINT(SCORETABLES):   end;
3673751   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3673752   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3673753   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3673754   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3673755   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3673756   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3673757   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673758   +   end;
MPRINT(SCORETABLES):   end;
3673759   +end;
MPRINT(SCORETABLES):   end;
3673760   +
3673761   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673762   +*** Checking missing input Interval
3673763   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3673764   +
3673765   +IF NMISS(
3673766   +   MntCard_Games ,
3673767   +   MntMagazines ,
3673768   +   NumCatalogPurchases ,
3673769   +   NumDealsPurchases ,
3673770   +   NumWebPurchases ,
3673771   +   RANGE_Frq ,
3673772   +   RANGE_Recency ,
3673773   +   RANGE_average_purchase ,
3673774   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3673775   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3673776   +
3673777   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3673778   +END;
MPRINT(SCORETABLES):   END;
3673779   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673780   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3673781   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673782   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673783   +   S_MntCard_Games  =    -2.31514649004199 +      6.6532228413433 *
3673784   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31514649004199 + 6.6532228413433 * MntCard_Games ;
3673785   +   S_MntMagazines  =    -0.83154791264541 +     17.2415686188637 *
3673786   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83154791264541 + 17.2415686188637 * MntMagazines ;
3673787   +   S_NumCatalogPurchases  =      -3.134223008341 +     13.5487064865442 *
3673788   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.134223008341 + 13.5487064865442 *
NumCatalogPurchases ;
3673789   +   S_NumDealsPurchases  =    -1.40802726930571 +     11.1694349367982 *
3673790   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.40802726930571 + 11.1694349367982 *
NumDealsPurchases ;
3673791   +   S_NumWebPurchases  =    -5.22419305760626 +     12.2397192605138 *
3673792   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22419305760626 + 12.2397192605138 *
NumWebPurchases ;
3673793   +   S_RANGE_Frq  =    -1.37360429233802 +     4.21268737204252 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37360429233802 + 4.21268737204252 * RANGE_Frq ;
3673794   +   S_RANGE_Recency  =    -1.64691637678589 +     3.35096112212854 *
3673795   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.64691637678589 + 3.35096112212854 * RANGE_Recency ;
3673796   +   S_RANGE_average_purchase  =     -1.0439849455479 +     5.14919209802399 *
3673797   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.0439849455479 + 5.14919209802399 *
RANGE_average_purchase ;
3673798   +   S_RANGE_campaign_acceptance
3673799   +          =    -0.47516022318265 +     5.77349492938252 *
3673800   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47516022318265 + 5.77349492938252 *
RANGE_campaign_acceptance ;
3673801   +END;
MPRINT(SCORETABLES):   END;
3673802   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673803   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3673804   +   ELSE S_MntCard_Games  =    -2.31514649004199 +      6.6532228413433 *
3673805   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31514649004199 + 6.6532228413433 *
MntCard_Games ;
3673806   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3673807   +   ELSE S_MntMagazines  =    -0.83154791264541 +     17.2415686188637 *
3673808   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83154791264541 + 17.2415686188637 *
MntMagazines ;
3673809   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3673810   +   ELSE S_NumCatalogPurchases
3673811   +          =      -3.134223008341 +     13.5487064865442 * NumCatalogPurchases
3673812   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.134223008341 + 13.5487064865442 *
NumCatalogPurchases ;
3673813   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3673814   +   ELSE S_NumDealsPurchases  =    -1.40802726930571 +     11.1694349367982 *
3673815   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.40802726930571 + 11.1694349367982 *
NumDealsPurchases ;
3673816   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3673817   +   ELSE S_NumWebPurchases  =    -5.22419305760626 +     12.2397192605138 *
3673818   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22419305760626 + 12.2397192605138 *
NumWebPurchases ;
3673819   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3673820   +   ELSE S_RANGE_Frq  =    -1.37360429233802 +     4.21268737204252 * RANGE_Frq
3673821   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37360429233802 + 4.21268737204252 * RANGE_Frq ;
3673822   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3673823   +   ELSE S_RANGE_Recency  =    -1.64691637678589 +     3.35096112212854 *
3673824   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.64691637678589 + 3.35096112212854 *
RANGE_Recency ;
3673825   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3673826   +   ELSE S_RANGE_average_purchase
3673827   +          =     -1.0439849455479 +     5.14919209802399 *
3673828   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.0439849455479 + 5.14919209802399 *
RANGE_average_purchase ;
3673829   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3673830   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3673831   +   ELSE S_RANGE_campaign_acceptance
3673832   +          =    -0.47516022318265 +     5.77349492938252 *
3673833   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47516022318265 + 5.77349492938252
* RANGE_campaign_acceptance ;
3673834   +END;
MPRINT(SCORETABLES):   END;
3673835   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673836   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3673837   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673838   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673839   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3673840   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673841   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673842   +   H11  =     0.89321088747531 * S_MntCard_Games  +    -2.08872654289586 *
3673843   +        S_MntMagazines  +     0.06212122570469 * S_NumCatalogPurchases
3673844   +          +     2.28613072426842 * S_NumDealsPurchases
3673845   +          +    -0.04480442603564 * S_NumWebPurchases
3673846   +          +     1.40075633054252 * S_RANGE_Frq  +    -4.30714917499127 *
3673847   +        S_RANGE_Recency  +    -0.10457887824031 * S_RANGE_average_purchase
3673848   +          +     0.90897188542897 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.89321088747531 * S_MntCard_Games + -2.08872654289586 *
S_MntMagazines + 0.06212122570469 * S_NumCatalogPurchases + 2.28613072426842 *
S_NumDealsPurchases + -0.04480442603564 * S_NumWebPurchases + 1.40075633054252 * S_RANGE_Frq +
-4.30714917499127 * S_RANGE_Recency + -0.10457887824031 * S_RANGE_average_purchase +
0.90897188542897 * S_RANGE_campaign_acceptance ;
3673849   +   H12  =     1.51621432744129 * S_MntCard_Games  +    -0.36042494186579 *
3673850   +        S_MntMagazines  +    -0.38987842145625 * S_NumCatalogPurchases
3673851   +          +      0.0314891061895 * S_NumDealsPurchases
3673852   +          +     0.94476362624485 * S_NumWebPurchases
3673853   +          +    -0.74011250584734 * S_RANGE_Frq  +     0.43029160289201 *
3673854   +        S_RANGE_Recency  +     0.71526001594248 * S_RANGE_average_purchase
3673855   +          +     0.98425096610805 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.51621432744129 * S_MntCard_Games + -0.36042494186579 *
S_MntMagazines + -0.38987842145625 * S_NumCatalogPurchases + 0.0314891061895 *
S_NumDealsPurchases + 0.94476362624485 * S_NumWebPurchases + -0.74011250584734 * S_RANGE_Frq +
0.43029160289201 * S_RANGE_Recency + 0.71526001594248 * S_RANGE_average_purchase +
0.98425096610805 * S_RANGE_campaign_acceptance ;
3673856   +   H13  =     0.07421507678256 * S_MntCard_Games  +    -0.38312650686061 *
3673857   +        S_MntMagazines  +    -0.89958842674819 * S_NumCatalogPurchases
3673858   +          +    -0.06479170288653 * S_NumDealsPurchases
3673859   +          +    -2.39736148937601 * S_NumWebPurchases
3673860   +          +    -1.81328806535718 * S_RANGE_Frq  +      0.2860012183176 *
3673861   +        S_RANGE_Recency  +     0.93053784935775 * S_RANGE_average_purchase
3673862   +          +     1.41078970297904 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 0.07421507678256 * S_MntCard_Games + -0.38312650686061 *
S_MntMagazines + -0.89958842674819 * S_NumCatalogPurchases + -0.06479170288653 *
S_NumDealsPurchases + -2.39736148937601 * S_NumWebPurchases + -1.81328806535718 * S_RANGE_Frq
+ 0.2860012183176 * S_RANGE_Recency + 0.93053784935775 * S_RANGE_average_purchase +
1.41078970297904 * S_RANGE_campaign_acceptance ;
3673863   +   H14  =     -1.6796622491032 * S_MntCard_Games  +    -0.93597625837649 *
3673864   +        S_MntMagazines  +    -2.78377272174853 * S_NumCatalogPurchases
3673865   +          +    -1.10460257640235 * S_NumDealsPurchases
3673866   +          +    -0.74788453717295 * S_NumWebPurchases
3673867   +          +     2.98419068364418 * S_RANGE_Frq  +      3.6699660711196 *
3673868   +        S_RANGE_Recency  +     -5.5240418886797 * S_RANGE_average_purchase
3673869   +          +    -2.26318970675121 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -1.6796622491032 * S_MntCard_Games + -0.93597625837649 *
S_MntMagazines + -2.78377272174853 * S_NumCatalogPurchases + -1.10460257640235 *
S_NumDealsPurchases + -0.74788453717295 * S_NumWebPurchases + 2.98419068364418 * S_RANGE_Frq +
3.6699660711196 * S_RANGE_Recency + -5.5240418886797 * S_RANGE_average_purchase +
-2.26318970675121 * S_RANGE_campaign_acceptance ;
3673870   +   H15  =     1.49156560744133 * S_MntCard_Games  +     0.74314544285963 *
3673871   +        S_MntMagazines  +     1.59316241264431 * S_NumCatalogPurchases
3673872   +          +     0.98367036151113 * S_NumDealsPurchases
3673873   +          +    -2.13778766170523 * S_NumWebPurchases
3673874   +          +     -4.0392328537529 * S_RANGE_Frq  +     0.27841478863978 *
3673875   +        S_RANGE_Recency  +     2.50842299696427 * S_RANGE_average_purchase
3673876   +          +     2.83571435787211 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 1.49156560744133 * S_MntCard_Games + 0.74314544285963 *
S_MntMagazines + 1.59316241264431 * S_NumCatalogPurchases + 0.98367036151113 *
S_NumDealsPurchases + -2.13778766170523 * S_NumWebPurchases + -4.0392328537529 * S_RANGE_Frq +
0.27841478863978 * S_RANGE_Recency + 2.50842299696427 * S_RANGE_average_purchase +
2.83571435787211 * S_RANGE_campaign_acceptance ;
3673877   +   H16  =    -2.43197022204625 * S_MntCard_Games  +      1.0121976438418 *
3673878   +        S_MntMagazines  +    -0.68406508271641 * S_NumCatalogPurchases
3673879   +          +    -2.04139292042227 * S_NumDealsPurchases
3673880   +          +    -1.05449127353909 * S_NumWebPurchases
3673881   +          +    -0.69196800451119 * S_RANGE_Frq  +     3.42404713748286 *
3673882   +        S_RANGE_Recency  +     0.21610542550839 * S_RANGE_average_purchase
3673883   +          +    -1.98232192827778 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.43197022204625 * S_MntCard_Games + 1.0121976438418 *
S_MntMagazines + -0.68406508271641 * S_NumCatalogPurchases + -2.04139292042227 *
S_NumDealsPurchases + -1.05449127353909 * S_NumWebPurchases + -0.69196800451119 * S_RANGE_Frq
+ 3.42404713748286 * S_RANGE_Recency + 0.21610542550839 * S_RANGE_average_purchase +
-1.98232192827778 * S_RANGE_campaign_acceptance ;
3673884   +   H17  =     1.08396654145154 * S_MntCard_Games  +     2.30335235101185 *
3673885   +        S_MntMagazines  +     1.05568322943167 * S_NumCatalogPurchases
3673886   +          +    -2.76714358566798 * S_NumDealsPurchases
3673887   +          +      0.7576208759835 * S_NumWebPurchases
3673888   +          +     1.31076931412148 * S_RANGE_Frq  +    -0.70116274739142 *
3673889   +        S_RANGE_Recency  +    -0.52296007412057 * S_RANGE_average_purchase
3673890   +          +      0.2976710928676 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.08396654145154 * S_MntCard_Games + 2.30335235101185 *
S_MntMagazines + 1.05568322943167 * S_NumCatalogPurchases + -2.76714358566798 *
S_NumDealsPurchases + 0.7576208759835 * S_NumWebPurchases + 1.31076931412148 * S_RANGE_Frq +
-0.70116274739142 * S_RANGE_Recency + -0.52296007412057 * S_RANGE_average_purchase +
0.2976710928676 * S_RANGE_campaign_acceptance ;
3673891   +   H18  =    -2.37656087264098 * S_MntCard_Games  +     0.20725688064261 *
3673892   +        S_MntMagazines  +    -0.14559329957546 * S_NumCatalogPurchases
3673893   +          +      0.5418585926009 * S_NumDealsPurchases
3673894   +          +    -1.89660962562731 * S_NumWebPurchases
3673895   +          +     0.48296239789963 * S_RANGE_Frq  +    -0.35656890786285 *
3673896   +        S_RANGE_Recency  +     0.23176191005312 * S_RANGE_average_purchase
3673897   +          +     0.05463231643327 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -2.37656087264098 * S_MntCard_Games + 0.20725688064261 *
S_MntMagazines + -0.14559329957546 * S_NumCatalogPurchases + 0.5418585926009 *
S_NumDealsPurchases + -1.89660962562731 * S_NumWebPurchases + 0.48296239789963 * S_RANGE_Frq +
-0.35656890786285 * S_RANGE_Recency + 0.23176191005312 * S_RANGE_average_purchase +
0.05463231643327 * S_RANGE_campaign_acceptance ;
3673898   +   H11  = H11  +    -0.57085946103816 * Marital_StatusDivorced
3673899   +          +    -0.42193882939579 * Marital_StatusMarried
3673900   +          +     1.28820604294872 * Marital_StatusSingle
3673901   +          +    -0.76607047730413 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.57085946103816 * Marital_StatusDivorced +
-0.42193882939579 * Marital_StatusMarried + 1.28820604294872 * Marital_StatusSingle +
-0.76607047730413 * Marital_StatusTogether ;
3673902   +   H12  = H12  +    -0.84309009779633 * Marital_StatusDivorced
3673903   +          +    -0.32166703816635 * Marital_StatusMarried
3673904   +          +     0.51106739834164 * Marital_StatusSingle
3673905   +          +     0.03216854044482 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.84309009779633 * Marital_StatusDivorced +
-0.32166703816635 * Marital_StatusMarried + 0.51106739834164 * Marital_StatusSingle +
0.03216854044482 * Marital_StatusTogether ;
3673906   +   H13  = H13  +     0.24245266611282 * Marital_StatusDivorced
3673907   +          +     -0.7929024829732 * Marital_StatusMarried
3673908   +          +      0.8540458634708 * Marital_StatusSingle
3673909   +          +     0.81333588625976 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.24245266611282 * Marital_StatusDivorced +
-0.7929024829732 * Marital_StatusMarried + 0.8540458634708 * Marital_StatusSingle +
0.81333588625976 * Marital_StatusTogether ;
3673910   +   H14  = H14  +    -0.66681695573992 * Marital_StatusDivorced
3673911   +          +     0.85775900094991 * Marital_StatusMarried
3673912   +          +    -0.61234477388997 * Marital_StatusSingle
3673913   +          +    -0.91093175062309 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.66681695573992 * Marital_StatusDivorced +
0.85775900094991 * Marital_StatusMarried + -0.61234477388997 * Marital_StatusSingle +
-0.91093175062309 * Marital_StatusTogether ;
3673914   +   H15  = H15  +     1.96413013618151 * Marital_StatusDivorced
3673915   +          +     0.01118844754531 * Marital_StatusMarried
3673916   +          +    -0.04684017832001 * Marital_StatusSingle
3673917   +          +    -1.23315395996402 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.96413013618151 * Marital_StatusDivorced +
0.01118844754531 * Marital_StatusMarried + -0.04684017832001 * Marital_StatusSingle +
-1.23315395996402 * Marital_StatusTogether ;
3673918   +   H16  = H16  +     0.65856079645199 * Marital_StatusDivorced
3673919   +          +      0.5365080060256 * Marital_StatusMarried
3673920   +          +    -1.17175164436602 * Marital_StatusSingle
3673921   +          +     0.40700701483164 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.65856079645199 * Marital_StatusDivorced + 0.5365080060256
* Marital_StatusMarried + -1.17175164436602 * Marital_StatusSingle + 0.40700701483164 *
Marital_StatusTogether ;
3673922   +   H17  = H17  +     2.91247720305509 * Marital_StatusDivorced
3673923   +          +    -2.22495556295559 * Marital_StatusMarried
3673924   +          +       0.891254576235 * Marital_StatusSingle
3673925   +          +    -3.16289295921009 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 2.91247720305509 * Marital_StatusDivorced +
-2.22495556295559 * Marital_StatusMarried + 0.891254576235 * Marital_StatusSingle +
-3.16289295921009 * Marital_StatusTogether ;
3673926   +   H18  = H18  +     1.56773701082907 * Marital_StatusDivorced
3673927   +          +     0.36634915286269 * Marital_StatusMarried
3673928   +          +     1.00362085444016 * Marital_StatusSingle
3673929   +          +    -1.85251195185097 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 1.56773701082907 * Marital_StatusDivorced +
0.36634915286269 * Marital_StatusMarried + 1.00362085444016 * Marital_StatusSingle +
-1.85251195185097 * Marital_StatusTogether ;
3673930   +   H11  =      1.3213345418984 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.3213345418984 + H11 ;
3673931   +   H12  =     2.36262062636643 + H12 ;
MPRINT(SCORETABLES):   H12 = 2.36262062636643 + H12 ;
3673932   +   H13  =     1.96973381651288 + H13 ;
MPRINT(SCORETABLES):   H13 = 1.96973381651288 + H13 ;
3673933   +   H14  =      0.8431366246468 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.8431366246468 + H14 ;
3673934   +   H15  =    -3.84265172698809 + H15 ;
MPRINT(SCORETABLES):   H15 = -3.84265172698809 + H15 ;
3673935   +   H16  =     4.86174139429274 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.86174139429274 + H16 ;
3673936   +   H17  =    -5.33919374584213 + H17 ;
MPRINT(SCORETABLES):   H17 = -5.33919374584213 + H17 ;
3673937   +   H18  =    -3.66382676948781 + H18 ;
MPRINT(SCORETABLES):   H18 = -3.66382676948781 + H18 ;
3673938   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3673939   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3673940   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3673941   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3673942   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3673943   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3673944   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3673945   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3673946   +END;
MPRINT(SCORETABLES):   END;
3673947   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3673948   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3673949   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3673950   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3673951   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3673952   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3673953   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3673954   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3673955   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3673956   +END;
MPRINT(SCORETABLES):   END;
3673957   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673958   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3673959   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3673960   +
3673961   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3673962   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3673963   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3673964   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3673965   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3673966   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3673967   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3673968   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673969   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673970   +end;
MPRINT(SCORETABLES):   end;
3673971   +else do;
MPRINT(SCORETABLES):   else do;
3673972   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3673973   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3673974   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3673975   +   end;
MPRINT(SCORETABLES):   end;
3673976   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3673977   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3673978   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3673979   +   end;
MPRINT(SCORETABLES):   end;
3673980   +   else do;
MPRINT(SCORETABLES):   else do;
3673981   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3673982   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3673983   +   end;
MPRINT(SCORETABLES):   end;
3673984   +end;
MPRINT(SCORETABLES):   end;
3673985   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3673986   +   P_DepVar1  =     5.12884092062654 * H11  +     2.08895409239077 * H12
3673987   +          +    -3.42030698638166 * H13  +    -5.02970958207346 * H14
3673988   +          +     4.46954041510857 * H15  +    -6.58978392663941 * H16
3673989   +          +     5.05559258011412 * H17  +     4.54662923540155 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 5.12884092062654 * H11 + 2.08895409239077 * H12 +
-3.42030698638166 * H13 + -5.02970958207346 * H14 + 4.46954041510857 * H15 + -6.58978392663941
* H16 + 5.05559258011412 * H17 + 4.54662923540155 * H18 ;
3673990   +   P_DepVar1  =    -1.75494292514785 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -1.75494292514785 + P_DepVar1 ;
3673991   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3673992   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3673993   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3673994   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3673995   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3673996   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3673997   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3673998   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3673999   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3674000   +END;
MPRINT(SCORETABLES):   END;
3674001   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674002   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3674003   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3674004   +END;
MPRINT(SCORETABLES):   END;
3674005   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3674006   +   P_DepVar1  =     0.13636363636363;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13636363636363;
3674007   +   P_DepVar0  =     0.86363636363636;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86363636363636;
3674008   +END;
MPRINT(SCORETABLES):   END;
3674009   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3674010   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3674011   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3674012   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3674013   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3674014   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3674015   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3674016   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674017   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3674018   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674019   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3674020   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3674021   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3674022   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3674023   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3674024   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3674025   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3674026   +END;
MPRINT(SCORETABLES):   END;
3674027   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674028   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3674029   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674030   +drop
3674031   +S_MntCard_Games
3674032   +S_MntMagazines
3674033   +S_NumCatalogPurchases
3674034   +S_NumDealsPurchases
3674035   +S_NumWebPurchases
3674036   +S_RANGE_Frq
3674037   +S_RANGE_Recency
3674038   +S_RANGE_average_purchase
3674039   +S_RANGE_campaign_acceptance
3674040   +H11
3674041   +H12
3674042   +H13
3674043   +H14
3674044   +H15
3674045   +H16
3674046   +H17
3674047   +H18
3674048   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3674049   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674050   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3674051   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674052   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674053   +* Group: ^(cv_var =3);
MPRINT(SCORETABLES):   * Group: ^(cv_var =3);
3674054   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674055   +end;
MPRINT(SCORETABLES):   end;
3674056   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674057   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3674058   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674059   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674060   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3674061   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674062   +if (cv_var =4)  then do;
MPRINT(SCORETABLES):   if (cv_var =4) then do;
3674063   +_XVAL_=4;
MPRINT(SCORETABLES):   _XVAL_=4;
3674064   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674065   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3674066   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674067   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674068   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3674069   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674070   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674071   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3674072   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674073   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3674074   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3674075   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3674076   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3674077   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3674078   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3674079   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3674080   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3674081   +LENGTH _WARN_ $4
3674082   +      F_DepVar  $ 12
3674083   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3674084   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3674085   +
3674086   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3674087   +
3674088   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3674089   +
3674090   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3674091   +
3674092   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3674093   +
3674094   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3674095   +
3674096   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3674097   +
3674098   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3674099   +
3674100   +      label S_RANGE_campaign_acceptance =
3674101   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3674102   +
3674103   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3674104   +
3674105   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3674106   +
3674107   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3674108   +
3674109   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3674110   +
3674111   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3674112   +
3674113   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3674114   +
3674115   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3674116   +
3674117   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3674118   +
3674119   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3674120   +
3674121   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3674122   +
3674123   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3674124   +
3674125   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3674126   +
3674127   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3674128   +
3674129   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3674130   +
3674131   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3674132   +
3674133   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3674134   +
3674135   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3674136   +
3674137   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3674138   +
3674139   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3674140   +
3674141   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3674142   +
3674143   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3674144   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3674145   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3674146   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3674147   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3674148   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3674149   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3674150   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3674151   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3674152   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3674153   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3674154   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3674155   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3674156   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3674157   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674158   +end;
MPRINT(SCORETABLES):   end;
3674159   +else do;
MPRINT(SCORETABLES):   else do;
3674160   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3674161   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3674162   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3674163   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3674164   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3674165   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3674166   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3674167   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3674168   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674169   +         end;
MPRINT(SCORETABLES):   end;
3674170   +         else do;
MPRINT(SCORETABLES):   else do;
3674171   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3674172   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3674173   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674174   +            end;
MPRINT(SCORETABLES):   end;
3674175   +         end;
MPRINT(SCORETABLES):   end;
3674176   +      end;
MPRINT(SCORETABLES):   end;
3674177   +      else do;
MPRINT(SCORETABLES):   else do;
3674178   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3674179   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3674180   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674181   +         end;
MPRINT(SCORETABLES):   end;
3674182   +      end;
MPRINT(SCORETABLES):   end;
3674183   +   end;
MPRINT(SCORETABLES):   end;
3674184   +   else do;
MPRINT(SCORETABLES):   else do;
3674185   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3674186   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3674187   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674188   +      end;
MPRINT(SCORETABLES):   end;
3674189   +      else do;
MPRINT(SCORETABLES):   else do;
3674190   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3674191   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3674192   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3674193   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3674194   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3674195   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674196   +         end;
MPRINT(SCORETABLES):   end;
3674197   +      end;
MPRINT(SCORETABLES):   end;
3674198   +   end;
MPRINT(SCORETABLES):   end;
3674199   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3674200   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3674201   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3674202   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3674203   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3674204   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3674205   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674206   +   end;
MPRINT(SCORETABLES):   end;
3674207   +end;
MPRINT(SCORETABLES):   end;
3674208   +
3674209   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674210   +*** Checking missing input Interval
3674211   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3674212   +
3674213   +IF NMISS(
3674214   +   MntCard_Games ,
3674215   +   MntMagazines ,
3674216   +   NumCatalogPurchases ,
3674217   +   NumDealsPurchases ,
3674218   +   NumWebPurchases ,
3674219   +   RANGE_Frq ,
3674220   +   RANGE_Recency ,
3674221   +   RANGE_average_purchase ,
3674222   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3674223   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3674224   +
3674225   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674226   +END;
MPRINT(SCORETABLES):   END;
3674227   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674228   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3674229   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674230   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674231   +   S_MntCard_Games  =    -2.31528201973847 +     6.61325886936251 *
3674232   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31528201973847 + 6.61325886936251 * MntCard_Games ;
3674233   +   S_MntMagazines  =    -0.83524541523047 +      17.387537121789 *
3674234   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83524541523047 + 17.387537121789 * MntMagazines ;
3674235   +   S_NumCatalogPurchases  =    -3.09763951967118 +     13.3986330966652 *
3674236   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09763951967118 + 13.3986330966652 *
NumCatalogPurchases ;
3674237   +   S_NumDealsPurchases  =    -1.41109660771499 +     11.2718290723012 *
3674238   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41109660771499 + 11.2718290723012 *
NumDealsPurchases ;
3674239   +   S_NumWebPurchases  =    -5.21757970240085 +     12.2300357319803 *
3674240   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21757970240085 + 12.2300357319803 *
NumWebPurchases ;
3674241   +   S_RANGE_Frq  =    -1.35684741737558 +     4.20964004147325 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35684741737558 + 4.20964004147325 * RANGE_Frq ;
3674242   +   S_RANGE_Recency  =    -1.67568414851725 +     3.36160640741631 *
3674243   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.67568414851725 + 3.36160640741631 * RANGE_Recency ;
3674244   +   S_RANGE_average_purchase  =    -1.03403635216824 +     5.14007756398367 *
3674245   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03403635216824 + 5.14007756398367 *
RANGE_average_purchase ;
3674246   +   S_RANGE_campaign_acceptance
3674247   +          =    -0.47140425970592 +     5.70661045499565 *
3674248   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47140425970592 + 5.70661045499565 *
RANGE_campaign_acceptance ;
3674249   +END;
MPRINT(SCORETABLES):   END;
3674250   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674251   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3674252   +   ELSE S_MntCard_Games  =    -2.31528201973847 +     6.61325886936251 *
3674253   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31528201973847 + 6.61325886936251 *
MntCard_Games ;
3674254   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3674255   +   ELSE S_MntMagazines  =    -0.83524541523047 +      17.387537121789 *
3674256   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83524541523047 + 17.387537121789 *
MntMagazines ;
3674257   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3674258   +   ELSE S_NumCatalogPurchases
3674259   +          =    -3.09763951967118 +     13.3986330966652 * NumCatalogPurchases
3674260   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09763951967118 + 13.3986330966652 *
NumCatalogPurchases ;
3674261   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3674262   +   ELSE S_NumDealsPurchases  =    -1.41109660771499 +     11.2718290723012 *
3674263   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41109660771499 + 11.2718290723012 *
NumDealsPurchases ;
3674264   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3674265   +   ELSE S_NumWebPurchases  =    -5.21757970240085 +     12.2300357319803 *
3674266   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21757970240085 + 12.2300357319803 *
NumWebPurchases ;
3674267   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3674268   +   ELSE S_RANGE_Frq  =    -1.35684741737558 +     4.20964004147325 * RANGE_Frq
3674269   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35684741737558 + 4.20964004147325 * RANGE_Frq ;
3674270   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3674271   +   ELSE S_RANGE_Recency  =    -1.67568414851725 +     3.36160640741631 *
3674272   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.67568414851725 + 3.36160640741631 *
RANGE_Recency ;
3674273   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3674274   +   ELSE S_RANGE_average_purchase
3674275   +          =    -1.03403635216824 +     5.14007756398367 *
3674276   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03403635216824 + 5.14007756398367 *
RANGE_average_purchase ;
3674277   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3674278   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3674279   +   ELSE S_RANGE_campaign_acceptance
3674280   +          =    -0.47140425970592 +     5.70661045499565 *
3674281   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47140425970592 + 5.70661045499565
* RANGE_campaign_acceptance ;
3674282   +END;
MPRINT(SCORETABLES):   END;
3674283   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674284   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3674285   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674286   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674287   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3674288   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674289   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674290   +   H11  =     1.00306543143396 * S_MntCard_Games  +    -0.47047741188016 *
3674291   +        S_MntMagazines  +     0.91393429324321 * S_NumCatalogPurchases
3674292   +          +     2.49715847966496 * S_NumDealsPurchases
3674293   +          +    -1.34815399805846 * S_NumWebPurchases
3674294   +          +     1.33015733264434 * S_RANGE_Frq  +    -3.26507534569653 *
3674295   +        S_RANGE_Recency  +    -0.31940619590702 * S_RANGE_average_purchase
3674296   +          +     0.62250517200437 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.00306543143396 * S_MntCard_Games + -0.47047741188016 *
S_MntMagazines + 0.91393429324321 * S_NumCatalogPurchases + 2.49715847966496 *
S_NumDealsPurchases + -1.34815399805846 * S_NumWebPurchases + 1.33015733264434 * S_RANGE_Frq +
-3.26507534569653 * S_RANGE_Recency + -0.31940619590702 * S_RANGE_average_purchase +
0.62250517200437 * S_RANGE_campaign_acceptance ;
3674297   +   H12  =     2.03043862006652 * S_MntCard_Games  +    -0.29701086223507 *
3674298   +        S_MntMagazines  +     1.60501605958229 * S_NumCatalogPurchases
3674299   +          +     0.08228260337361 * S_NumDealsPurchases
3674300   +          +      1.4619029522915 * S_NumWebPurchases
3674301   +          +     0.25332722910469 * S_RANGE_Frq  +    -0.91080422899904 *
3674302   +        S_RANGE_Recency  +      2.4928900134728 * S_RANGE_average_purchase
3674303   +          +     2.06152291160149 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.03043862006652 * S_MntCard_Games + -0.29701086223507 *
S_MntMagazines + 1.60501605958229 * S_NumCatalogPurchases + 0.08228260337361 *
S_NumDealsPurchases + 1.4619029522915 * S_NumWebPurchases + 0.25332722910469 * S_RANGE_Frq +
-0.91080422899904 * S_RANGE_Recency + 2.4928900134728 * S_RANGE_average_purchase +
2.06152291160149 * S_RANGE_campaign_acceptance ;
3674304   +   H13  =    -0.99488441537033 * S_MntCard_Games  +    -0.37781053091524 *
3674305   +        S_MntMagazines  +    -2.17014997058929 * S_NumCatalogPurchases
3674306   +          +    -1.30695252833699 * S_NumDealsPurchases
3674307   +          +    -3.80588252638174 * S_NumWebPurchases
3674308   +          +    -1.42562446973297 * S_RANGE_Frq  +      3.7173276413003 *
3674309   +        S_RANGE_Recency  +    -0.09026317458822 * S_RANGE_average_purchase
3674310   +          +    -1.29662929748549 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.99488441537033 * S_MntCard_Games + -0.37781053091524 *
S_MntMagazines + -2.17014997058929 * S_NumCatalogPurchases + -1.30695252833699 *
S_NumDealsPurchases + -3.80588252638174 * S_NumWebPurchases + -1.42562446973297 * S_RANGE_Frq
+ 3.7173276413003 * S_RANGE_Recency + -0.09026317458822 * S_RANGE_average_purchase +
-1.29662929748549 * S_RANGE_campaign_acceptance ;
3674311   +   H14  =    -1.15394136033663 * S_MntCard_Games  +    -3.21507023275878 *
3674312   +        S_MntMagazines  +    -3.62368858187416 * S_NumCatalogPurchases
3674313   +          +    -1.18050112629309 * S_NumDealsPurchases
3674314   +          +     -1.3864425065002 * S_NumWebPurchases
3674315   +          +      3.2356901647445 * S_RANGE_Frq  +     3.34904198490351 *
3674316   +        S_RANGE_Recency  +    -2.54490408782048 * S_RANGE_average_purchase
3674317   +          +    -1.29976532237572 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -1.15394136033663 * S_MntCard_Games + -3.21507023275878 *
S_MntMagazines + -3.62368858187416 * S_NumCatalogPurchases + -1.18050112629309 *
S_NumDealsPurchases + -1.3864425065002 * S_NumWebPurchases + 3.2356901647445 * S_RANGE_Frq +
3.34904198490351 * S_RANGE_Recency + -2.54490408782048 * S_RANGE_average_purchase +
-1.29976532237572 * S_RANGE_campaign_acceptance ;
3674318   +   H15  =     3.06777233660922 * S_MntCard_Games  +    -0.16510365909867 *
3674319   +        S_MntMagazines  +    -0.29591614077871 * S_NumCatalogPurchases
3674320   +          +    -0.19514092290362 * S_NumDealsPurchases
3674321   +          +    -2.20301023162725 * S_NumWebPurchases
3674322   +          +    -3.57405896537059 * S_RANGE_Frq  +     1.25388712641753 *
3674323   +        S_RANGE_Recency  +     0.43701493902022 * S_RANGE_average_purchase
3674324   +          +     4.58940607053157 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 3.06777233660922 * S_MntCard_Games + -0.16510365909867 *
S_MntMagazines + -0.29591614077871 * S_NumCatalogPurchases + -0.19514092290362 *
S_NumDealsPurchases + -2.20301023162725 * S_NumWebPurchases + -3.57405896537059 * S_RANGE_Frq
+ 1.25388712641753 * S_RANGE_Recency + 0.43701493902022 * S_RANGE_average_purchase +
4.58940607053157 * S_RANGE_campaign_acceptance ;
3674325   +   H16  =     -3.6786141427312 * S_MntCard_Games  +     1.05009866167229 *
3674326   +        S_MntMagazines  +    -0.29443975184912 * S_NumCatalogPurchases
3674327   +          +    -2.48751970945434 * S_NumDealsPurchases
3674328   +          +    -1.20226266322338 * S_NumWebPurchases
3674329   +          +     0.49259498364525 * S_RANGE_Frq  +     3.67942046889444 *
3674330   +        S_RANGE_Recency  +     0.39066667527133 * S_RANGE_average_purchase
3674331   +          +    -2.20671154522402 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -3.6786141427312 * S_MntCard_Games + 1.05009866167229 *
S_MntMagazines + -0.29443975184912 * S_NumCatalogPurchases + -2.48751970945434 *
S_NumDealsPurchases + -1.20226266322338 * S_NumWebPurchases + 0.49259498364525 * S_RANGE_Frq +
3.67942046889444 * S_RANGE_Recency + 0.39066667527133 * S_RANGE_average_purchase +
-2.20671154522402 * S_RANGE_campaign_acceptance ;
3674332   +   H17  =     1.70883395044421 * S_MntCard_Games  +     0.41464915942419 *
3674333   +        S_MntMagazines  +     1.90857830763402 * S_NumCatalogPurchases
3674334   +          +    -4.50076766464388 * S_NumDealsPurchases
3674335   +          +     0.99702182002814 * S_NumWebPurchases
3674336   +          +     1.68291951045938 * S_RANGE_Frq  +    -1.26027185929592 *
3674337   +        S_RANGE_Recency  +    -0.68288461034916 * S_RANGE_average_purchase
3674338   +          +     0.85758641974899 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.70883395044421 * S_MntCard_Games + 0.41464915942419 *
S_MntMagazines + 1.90857830763402 * S_NumCatalogPurchases + -4.50076766464388 *
S_NumDealsPurchases + 0.99702182002814 * S_NumWebPurchases + 1.68291951045938 * S_RANGE_Frq +
-1.26027185929592 * S_RANGE_Recency + -0.68288461034916 * S_RANGE_average_purchase +
0.85758641974899 * S_RANGE_campaign_acceptance ;
3674339   +   H18  =    -2.22517980314586 * S_MntCard_Games  +    -0.89144361889092 *
3674340   +        S_MntMagazines  +     0.15108162953227 * S_NumCatalogPurchases
3674341   +          +     1.21843043915558 * S_NumDealsPurchases
3674342   +          +     -1.2514345748383 * S_NumWebPurchases
3674343   +          +     0.93659671722158 * S_RANGE_Frq  +    -0.09968080993778 *
3674344   +        S_RANGE_Recency  +     2.59007516773665 * S_RANGE_average_purchase
3674345   +          +     0.81237743733875 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -2.22517980314586 * S_MntCard_Games + -0.89144361889092 *
S_MntMagazines + 0.15108162953227 * S_NumCatalogPurchases + 1.21843043915558 *
S_NumDealsPurchases + -1.2514345748383 * S_NumWebPurchases + 0.93659671722158 * S_RANGE_Frq +
-0.09968080993778 * S_RANGE_Recency + 2.59007516773665 * S_RANGE_average_purchase +
0.81237743733875 * S_RANGE_campaign_acceptance ;
3674346   +   H11  = H11  +    -1.35880452563047 * Marital_StatusDivorced
3674347   +          +    -2.33128779692228 * Marital_StatusMarried
3674348   +          +     1.08645001969863 * Marital_StatusSingle
3674349   +          +     3.08763029289154 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -1.35880452563047 * Marital_StatusDivorced +
-2.33128779692228 * Marital_StatusMarried + 1.08645001969863 * Marital_StatusSingle +
3.08763029289154 * Marital_StatusTogether ;
3674350   +   H12  = H12  +    -0.87514688389973 * Marital_StatusDivorced
3674351   +          +    -2.35501363519677 * Marital_StatusMarried
3674352   +          +     1.29779474982257 * Marital_StatusSingle
3674353   +          +     0.19369551283715 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.87514688389973 * Marital_StatusDivorced +
-2.35501363519677 * Marital_StatusMarried + 1.29779474982257 * Marital_StatusSingle +
0.19369551283715 * Marital_StatusTogether ;
3674354   +   H13  = H13  +     1.15526317922584 * Marital_StatusDivorced
3674355   +          +     0.74905339705689 * Marital_StatusMarried
3674356   +          +     2.97599740731237 * Marital_StatusSingle
3674357   +          +     2.18989439141554 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 1.15526317922584 * Marital_StatusDivorced +
0.74905339705689 * Marital_StatusMarried + 2.97599740731237 * Marital_StatusSingle +
2.18989439141554 * Marital_StatusTogether ;
3674358   +   H14  = H14  +    -0.95033994871601 * Marital_StatusDivorced
3674359   +          +    -1.78537674826898 * Marital_StatusMarried
3674360   +          +     0.79074452290459 * Marital_StatusSingle
3674361   +          +     0.95863449468823 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.95033994871601 * Marital_StatusDivorced +
-1.78537674826898 * Marital_StatusMarried + 0.79074452290459 * Marital_StatusSingle +
0.95863449468823 * Marital_StatusTogether ;
3674362   +   H15  = H15  +     1.30925475423021 * Marital_StatusDivorced
3674363   +          +     2.02941859260474 * Marital_StatusMarried
3674364   +          +     3.13013951024966 * Marital_StatusSingle
3674365   +          +     -1.0478739441224 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.30925475423021 * Marital_StatusDivorced +
2.02941859260474 * Marital_StatusMarried + 3.13013951024966 * Marital_StatusSingle +
-1.0478739441224 * Marital_StatusTogether ;
3674366   +   H16  = H16  +    -1.78620703520716 * Marital_StatusDivorced
3674367   +          +     0.55682391408658 * Marital_StatusMarried
3674368   +          +    -0.66030645244948 * Marital_StatusSingle
3674369   +          +      1.3151831492651 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -1.78620703520716 * Marital_StatusDivorced +
0.55682391408658 * Marital_StatusMarried + -0.66030645244948 * Marital_StatusSingle +
1.3151831492651 * Marital_StatusTogether ;
3674370   +   H17  = H17  +     5.08206201825413 * Marital_StatusDivorced
3674371   +          +    -3.03513209148693 * Marital_StatusMarried
3674372   +          +     1.02836286544296 * Marital_StatusSingle
3674373   +          +    -4.14201651052683 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 5.08206201825413 * Marital_StatusDivorced +
-3.03513209148693 * Marital_StatusMarried + 1.02836286544296 * Marital_StatusSingle +
-4.14201651052683 * Marital_StatusTogether ;
3674374   +   H18  = H18  +    -0.27632537250078 * Marital_StatusDivorced
3674375   +          +    -1.53160997853973 * Marital_StatusMarried
3674376   +          +     2.89580420745959 * Marital_StatusSingle
3674377   +          +    -1.98021876074318 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + -0.27632537250078 * Marital_StatusDivorced +
-1.53160997853973 * Marital_StatusMarried + 2.89580420745959 * Marital_StatusSingle +
-1.98021876074318 * Marital_StatusTogether ;
3674378   +   H11  =    -1.50001581488653 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.50001581488653 + H11 ;
3674379   +   H12  =     3.49737366178666 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.49737366178666 + H12 ;
3674380   +   H13  =     4.43403372434792 + H13 ;
MPRINT(SCORETABLES):   H13 = 4.43403372434792 + H13 ;
3674381   +   H14  =    -0.52978296274906 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.52978296274906 + H14 ;
3674382   +   H15  =    -1.01003679283935 + H15 ;
MPRINT(SCORETABLES):   H15 = -1.01003679283935 + H15 ;
3674383   +   H16  =     3.41524222278669 + H16 ;
MPRINT(SCORETABLES):   H16 = 3.41524222278669 + H16 ;
3674384   +   H17  =    -8.42757218215095 + H17 ;
MPRINT(SCORETABLES):   H17 = -8.42757218215095 + H17 ;
3674385   +   H18  =    -5.61449564180963 + H18 ;
MPRINT(SCORETABLES):   H18 = -5.61449564180963 + H18 ;
3674386   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3674387   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3674388   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3674389   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3674390   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3674391   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3674392   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3674393   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3674394   +END;
MPRINT(SCORETABLES):   END;
3674395   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674396   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3674397   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3674398   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3674399   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3674400   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3674401   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3674402   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3674403   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3674404   +END;
MPRINT(SCORETABLES):   END;
3674405   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674406   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3674407   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674408   +
3674409   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3674410   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3674411   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3674412   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3674413   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3674414   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3674415   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3674416   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3674417   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3674418   +end;
MPRINT(SCORETABLES):   end;
3674419   +else do;
MPRINT(SCORETABLES):   else do;
3674420   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3674421   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3674422   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3674423   +   end;
MPRINT(SCORETABLES):   end;
3674424   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3674425   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3674426   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3674427   +   end;
MPRINT(SCORETABLES):   end;
3674428   +   else do;
MPRINT(SCORETABLES):   else do;
3674429   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3674430   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3674431   +   end;
MPRINT(SCORETABLES):   end;
3674432   +end;
MPRINT(SCORETABLES):   end;
3674433   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674434   +   P_DepVar1  =     4.38563514758549 * H11  +     2.37747457382827 * H12
3674435   +          +    -4.96823987107666 * H13  +    -6.16569478156002 * H14
3674436   +          +     3.42748104865242 * H15  +    -6.62625689485728 * H16
3674437   +          +     7.92416162490114 * H17  +     7.19604946006507 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.38563514758549 * H11 + 2.37747457382827 * H12 +
-4.96823987107666 * H13 + -6.16569478156002 * H14 + 3.42748104865242 * H15 + -6.62625689485728
* H16 + 7.92416162490114 * H17 + 7.19604946006507 * H18 ;
3674438   +   P_DepVar1  =     -3.3966509482682 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.3966509482682 + P_DepVar1 ;
3674439   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3674440   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3674441   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3674442   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3674443   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3674444   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3674445   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3674446   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3674447   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3674448   +END;
MPRINT(SCORETABLES):   END;
3674449   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674450   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3674451   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3674452   +END;
MPRINT(SCORETABLES):   END;
3674453   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3674454   +   P_DepVar1  =     0.13354749885268;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13354749885268;
3674455   +   P_DepVar0  =     0.86645250114731;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86645250114731;
3674456   +END;
MPRINT(SCORETABLES):   END;
3674457   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3674458   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3674459   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3674460   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3674461   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3674462   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3674463   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3674464   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674465   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3674466   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674467   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3674468   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3674469   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3674470   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3674471   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3674472   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3674473   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3674474   +END;
MPRINT(SCORETABLES):   END;
3674475   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674476   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3674477   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674478   +drop
3674479   +S_MntCard_Games
3674480   +S_MntMagazines
3674481   +S_NumCatalogPurchases
3674482   +S_NumDealsPurchases
3674483   +S_NumWebPurchases
3674484   +S_RANGE_Frq
3674485   +S_RANGE_Recency
3674486   +S_RANGE_average_purchase
3674487   +S_RANGE_campaign_acceptance
3674488   +H11
3674489   +H12
3674490   +H13
3674491   +H14
3674492   +H15
3674493   +H16
3674494   +H17
3674495   +H18
3674496   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3674497   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674498   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3674499   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674500   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674501   +* Group: ^(cv_var =4);
MPRINT(SCORETABLES):   * Group: ^(cv_var =4);
3674502   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674503   +end;
MPRINT(SCORETABLES):   end;
3674504   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674505   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3674506   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674507   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674508   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3674509   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674510   +if (cv_var =5)  then do;
MPRINT(SCORETABLES):   if (cv_var =5) then do;
3674511   +_XVAL_=5;
MPRINT(SCORETABLES):   _XVAL_=5;
3674512   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674513   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3674514   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674515   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674516   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3674517   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674518   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674519   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3674520   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674521   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3674522   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3674523   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3674524   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3674525   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3674526   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3674527   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3674528   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3674529   +LENGTH _WARN_ $4
3674530   +      F_DepVar  $ 12
3674531   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3674532   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3674533   +
3674534   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3674535   +
3674536   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3674537   +
3674538   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3674539   +
3674540   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3674541   +
3674542   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3674543   +
3674544   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3674545   +
3674546   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3674547   +
3674548   +      label S_RANGE_campaign_acceptance =
3674549   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3674550   +
3674551   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3674552   +
3674553   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3674554   +
3674555   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3674556   +
3674557   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3674558   +
3674559   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3674560   +
3674561   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3674562   +
3674563   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3674564   +
3674565   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3674566   +
3674567   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3674568   +
3674569   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3674570   +
3674571   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3674572   +
3674573   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3674574   +
3674575   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3674576   +
3674577   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3674578   +
3674579   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3674580   +
3674581   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3674582   +
3674583   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3674584   +
3674585   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3674586   +
3674587   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3674588   +
3674589   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3674590   +
3674591   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3674592   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3674593   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3674594   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3674595   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3674596   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3674597   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3674598   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3674599   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3674600   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3674601   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3674602   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3674603   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3674604   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3674605   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674606   +end;
MPRINT(SCORETABLES):   end;
3674607   +else do;
MPRINT(SCORETABLES):   else do;
3674608   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3674609   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3674610   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3674611   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3674612   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3674613   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3674614   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3674615   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3674616   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674617   +         end;
MPRINT(SCORETABLES):   end;
3674618   +         else do;
MPRINT(SCORETABLES):   else do;
3674619   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3674620   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3674621   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674622   +            end;
MPRINT(SCORETABLES):   end;
3674623   +         end;
MPRINT(SCORETABLES):   end;
3674624   +      end;
MPRINT(SCORETABLES):   end;
3674625   +      else do;
MPRINT(SCORETABLES):   else do;
3674626   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3674627   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3674628   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674629   +         end;
MPRINT(SCORETABLES):   end;
3674630   +      end;
MPRINT(SCORETABLES):   end;
3674631   +   end;
MPRINT(SCORETABLES):   end;
3674632   +   else do;
MPRINT(SCORETABLES):   else do;
3674633   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3674634   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3674635   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674636   +      end;
MPRINT(SCORETABLES):   end;
3674637   +      else do;
MPRINT(SCORETABLES):   else do;
3674638   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3674639   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3674640   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3674641   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3674642   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3674643   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3674644   +         end;
MPRINT(SCORETABLES):   end;
3674645   +      end;
MPRINT(SCORETABLES):   end;
3674646   +   end;
MPRINT(SCORETABLES):   end;
3674647   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3674648   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3674649   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3674650   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3674651   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3674652   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3674653   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674654   +   end;
MPRINT(SCORETABLES):   end;
3674655   +end;
MPRINT(SCORETABLES):   end;
3674656   +
3674657   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674658   +*** Checking missing input Interval
3674659   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3674660   +
3674661   +IF NMISS(
3674662   +   MntCard_Games ,
3674663   +   MntMagazines ,
3674664   +   NumCatalogPurchases ,
3674665   +   NumDealsPurchases ,
3674666   +   NumWebPurchases ,
3674667   +   RANGE_Frq ,
3674668   +   RANGE_Recency ,
3674669   +   RANGE_average_purchase ,
3674670   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3674671   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3674672   +
3674673   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3674674   +END;
MPRINT(SCORETABLES):   END;
3674675   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674676   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3674677   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674678   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674679   +   S_MntCard_Games  =    -2.32338283686614 +     6.66199975903611 *
3674680   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.32338283686614 + 6.66199975903611 * MntCard_Games ;
3674681   +   S_MntMagazines  =     -0.8325320557042 +     17.1994741866694 *
3674682   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.8325320557042 + 17.1994741866694 * MntMagazines ;
3674683   +   S_NumCatalogPurchases  =    -3.12043349474051 +     13.5225004476305 *
3674684   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.12043349474051 + 13.5225004476305 *
NumCatalogPurchases ;
3674685   +   S_NumDealsPurchases  =    -1.41927585339618 +     11.2551063708879 *
3674686   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41927585339618 + 11.2551063708879 *
NumDealsPurchases ;
3674687   +   S_NumWebPurchases  =    -5.22306432027446 +     12.2561288145765 *
3674688   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.22306432027446 + 12.2561288145765 *
NumWebPurchases ;
3674689   +   S_RANGE_Frq  =     -1.3631029802643 +     4.22062585846972 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.3631029802643 + 4.22062585846972 * RANGE_Frq ;
3674690   +   S_RANGE_Recency  =     -1.6479341650242 +     3.35435877090359 *
3674691   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.6479341650242 + 3.35435877090359 * RANGE_Recency ;
3674692   +   S_RANGE_average_purchase  =    -1.03484328828337 +     5.13992319642613 *
3674693   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03484328828337 + 5.13992319642613 *
RANGE_average_purchase ;
3674694   +   S_RANGE_campaign_acceptance
3674695   +          =    -0.47190562151159 +     5.86072023996265 *
3674696   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47190562151159 + 5.86072023996265 *
RANGE_campaign_acceptance ;
3674697   +END;
MPRINT(SCORETABLES):   END;
3674698   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674699   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3674700   +   ELSE S_MntCard_Games  =    -2.32338283686614 +     6.66199975903611 *
3674701   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.32338283686614 + 6.66199975903611 *
MntCard_Games ;
3674702   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3674703   +   ELSE S_MntMagazines  =     -0.8325320557042 +     17.1994741866694 *
3674704   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.8325320557042 + 17.1994741866694 *
MntMagazines ;
3674705   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3674706   +   ELSE S_NumCatalogPurchases
3674707   +          =    -3.12043349474051 +     13.5225004476305 * NumCatalogPurchases
3674708   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.12043349474051 + 13.5225004476305 *
NumCatalogPurchases ;
3674709   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3674710   +   ELSE S_NumDealsPurchases  =    -1.41927585339618 +     11.2551063708879 *
3674711   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41927585339618 + 11.2551063708879 *
NumDealsPurchases ;
3674712   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3674713   +   ELSE S_NumWebPurchases  =    -5.22306432027446 +     12.2561288145765 *
3674714   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.22306432027446 + 12.2561288145765 *
NumWebPurchases ;
3674715   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3674716   +   ELSE S_RANGE_Frq  =     -1.3631029802643 +     4.22062585846972 * RANGE_Frq
3674717   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.3631029802643 + 4.22062585846972 * RANGE_Frq ;
3674718   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3674719   +   ELSE S_RANGE_Recency  =     -1.6479341650242 +     3.35435877090359 *
3674720   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.6479341650242 + 3.35435877090359 *
RANGE_Recency ;
3674721   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3674722   +   ELSE S_RANGE_average_purchase
3674723   +          =    -1.03484328828337 +     5.13992319642613 *
3674724   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03484328828337 + 5.13992319642613 *
RANGE_average_purchase ;
3674725   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3674726   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3674727   +   ELSE S_RANGE_campaign_acceptance
3674728   +          =    -0.47190562151159 +     5.86072023996265 *
3674729   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47190562151159 + 5.86072023996265
* RANGE_campaign_acceptance ;
3674730   +END;
MPRINT(SCORETABLES):   END;
3674731   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674732   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3674733   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674734   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674735   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3674736   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674737   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674738   +   H11  =     0.85016010991144 * S_MntCard_Games  +    -2.33628397348763 *
3674739   +        S_MntMagazines  +     0.67587845507055 * S_NumCatalogPurchases
3674740   +          +     3.48777427655107 * S_NumDealsPurchases
3674741   +          +     0.09304059809125 * S_NumWebPurchases
3674742   +          +     1.63988900073529 * S_RANGE_Frq  +    -5.57957044277302 *
3674743   +        S_RANGE_Recency  +    -1.93098956817397 * S_RANGE_average_purchase
3674744   +          +     1.14799309117859 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 0.85016010991144 * S_MntCard_Games + -2.33628397348763 *
S_MntMagazines + 0.67587845507055 * S_NumCatalogPurchases + 3.48777427655107 *
S_NumDealsPurchases + 0.09304059809125 * S_NumWebPurchases + 1.63988900073529 * S_RANGE_Frq +
-5.57957044277302 * S_RANGE_Recency + -1.93098956817397 * S_RANGE_average_purchase +
1.14799309117859 * S_RANGE_campaign_acceptance ;
3674745   +   H12  =     2.08197719374476 * S_MntCard_Games  +    -0.62712035228304 *
3674746   +        S_MntMagazines  +     0.76113794978781 * S_NumCatalogPurchases
3674747   +          +    -0.01702388323604 * S_NumDealsPurchases
3674748   +          +     1.79943470667019 * S_NumWebPurchases
3674749   +          +     1.22079309199997 * S_RANGE_Frq  +    -0.44251306559984 *
3674750   +        S_RANGE_Recency  +     2.76763359007971 * S_RANGE_average_purchase
3674751   +          +     1.11548869691356 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.08197719374476 * S_MntCard_Games + -0.62712035228304 *
S_MntMagazines + 0.76113794978781 * S_NumCatalogPurchases + -0.01702388323604 *
S_NumDealsPurchases + 1.79943470667019 * S_NumWebPurchases + 1.22079309199997 * S_RANGE_Frq +
-0.44251306559984 * S_RANGE_Recency + 2.76763359007971 * S_RANGE_average_purchase +
1.11548869691356 * S_RANGE_campaign_acceptance ;
3674752   +   H13  =    -0.27067627604539 * S_MntCard_Games  +    -0.76289776336595 *
3674753   +        S_MntMagazines  +    -1.35750797464844 * S_NumCatalogPurchases
3674754   +          +    -0.06829359764393 * S_NumDealsPurchases
3674755   +          +    -2.96643159566724 * S_NumWebPurchases
3674756   +          +    -1.29852738916046 * S_RANGE_Frq  +     1.38026604496824 *
3674757   +        S_RANGE_Recency  +     1.22524138103387 * S_RANGE_average_purchase
3674758   +          +    -0.36245007510665 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.27067627604539 * S_MntCard_Games + -0.76289776336595 *
S_MntMagazines + -1.35750797464844 * S_NumCatalogPurchases + -0.06829359764393 *
S_NumDealsPurchases + -2.96643159566724 * S_NumWebPurchases + -1.29852738916046 * S_RANGE_Frq
+ 1.38026604496824 * S_RANGE_Recency + 1.22524138103387 * S_RANGE_average_purchase +
-0.36245007510665 * S_RANGE_campaign_acceptance ;
3674759   +   H14  =    -2.13829903366947 * S_MntCard_Games  +     -0.6171354330778 *
3674760   +        S_MntMagazines  +    -3.63626026758689 * S_NumCatalogPurchases
3674761   +          +    -1.58788759892173 * S_NumDealsPurchases
3674762   +          +    -0.94917347911569 * S_NumWebPurchases
3674763   +          +     2.79509766432696 * S_RANGE_Frq  +     3.33518628435562 *
3674764   +        S_RANGE_Recency  +     -5.5105166946644 * S_RANGE_average_purchase
3674765   +          +    -1.91694654414825 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -2.13829903366947 * S_MntCard_Games + -0.6171354330778 *
S_MntMagazines + -3.63626026758689 * S_NumCatalogPurchases + -1.58788759892173 *
S_NumDealsPurchases + -0.94917347911569 * S_NumWebPurchases + 2.79509766432696 * S_RANGE_Frq +
3.33518628435562 * S_RANGE_Recency + -5.5105166946644 * S_RANGE_average_purchase +
-1.91694654414825 * S_RANGE_campaign_acceptance ;
3674766   +   H15  =     1.41933553014249 * S_MntCard_Games  +     1.51082255309942 *
3674767   +        S_MntMagazines  +     0.06844304399953 * S_NumCatalogPurchases
3674768   +          +     0.86457749424824 * S_NumDealsPurchases
3674769   +          +    -2.44645529754948 * S_NumWebPurchases
3674770   +          +    -0.85610920326601 * S_RANGE_Frq  +     1.23143890252432 *
3674771   +        S_RANGE_Recency  +     1.74522226737033 * S_RANGE_average_purchase
3674772   +          +     1.84217098918704 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 1.41933553014249 * S_MntCard_Games + 1.51082255309942 *
S_MntMagazines + 0.06844304399953 * S_NumCatalogPurchases + 0.86457749424824 *
S_NumDealsPurchases + -2.44645529754948 * S_NumWebPurchases + -0.85610920326601 * S_RANGE_Frq
+ 1.23143890252432 * S_RANGE_Recency + 1.74522226737033 * S_RANGE_average_purchase +
1.84217098918704 * S_RANGE_campaign_acceptance ;
3674773   +   H16  =    -3.23621944182609 * S_MntCard_Games  +     1.17674825062538 *
3674774   +        S_MntMagazines  +    -0.32955316199793 * S_NumCatalogPurchases
3674775   +          +    -2.78810137805369 * S_NumDealsPurchases
3674776   +          +    -0.84609187098241 * S_NumWebPurchases
3674777   +          +    -0.54210718242375 * S_RANGE_Frq  +     4.05259420397919 *
3674778   +        S_RANGE_Recency  +     0.13096342392868 * S_RANGE_average_purchase
3674779   +          +    -2.42962742476925 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -3.23621944182609 * S_MntCard_Games + 1.17674825062538 *
S_MntMagazines + -0.32955316199793 * S_NumCatalogPurchases + -2.78810137805369 *
S_NumDealsPurchases + -0.84609187098241 * S_NumWebPurchases + -0.54210718242375 * S_RANGE_Frq
+ 4.05259420397919 * S_RANGE_Recency + 0.13096342392868 * S_RANGE_average_purchase +
-2.42962742476925 * S_RANGE_campaign_acceptance ;
3674780   +   H17  =      1.2959707146676 * S_MntCard_Games  +     1.13377065554308 *
3674781   +        S_MntMagazines  +     2.14801110324258 * S_NumCatalogPurchases
3674782   +          +    -2.86438471581071 * S_NumDealsPurchases
3674783   +          +      2.0891928673268 * S_NumWebPurchases
3674784   +          +     0.65245765748053 * S_RANGE_Frq  +    -1.34614669195863 *
3674785   +        S_RANGE_Recency  +     1.00960934640502 * S_RANGE_average_purchase
3674786   +          +     0.23339591834082 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.2959707146676 * S_MntCard_Games + 1.13377065554308 *
S_MntMagazines + 2.14801110324258 * S_NumCatalogPurchases + -2.86438471581071 *
S_NumDealsPurchases + 2.0891928673268 * S_NumWebPurchases + 0.65245765748053 * S_RANGE_Frq +
-1.34614669195863 * S_RANGE_Recency + 1.00960934640502 * S_RANGE_average_purchase +
0.23339591834082 * S_RANGE_campaign_acceptance ;
3674787   +   H18  =     -2.6990431494054 * S_MntCard_Games  +    -0.68134313388626 *
3674788   +        S_MntMagazines  +    -0.13748705462602 * S_NumCatalogPurchases
3674789   +          +    -0.06352312183336 * S_NumDealsPurchases
3674790   +          +    -2.20438940908992 * S_NumWebPurchases
3674791   +          +    -0.49764186732548 * S_RANGE_Frq  +    -1.03540799376901 *
3674792   +        S_RANGE_Recency  +     0.44071111461477 * S_RANGE_average_purchase
3674793   +          +      -0.038622123969 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -2.6990431494054 * S_MntCard_Games + -0.68134313388626 *
S_MntMagazines + -0.13748705462602 * S_NumCatalogPurchases + -0.06352312183336 *
S_NumDealsPurchases + -2.20438940908992 * S_NumWebPurchases + -0.49764186732548 * S_RANGE_Frq
+ -1.03540799376901 * S_RANGE_Recency + 0.44071111461477 * S_RANGE_average_purchase +
-0.038622123969 * S_RANGE_campaign_acceptance ;
3674794   +   H11  = H11  +     -2.3231745562594 * Marital_StatusDivorced
3674795   +          +    -0.22573628593673 * Marital_StatusMarried
3674796   +          +     0.95689447133312 * Marital_StatusSingle
3674797   +          +    -2.03145809988948 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -2.3231745562594 * Marital_StatusDivorced +
-0.22573628593673 * Marital_StatusMarried + 0.95689447133312 * Marital_StatusSingle +
-2.03145809988948 * Marital_StatusTogether ;
3674798   +   H12  = H12  +    -0.62806558970807 * Marital_StatusDivorced
3674799   +          +    -1.85905748280115 * Marital_StatusMarried
3674800   +          +     0.34311137949726 * Marital_StatusSingle
3674801   +          +    -1.02609851596746 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.62806558970807 * Marital_StatusDivorced +
-1.85905748280115 * Marital_StatusMarried + 0.34311137949726 * Marital_StatusSingle +
-1.02609851596746 * Marital_StatusTogether ;
3674802   +   H13  = H13  +    -1.06872444108979 * Marital_StatusDivorced
3674803   +          +    -0.53313771933267 * Marital_StatusMarried
3674804   +          +     2.01788254274137 * Marital_StatusSingle
3674805   +          +     1.02590257516669 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -1.06872444108979 * Marital_StatusDivorced +
-0.53313771933267 * Marital_StatusMarried + 2.01788254274137 * Marital_StatusSingle +
1.02590257516669 * Marital_StatusTogether ;
3674806   +   H14  = H14  +     0.49825263507453 * Marital_StatusDivorced
3674807   +          +     1.56008966029426 * Marital_StatusMarried
3674808   +          +    -1.09819379092679 * Marital_StatusSingle
3674809   +          +    -0.36774326752325 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.49825263507453 * Marital_StatusDivorced +
1.56008966029426 * Marital_StatusMarried + -1.09819379092679 * Marital_StatusSingle +
-0.36774326752325 * Marital_StatusTogether ;
3674810   +   H15  = H15  +     0.77584849879593 * Marital_StatusDivorced
3674811   +          +    -1.17910372189843 * Marital_StatusMarried
3674812   +          +     0.37392510387117 * Marital_StatusSingle
3674813   +          +    -1.94958131428449 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 0.77584849879593 * Marital_StatusDivorced +
-1.17910372189843 * Marital_StatusMarried + 0.37392510387117 * Marital_StatusSingle +
-1.94958131428449 * Marital_StatusTogether ;
3674814   +   H16  = H16  +      0.8387684188698 * Marital_StatusDivorced
3674815   +          +     0.20586143694541 * Marital_StatusMarried
3674816   +          +    -0.61826486615538 * Marital_StatusSingle
3674817   +          +    -0.19186432387758 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.8387684188698 * Marital_StatusDivorced + 0.20586143694541
* Marital_StatusMarried + -0.61826486615538 * Marital_StatusSingle + -0.19186432387758 *
Marital_StatusTogether ;
3674818   +   H17  = H17  +     2.91111537325487 * Marital_StatusDivorced
3674819   +          +    -2.47604500148329 * Marital_StatusMarried
3674820   +          +     2.16741127668313 * Marital_StatusSingle
3674821   +          +    -2.63929968404668 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 2.91111537325487 * Marital_StatusDivorced +
-2.47604500148329 * Marital_StatusMarried + 2.16741127668313 * Marital_StatusSingle +
-2.63929968404668 * Marital_StatusTogether ;
3674822   +   H18  = H18  +     1.30760765976866 * Marital_StatusDivorced
3674823   +          +     0.73248424797255 * Marital_StatusMarried
3674824   +          +     1.28201617709181 * Marital_StatusSingle
3674825   +          +    -2.40160404178044 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 1.30760765976866 * Marital_StatusDivorced +
0.73248424797255 * Marital_StatusMarried + 1.28201617709181 * Marital_StatusSingle +
-2.40160404178044 * Marital_StatusTogether ;
3674826   +   H11  =     1.79894058923273 + H11 ;
MPRINT(SCORETABLES):   H11 = 1.79894058923273 + H11 ;
3674827   +   H12  =     3.32595939568436 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.32595939568436 + H12 ;
3674828   +   H13  =     1.71066051207142 + H13 ;
MPRINT(SCORETABLES):   H13 = 1.71066051207142 + H13 ;
3674829   +   H14  =     0.23591208413096 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.23591208413096 + H14 ;
3674830   +   H15  =    -4.87179551637986 + H15 ;
MPRINT(SCORETABLES):   H15 = -4.87179551637986 + H15 ;
3674831   +   H16  =     5.50563069025181 + H16 ;
MPRINT(SCORETABLES):   H16 = 5.50563069025181 + H16 ;
3674832   +   H17  =    -7.05203808268389 + H17 ;
MPRINT(SCORETABLES):   H17 = -7.05203808268389 + H17 ;
3674833   +   H18  =     -4.0702460022152 + H18 ;
MPRINT(SCORETABLES):   H18 = -4.0702460022152 + H18 ;
3674834   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3674835   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3674836   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3674837   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3674838   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3674839   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3674840   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3674841   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3674842   +END;
MPRINT(SCORETABLES):   END;
3674843   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674844   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3674845   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3674846   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3674847   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3674848   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3674849   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3674850   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3674851   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3674852   +END;
MPRINT(SCORETABLES):   END;
3674853   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674854   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3674855   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674856   +
3674857   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3674858   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3674859   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3674860   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3674861   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3674862   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3674863   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3674864   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3674865   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3674866   +end;
MPRINT(SCORETABLES):   end;
3674867   +else do;
MPRINT(SCORETABLES):   else do;
3674868   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3674869   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3674870   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3674871   +   end;
MPRINT(SCORETABLES):   end;
3674872   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3674873   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3674874   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3674875   +   end;
MPRINT(SCORETABLES):   end;
3674876   +   else do;
MPRINT(SCORETABLES):   else do;
3674877   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3674878   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3674879   +   end;
MPRINT(SCORETABLES):   end;
3674880   +end;
MPRINT(SCORETABLES):   end;
3674881   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3674882   +   P_DepVar1  =     6.50914027088833 * H11  +     3.09870916784693 * H12
3674883   +          +    -2.69284389449393 * H13  +    -4.69977417095834 * H14
3674884   +          +     7.19062032738329 * H15  +    -6.52460345607419 * H16
3674885   +          +     5.89302579497646 * H17  +     4.25643904376582 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 6.50914027088833 * H11 + 3.09870916784693 * H12 +
-2.69284389449393 * H13 + -4.69977417095834 * H14 + 7.19062032738329 * H15 + -6.52460345607419
* H16 + 5.89302579497646 * H17 + 4.25643904376582 * H18 ;
3674886   +   P_DepVar1  =     -2.6465707854684 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -2.6465707854684 + P_DepVar1 ;
3674887   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3674888   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3674889   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3674890   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3674891   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3674892   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3674893   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3674894   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3674895   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3674896   +END;
MPRINT(SCORETABLES):   END;
3674897   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3674898   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3674899   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3674900   +END;
MPRINT(SCORETABLES):   END;
3674901   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3674902   +   P_DepVar1  =     0.13503649635036;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13503649635036;
3674903   +   P_DepVar0  =     0.86496350364963;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86496350364963;
3674904   +END;
MPRINT(SCORETABLES):   END;
3674905   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3674906   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3674907   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3674908   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3674909   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3674910   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3674911   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3674912   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674913   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3674914   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3674915   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3674916   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3674917   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3674918   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3674919   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3674920   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3674921   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3674922   +END;
MPRINT(SCORETABLES):   END;
3674923   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674924   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3674925   +********************************;
MPRINT(SCORETABLES):   ********************************;
3674926   +drop
3674927   +S_MntCard_Games
3674928   +S_MntMagazines
3674929   +S_NumCatalogPurchases
3674930   +S_NumDealsPurchases
3674931   +S_NumWebPurchases
3674932   +S_RANGE_Frq
3674933   +S_RANGE_Recency
3674934   +S_RANGE_average_purchase
3674935   +S_RANGE_campaign_acceptance
3674936   +H11
3674937   +H12
3674938   +H13
3674939   +H14
3674940   +H15
3674941   +H16
3674942   +H17
3674943   +H18
3674944   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3674945   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674946   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3674947   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674948   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674949   +* Group: ^(cv_var =5);
MPRINT(SCORETABLES):   * Group: ^(cv_var =5);
3674950   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674951   +end;
MPRINT(SCORETABLES):   end;
3674952   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674953   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3674954   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674955   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674956   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3674957   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674958   +if (cv_var =6)  then do;
MPRINT(SCORETABLES):   if (cv_var =6) then do;
3674959   +_XVAL_=6;
MPRINT(SCORETABLES):   _XVAL_=6;
3674960   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3674961   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3674962   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3674963   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3674964   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3674965   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3674966   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674967   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3674968   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3674969   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3674970   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3674971   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3674972   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3674973   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3674974   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3674975   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3674976   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3674977   +LENGTH _WARN_ $4
3674978   +      F_DepVar  $ 12
3674979   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3674980   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3674981   +
3674982   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3674983   +
3674984   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3674985   +
3674986   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3674987   +
3674988   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3674989   +
3674990   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3674991   +
3674992   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3674993   +
3674994   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3674995   +
3674996   +      label S_RANGE_campaign_acceptance =
3674997   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3674998   +
3674999   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3675000   +
3675001   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3675002   +
3675003   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3675004   +
3675005   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3675006   +
3675007   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3675008   +
3675009   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3675010   +
3675011   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3675012   +
3675013   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3675014   +
3675015   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3675016   +
3675017   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3675018   +
3675019   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3675020   +
3675021   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3675022   +
3675023   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3675024   +
3675025   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3675026   +
3675027   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3675028   +
3675029   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3675030   +
3675031   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3675032   +
3675033   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3675034   +
3675035   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3675036   +
3675037   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3675038   +
3675039   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3675040   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3675041   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3675042   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3675043   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3675044   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3675045   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3675046   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3675047   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3675048   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675049   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675050   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675051   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675052   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3675053   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675054   +end;
MPRINT(SCORETABLES):   end;
3675055   +else do;
MPRINT(SCORETABLES):   else do;
3675056   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3675057   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3675058   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3675059   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3675060   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3675061   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3675062   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3675063   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3675064   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675065   +         end;
MPRINT(SCORETABLES):   end;
3675066   +         else do;
MPRINT(SCORETABLES):   else do;
3675067   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3675068   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3675069   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675070   +            end;
MPRINT(SCORETABLES):   end;
3675071   +         end;
MPRINT(SCORETABLES):   end;
3675072   +      end;
MPRINT(SCORETABLES):   end;
3675073   +      else do;
MPRINT(SCORETABLES):   else do;
3675074   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3675075   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3675076   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675077   +         end;
MPRINT(SCORETABLES):   end;
3675078   +      end;
MPRINT(SCORETABLES):   end;
3675079   +   end;
MPRINT(SCORETABLES):   end;
3675080   +   else do;
MPRINT(SCORETABLES):   else do;
3675081   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3675082   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3675083   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675084   +      end;
MPRINT(SCORETABLES):   end;
3675085   +      else do;
MPRINT(SCORETABLES):   else do;
3675086   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3675087   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3675088   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3675089   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3675090   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3675091   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675092   +         end;
MPRINT(SCORETABLES):   end;
3675093   +      end;
MPRINT(SCORETABLES):   end;
3675094   +   end;
MPRINT(SCORETABLES):   end;
3675095   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3675096   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675097   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675098   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675099   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675100   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3675101   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675102   +   end;
MPRINT(SCORETABLES):   end;
3675103   +end;
MPRINT(SCORETABLES):   end;
3675104   +
3675105   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675106   +*** Checking missing input Interval
3675107   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3675108   +
3675109   +IF NMISS(
3675110   +   MntCard_Games ,
3675111   +   MntMagazines ,
3675112   +   NumCatalogPurchases ,
3675113   +   NumDealsPurchases ,
3675114   +   NumWebPurchases ,
3675115   +   RANGE_Frq ,
3675116   +   RANGE_Recency ,
3675117   +   RANGE_average_purchase ,
3675118   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3675119   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3675120   +
3675121   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675122   +END;
MPRINT(SCORETABLES):   END;
3675123   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675124   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3675125   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675126   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675127   +   S_MntCard_Games  =    -2.34073404187821 +      6.7140682175756 *
3675128   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.34073404187821 + 6.7140682175756 * MntCard_Games ;
3675129   +   S_MntMagazines  =    -0.83486906669326 +     17.0223623645148 *
3675130   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83486906669326 + 17.0223623645148 * MntMagazines ;
3675131   +   S_NumCatalogPurchases  =    -3.10856619133241 +     13.4823795884925 *
3675132   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.10856619133241 + 13.4823795884925 *
NumCatalogPurchases ;
3675133   +   S_NumDealsPurchases  =    -1.41580172191054 +     11.1919313184683 *
3675134   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41580172191054 + 11.1919313184683 *
NumDealsPurchases ;
3675135   +   S_NumWebPurchases  =    -5.23777786696341 +     12.2616584441589 *
3675136   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23777786696341 + 12.2616584441589 *
NumWebPurchases ;
3675137   +   S_RANGE_Frq  =    -1.35679969435174 +     4.21451957534563 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35679969435174 + 4.21451957534563 * RANGE_Frq ;
3675138   +   S_RANGE_Recency  =    -1.65258261612724 +     3.34484341773445 *
3675139   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65258261612724 + 3.34484341773445 * RANGE_Recency ;
3675140   +   S_RANGE_average_purchase  =    -1.03633360542203 +     5.21171888136895 *
3675141   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03633360542203 + 5.21171888136895 *
RANGE_average_purchase ;
3675142   +   S_RANGE_campaign_acceptance
3675143   +          =    -0.46918041399392 +     5.88681066447083 *
3675144   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.46918041399392 + 5.88681066447083 *
RANGE_campaign_acceptance ;
3675145   +END;
MPRINT(SCORETABLES):   END;
3675146   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675147   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3675148   +   ELSE S_MntCard_Games  =    -2.34073404187821 +      6.7140682175756 *
3675149   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.34073404187821 + 6.7140682175756 *
MntCard_Games ;
3675150   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3675151   +   ELSE S_MntMagazines  =    -0.83486906669326 +     17.0223623645148 *
3675152   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83486906669326 + 17.0223623645148 *
MntMagazines ;
3675153   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3675154   +   ELSE S_NumCatalogPurchases
3675155   +          =    -3.10856619133241 +     13.4823795884925 * NumCatalogPurchases
3675156   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.10856619133241 + 13.4823795884925 *
NumCatalogPurchases ;
3675157   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3675158   +   ELSE S_NumDealsPurchases  =    -1.41580172191054 +     11.1919313184683 *
3675159   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41580172191054 + 11.1919313184683 *
NumDealsPurchases ;
3675160   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3675161   +   ELSE S_NumWebPurchases  =    -5.23777786696341 +     12.2616584441589 *
3675162   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23777786696341 + 12.2616584441589 *
NumWebPurchases ;
3675163   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3675164   +   ELSE S_RANGE_Frq  =    -1.35679969435174 +     4.21451957534563 * RANGE_Frq
3675165   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35679969435174 + 4.21451957534563 * RANGE_Frq ;
3675166   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3675167   +   ELSE S_RANGE_Recency  =    -1.65258261612724 +     3.34484341773445 *
3675168   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65258261612724 + 3.34484341773445 *
RANGE_Recency ;
3675169   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3675170   +   ELSE S_RANGE_average_purchase
3675171   +          =    -1.03633360542203 +     5.21171888136895 *
3675172   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03633360542203 + 5.21171888136895 *
RANGE_average_purchase ;
3675173   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3675174   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3675175   +   ELSE S_RANGE_campaign_acceptance
3675176   +          =    -0.46918041399392 +     5.88681066447083 *
3675177   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.46918041399392 + 5.88681066447083
* RANGE_campaign_acceptance ;
3675178   +END;
MPRINT(SCORETABLES):   END;
3675179   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675180   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3675181   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675182   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675183   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3675184   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675185   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675186   +   H11  =     1.23964027028827 * S_MntCard_Games  +     -2.1918626441965 *
3675187   +        S_MntMagazines  +    -0.07134166518723 * S_NumCatalogPurchases
3675188   +          +     3.19949574528097 * S_NumDealsPurchases
3675189   +          +     0.61533139481655 * S_NumWebPurchases
3675190   +          +     2.55499448972156 * S_RANGE_Frq  +    -5.72471950350638 *
3675191   +        S_RANGE_Recency  +     0.17508160010943 * S_RANGE_average_purchase
3675192   +          +     1.13968426237516 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.23964027028827 * S_MntCard_Games + -2.1918626441965 *
S_MntMagazines + -0.07134166518723 * S_NumCatalogPurchases + 3.19949574528097 *
S_NumDealsPurchases + 0.61533139481655 * S_NumWebPurchases + 2.55499448972156 * S_RANGE_Frq +
-5.72471950350638 * S_RANGE_Recency + 0.17508160010943 * S_RANGE_average_purchase +
1.13968426237516 * S_RANGE_campaign_acceptance ;
3675193   +   H12  =     2.32456097227919 * S_MntCard_Games  +    -0.45648523130163 *
3675194   +        S_MntMagazines  +     0.85195680762118 * S_NumCatalogPurchases
3675195   +          +    -0.82859967711319 * S_NumDealsPurchases
3675196   +          +     1.42467987216563 * S_NumWebPurchases
3675197   +          +     0.48773478529889 * S_RANGE_Frq  +    -0.39459194764902 *
3675198   +        S_RANGE_Recency  +     1.51982774567671 * S_RANGE_average_purchase
3675199   +          +     0.51353187907656 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 2.32456097227919 * S_MntCard_Games + -0.45648523130163 *
S_MntMagazines + 0.85195680762118 * S_NumCatalogPurchases + -0.82859967711319 *
S_NumDealsPurchases + 1.42467987216563 * S_NumWebPurchases + 0.48773478529889 * S_RANGE_Frq +
-0.39459194764902 * S_RANGE_Recency + 1.51982774567671 * S_RANGE_average_purchase +
0.51353187907656 * S_RANGE_campaign_acceptance ;
3675200   +   H13  =    -0.20683488769972 * S_MntCard_Games  +     -0.0467368570446 *
3675201   +        S_MntMagazines  +    -0.97478056694633 * S_NumCatalogPurchases
3675202   +          +      -0.689837706182 * S_NumDealsPurchases
3675203   +          +    -2.01396291818154 * S_NumWebPurchases
3675204   +          +    -0.86383187148473 * S_RANGE_Frq  +     1.83590412245178 *
3675205   +        S_RANGE_Recency  +     1.14870475789173 * S_RANGE_average_purchase
3675206   +          +    -0.51044747391089 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.20683488769972 * S_MntCard_Games + -0.0467368570446 *
S_MntMagazines + -0.97478056694633 * S_NumCatalogPurchases + -0.689837706182 *
S_NumDealsPurchases + -2.01396291818154 * S_NumWebPurchases + -0.86383187148473 * S_RANGE_Frq
+ 1.83590412245178 * S_RANGE_Recency + 1.14870475789173 * S_RANGE_average_purchase +
-0.51044747391089 * S_RANGE_campaign_acceptance ;
3675207   +   H14  =    -3.70732407158064 * S_MntCard_Games  +     -1.8438777995423 *
3675208   +        S_MntMagazines  +    -3.48245219916883 * S_NumCatalogPurchases
3675209   +          +    -2.38496650721934 * S_NumDealsPurchases
3675210   +          +    -0.26622211148211 * S_NumWebPurchases
3675211   +          +     3.18965744723515 * S_RANGE_Frq  +     4.75220915025294 *
3675212   +        S_RANGE_Recency  +    -6.82475641630018 * S_RANGE_average_purchase
3675213   +          +     -1.8059758626538 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -3.70732407158064 * S_MntCard_Games + -1.8438777995423 *
S_MntMagazines + -3.48245219916883 * S_NumCatalogPurchases + -2.38496650721934 *
S_NumDealsPurchases + -0.26622211148211 * S_NumWebPurchases + 3.18965744723515 * S_RANGE_Frq +
4.75220915025294 * S_RANGE_Recency + -6.82475641630018 * S_RANGE_average_purchase +
-1.8059758626538 * S_RANGE_campaign_acceptance ;
3675214   +   H15  =     2.12835865359013 * S_MntCard_Games  +     1.32856905748288 *
3675215   +        S_MntMagazines  +     0.77822297815771 * S_NumCatalogPurchases
3675216   +          +     0.43793863740421 * S_NumDealsPurchases
3675217   +          +    -3.14723006336172 * S_NumWebPurchases
3675218   +          +    -4.56661779667948 * S_RANGE_Frq  +     0.07492728582657 *
3675219   +        S_RANGE_Recency  +     3.50382097147699 * S_RANGE_average_purchase
3675220   +          +     2.99275158102928 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 2.12835865359013 * S_MntCard_Games + 1.32856905748288 *
S_MntMagazines + 0.77822297815771 * S_NumCatalogPurchases + 0.43793863740421 *
S_NumDealsPurchases + -3.14723006336172 * S_NumWebPurchases + -4.56661779667948 * S_RANGE_Frq
+ 0.07492728582657 * S_RANGE_Recency + 3.50382097147699 * S_RANGE_average_purchase +
2.99275158102928 * S_RANGE_campaign_acceptance ;
3675221   +   H16  =    -2.29731399516462 * S_MntCard_Games  +     1.24457886709809 *
3675222   +        S_MntMagazines  +    -0.93744641258032 * S_NumCatalogPurchases
3675223   +          +    -1.82575691774556 * S_NumDealsPurchases
3675224   +          +    -1.54794274314523 * S_NumWebPurchases
3675225   +          +    -0.31017898498703 * S_RANGE_Frq  +     3.28499423602099 *
3675226   +        S_RANGE_Recency  +      0.5915544746976 * S_RANGE_average_purchase
3675227   +          +    -2.05785138687889 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.29731399516462 * S_MntCard_Games + 1.24457886709809 *
S_MntMagazines + -0.93744641258032 * S_NumCatalogPurchases + -1.82575691774556 *
S_NumDealsPurchases + -1.54794274314523 * S_NumWebPurchases + -0.31017898498703 * S_RANGE_Frq
+ 3.28499423602099 * S_RANGE_Recency + 0.5915544746976 * S_RANGE_average_purchase +
-2.05785138687889 * S_RANGE_campaign_acceptance ;
3675228   +   H17  =      0.7410258203257 * S_MntCard_Games  +     1.95711452007307 *
3675229   +        S_MntMagazines  +     1.81550328450953 * S_NumCatalogPurchases
3675230   +          +    -1.83722068185494 * S_NumDealsPurchases
3675231   +          +     1.46792202863609 * S_NumWebPurchases
3675232   +          +      2.2485307538409 * S_RANGE_Frq  +    -0.69754109047115 *
3675233   +        S_RANGE_Recency  +    -0.80478848833751 * S_RANGE_average_purchase
3675234   +          +    -0.66253594242999 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 0.7410258203257 * S_MntCard_Games + 1.95711452007307 *
S_MntMagazines + 1.81550328450953 * S_NumCatalogPurchases + -1.83722068185494 *
S_NumDealsPurchases + 1.46792202863609 * S_NumWebPurchases + 2.2485307538409 * S_RANGE_Frq +
-0.69754109047115 * S_RANGE_Recency + -0.80478848833751 * S_RANGE_average_purchase +
-0.66253594242999 * S_RANGE_campaign_acceptance ;
3675235   +   H18  =    -2.80287485939154 * S_MntCard_Games  +    -0.41356149394426 *
3675236   +        S_MntMagazines  +     1.14656134044288 * S_NumCatalogPurchases
3675237   +          +     1.71558478029091 * S_NumDealsPurchases
3675238   +          +    -1.67599618378786 * S_NumWebPurchases
3675239   +          +     1.89721028927749 * S_RANGE_Frq  +    -0.06572048797896 *
3675240   +        S_RANGE_Recency  +    -1.03578547623929 * S_RANGE_average_purchase
3675241   +          +      1.0506682568674 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -2.80287485939154 * S_MntCard_Games + -0.41356149394426 *
S_MntMagazines + 1.14656134044288 * S_NumCatalogPurchases + 1.71558478029091 *
S_NumDealsPurchases + -1.67599618378786 * S_NumWebPurchases + 1.89721028927749 * S_RANGE_Frq +
-0.06572048797896 * S_RANGE_Recency + -1.03578547623929 * S_RANGE_average_purchase +
1.0506682568674 * S_RANGE_campaign_acceptance ;
3675242   +   H11  = H11  +    -0.32223177146825 * Marital_StatusDivorced
3675243   +          +    -1.02135995107861 * Marital_StatusMarried
3675244   +          +     1.46027966762788 * Marital_StatusSingle
3675245   +          +    -1.06523429189963 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -0.32223177146825 * Marital_StatusDivorced +
-1.02135995107861 * Marital_StatusMarried + 1.46027966762788 * Marital_StatusSingle +
-1.06523429189963 * Marital_StatusTogether ;
3675246   +   H12  = H12  +    -1.41256251204944 * Marital_StatusDivorced
3675247   +          +    -0.68522190914516 * Marital_StatusMarried
3675248   +          +     0.45551288144284 * Marital_StatusSingle
3675249   +          +     0.55411862585661 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -1.41256251204944 * Marital_StatusDivorced +
-0.68522190914516 * Marital_StatusMarried + 0.45551288144284 * Marital_StatusSingle +
0.55411862585661 * Marital_StatusTogether ;
3675250   +   H13  = H13  +     0.44231549022428 * Marital_StatusDivorced
3675251   +          +     0.37915548920208 * Marital_StatusMarried
3675252   +          +     1.16383967725772 * Marital_StatusSingle
3675253   +          +     0.73658606623814 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 0.44231549022428 * Marital_StatusDivorced +
0.37915548920208 * Marital_StatusMarried + 1.16383967725772 * Marital_StatusSingle +
0.73658606623814 * Marital_StatusTogether ;
3675254   +   H14  = H14  +    -1.35632760406693 * Marital_StatusDivorced
3675255   +          +     1.89096669996592 * Marital_StatusMarried
3675256   +          +    -1.41816656293949 * Marital_StatusSingle
3675257   +          +    -0.94738776774771 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -1.35632760406693 * Marital_StatusDivorced +
1.89096669996592 * Marital_StatusMarried + -1.41816656293949 * Marital_StatusSingle +
-0.94738776774771 * Marital_StatusTogether ;
3675258   +   H15  = H15  +     1.99341380842196 * Marital_StatusDivorced
3675259   +          +     0.94787539710388 * Marital_StatusMarried
3675260   +          +    -0.52101025726451 * Marital_StatusSingle
3675261   +          +    -0.71952329859099 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.99341380842196 * Marital_StatusDivorced +
0.94787539710388 * Marital_StatusMarried + -0.52101025726451 * Marital_StatusSingle +
-0.71952329859099 * Marital_StatusTogether ;
3675262   +   H16  = H16  +     1.13283077468694 * Marital_StatusDivorced
3675263   +          +      1.0058618785042 * Marital_StatusMarried
3675264   +          +    -1.63022325534027 * Marital_StatusSingle
3675265   +          +     0.97647228176887 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 1.13283077468694 * Marital_StatusDivorced + 1.0058618785042
* Marital_StatusMarried + -1.63022325534027 * Marital_StatusSingle + 0.97647228176887 *
Marital_StatusTogether ;
3675266   +   H17  = H17  +     3.67601862417615 * Marital_StatusDivorced
3675267   +          +     -3.0903668267181 * Marital_StatusMarried
3675268   +          +     1.65025264359293 * Marital_StatusSingle
3675269   +          +    -3.12814149988638 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 3.67601862417615 * Marital_StatusDivorced +
-3.0903668267181 * Marital_StatusMarried + 1.65025264359293 * Marital_StatusSingle +
-3.12814149988638 * Marital_StatusTogether ;
3675270   +   H18  = H18  +     2.74166364978704 * Marital_StatusDivorced
3675271   +          +     -0.1387129838496 * Marital_StatusMarried
3675272   +          +     0.07360142055096 * Marital_StatusSingle
3675273   +          +    -3.07581323313514 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 2.74166364978704 * Marital_StatusDivorced +
-0.1387129838496 * Marital_StatusMarried + 0.07360142055096 * Marital_StatusSingle +
-3.07581323313514 * Marital_StatusTogether ;
3675274   +   H11  =     2.05170857472302 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.05170857472302 + H11 ;
3675275   +   H12  =     3.03625954637926 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.03625954637926 + H12 ;
3675276   +   H13  =     3.31751909292179 + H13 ;
MPRINT(SCORETABLES):   H13 = 3.31751909292179 + H13 ;
3675277   +   H14  =      0.8045871211444 + H14 ;
MPRINT(SCORETABLES):   H14 = 0.8045871211444 + H14 ;
3675278   +   H15  =    -5.29310676958116 + H15 ;
MPRINT(SCORETABLES):   H15 = -5.29310676958116 + H15 ;
3675279   +   H16  =     4.00164827407552 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.00164827407552 + H16 ;
3675280   +   H17  =    -5.76003272807099 + H17 ;
MPRINT(SCORETABLES):   H17 = -5.76003272807099 + H17 ;
3675281   +   H18  =      -5.459932272518 + H18 ;
MPRINT(SCORETABLES):   H18 = -5.459932272518 + H18 ;
3675282   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3675283   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3675284   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3675285   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3675286   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3675287   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3675288   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3675289   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3675290   +END;
MPRINT(SCORETABLES):   END;
3675291   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675292   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3675293   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3675294   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3675295   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3675296   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3675297   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3675298   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3675299   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3675300   +END;
MPRINT(SCORETABLES):   END;
3675301   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675302   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3675303   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675304   +
3675305   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3675306   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3675307   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3675308   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3675309   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3675310   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3675311   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3675312   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3675313   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3675314   +end;
MPRINT(SCORETABLES):   end;
3675315   +else do;
MPRINT(SCORETABLES):   else do;
3675316   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3675317   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3675318   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3675319   +   end;
MPRINT(SCORETABLES):   end;
3675320   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3675321   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3675322   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3675323   +   end;
MPRINT(SCORETABLES):   end;
3675324   +   else do;
MPRINT(SCORETABLES):   else do;
3675325   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3675326   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3675327   +   end;
MPRINT(SCORETABLES):   end;
3675328   +end;
MPRINT(SCORETABLES):   end;
3675329   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675330   +   P_DepVar1  =     6.69084035613052 * H11  +     2.63159163103504 * H12
3675331   +          +    -3.58113215426954 * H13  +    -5.34339591770654 * H14
3675332   +          +     7.40535446875213 * H15  +    -7.57613838847558 * H16
3675333   +          +     5.48083838408418 * H17  +     5.60946218116241 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 6.69084035613052 * H11 + 2.63159163103504 * H12 +
-3.58113215426954 * H13 + -5.34339591770654 * H14 + 7.40535446875213 * H15 + -7.57613838847558
* H16 + 5.48083838408418 * H17 + 5.60946218116241 * H18 ;
3675334   +   P_DepVar1  =    -3.06109137466985 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -3.06109137466985 + P_DepVar1 ;
3675335   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3675336   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3675337   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3675338   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3675339   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3675340   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3675341   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3675342   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3675343   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3675344   +END;
MPRINT(SCORETABLES):   END;
3675345   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675346   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3675347   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3675348   +END;
MPRINT(SCORETABLES):   END;
3675349   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3675350   +   P_DepVar1  =     0.13351498637602;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13351498637602;
3675351   +   P_DepVar0  =     0.86648501362397;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86648501362397;
3675352   +END;
MPRINT(SCORETABLES):   END;
3675353   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3675354   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3675355   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3675356   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3675357   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3675358   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3675359   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3675360   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675361   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3675362   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675363   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3675364   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3675365   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3675366   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3675367   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3675368   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3675369   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3675370   +END;
MPRINT(SCORETABLES):   END;
3675371   +********************************;
MPRINT(SCORETABLES):   ********************************;
3675372   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3675373   +********************************;
MPRINT(SCORETABLES):   ********************************;
3675374   +drop
3675375   +S_MntCard_Games
3675376   +S_MntMagazines
3675377   +S_NumCatalogPurchases
3675378   +S_NumDealsPurchases
3675379   +S_NumWebPurchases
3675380   +S_RANGE_Frq
3675381   +S_RANGE_Recency
3675382   +S_RANGE_average_purchase
3675383   +S_RANGE_campaign_acceptance
3675384   +H11
3675385   +H12
3675386   +H13
3675387   +H14
3675388   +H15
3675389   +H16
3675390   +H17
3675391   +H18
3675392   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3675393   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675394   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3675395   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675396   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675397   +* Group: ^(cv_var =6);
MPRINT(SCORETABLES):   * Group: ^(cv_var =6);
3675398   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675399   +end;
MPRINT(SCORETABLES):   end;
3675400   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675401   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3675402   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675403   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675404   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3675405   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675406   +if (cv_var =7)  then do;
MPRINT(SCORETABLES):   if (cv_var =7) then do;
3675407   +_XVAL_=7;
MPRINT(SCORETABLES):   _XVAL_=7;
3675408   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675409   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3675410   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675411   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675412   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3675413   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675414   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3675415   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3675416   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3675417   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3675418   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3675419   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3675420   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3675421   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3675422   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3675423   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3675424   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3675425   +LENGTH _WARN_ $4
3675426   +      F_DepVar  $ 12
3675427   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3675428   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3675429   +
3675430   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3675431   +
3675432   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3675433   +
3675434   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3675435   +
3675436   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3675437   +
3675438   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3675439   +
3675440   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3675441   +
3675442   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3675443   +
3675444   +      label S_RANGE_campaign_acceptance =
3675445   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3675446   +
3675447   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3675448   +
3675449   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3675450   +
3675451   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3675452   +
3675453   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3675454   +
3675455   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3675456   +
3675457   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3675458   +
3675459   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3675460   +
3675461   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3675462   +
3675463   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3675464   +
3675465   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3675466   +
3675467   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3675468   +
3675469   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3675470   +
3675471   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3675472   +
3675473   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3675474   +
3675475   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3675476   +
3675477   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3675478   +
3675479   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3675480   +
3675481   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3675482   +
3675483   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3675484   +
3675485   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3675486   +
3675487   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3675488   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3675489   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3675490   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3675491   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3675492   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3675493   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3675494   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3675495   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3675496   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675497   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675498   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675499   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675500   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3675501   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675502   +end;
MPRINT(SCORETABLES):   end;
3675503   +else do;
MPRINT(SCORETABLES):   else do;
3675504   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3675505   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3675506   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3675507   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3675508   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3675509   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3675510   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3675511   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3675512   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675513   +         end;
MPRINT(SCORETABLES):   end;
3675514   +         else do;
MPRINT(SCORETABLES):   else do;
3675515   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3675516   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3675517   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675518   +            end;
MPRINT(SCORETABLES):   end;
3675519   +         end;
MPRINT(SCORETABLES):   end;
3675520   +      end;
MPRINT(SCORETABLES):   end;
3675521   +      else do;
MPRINT(SCORETABLES):   else do;
3675522   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3675523   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3675524   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675525   +         end;
MPRINT(SCORETABLES):   end;
3675526   +      end;
MPRINT(SCORETABLES):   end;
3675527   +   end;
MPRINT(SCORETABLES):   end;
3675528   +   else do;
MPRINT(SCORETABLES):   else do;
3675529   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3675530   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3675531   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675532   +      end;
MPRINT(SCORETABLES):   end;
3675533   +      else do;
MPRINT(SCORETABLES):   else do;
3675534   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3675535   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3675536   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3675537   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3675538   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3675539   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675540   +         end;
MPRINT(SCORETABLES):   end;
3675541   +      end;
MPRINT(SCORETABLES):   end;
3675542   +   end;
MPRINT(SCORETABLES):   end;
3675543   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3675544   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675545   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675546   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675547   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675548   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3675549   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675550   +   end;
MPRINT(SCORETABLES):   end;
3675551   +end;
MPRINT(SCORETABLES):   end;
3675552   +
3675553   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675554   +*** Checking missing input Interval
3675555   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3675556   +
3675557   +IF NMISS(
3675558   +   MntCard_Games ,
3675559   +   MntMagazines ,
3675560   +   NumCatalogPurchases ,
3675561   +   NumDealsPurchases ,
3675562   +   NumWebPurchases ,
3675563   +   RANGE_Frq ,
3675564   +   RANGE_Recency ,
3675565   +   RANGE_average_purchase ,
3675566   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3675567   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3675568   +
3675569   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675570   +END;
MPRINT(SCORETABLES):   END;
3675571   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675572   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3675573   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675574   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675575   +   S_MntCard_Games  =    -2.30966591090807 +     6.60082804482344 *
3675576   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.30966591090807 + 6.60082804482344 * MntCard_Games ;
3675577   +   S_MntMagazines  =    -0.83670452959281 +     17.4403796599865 *
3675578   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83670452959281 + 17.4403796599865 * MntMagazines ;
3675579   +   S_NumCatalogPurchases  =    -3.11903852969134 +     13.4734323712903 *
3675580   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.11903852969134 + 13.4734323712903 *
NumCatalogPurchases ;
3675581   +   S_NumDealsPurchases  =    -1.41326071770932 +     11.2402315421783 *
3675582   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41326071770932 + 11.2402315421783 *
NumDealsPurchases ;
3675583   +   S_NumWebPurchases  =    -5.23317346019677 +     12.2649330892737 *
3675584   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23317346019677 + 12.2649330892737 *
NumWebPurchases ;
3675585   +   S_RANGE_Frq  =    -1.35717698753855 +     4.18271463801858 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.35717698753855 + 4.18271463801858 * RANGE_Frq ;
3675586   +   S_RANGE_Recency  =    -1.65875257103327 +     3.35026800068207 *
3675587   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.65875257103327 + 3.35026800068207 * RANGE_Recency ;
3675588   +   S_RANGE_average_purchase  =     -1.0503698658887 +     5.27586139078335 *
3675589   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.0503698658887 + 5.27586139078335 *
RANGE_average_purchase ;
3675590   +   S_RANGE_campaign_acceptance
3675591   +          =    -0.47786812216042 +     5.72920198846635 *
3675592   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47786812216042 + 5.72920198846635 *
RANGE_campaign_acceptance ;
3675593   +END;
MPRINT(SCORETABLES):   END;
3675594   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675595   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3675596   +   ELSE S_MntCard_Games  =    -2.30966591090807 +     6.60082804482344 *
3675597   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.30966591090807 + 6.60082804482344 *
MntCard_Games ;
3675598   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3675599   +   ELSE S_MntMagazines  =    -0.83670452959281 +     17.4403796599865 *
3675600   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83670452959281 + 17.4403796599865 *
MntMagazines ;
3675601   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3675602   +   ELSE S_NumCatalogPurchases
3675603   +          =    -3.11903852969134 +     13.4734323712903 * NumCatalogPurchases
3675604   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.11903852969134 + 13.4734323712903 *
NumCatalogPurchases ;
3675605   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3675606   +   ELSE S_NumDealsPurchases  =    -1.41326071770932 +     11.2402315421783 *
3675607   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41326071770932 + 11.2402315421783 *
NumDealsPurchases ;
3675608   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3675609   +   ELSE S_NumWebPurchases  =    -5.23317346019677 +     12.2649330892737 *
3675610   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23317346019677 + 12.2649330892737 *
NumWebPurchases ;
3675611   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3675612   +   ELSE S_RANGE_Frq  =    -1.35717698753855 +     4.18271463801858 * RANGE_Frq
3675613   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.35717698753855 + 4.18271463801858 * RANGE_Frq ;
3675614   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3675615   +   ELSE S_RANGE_Recency  =    -1.65875257103327 +     3.35026800068207 *
3675616   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.65875257103327 + 3.35026800068207 *
RANGE_Recency ;
3675617   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3675618   +   ELSE S_RANGE_average_purchase
3675619   +          =     -1.0503698658887 +     5.27586139078335 *
3675620   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.0503698658887 + 5.27586139078335 *
RANGE_average_purchase ;
3675621   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3675622   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3675623   +   ELSE S_RANGE_campaign_acceptance
3675624   +          =    -0.47786812216042 +     5.72920198846635 *
3675625   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47786812216042 + 5.72920198846635
* RANGE_campaign_acceptance ;
3675626   +END;
MPRINT(SCORETABLES):   END;
3675627   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675628   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3675629   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675630   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675631   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3675632   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675633   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675634   +   H11  =     1.83880071425811 * S_MntCard_Games  +    -1.16025575815117 *
3675635   +        S_MntMagazines  +     0.88038611226841 * S_NumCatalogPurchases
3675636   +          +     3.91842632677387 * S_NumDealsPurchases
3675637   +          +     0.68772535421508 * S_NumWebPurchases
3675638   +          +     1.24059471672198 * S_RANGE_Frq  +    -5.88295709357642 *
3675639   +        S_RANGE_Recency  +     0.07873371207077 * S_RANGE_average_purchase
3675640   +          +     1.90779988297633 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.83880071425811 * S_MntCard_Games + -1.16025575815117 *
S_MntMagazines + 0.88038611226841 * S_NumCatalogPurchases + 3.91842632677387 *
S_NumDealsPurchases + 0.68772535421508 * S_NumWebPurchases + 1.24059471672198 * S_RANGE_Frq +
-5.88295709357642 * S_RANGE_Recency + 0.07873371207077 * S_RANGE_average_purchase +
1.90779988297633 * S_RANGE_campaign_acceptance ;
3675641   +   H12  =     3.37115582361286 * S_MntCard_Games  +    -0.01200869260502 *
3675642   +        S_MntMagazines  +     1.53162649901846 * S_NumCatalogPurchases
3675643   +          +     -0.5532511981795 * S_NumDealsPurchases
3675644   +          +    -0.47699913217608 * S_NumWebPurchases
3675645   +          +    -0.05361247455467 * S_RANGE_Frq  +    -0.45066515690999 *
3675646   +        S_RANGE_Recency  +     3.57737232826244 * S_RANGE_average_purchase
3675647   +          +     2.69040246535784 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 3.37115582361286 * S_MntCard_Games + -0.01200869260502 *
S_MntMagazines + 1.53162649901846 * S_NumCatalogPurchases + -0.5532511981795 *
S_NumDealsPurchases + -0.47699913217608 * S_NumWebPurchases + -0.05361247455467 * S_RANGE_Frq
+ -0.45066515690999 * S_RANGE_Recency + 3.57737232826244 * S_RANGE_average_purchase +
2.69040246535784 * S_RANGE_campaign_acceptance ;
3675648   +   H13  =     3.50824887307701 * S_MntCard_Games  +    -3.00320670798604 *
3675649   +        S_MntMagazines  +    -1.61103682417184 * S_NumCatalogPurchases
3675650   +          +     0.05140503253033 * S_NumDealsPurchases
3675651   +          +    -4.80396536299679 * S_NumWebPurchases
3675652   +          +    -0.38648626093057 * S_RANGE_Frq  +     0.45467339999468 *
3675653   +        S_RANGE_Recency  +     3.98970518339627 * S_RANGE_average_purchase
3675654   +          +      1.6524887709802 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 3.50824887307701 * S_MntCard_Games + -3.00320670798604 *
S_MntMagazines + -1.61103682417184 * S_NumCatalogPurchases + 0.05140503253033 *
S_NumDealsPurchases + -4.80396536299679 * S_NumWebPurchases + -0.38648626093057 * S_RANGE_Frq
+ 0.45467339999468 * S_RANGE_Recency + 3.98970518339627 * S_RANGE_average_purchase +
1.6524887709802 * S_RANGE_campaign_acceptance ;
3675655   +   H14  =    -3.41312440972775 * S_MntCard_Games  +    -2.54042434060674 *
3675656   +        S_MntMagazines  +    -7.32457464750049 * S_NumCatalogPurchases
3675657   +          +    -2.81578199262479 * S_NumDealsPurchases
3675658   +          +    -0.49770278663807 * S_NumWebPurchases
3675659   +          +     4.08351050555067 * S_RANGE_Frq  +     3.93731312900103 *
3675660   +        S_RANGE_Recency  +     -1.8609662497168 * S_RANGE_average_purchase
3675661   +          +    -1.89895028047114 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -3.41312440972775 * S_MntCard_Games + -2.54042434060674 *
S_MntMagazines + -7.32457464750049 * S_NumCatalogPurchases + -2.81578199262479 *
S_NumDealsPurchases + -0.49770278663807 * S_NumWebPurchases + 4.08351050555067 * S_RANGE_Frq +
3.93731312900103 * S_RANGE_Recency + -1.8609662497168 * S_RANGE_average_purchase +
-1.89895028047114 * S_RANGE_campaign_acceptance ;
3675662   +   H15  =     2.01392547536871 * S_MntCard_Games  +     1.06261555537777 *
3675663   +        S_MntMagazines  +     1.70570578442813 * S_NumCatalogPurchases
3675664   +          +     1.37243859687934 * S_NumDealsPurchases
3675665   +          +    -3.13919277062032 * S_NumWebPurchases
3675666   +          +    -3.15744485062537 * S_RANGE_Frq  +     1.33813104094726 *
3675667   +        S_RANGE_Recency  +     3.81776833236325 * S_RANGE_average_purchase
3675668   +          +     4.32341998869319 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 2.01392547536871 * S_MntCard_Games + 1.06261555537777 *
S_MntMagazines + 1.70570578442813 * S_NumCatalogPurchases + 1.37243859687934 *
S_NumDealsPurchases + -3.13919277062032 * S_NumWebPurchases + -3.15744485062537 * S_RANGE_Frq
+ 1.33813104094726 * S_RANGE_Recency + 3.81776833236325 * S_RANGE_average_purchase +
4.32341998869319 * S_RANGE_campaign_acceptance ;
3675669   +   H16  =    -2.26520763777649 * S_MntCard_Games  +     0.83557888422847 *
3675670   +        S_MntMagazines  +    -0.58491501853853 * S_NumCatalogPurchases
3675671   +          +    -2.35531448560071 * S_NumDealsPurchases
3675672   +          +    -1.27413250019041 * S_NumWebPurchases
3675673   +          +    -0.75908948770129 * S_RANGE_Frq  +     4.25549401661288 *
3675674   +        S_RANGE_Recency  +    -0.48240499292673 * S_RANGE_average_purchase
3675675   +          +    -2.07709298625946 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.26520763777649 * S_MntCard_Games + 0.83557888422847 *
S_MntMagazines + -0.58491501853853 * S_NumCatalogPurchases + -2.35531448560071 *
S_NumDealsPurchases + -1.27413250019041 * S_NumWebPurchases + -0.75908948770129 * S_RANGE_Frq
+ 4.25549401661288 * S_RANGE_Recency + -0.48240499292673 * S_RANGE_average_purchase +
-2.07709298625946 * S_RANGE_campaign_acceptance ;
3675676   +   H17  =      2.1898312511092 * S_MntCard_Games  +     1.11065952392354 *
3675677   +        S_MntMagazines  +     1.72751746663347 * S_NumCatalogPurchases
3675678   +          +    -6.30339273904894 * S_NumDealsPurchases
3675679   +          +     1.49952634612409 * S_NumWebPurchases
3675680   +          +     1.18076422921414 * S_RANGE_Frq  +    -1.03080319650895 *
3675681   +        S_RANGE_Recency  +    -1.06782665651244 * S_RANGE_average_purchase
3675682   +          +     0.88887962933554 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 2.1898312511092 * S_MntCard_Games + 1.11065952392354 *
S_MntMagazines + 1.72751746663347 * S_NumCatalogPurchases + -6.30339273904894 *
S_NumDealsPurchases + 1.49952634612409 * S_NumWebPurchases + 1.18076422921414 * S_RANGE_Frq +
-1.03080319650895 * S_RANGE_Recency + -1.06782665651244 * S_RANGE_average_purchase +
0.88887962933554 * S_RANGE_campaign_acceptance ;
3675683   +   H18  =    -5.07787391306439 * S_MntCard_Games  +     0.34199678885173 *
3675684   +        S_MntMagazines  +     -1.9686470953264 * S_NumCatalogPurchases
3675685   +          +     1.08254872269782 * S_NumDealsPurchases
3675686   +          +    -3.60460500257002 * S_NumWebPurchases
3675687   +          +     0.81039326298473 * S_RANGE_Frq  +     0.44441620372698 *
3675688   +        S_RANGE_Recency  +     1.44670185691567 * S_RANGE_average_purchase
3675689   +          +     -0.0419108938606 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -5.07787391306439 * S_MntCard_Games + 0.34199678885173 *
S_MntMagazines + -1.9686470953264 * S_NumCatalogPurchases + 1.08254872269782 *
S_NumDealsPurchases + -3.60460500257002 * S_NumWebPurchases + 0.81039326298473 * S_RANGE_Frq +
0.44441620372698 * S_RANGE_Recency + 1.44670185691567 * S_RANGE_average_purchase +
-0.0419108938606 * S_RANGE_campaign_acceptance ;
3675690   +   H11  = H11  +    -1.48086488101074 * Marital_StatusDivorced
3675691   +          +    -1.48495600468007 * Marital_StatusMarried
3675692   +          +     2.57884730553408 * Marital_StatusSingle
3675693   +          +    -3.04366257463144 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -1.48086488101074 * Marital_StatusDivorced +
-1.48495600468007 * Marital_StatusMarried + 2.57884730553408 * Marital_StatusSingle +
-3.04366257463144 * Marital_StatusTogether ;
3675694   +   H12  = H12  +    -0.89091233475518 * Marital_StatusDivorced
3675695   +          +    -0.37887230323347 * Marital_StatusMarried
3675696   +          +    -0.82855743940997 * Marital_StatusSingle
3675697   +          +    -2.05836654094318 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.89091233475518 * Marital_StatusDivorced +
-0.37887230323347 * Marital_StatusMarried + -0.82855743940997 * Marital_StatusSingle +
-2.05836654094318 * Marital_StatusTogether ;
3675698   +   H13  = H13  +     1.09405036112781 * Marital_StatusDivorced
3675699   +          +     0.11661998211464 * Marital_StatusMarried
3675700   +          +     1.68794729382857 * Marital_StatusSingle
3675701   +          +    -0.20282016631202 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 1.09405036112781 * Marital_StatusDivorced +
0.11661998211464 * Marital_StatusMarried + 1.68794729382857 * Marital_StatusSingle +
-0.20282016631202 * Marital_StatusTogether ;
3675702   +   H14  = H14  +    -0.07712646683919 * Marital_StatusDivorced
3675703   +          +     2.33533665448623 * Marital_StatusMarried
3675704   +          +     -0.8007507026371 * Marital_StatusSingle
3675705   +          +    -2.24570999942388 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + -0.07712646683919 * Marital_StatusDivorced +
2.33533665448623 * Marital_StatusMarried + -0.8007507026371 * Marital_StatusSingle +
-2.24570999942388 * Marital_StatusTogether ;
3675706   +   H15  = H15  +     0.74097643174489 * Marital_StatusDivorced
3675707   +          +    -0.47350235593938 * Marital_StatusMarried
3675708   +          +    -1.27503041413784 * Marital_StatusSingle
3675709   +          +    -1.53848314731295 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 0.74097643174489 * Marital_StatusDivorced +
-0.47350235593938 * Marital_StatusMarried + -1.27503041413784 * Marital_StatusSingle +
-1.53848314731295 * Marital_StatusTogether ;
3675710   +   H16  = H16  +    -0.49998120633473 * Marital_StatusDivorced
3675711   +          +     0.74314409049267 * Marital_StatusMarried
3675712   +          +    -0.96741655055357 * Marital_StatusSingle
3675713   +          +     0.86956308642127 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.49998120633473 * Marital_StatusDivorced +
0.74314409049267 * Marital_StatusMarried + -0.96741655055357 * Marital_StatusSingle +
0.86956308642127 * Marital_StatusTogether ;
3675714   +   H17  = H17  +     6.66246742633325 * Marital_StatusDivorced
3675715   +          +    -3.93613176833284 * Marital_StatusMarried
3675716   +          +     0.57149833392004 * Marital_StatusSingle
3675717   +          +    -4.12818522544795 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 6.66246742633325 * Marital_StatusDivorced +
-3.93613176833284 * Marital_StatusMarried + 0.57149833392004 * Marital_StatusSingle +
-4.12818522544795 * Marital_StatusTogether ;
3675718   +   H18  = H18  +      1.1822504649172 * Marital_StatusDivorced
3675719   +          +     2.15341761233351 * Marital_StatusMarried
3675720   +          +      1.9011022683044 * Marital_StatusSingle
3675721   +          +    -3.50803147137301 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 1.1822504649172 * Marital_StatusDivorced + 2.15341761233351
* Marital_StatusMarried + 1.9011022683044 * Marital_StatusSingle + -3.50803147137301 *
Marital_StatusTogether ;
3675722   +   H11  =    -0.56156846764434 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.56156846764434 + H11 ;
3675723   +   H12  =     3.78468923605184 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.78468923605184 + H12 ;
3675724   +   H13  =     2.77364504671195 + H13 ;
MPRINT(SCORETABLES):   H13 = 2.77364504671195 + H13 ;
3675725   +   H14  =    -0.61477381722357 + H14 ;
MPRINT(SCORETABLES):   H14 = -0.61477381722357 + H14 ;
3675726   +   H15  =    -5.79319638153597 + H15 ;
MPRINT(SCORETABLES):   H15 = -5.79319638153597 + H15 ;
3675727   +   H16  =     6.00722326667944 + H16 ;
MPRINT(SCORETABLES):   H16 = 6.00722326667944 + H16 ;
3675728   +   H17  =    -8.63492231744638 + H17 ;
MPRINT(SCORETABLES):   H17 = -8.63492231744638 + H17 ;
3675729   +   H18  =    -6.64413442941225 + H18 ;
MPRINT(SCORETABLES):   H18 = -6.64413442941225 + H18 ;
3675730   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3675731   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3675732   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3675733   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3675734   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3675735   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3675736   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3675737   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3675738   +END;
MPRINT(SCORETABLES):   END;
3675739   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675740   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3675741   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3675742   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3675743   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3675744   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3675745   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3675746   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3675747   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3675748   +END;
MPRINT(SCORETABLES):   END;
3675749   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675750   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3675751   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675752   +
3675753   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3675754   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3675755   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3675756   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3675757   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3675758   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3675759   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3675760   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3675761   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3675762   +end;
MPRINT(SCORETABLES):   end;
3675763   +else do;
MPRINT(SCORETABLES):   else do;
3675764   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3675765   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3675766   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3675767   +   end;
MPRINT(SCORETABLES):   end;
3675768   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3675769   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3675770   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3675771   +   end;
MPRINT(SCORETABLES):   end;
3675772   +   else do;
MPRINT(SCORETABLES):   else do;
3675773   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3675774   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3675775   +   end;
MPRINT(SCORETABLES):   end;
3675776   +end;
MPRINT(SCORETABLES):   end;
3675777   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3675778   +   P_DepVar1  =     8.51007954886904 * H11  +      5.3278785739102 * H12
3675779   +          +    -6.25172827950609 * H13  +    -6.84513626619443 * H14
3675780   +          +     7.85689576743072 * H15  +    -9.57803812321368 * H16
3675781   +          +     8.09114677680688 * H17  +     6.12295365977936 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 8.51007954886904 * H11 + 5.3278785739102 * H12 +
-6.25172827950609 * H13 + -6.84513626619443 * H14 + 7.85689576743072 * H15 + -9.57803812321368
* H16 + 8.09114677680688 * H17 + 6.12295365977936 * H18 ;
3675782   +   P_DepVar1  =    -0.61330187507121 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.61330187507121 + P_DepVar1 ;
3675783   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3675784   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3675785   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3675786   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3675787   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3675788   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3675789   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3675790   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3675791   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3675792   +END;
MPRINT(SCORETABLES):   END;
3675793   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3675794   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3675795   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3675796   +END;
MPRINT(SCORETABLES):   END;
3675797   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3675798   +   P_DepVar1  =     0.13746017296313;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13746017296313;
3675799   +   P_DepVar0  =     0.86253982703686;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86253982703686;
3675800   +END;
MPRINT(SCORETABLES):   END;
3675801   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3675802   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3675803   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3675804   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3675805   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3675806   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3675807   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3675808   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675809   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3675810   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3675811   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3675812   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3675813   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3675814   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3675815   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3675816   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3675817   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3675818   +END;
MPRINT(SCORETABLES):   END;
3675819   +********************************;
MPRINT(SCORETABLES):   ********************************;
3675820   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3675821   +********************************;
MPRINT(SCORETABLES):   ********************************;
3675822   +drop
3675823   +S_MntCard_Games
3675824   +S_MntMagazines
3675825   +S_NumCatalogPurchases
3675826   +S_NumDealsPurchases
3675827   +S_NumWebPurchases
3675828   +S_RANGE_Frq
3675829   +S_RANGE_Recency
3675830   +S_RANGE_average_purchase
3675831   +S_RANGE_campaign_acceptance
3675832   +H11
3675833   +H12
3675834   +H13
3675835   +H14
3675836   +H15
3675837   +H16
3675838   +H17
3675839   +H18
3675840   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3675841   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675842   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3675843   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675844   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675845   +* Group: ^(cv_var =7);
MPRINT(SCORETABLES):   * Group: ^(cv_var =7);
3675846   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675847   +end;
MPRINT(SCORETABLES):   end;
3675848   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675849   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3675850   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675851   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675852   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3675853   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675854   +if (cv_var =8)  then do;
MPRINT(SCORETABLES):   if (cv_var =8) then do;
3675855   +_XVAL_=8;
MPRINT(SCORETABLES):   _XVAL_=8;
3675856   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3675857   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3675858   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3675859   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3675860   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3675861   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3675862   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3675863   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3675864   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3675865   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3675866   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3675867   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3675868   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3675869   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3675870   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3675871   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3675872   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3675873   +LENGTH _WARN_ $4
3675874   +      F_DepVar  $ 12
3675875   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3675876   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3675877   +
3675878   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3675879   +
3675880   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3675881   +
3675882   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3675883   +
3675884   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3675885   +
3675886   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3675887   +
3675888   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3675889   +
3675890   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3675891   +
3675892   +      label S_RANGE_campaign_acceptance =
3675893   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3675894   +
3675895   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3675896   +
3675897   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3675898   +
3675899   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3675900   +
3675901   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3675902   +
3675903   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3675904   +
3675905   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3675906   +
3675907   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3675908   +
3675909   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3675910   +
3675911   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3675912   +
3675913   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3675914   +
3675915   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3675916   +
3675917   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3675918   +
3675919   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3675920   +
3675921   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3675922   +
3675923   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3675924   +
3675925   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3675926   +
3675927   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3675928   +
3675929   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3675930   +
3675931   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3675932   +
3675933   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3675934   +
3675935   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3675936   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3675937   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3675938   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3675939   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3675940   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3675941   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3675942   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3675943   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3675944   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675945   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675946   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675947   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675948   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3675949   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675950   +end;
MPRINT(SCORETABLES):   end;
3675951   +else do;
MPRINT(SCORETABLES):   else do;
3675952   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3675953   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3675954   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3675955   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3675956   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3675957   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3675958   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3675959   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3675960   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675961   +         end;
MPRINT(SCORETABLES):   end;
3675962   +         else do;
MPRINT(SCORETABLES):   else do;
3675963   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3675964   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3675965   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675966   +            end;
MPRINT(SCORETABLES):   end;
3675967   +         end;
MPRINT(SCORETABLES):   end;
3675968   +      end;
MPRINT(SCORETABLES):   end;
3675969   +      else do;
MPRINT(SCORETABLES):   else do;
3675970   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3675971   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3675972   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675973   +         end;
MPRINT(SCORETABLES):   end;
3675974   +      end;
MPRINT(SCORETABLES):   end;
3675975   +   end;
MPRINT(SCORETABLES):   end;
3675976   +   else do;
MPRINT(SCORETABLES):   else do;
3675977   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3675978   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3675979   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675980   +      end;
MPRINT(SCORETABLES):   end;
3675981   +      else do;
MPRINT(SCORETABLES):   else do;
3675982   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3675983   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3675984   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3675985   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3675986   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3675987   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3675988   +         end;
MPRINT(SCORETABLES):   end;
3675989   +      end;
MPRINT(SCORETABLES):   end;
3675990   +   end;
MPRINT(SCORETABLES):   end;
3675991   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3675992   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3675993   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3675994   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3675995   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3675996   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3675997   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3675998   +   end;
MPRINT(SCORETABLES):   end;
3675999   +end;
MPRINT(SCORETABLES):   end;
3676000   +
3676001   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676002   +*** Checking missing input Interval
3676003   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3676004   +
The SAS System
 
3676005   +IF NMISS(
3676006   +   MntCard_Games ,
3676007   +   MntMagazines ,
3676008   +   NumCatalogPurchases ,
3676009   +   NumDealsPurchases ,
3676010   +   NumWebPurchases ,
3676011   +   RANGE_Frq ,
3676012   +   RANGE_Recency ,
3676013   +   RANGE_average_purchase ,
3676014   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3676015   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3676016   +
3676017   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676018   +END;
MPRINT(SCORETABLES):   END;
3676019   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676020   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3676021   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676022   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676023   +   S_MntCard_Games  =    -2.29892041831352 +       6.601150055864 *
3676024   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.29892041831352 + 6.601150055864 * MntCard_Games ;
3676025   +   S_MntMagazines  =    -0.83317452008587 +     17.4966500173221 *
3676026   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83317452008587 + 17.4966500173221 * MntMagazines ;
3676027   +   S_NumCatalogPurchases  =    -3.09109579313305 +     13.3951051790981 *
3676028   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09109579313305 + 13.3951051790981 *
NumCatalogPurchases ;
3676029   +   S_NumDealsPurchases  =    -1.42484523600638 +       11.21156005591 *
3676030   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.42484523600638 + 11.21156005591 *
NumDealsPurchases ;
3676031   +   S_NumWebPurchases  =    -5.21428956916773 +     12.2266204316724 *
3676032   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.21428956916773 + 12.2266204316724 *
NumWebPurchases ;
3676033   +   S_RANGE_Frq  =    -1.36651533911444 +     4.23011453456546 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.36651533911444 + 4.23011453456546 * RANGE_Frq ;
3676034   +   S_RANGE_Recency  =    -1.64986113728952 +      3.3561102628965 *
3676035   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.64986113728952 + 3.3561102628965 * RANGE_Recency ;
3676036   +   S_RANGE_average_purchase  =    -1.03579257296038 +     5.17555796614273 *
3676037   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03579257296038 + 5.17555796614273 *
RANGE_average_purchase ;
3676038   +   S_RANGE_campaign_acceptance
3676039   +          =    -0.47483336447461 +     5.77355684870099 *
3676040   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47483336447461 + 5.77355684870099 *
RANGE_campaign_acceptance ;
3676041   +END;
MPRINT(SCORETABLES):   END;
3676042   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676043   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3676044   +   ELSE S_MntCard_Games  =    -2.29892041831352 +       6.601150055864 *
3676045   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.29892041831352 + 6.601150055864 *
MntCard_Games ;
3676046   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3676047   +   ELSE S_MntMagazines  =    -0.83317452008587 +     17.4966500173221 *
3676048   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83317452008587 + 17.4966500173221 *
MntMagazines ;
3676049   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3676050   +   ELSE S_NumCatalogPurchases
3676051   +          =    -3.09109579313305 +     13.3951051790981 * NumCatalogPurchases
3676052   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09109579313305 + 13.3951051790981 *
NumCatalogPurchases ;
3676053   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3676054   +   ELSE S_NumDealsPurchases  =    -1.42484523600638 +       11.21156005591 *
3676055   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.42484523600638 + 11.21156005591 *
NumDealsPurchases ;
3676056   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3676057   +   ELSE S_NumWebPurchases  =    -5.21428956916773 +     12.2266204316724 *
3676058   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.21428956916773 + 12.2266204316724 *
NumWebPurchases ;
3676059   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3676060   +   ELSE S_RANGE_Frq  =    -1.36651533911444 +     4.23011453456546 * RANGE_Frq
3676061   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.36651533911444 + 4.23011453456546 * RANGE_Frq ;
3676062   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3676063   +   ELSE S_RANGE_Recency  =    -1.64986113728952 +      3.3561102628965 *
3676064   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.64986113728952 + 3.3561102628965 *
RANGE_Recency ;
3676065   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3676066   +   ELSE S_RANGE_average_purchase
3676067   +          =    -1.03579257296038 +     5.17555796614273 *
3676068   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03579257296038 + 5.17555796614273 *
RANGE_average_purchase ;
3676069   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3676070   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3676071   +   ELSE S_RANGE_campaign_acceptance
3676072   +          =    -0.47483336447461 +     5.77355684870099 *
3676073   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47483336447461 + 5.77355684870099
* RANGE_campaign_acceptance ;
3676074   +END;
MPRINT(SCORETABLES):   END;
3676075   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676076   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3676077   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676078   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676079   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3676080   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676081   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676082   +   H11  =     2.47292110179517 * S_MntCard_Games  +    -1.78441381044061 *
3676083   +        S_MntMagazines  +     2.20238069861234 * S_NumCatalogPurchases
3676084   +          +     5.35597414878353 * S_NumDealsPurchases
3676085   +          +    -1.27412854117732 * S_NumWebPurchases
3676086   +          +    -0.08773429008875 * S_RANGE_Frq  +     -7.3504317057105 *
3676087   +        S_RANGE_Recency  +    -0.62012409705667 * S_RANGE_average_purchase
3676088   +          +     0.23560520258243 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 2.47292110179517 * S_MntCard_Games + -1.78441381044061 *
S_MntMagazines + 2.20238069861234 * S_NumCatalogPurchases + 5.35597414878353 *
S_NumDealsPurchases + -1.27412854117732 * S_NumWebPurchases + -0.08773429008875 * S_RANGE_Frq
+ -7.3504317057105 * S_RANGE_Recency + -0.62012409705667 * S_RANGE_average_purchase +
0.23560520258243 * S_RANGE_campaign_acceptance ;
3676089   +   H12  =     1.13645394686942 * S_MntCard_Games  +    -1.00967867774974 *
3676090   +        S_MntMagazines  +    -0.50036462567733 * S_NumCatalogPurchases
3676091   +          +     0.26360219064162 * S_NumDealsPurchases
3676092   +          +     2.47231965593612 * S_NumWebPurchases
3676093   +          +    -0.11067160509049 * S_RANGE_Frq  +    -0.68510837431834 *
3676094   +        S_RANGE_Recency  +     2.41723937290699 * S_RANGE_average_purchase
3676095   +          +     2.70347331526687 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.13645394686942 * S_MntCard_Games + -1.00967867774974 *
S_MntMagazines + -0.50036462567733 * S_NumCatalogPurchases + 0.26360219064162 *
S_NumDealsPurchases + 2.47231965593612 * S_NumWebPurchases + -0.11067160509049 * S_RANGE_Frq +
-0.68510837431834 * S_RANGE_Recency + 2.41723937290699 * S_RANGE_average_purchase +
2.70347331526687 * S_RANGE_campaign_acceptance ;
3676096   +   H13  =    -0.65670803796627 * S_MntCard_Games  +     0.62633052042934 *
3676097   +        S_MntMagazines  +    -2.23691282969642 * S_NumCatalogPurchases
3676098   +          +     0.50938809356791 * S_NumDealsPurchases
3676099   +          +    -4.58213967316044 * S_NumWebPurchases
3676100   +          +    -3.47851064574295 * S_RANGE_Frq  +     1.79718910975459 *
3676101   +        S_RANGE_Recency  +     2.27502310429295 * S_RANGE_average_purchase
3676102   +          +    -0.27966787857089 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = -0.65670803796627 * S_MntCard_Games + 0.62633052042934 *
S_MntMagazines + -2.23691282969642 * S_NumCatalogPurchases + 0.50938809356791 *
S_NumDealsPurchases + -4.58213967316044 * S_NumWebPurchases + -3.47851064574295 * S_RANGE_Frq
+ 1.79718910975459 * S_RANGE_Recency + 2.27502310429295 * S_RANGE_average_purchase +
-0.27966787857089 * S_RANGE_campaign_acceptance ;
3676103   +   H14  =    -2.22935920215821 * S_MntCard_Games  +    -1.49497625340941 *
3676104   +        S_MntMagazines  +    -3.25683873998564 * S_NumCatalogPurchases
3676105   +          +    -2.27194791992766 * S_NumDealsPurchases
3676106   +          +    -0.66326969225959 * S_NumWebPurchases
3676107   +          +     4.56391475912217 * S_RANGE_Frq  +     4.78707631352893 *
3676108   +        S_RANGE_Recency  +     -8.9210017335646 * S_RANGE_average_purchase
3676109   +          +    -1.77586240330047 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -2.22935920215821 * S_MntCard_Games + -1.49497625340941 *
S_MntMagazines + -3.25683873998564 * S_NumCatalogPurchases + -2.27194791992766 *
S_NumDealsPurchases + -0.66326969225959 * S_NumWebPurchases + 4.56391475912217 * S_RANGE_Frq +
4.78707631352893 * S_RANGE_Recency + -8.9210017335646 * S_RANGE_average_purchase +
-1.77586240330047 * S_RANGE_campaign_acceptance ;
3676110   +   H15  =     1.95679673146009 * S_MntCard_Games  +     1.31603885049778 *
3676111   +        S_MntMagazines  +    -0.03133047798021 * S_NumCatalogPurchases
3676112   +          +     1.47669056475064 * S_NumDealsPurchases
3676113   +          +    -2.96848536716422 * S_NumWebPurchases
3676114   +          +    -1.42346327434654 * S_RANGE_Frq  +    -1.39654798606707 *
3676115   +        S_RANGE_Recency  +     1.57305729086136 * S_RANGE_average_purchase
3676116   +          +     3.81481757687733 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 1.95679673146009 * S_MntCard_Games + 1.31603885049778 *
S_MntMagazines + -0.03133047798021 * S_NumCatalogPurchases + 1.47669056475064 *
S_NumDealsPurchases + -2.96848536716422 * S_NumWebPurchases + -1.42346327434654 * S_RANGE_Frq
+ -1.39654798606707 * S_RANGE_Recency + 1.57305729086136 * S_RANGE_average_purchase +
3.81481757687733 * S_RANGE_campaign_acceptance ;
3676117   +   H16  =    -2.73423676072416 * S_MntCard_Games  +     0.66697429384909 *
3676118   +        S_MntMagazines  +     -1.4735594232052 * S_NumCatalogPurchases
3676119   +          +     -1.9964019556544 * S_NumDealsPurchases
3676120   +          +    -1.99409772637046 * S_NumWebPurchases
3676121   +          +    -0.03506630304618 * S_RANGE_Frq  +     3.02626383463375 *
3676122   +        S_RANGE_Recency  +     0.19593287231115 * S_RANGE_average_purchase
3676123   +          +    -2.59676702955635 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.73423676072416 * S_MntCard_Games + 0.66697429384909 *
S_MntMagazines + -1.4735594232052 * S_NumCatalogPurchases + -1.9964019556544 *
S_NumDealsPurchases + -1.99409772637046 * S_NumWebPurchases + -0.03506630304618 * S_RANGE_Frq
+ 3.02626383463375 * S_RANGE_Recency + 0.19593287231115 * S_RANGE_average_purchase +
-2.59676702955635 * S_RANGE_campaign_acceptance ;
3676124   +   H17  =     1.87957654598082 * S_MntCard_Games  +     1.52436872618213 *
3676125   +        S_MntMagazines  +     1.77466392672881 * S_NumCatalogPurchases
3676126   +          +    -6.93743501117703 * S_NumDealsPurchases
3676127   +          +     1.64013345851117 * S_NumWebPurchases
3676128   +          +      0.9313366419651 * S_RANGE_Frq  +    -0.52300062013602 *
3676129   +        S_RANGE_Recency  +    -0.87824521407413 * S_RANGE_average_purchase
3676130   +          +     0.14446785845766 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.87957654598082 * S_MntCard_Games + 1.52436872618213 *
S_MntMagazines + 1.77466392672881 * S_NumCatalogPurchases + -6.93743501117703 *
S_NumDealsPurchases + 1.64013345851117 * S_NumWebPurchases + 0.9313366419651 * S_RANGE_Frq +
-0.52300062013602 * S_RANGE_Recency + -0.87824521407413 * S_RANGE_average_purchase +
0.14446785845766 * S_RANGE_campaign_acceptance ;
3676131   +   H18  =    -3.47900612663608 * S_MntCard_Games  +    -1.12188477892221 *
3676132   +        S_MntMagazines  +     1.42156434781976 * S_NumCatalogPurchases
3676133   +          +     1.47063256185706 * S_NumDealsPurchases
3676134   +          +    -2.14658837130756 * S_NumWebPurchases
3676135   +          +     0.60830543921836 * S_RANGE_Frq  +    -0.32306546531676 *
3676136   +        S_RANGE_Recency  +    -1.32664408029774 * S_RANGE_average_purchase
3676137   +          +     1.49603915197588 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -3.47900612663608 * S_MntCard_Games + -1.12188477892221 *
S_MntMagazines + 1.42156434781976 * S_NumCatalogPurchases + 1.47063256185706 *
S_NumDealsPurchases + -2.14658837130756 * S_NumWebPurchases + 0.60830543921836 * S_RANGE_Frq +
-0.32306546531676 * S_RANGE_Recency + -1.32664408029774 * S_RANGE_average_purchase +
1.49603915197588 * S_RANGE_campaign_acceptance ;
3676138   +   H11  = H11  +    -3.52548543496113 * Marital_StatusDivorced
3676139   +          +    -1.00125729142642 * Marital_StatusMarried
3676140   +          +     2.11843331138937 * Marital_StatusSingle
3676141   +          +     2.03481012692498 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + -3.52548543496113 * Marital_StatusDivorced +
-1.00125729142642 * Marital_StatusMarried + 2.11843331138937 * Marital_StatusSingle +
2.03481012692498 * Marital_StatusTogether ;
3676142   +   H12  = H12  +     -2.0461867394951 * Marital_StatusDivorced
3676143   +          +     0.25947576907003 * Marital_StatusMarried
3676144   +          +     0.71376605714923 * Marital_StatusSingle
3676145   +          +    -1.70092542498539 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -2.0461867394951 * Marital_StatusDivorced +
0.25947576907003 * Marital_StatusMarried + 0.71376605714923 * Marital_StatusSingle +
-1.70092542498539 * Marital_StatusTogether ;
3676146   +   H13  = H13  +     -0.9033434871591 * Marital_StatusDivorced
3676147   +          +     0.89309936056869 * Marital_StatusMarried
3676148   +          +     3.82154754820175 * Marital_StatusSingle
3676149   +          +     3.35137600037982 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.9033434871591 * Marital_StatusDivorced +
0.89309936056869 * Marital_StatusMarried + 3.82154754820175 * Marital_StatusSingle +
3.35137600037982 * Marital_StatusTogether ;
3676150   +   H14  = H14  +     0.84680152148618 * Marital_StatusDivorced
3676151   +          +     0.28265054118525 * Marital_StatusMarried
3676152   +          +    -1.29267483559072 * Marital_StatusSingle
3676153   +          +    -1.35037794036138 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.84680152148618 * Marital_StatusDivorced +
0.28265054118525 * Marital_StatusMarried + -1.29267483559072 * Marital_StatusSingle +
-1.35037794036138 * Marital_StatusTogether ;
3676154   +   H15  = H15  +    -0.69013601633638 * Marital_StatusDivorced
3676155   +          +     0.47034606364447 * Marital_StatusMarried
3676156   +          +     0.67338366871749 * Marital_StatusSingle
3676157   +          +    -1.84209423632958 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + -0.69013601633638 * Marital_StatusDivorced +
0.47034606364447 * Marital_StatusMarried + 0.67338366871749 * Marital_StatusSingle +
-1.84209423632958 * Marital_StatusTogether ;
3676158   +   H16  = H16  +     0.65825455718742 * Marital_StatusDivorced
3676159   +          +     1.76881557334347 * Marital_StatusMarried
3676160   +          +    -0.70078884288443 * Marital_StatusSingle
3676161   +          +     0.15175234117305 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.65825455718742 * Marital_StatusDivorced +
1.76881557334347 * Marital_StatusMarried + -0.70078884288443 * Marital_StatusSingle +
0.15175234117305 * Marital_StatusTogether ;
3676162   +   H17  = H17  +     8.01592807652734 * Marital_StatusDivorced
3676163   +          +    -3.35639922392557 * Marital_StatusMarried
3676164   +          +     0.49944662298506 * Marital_StatusSingle
3676165   +          +    -4.47257707453832 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 8.01592807652734 * Marital_StatusDivorced +
-3.35639922392557 * Marital_StatusMarried + 0.49944662298506 * Marital_StatusSingle +
-4.47257707453832 * Marital_StatusTogether ;
3676166   +   H18  = H18  +     3.16230618911148 * Marital_StatusDivorced
3676167   +          +     -0.5023255396383 * Marital_StatusMarried
3676168   +          +     0.91143268077381 * Marital_StatusSingle
3676169   +          +    -4.51756977068215 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 3.16230618911148 * Marital_StatusDivorced +
-0.5023255396383 * Marital_StatusMarried + 0.91143268077381 * Marital_StatusSingle +
-4.51756977068215 * Marital_StatusTogether ;
3676170   +   H11  =    -1.24011864064648 + H11 ;
MPRINT(SCORETABLES):   H11 = -1.24011864064648 + H11 ;
3676171   +   H12  =     3.47994271202805 + H12 ;
MPRINT(SCORETABLES):   H12 = 3.47994271202805 + H12 ;
3676172   +   H13  =     2.47525968487064 + H13 ;
MPRINT(SCORETABLES):   H13 = 2.47525968487064 + H13 ;
3676173   +   H14  =     1.75442654206808 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.75442654206808 + H14 ;
3676174   +   H15  =    -7.31358747317035 + H15 ;
MPRINT(SCORETABLES):   H15 = -7.31358747317035 + H15 ;
3676175   +   H16  =     4.70400847822869 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.70400847822869 + H16 ;
3676176   +   H17  =    -8.81405785800818 + H17 ;
MPRINT(SCORETABLES):   H17 = -8.81405785800818 + H17 ;
3676177   +   H18  =    -6.49932125324565 + H18 ;
MPRINT(SCORETABLES):   H18 = -6.49932125324565 + H18 ;
3676178   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3676179   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3676180   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3676181   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3676182   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3676183   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3676184   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3676185   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3676186   +END;
MPRINT(SCORETABLES):   END;
3676187   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676188   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3676189   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3676190   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3676191   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3676192   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3676193   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3676194   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3676195   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3676196   +END;
MPRINT(SCORETABLES):   END;
3676197   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676198   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3676199   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676200   +
3676201   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3676202   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3676203   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3676204   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3676205   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3676206   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3676207   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3676208   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3676209   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3676210   +end;
MPRINT(SCORETABLES):   end;
3676211   +else do;
MPRINT(SCORETABLES):   else do;
3676212   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3676213   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3676214   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3676215   +   end;
MPRINT(SCORETABLES):   end;
3676216   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3676217   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3676218   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3676219   +   end;
MPRINT(SCORETABLES):   end;
3676220   +   else do;
MPRINT(SCORETABLES):   else do;
3676221   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3676222   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3676223   +   end;
MPRINT(SCORETABLES):   end;
3676224   +end;
MPRINT(SCORETABLES):   end;
3676225   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676226   +   P_DepVar1  =     9.50349509012999 * H11  +     5.82586357575991 * H12
3676227   +          +    -3.18579143281484 * H13  +    -5.85846764639329 * H14
3676228   +          +     9.26188380286973 * H15  +    -6.94828956689072 * H16
3676229   +          +     9.89093293561663 * H17  +      5.7091160827056 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 9.50349509012999 * H11 + 5.82586357575991 * H12 +
-3.18579143281484 * H13 + -5.85846764639329 * H14 + 9.26188380286973 * H15 + -6.94828956689072
* H16 + 9.89093293561663 * H17 + 5.7091160827056 * H18 ;
3676230   +   P_DepVar1  =     -0.0368141053384 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.0368141053384 + P_DepVar1 ;
3676231   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3676232   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3676233   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3676234   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3676235   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3676236   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3676237   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3676238   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3676239   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3676240   +END;
MPRINT(SCORETABLES):   END;
3676241   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676242   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3676243   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3676244   +END;
MPRINT(SCORETABLES):   END;
3676245   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3676246   +   P_DepVar1  =      0.1398916967509;
MPRINT(SCORETABLES):   P_DepVar1 = 0.1398916967509;
3676247   +   P_DepVar0  =     0.86010830324909;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86010830324909;
3676248   +END;
MPRINT(SCORETABLES):   END;
3676249   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3676250   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3676251   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3676252   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3676253   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3676254   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3676255   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3676256   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676257   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3676258   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676259   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3676260   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3676261   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3676262   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3676263   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3676264   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3676265   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3676266   +END;
MPRINT(SCORETABLES):   END;
3676267   +********************************;
MPRINT(SCORETABLES):   ********************************;
3676268   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3676269   +********************************;
MPRINT(SCORETABLES):   ********************************;
3676270   +drop
3676271   +S_MntCard_Games
3676272   +S_MntMagazines
3676273   +S_NumCatalogPurchases
3676274   +S_NumDealsPurchases
3676275   +S_NumWebPurchases
3676276   +S_RANGE_Frq
3676277   +S_RANGE_Recency
3676278   +S_RANGE_average_purchase
3676279   +S_RANGE_campaign_acceptance
3676280   +H11
3676281   +H12
3676282   +H13
3676283   +H14
3676284   +H15
3676285   +H16
3676286   +H17
3676287   +H18
3676288   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3676289   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676290   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3676291   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676292   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676293   +* Group: ^(cv_var =8);
MPRINT(SCORETABLES):   * Group: ^(cv_var =8);
3676294   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676295   +end;
MPRINT(SCORETABLES):   end;
3676296   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676297   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3676298   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676299   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676300   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3676301   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676302   +if (cv_var =9)  then do;
MPRINT(SCORETABLES):   if (cv_var =9) then do;
3676303   +_XVAL_=9;
MPRINT(SCORETABLES):   _XVAL_=9;
3676304   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676305   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3676306   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676307   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676308   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3676309   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676310   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3676311   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3676312   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3676313   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3676314   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3676315   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3676316   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3676317   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3676318   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3676319   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3676320   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3676321   +LENGTH _WARN_ $4
3676322   +      F_DepVar  $ 12
3676323   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3676324   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3676325   +
3676326   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3676327   +
3676328   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3676329   +
3676330   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3676331   +
3676332   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3676333   +
3676334   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3676335   +
3676336   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3676337   +
3676338   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3676339   +
3676340   +      label S_RANGE_campaign_acceptance =
3676341   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3676342   +
3676343   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3676344   +
3676345   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3676346   +
3676347   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3676348   +
3676349   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3676350   +
3676351   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3676352   +
3676353   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3676354   +
3676355   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3676356   +
3676357   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3676358   +
3676359   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3676360   +
3676361   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3676362   +
3676363   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3676364   +
3676365   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3676366   +
3676367   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3676368   +
3676369   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3676370   +
3676371   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3676372   +
3676373   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3676374   +
3676375   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3676376   +
3676377   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3676378   +
3676379   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3676380   +
3676381   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3676382   +
3676383   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3676384   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3676385   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3676386   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3676387   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3676388   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3676389   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3676390   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3676391   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3676392   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3676393   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3676394   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3676395   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3676396   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3676397   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676398   +end;
MPRINT(SCORETABLES):   end;
3676399   +else do;
MPRINT(SCORETABLES):   else do;
3676400   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3676401   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3676402   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3676403   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3676404   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3676405   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3676406   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3676407   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3676408   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676409   +         end;
MPRINT(SCORETABLES):   end;
3676410   +         else do;
MPRINT(SCORETABLES):   else do;
3676411   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3676412   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3676413   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676414   +            end;
MPRINT(SCORETABLES):   end;
3676415   +         end;
MPRINT(SCORETABLES):   end;
3676416   +      end;
MPRINT(SCORETABLES):   end;
3676417   +      else do;
MPRINT(SCORETABLES):   else do;
3676418   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3676419   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3676420   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676421   +         end;
MPRINT(SCORETABLES):   end;
3676422   +      end;
MPRINT(SCORETABLES):   end;
3676423   +   end;
MPRINT(SCORETABLES):   end;
3676424   +   else do;
MPRINT(SCORETABLES):   else do;
3676425   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3676426   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3676427   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676428   +      end;
MPRINT(SCORETABLES):   end;
3676429   +      else do;
MPRINT(SCORETABLES):   else do;
3676430   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3676431   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3676432   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3676433   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3676434   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3676435   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676436   +         end;
MPRINT(SCORETABLES):   end;
3676437   +      end;
MPRINT(SCORETABLES):   end;
3676438   +   end;
MPRINT(SCORETABLES):   end;
3676439   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3676440   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3676441   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3676442   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3676443   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3676444   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3676445   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676446   +   end;
MPRINT(SCORETABLES):   end;
3676447   +end;
MPRINT(SCORETABLES):   end;
3676448   +
3676449   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676450   +*** Checking missing input Interval
3676451   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3676452   +
3676453   +IF NMISS(
3676454   +   MntCard_Games ,
3676455   +   MntMagazines ,
3676456   +   NumCatalogPurchases ,
3676457   +   NumDealsPurchases ,
3676458   +   NumWebPurchases ,
3676459   +   RANGE_Frq ,
3676460   +   RANGE_Recency ,
3676461   +   RANGE_average_purchase ,
3676462   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3676463   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3676464   +
3676465   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676466   +END;
MPRINT(SCORETABLES):   END;
3676467   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676468   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3676469   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676470   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676471   +   S_MntCard_Games  =    -2.31107616933815 +      6.6023027290934 *
3676472   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.31107616933815 + 6.6023027290934 * MntCard_Games ;
3676473   +   S_MntMagazines  =    -0.83283364648559 +     17.2986380450333 *
3676474   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83283364648559 + 17.2986380450333 * MntMagazines ;
3676475   +   S_NumCatalogPurchases  =    -3.09135973990207 +     13.3746330099817 *
3676476   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.09135973990207 + 13.3746330099817 *
NumCatalogPurchases ;
3676477   +   S_NumDealsPurchases  =    -1.41005638211008 +     11.2897008061566 *
3676478   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.41005638211008 + 11.2897008061566 *
NumDealsPurchases ;
3676479   +   S_NumWebPurchases  =    -5.20861695061832 +     12.2221678432784 *
3676480   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.20861695061832 + 12.2221678432784 *
NumWebPurchases ;
3676481   +   S_RANGE_Frq  =    -1.37100084974419 +     4.19717298539757 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37100084974419 + 4.19717298539757 * RANGE_Frq ;
3676482   +   S_RANGE_Recency  =    -1.68049839062161 +     3.37187920784526 *
3676483   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.68049839062161 + 3.37187920784526 * RANGE_Recency ;
3676484   +   S_RANGE_average_purchase  =    -1.04189997917491 +     5.16713940828792 *
3676485   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.04189997917491 + 5.16713940828792 *
RANGE_average_purchase ;
3676486   +   S_RANGE_campaign_acceptance
3676487   +          =    -0.47866200260672 +     5.78828873996902 *
3676488   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.47866200260672 + 5.78828873996902 *
RANGE_campaign_acceptance ;
3676489   +END;
MPRINT(SCORETABLES):   END;
3676490   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676491   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3676492   +   ELSE S_MntCard_Games  =    -2.31107616933815 +      6.6023027290934 *
3676493   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.31107616933815 + 6.6023027290934 *
MntCard_Games ;
3676494   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3676495   +   ELSE S_MntMagazines  =    -0.83283364648559 +     17.2986380450333 *
3676496   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83283364648559 + 17.2986380450333 *
MntMagazines ;
3676497   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3676498   +   ELSE S_NumCatalogPurchases
3676499   +          =    -3.09135973990207 +     13.3746330099817 * NumCatalogPurchases
3676500   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.09135973990207 + 13.3746330099817 *
NumCatalogPurchases ;
3676501   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3676502   +   ELSE S_NumDealsPurchases  =    -1.41005638211008 +     11.2897008061566 *
3676503   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.41005638211008 + 11.2897008061566 *
NumDealsPurchases ;
3676504   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3676505   +   ELSE S_NumWebPurchases  =    -5.20861695061832 +     12.2221678432784 *
3676506   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.20861695061832 + 12.2221678432784 *
NumWebPurchases ;
3676507   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3676508   +   ELSE S_RANGE_Frq  =    -1.37100084974419 +     4.19717298539757 * RANGE_Frq
3676509   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37100084974419 + 4.19717298539757 * RANGE_Frq ;
3676510   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3676511   +   ELSE S_RANGE_Recency  =    -1.68049839062161 +     3.37187920784526 *
3676512   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.68049839062161 + 3.37187920784526 *
RANGE_Recency ;
3676513   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3676514   +   ELSE S_RANGE_average_purchase
3676515   +          =    -1.04189997917491 +     5.16713940828792 *
3676516   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.04189997917491 + 5.16713940828792 *
RANGE_average_purchase ;
3676517   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3676518   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3676519   +   ELSE S_RANGE_campaign_acceptance
3676520   +          =    -0.47866200260672 +     5.78828873996902 *
3676521   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.47866200260672 + 5.78828873996902
* RANGE_campaign_acceptance ;
3676522   +END;
MPRINT(SCORETABLES):   END;
3676523   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676524   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3676525   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676526   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676527   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3676528   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676529   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676530   +   H11  =     1.31621180854848 * S_MntCard_Games  +    -0.99440268775427 *
3676531   +        S_MntMagazines  +      0.1977587899872 * S_NumCatalogPurchases
3676532   +          +     1.80141398185988 * S_NumDealsPurchases
3676533   +          +     0.20561498086954 * S_NumWebPurchases
3676534   +          +     0.31024135240663 * S_RANGE_Frq  +    -4.32099230343124 *
3676535   +        S_RANGE_Recency  +    -0.27961235649417 * S_RANGE_average_purchase
3676536   +          +      1.7763854038013 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = 1.31621180854848 * S_MntCard_Games + -0.99440268775427 *
S_MntMagazines + 0.1977587899872 * S_NumCatalogPurchases + 1.80141398185988 *
S_NumDealsPurchases + 0.20561498086954 * S_NumWebPurchases + 0.31024135240663 * S_RANGE_Frq +
-4.32099230343124 * S_RANGE_Recency + -0.27961235649417 * S_RANGE_average_purchase +
1.7763854038013 * S_RANGE_campaign_acceptance ;
3676537   +   H12  =     1.12258468028591 * S_MntCard_Games  +     -0.2023193241554 *
3676538   +        S_MntMagazines  +     1.30675846510725 * S_NumCatalogPurchases
3676539   +          +    -0.83418352235274 * S_NumDealsPurchases
3676540   +          +     0.37757900484931 * S_NumWebPurchases
3676541   +          +     0.19524062717578 * S_RANGE_Frq  +    -1.25111312494778 *
3676542   +        S_RANGE_Recency  +     2.29075580743992 * S_RANGE_average_purchase
3676543   +          +     0.41095707971589 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.12258468028591 * S_MntCard_Games + -0.2023193241554 *
S_MntMagazines + 1.30675846510725 * S_NumCatalogPurchases + -0.83418352235274 *
S_NumDealsPurchases + 0.37757900484931 * S_NumWebPurchases + 0.19524062717578 * S_RANGE_Frq +
-1.25111312494778 * S_RANGE_Recency + 2.29075580743992 * S_RANGE_average_purchase +
0.41095707971589 * S_RANGE_campaign_acceptance ;
3676544   +   H13  =     1.42732212337811 * S_MntCard_Games  +    -1.91021482373278 *
3676545   +        S_MntMagazines  +    -0.20712399285798 * S_NumCatalogPurchases
3676546   +          +     0.10285799345431 * S_NumDealsPurchases
3676547   +          +    -2.29012761296361 * S_NumWebPurchases
3676548   +          +     0.65747917353504 * S_RANGE_Frq  +     0.15751830351236 *
3676549   +        S_RANGE_Recency  +      2.0232784966862 * S_RANGE_average_purchase
3676550   +          +     0.72337854935312 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 1.42732212337811 * S_MntCard_Games + -1.91021482373278 *
S_MntMagazines + -0.20712399285798 * S_NumCatalogPurchases + 0.10285799345431 *
S_NumDealsPurchases + -2.29012761296361 * S_NumWebPurchases + 0.65747917353504 * S_RANGE_Frq +
0.15751830351236 * S_RANGE_Recency + 2.0232784966862 * S_RANGE_average_purchase +
0.72337854935312 * S_RANGE_campaign_acceptance ;
3676551   +   H14  =    -4.20145267294191 * S_MntCard_Games  +     0.21928123043531 *
3676552   +        S_MntMagazines  +    -4.43825312140052 * S_NumCatalogPurchases
3676553   +          +    -2.39035046040134 * S_NumDealsPurchases
3676554   +          +     0.81472299504589 * S_NumWebPurchases
3676555   +          +     0.93179990233936 * S_RANGE_Frq  +     3.04530417381032 *
3676556   +        S_RANGE_Recency  +    -1.57366698504363 * S_RANGE_average_purchase
3676557   +          +     -0.9202585599624 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -4.20145267294191 * S_MntCard_Games + 0.21928123043531 *
S_MntMagazines + -4.43825312140052 * S_NumCatalogPurchases + -2.39035046040134 *
S_NumDealsPurchases + 0.81472299504589 * S_NumWebPurchases + 0.93179990233936 * S_RANGE_Frq +
3.04530417381032 * S_RANGE_Recency + -1.57366698504363 * S_RANGE_average_purchase +
-0.9202585599624 * S_RANGE_campaign_acceptance ;
3676558   +   H15  =     2.66160723097799 * S_MntCard_Games  +    -0.61434965505386 *
3676559   +        S_MntMagazines  +      1.9759906080802 * S_NumCatalogPurchases
3676560   +          +     1.86792426485148 * S_NumDealsPurchases
3676561   +          +    -1.85605709661238 * S_NumWebPurchases
3676562   +          +    -2.98470412360434 * S_RANGE_Frq  +    -0.42674583201005 *
3676563   +        S_RANGE_Recency  +     1.76678534887147 * S_RANGE_average_purchase
3676564   +          +     3.01284966189612 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 2.66160723097799 * S_MntCard_Games + -0.61434965505386 *
S_MntMagazines + 1.9759906080802 * S_NumCatalogPurchases + 1.86792426485148 *
S_NumDealsPurchases + -1.85605709661238 * S_NumWebPurchases + -2.98470412360434 * S_RANGE_Frq
+ -0.42674583201005 * S_RANGE_Recency + 1.76678534887147 * S_RANGE_average_purchase +
3.01284966189612 * S_RANGE_campaign_acceptance ;
3676565   +   H16  =     -0.8500532259568 * S_MntCard_Games  +     0.29441354537208 *
3676566   +        S_MntMagazines  +    -0.18237316089136 * S_NumCatalogPurchases
3676567   +          +    -1.09591854842211 * S_NumDealsPurchases
3676568   +          +    -2.06130364120321 * S_NumWebPurchases
3676569   +          +    -1.13469482614181 * S_RANGE_Frq  +     2.70697518306002 *
3676570   +        S_RANGE_Recency  +    -0.19256569879903 * S_RANGE_average_purchase
3676571   +          +    -1.18547526881393 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -0.8500532259568 * S_MntCard_Games + 0.29441354537208 *
S_MntMagazines + -0.18237316089136 * S_NumCatalogPurchases + -1.09591854842211 *
S_NumDealsPurchases + -2.06130364120321 * S_NumWebPurchases + -1.13469482614181 * S_RANGE_Frq
+ 2.70697518306002 * S_RANGE_Recency + -0.19256569879903 * S_RANGE_average_purchase +
-1.18547526881393 * S_RANGE_campaign_acceptance ;
3676572   +   H17  =     1.66502128201898 * S_MntCard_Games  +     0.66553230899134 *
3676573   +        S_MntMagazines  +     1.50481116375831 * S_NumCatalogPurchases
3676574   +          +    -2.91655912660536 * S_NumDealsPurchases
3676575   +          +     1.22518817755753 * S_NumWebPurchases
3676576   +          +     1.36582694186407 * S_RANGE_Frq  +    -1.54831955246519 *
3676577   +        S_RANGE_Recency  +    -0.35658551193312 * S_RANGE_average_purchase
3676578   +          +      0.8043595047988 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.66502128201898 * S_MntCard_Games + 0.66553230899134 *
S_MntMagazines + 1.50481116375831 * S_NumCatalogPurchases + -2.91655912660536 *
S_NumDealsPurchases + 1.22518817755753 * S_NumWebPurchases + 1.36582694186407 * S_RANGE_Frq +
-1.54831955246519 * S_RANGE_Recency + -0.35658551193312 * S_RANGE_average_purchase +
0.8043595047988 * S_RANGE_campaign_acceptance ;
3676579   +   H18  =    -2.54131886020921 * S_MntCard_Games  +     0.28491213078238 *
3676580   +        S_MntMagazines  +     0.29114994624783 * S_NumCatalogPurchases
3676581   +          +     1.42837437427771 * S_NumDealsPurchases
3676582   +          +    -1.34652844934125 * S_NumWebPurchases
3676583   +          +     1.94803548343186 * S_RANGE_Frq  +     0.22341003690456 *
3676584   +        S_RANGE_Recency  +    -0.65415284206485 * S_RANGE_average_purchase
3676585   +          +     0.76170902289133 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -2.54131886020921 * S_MntCard_Games + 0.28491213078238 *
S_MntMagazines + 0.29114994624783 * S_NumCatalogPurchases + 1.42837437427771 *
S_NumDealsPurchases + -1.34652844934125 * S_NumWebPurchases + 1.94803548343186 * S_RANGE_Frq +
0.22341003690456 * S_RANGE_Recency + -0.65415284206485 * S_RANGE_average_purchase +
0.76170902289133 * S_RANGE_campaign_acceptance ;
3676586   +   H11  = H11  +     0.81886415209084 * Marital_StatusDivorced
3676587   +          +    -1.10528185930778 * Marital_StatusMarried
3676588   +          +      0.7699856181591 * Marital_StatusSingle
3676589   +          +     -2.9466755404797 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.81886415209084 * Marital_StatusDivorced +
-1.10528185930778 * Marital_StatusMarried + 0.7699856181591 * Marital_StatusSingle +
-2.9466755404797 * Marital_StatusTogether ;
3676590   +   H12  = H12  +    -0.71973163861859 * Marital_StatusDivorced
3676591   +          +    -1.46124810141658 * Marital_StatusMarried
3676592   +          +     0.22293069210318 * Marital_StatusSingle
3676593   +          +     0.63811577343066 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -0.71973163861859 * Marital_StatusDivorced +
-1.46124810141658 * Marital_StatusMarried + 0.22293069210318 * Marital_StatusSingle +
0.63811577343066 * Marital_StatusTogether ;
3676594   +   H13  = H13  +    -0.22066760882425 * Marital_StatusDivorced
3676595   +          +    -0.49379967620089 * Marital_StatusMarried
3676596   +          +     1.33836269224459 * Marital_StatusSingle
3676597   +          +    -0.48688238123944 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + -0.22066760882425 * Marital_StatusDivorced +
-0.49379967620089 * Marital_StatusMarried + 1.33836269224459 * Marital_StatusSingle +
-0.48688238123944 * Marital_StatusTogether ;
3676598   +   H14  = H14  +     0.12494492348461 * Marital_StatusDivorced
3676599   +          +     0.75925503819525 * Marital_StatusMarried
3676600   +          +    -1.83128635807289 * Marital_StatusSingle
3676601   +          +     0.64387635524048 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 0.12494492348461 * Marital_StatusDivorced +
0.75925503819525 * Marital_StatusMarried + -1.83128635807289 * Marital_StatusSingle +
0.64387635524048 * Marital_StatusTogether ;
3676602   +   H15  = H15  +     0.41728783880507 * Marital_StatusDivorced
3676603   +          +     0.18678798100886 * Marital_StatusMarried
3676604   +          +     0.96267965033948 * Marital_StatusSingle
3676605   +          +    -1.16350622762409 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 0.41728783880507 * Marital_StatusDivorced +
0.18678798100886 * Marital_StatusMarried + 0.96267965033948 * Marital_StatusSingle +
-1.16350622762409 * Marital_StatusTogether ;
3676606   +   H16  = H16  +     0.45007260136586 * Marital_StatusDivorced
3676607   +          +     0.56532266244591 * Marital_StatusMarried
3676608   +          +     0.08188009019655 * Marital_StatusSingle
3676609   +          +     0.20493688038691 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + 0.45007260136586 * Marital_StatusDivorced +
0.56532266244591 * Marital_StatusMarried + 0.08188009019655 * Marital_StatusSingle +
0.20493688038691 * Marital_StatusTogether ;
3676610   +   H17  = H17  +     3.13575165935396 * Marital_StatusDivorced
3676611   +          +    -2.84041923449651 * Marital_StatusMarried
3676612   +          +     1.40329341904895 * Marital_StatusSingle
3676613   +          +    -2.90289212948832 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 3.13575165935396 * Marital_StatusDivorced +
-2.84041923449651 * Marital_StatusMarried + 1.40329341904895 * Marital_StatusSingle +
-2.90289212948832 * Marital_StatusTogether ;
3676614   +   H18  = H18  +     1.28384791412256 * Marital_StatusDivorced
3676615   +          +     0.68131469294547 * Marital_StatusMarried
3676616   +          +     1.13665601046785 * Marital_StatusSingle
3676617   +          +    -2.29728600067679 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 1.28384791412256 * Marital_StatusDivorced +
0.68131469294547 * Marital_StatusMarried + 1.13665601046785 * Marital_StatusSingle +
-2.29728600067679 * Marital_StatusTogether ;
3676618   +   H11  =    -0.05282312243969 + H11 ;
MPRINT(SCORETABLES):   H11 = -0.05282312243969 + H11 ;
3676619   +   H12  =     2.64798101938983 + H12 ;
MPRINT(SCORETABLES):   H12 = 2.64798101938983 + H12 ;
3676620   +   H13  =     2.00939177578981 + H13 ;
MPRINT(SCORETABLES):   H13 = 2.00939177578981 + H13 ;
3676621   +   H14  =     1.33484377083984 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.33484377083984 + H14 ;
3676622   +   H15  =    -4.80831981838052 + H15 ;
MPRINT(SCORETABLES):   H15 = -4.80831981838052 + H15 ;
3676623   +   H16  =     4.51133254117913 + H16 ;
MPRINT(SCORETABLES):   H16 = 4.51133254117913 + H16 ;
3676624   +   H17  =    -6.71571276926668 + H17 ;
MPRINT(SCORETABLES):   H17 = -6.71571276926668 + H17 ;
3676625   +   H18  =    -5.33934521647108 + H18 ;
MPRINT(SCORETABLES):   H18 = -5.33934521647108 + H18 ;
3676626   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3676627   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3676628   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3676629   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3676630   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3676631   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3676632   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3676633   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3676634   +END;
MPRINT(SCORETABLES):   END;
3676635   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676636   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3676637   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3676638   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3676639   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3676640   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3676641   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3676642   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3676643   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3676644   +END;
MPRINT(SCORETABLES):   END;
3676645   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676646   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3676647   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676648   +
3676649   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3676650   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3676651   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3676652   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3676653   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3676654   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3676655   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3676656   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3676657   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3676658   +end;
MPRINT(SCORETABLES):   end;
3676659   +else do;
MPRINT(SCORETABLES):   else do;
3676660   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3676661   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3676662   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3676663   +   end;
MPRINT(SCORETABLES):   end;
3676664   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3676665   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3676666   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3676667   +   end;
MPRINT(SCORETABLES):   end;
3676668   +   else do;
MPRINT(SCORETABLES):   else do;
3676669   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3676670   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3676671   +   end;
MPRINT(SCORETABLES):   end;
3676672   +end;
MPRINT(SCORETABLES):   end;
3676673   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676674   +   P_DepVar1  =     7.30495506875647 * H11  +     3.47234126942186 * H12
3676675   +          +    -4.71700780627367 * H13  +    -6.10667802104575 * H14
3676676   +          +     6.18869035568642 * H15  +    -7.13060451984575 * H16
3676677   +          +     5.67390166779368 * H17  +      5.8640759423747 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 7.30495506875647 * H11 + 3.47234126942186 * H12 +
-4.71700780627367 * H13 + -6.10667802104575 * H14 + 6.18869035568642 * H15 + -7.13060451984575
* H16 + 5.67390166779368 * H17 + 5.8640759423747 * H18 ;
3676678   +   P_DepVar1  =     0.00657712609428 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = 0.00657712609428 + P_DepVar1 ;
3676679   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3676680   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3676681   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3676682   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3676683   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3676684   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3676685   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3676686   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3676687   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3676688   +END;
MPRINT(SCORETABLES):   END;
3676689   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676690   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3676691   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3676692   +END;
MPRINT(SCORETABLES):   END;
3676693   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3676694   +   P_DepVar1  =     0.13474538080216;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13474538080216;
3676695   +   P_DepVar0  =     0.86525461919783;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86525461919783;
3676696   +END;
MPRINT(SCORETABLES):   END;
3676697   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3676698   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3676699   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3676700   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3676701   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3676702   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3676703   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3676704   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676705   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3676706   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676707   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3676708   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3676709   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3676710   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3676711   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3676712   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3676713   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3676714   +END;
MPRINT(SCORETABLES):   END;
3676715   +********************************;
MPRINT(SCORETABLES):   ********************************;
3676716   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3676717   +********************************;
MPRINT(SCORETABLES):   ********************************;
3676718   +drop
3676719   +S_MntCard_Games
3676720   +S_MntMagazines
3676721   +S_NumCatalogPurchases
3676722   +S_NumDealsPurchases
3676723   +S_NumWebPurchases
3676724   +S_RANGE_Frq
3676725   +S_RANGE_Recency
3676726   +S_RANGE_average_purchase
3676727   +S_RANGE_campaign_acceptance
3676728   +H11
3676729   +H12
3676730   +H13
3676731   +H14
3676732   +H15
3676733   +H16
3676734   +H17
3676735   +H18
3676736   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3676737   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676738   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3676739   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676740   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676741   +* Group: ^(cv_var =9);
MPRINT(SCORETABLES):   * Group: ^(cv_var =9);
3676742   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676743   +end;
MPRINT(SCORETABLES):   end;
3676744   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676745   +* Grp12: StartGroup;
MPRINT(SCORETABLES):   * Grp12: StartGroup;
3676746   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676747   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676748   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3676749   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676750   +if (cv_var =10)  then do;
MPRINT(SCORETABLES):   if (cv_var =10) then do;
3676751   +_XVAL_=10;
MPRINT(SCORETABLES):   _XVAL_=10;
3676752   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3676753   +* Neural4: NeuralNetwork;
MPRINT(SCORETABLES):   * Neural4: NeuralNetwork;
3676754   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3676755   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3676756   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3676757   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3676758   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3676759   +*** Begin Scoring Code for Neural;
MPRINT(SCORETABLES):   *** Begin Scoring Code for Neural;
3676760   +***********************************;
MPRINT(SCORETABLES):   ***********************************;
3676761   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCORETABLES):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
3676762   + _DM_BAD = 0;
MPRINT(SCORETABLES):   _DM_BAD = 0;
3676763   + _NOCL_ = .;
MPRINT(SCORETABLES):   _NOCL_ = .;
3676764   + _MAX_ = .;
MPRINT(SCORETABLES):   _MAX_ = .;
3676765   + _MAXP_ = .;
MPRINT(SCORETABLES):   _MAXP_ = .;
3676766   + _SUM_ = .;
MPRINT(SCORETABLES):   _SUM_ = .;
3676767   + _NTRIALS = .;
MPRINT(SCORETABLES):   _NTRIALS = .;
3676768   + _EPS =                1E-10;
MPRINT(SCORETABLES):   _EPS = 1E-10;
3676769   +LENGTH _WARN_ $4
3676770   +      F_DepVar  $ 12
3676771   +;
MPRINT(SCORETABLES):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
3676772   +      label S_MntCard_Games = 'Standard: MntCard_Games' ;
MPRINT(SCORETABLES):   label S_MntCard_Games = 'Standard: MntCard_Games' ;
3676773   +
3676774   +      label S_MntMagazines = 'Standard: MntMagazines' ;
MPRINT(SCORETABLES):   label S_MntMagazines = 'Standard: MntMagazines' ;
3676775   +
3676776   +      label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
MPRINT(SCORETABLES):   label S_NumCatalogPurchases = 'Standard: NumCatalogPurchases' ;
3676777   +
3676778   +      label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
MPRINT(SCORETABLES):   label S_NumDealsPurchases = 'Standard: NumDealsPurchases' ;
3676779   +
3676780   +      label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
MPRINT(SCORETABLES):   label S_NumWebPurchases = 'Standard: NumWebPurchases' ;
3676781   +
3676782   +      label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
MPRINT(SCORETABLES):   label S_RANGE_Frq = 'Standard: RANGE_Frq' ;
3676783   +
3676784   +      label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
MPRINT(SCORETABLES):   label S_RANGE_Recency = 'Standard: RANGE_Recency' ;
3676785   +
3676786   +      label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
MPRINT(SCORETABLES):   label S_RANGE_average_purchase = 'Standard: RANGE_average_purchase' ;
3676787   +
3676788   +      label S_RANGE_campaign_acceptance =
3676789   +'Standard: RANGE_campaign_acceptance' ;
MPRINT(SCORETABLES):   label S_RANGE_campaign_acceptance = 'Standard:
RANGE_campaign_acceptance' ;
3676790   +
3676791   +      label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
MPRINT(SCORETABLES):   label Marital_StatusDivorced = 'Dummy: Marital_Status=Divorced' ;
3676792   +
3676793   +      label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
MPRINT(SCORETABLES):   label Marital_StatusMarried = 'Dummy: Marital_Status=Married' ;
3676794   +
3676795   +      label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
MPRINT(SCORETABLES):   label Marital_StatusSingle = 'Dummy: Marital_Status=Single' ;
3676796   +
3676797   +      label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
MPRINT(SCORETABLES):   label Marital_StatusTogether = 'Dummy: Marital_Status=Together' ;
3676798   +
3676799   +      label H11 = 'Hidden: H1=1' ;
MPRINT(SCORETABLES):   label H11 = 'Hidden: H1=1' ;
3676800   +
3676801   +      label H12 = 'Hidden: H1=2' ;
MPRINT(SCORETABLES):   label H12 = 'Hidden: H1=2' ;
3676802   +
3676803   +      label H13 = 'Hidden: H1=3' ;
MPRINT(SCORETABLES):   label H13 = 'Hidden: H1=3' ;
3676804   +
3676805   +      label H14 = 'Hidden: H1=4' ;
MPRINT(SCORETABLES):   label H14 = 'Hidden: H1=4' ;
3676806   +
3676807   +      label H15 = 'Hidden: H1=5' ;
MPRINT(SCORETABLES):   label H15 = 'Hidden: H1=5' ;
3676808   +
3676809   +      label H16 = 'Hidden: H1=6' ;
MPRINT(SCORETABLES):   label H16 = 'Hidden: H1=6' ;
3676810   +
3676811   +      label H17 = 'Hidden: H1=7' ;
MPRINT(SCORETABLES):   label H17 = 'Hidden: H1=7' ;
3676812   +
3676813   +      label H18 = 'Hidden: H1=8' ;
MPRINT(SCORETABLES):   label H18 = 'Hidden: H1=8' ;
3676814   +
3676815   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(SCORETABLES):   label I_DepVar = 'Into: DepVar' ;
3676816   +
3676817   +      label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3676818   +
3676819   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(SCORETABLES):   label U_DepVar = 'Unnormalized Into: DepVar' ;
3676820   +
3676821   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(SCORETABLES):   label P_DepVar1 = 'Predicted: DepVar=1' ;
3676822   +
3676823   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(SCORETABLES):   label R_DepVar1 = 'Residual: DepVar=1' ;
3676824   +
3676825   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(SCORETABLES):   label P_DepVar0 = 'Predicted: DepVar=0' ;
3676826   +
3676827   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(SCORETABLES):   label R_DepVar0 = 'Residual: DepVar=0' ;
3676828   +
3676829   +      label  _WARN_ = "Warnings";
MPRINT(SCORETABLES):   label _WARN_ = "Warnings";
3676830   +
3676831   +*** Generate dummy variables for Marital_Status ;
MPRINT(SCORETABLES):   *** Generate dummy variables for Marital_Status ;
3676832   +drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
3676833   +        Marital_StatusTogether ;
MPRINT(SCORETABLES):   drop Marital_StatusDivorced Marital_StatusMarried Marital_StatusSingle
Marital_StatusTogether ;
3676834   +*** encoding is sparse, initialize to zero;
MPRINT(SCORETABLES):   *** encoding is sparse, initialize to zero;
3676835   +Marital_StatusDivorced = 0;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 0;
3676836   +Marital_StatusMarried = 0;
MPRINT(SCORETABLES):   Marital_StatusMarried = 0;
3676837   +Marital_StatusSingle = 0;
MPRINT(SCORETABLES):   Marital_StatusSingle = 0;
3676838   +Marital_StatusTogether = 0;
MPRINT(SCORETABLES):   Marital_StatusTogether = 0;
3676839   +if missing( Marital_Status ) then do;
MPRINT(SCORETABLES):   if missing( Marital_Status ) then do;
3676840   +   Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3676841   +   Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3676842   +   Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3676843   +   Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3676844   +   substr(_warn_,1,1) = 'M';
MPRINT(SCORETABLES):   substr(_warn_,1,1) = 'M';
3676845   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676846   +end;
MPRINT(SCORETABLES):   end;
3676847   +else do;
MPRINT(SCORETABLES):   else do;
3676848   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(SCORETABLES):   length _dm8 $ 8;
MPRINT(SCORETABLES):   drop _dm8 ;
3676849   +   _dm8 = put( Marital_Status , $8. );
MPRINT(SCORETABLES):   _dm8 = put( Marital_Status , $8. );
3676850   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3676851   +   _dm_find = 0; drop _dm_find;
MPRINT(SCORETABLES):   _dm_find = 0;
MPRINT(SCORETABLES):   drop _dm_find;
3676852   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'SINGLE' then do;
3676853   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 <= 'MARRIED' then do;
3676854   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'DIVORCED' then do;
3676855   +            Marital_StatusDivorced = 1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = 1;
3676856   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676857   +         end;
MPRINT(SCORETABLES):   end;
3676858   +         else do;
MPRINT(SCORETABLES):   else do;
3676859   +            if _dm8 = 'MARRIED'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'MARRIED' then do;
3676860   +               Marital_StatusMarried = 1;
MPRINT(SCORETABLES):   Marital_StatusMarried = 1;
3676861   +               _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676862   +            end;
MPRINT(SCORETABLES):   end;
3676863   +         end;
MPRINT(SCORETABLES):   end;
3676864   +      end;
MPRINT(SCORETABLES):   end;
3676865   +      else do;
MPRINT(SCORETABLES):   else do;
3676866   +         if _dm8 = 'SINGLE'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'SINGLE' then do;
3676867   +            Marital_StatusSingle = 1;
MPRINT(SCORETABLES):   Marital_StatusSingle = 1;
3676868   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676869   +         end;
MPRINT(SCORETABLES):   end;
3676870   +      end;
MPRINT(SCORETABLES):   end;
3676871   +   end;
MPRINT(SCORETABLES):   end;
3676872   +   else do;
MPRINT(SCORETABLES):   else do;
3676873   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'TOGETHER' then do;
3676874   +         Marital_StatusTogether = 1;
MPRINT(SCORETABLES):   Marital_StatusTogether = 1;
3676875   +         _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676876   +      end;
MPRINT(SCORETABLES):   end;
3676877   +      else do;
MPRINT(SCORETABLES):   else do;
3676878   +         if _dm8 = 'WIDOW'  then do;
MPRINT(SCORETABLES):   if _dm8 = 'WIDOW' then do;
3676879   +            Marital_StatusDivorced = -1;
MPRINT(SCORETABLES):   Marital_StatusDivorced = -1;
3676880   +            Marital_StatusMarried = -1;
MPRINT(SCORETABLES):   Marital_StatusMarried = -1;
3676881   +            Marital_StatusSingle = -1;
MPRINT(SCORETABLES):   Marital_StatusSingle = -1;
3676882   +            Marital_StatusTogether = -1;
MPRINT(SCORETABLES):   Marital_StatusTogether = -1;
3676883   +            _dm_find = 1;
MPRINT(SCORETABLES):   _dm_find = 1;
3676884   +         end;
MPRINT(SCORETABLES):   end;
3676885   +      end;
MPRINT(SCORETABLES):   end;
3676886   +   end;
MPRINT(SCORETABLES):   end;
3676887   +   if not _dm_find then do;
MPRINT(SCORETABLES):   if not _dm_find then do;
3676888   +      Marital_StatusDivorced = .;
MPRINT(SCORETABLES):   Marital_StatusDivorced = .;
3676889   +      Marital_StatusMarried = .;
MPRINT(SCORETABLES):   Marital_StatusMarried = .;
3676890   +      Marital_StatusSingle = .;
MPRINT(SCORETABLES):   Marital_StatusSingle = .;
3676891   +      Marital_StatusTogether = .;
MPRINT(SCORETABLES):   Marital_StatusTogether = .;
3676892   +      substr(_warn_,2,1) = 'U';
MPRINT(SCORETABLES):   substr(_warn_,2,1) = 'U';
3676893   +      _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676894   +   end;
MPRINT(SCORETABLES):   end;
3676895   +end;
MPRINT(SCORETABLES):   end;
3676896   +
3676897   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676898   +*** Checking missing input Interval
3676899   +*** *************************;
MPRINT(SCORETABLES):   *** Checking missing input Interval *** *************************;
3676900   +
3676901   +IF NMISS(
3676902   +   MntCard_Games ,
3676903   +   MntMagazines ,
3676904   +   NumCatalogPurchases ,
3676905   +   NumDealsPurchases ,
3676906   +   NumWebPurchases ,
3676907   +   RANGE_Frq ,
3676908   +   RANGE_Recency ,
3676909   +   RANGE_average_purchase ,
3676910   +   RANGE_campaign_acceptance   ) THEN DO;
MPRINT(SCORETABLES):   IF NMISS( MntCard_Games , MntMagazines , NumCatalogPurchases ,
NumDealsPurchases , NumWebPurchases , RANGE_Frq , RANGE_Recency , RANGE_average_purchase ,
RANGE_campaign_acceptance ) THEN DO;
3676911   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCORETABLES):   SUBSTR(_WARN_, 1, 1) = 'M';
3676912   +
3676913   +   _DM_BAD = 1;
MPRINT(SCORETABLES):   _DM_BAD = 1;
3676914   +END;
MPRINT(SCORETABLES):   END;
3676915   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676916   +*** Writing the Node intvl ;
MPRINT(SCORETABLES):   *** Writing the Node intvl ;
3676917   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676918   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676919   +   S_MntCard_Games  =     -2.3079998164948 +     6.62914407452749 *
3676920   +        MntCard_Games ;
MPRINT(SCORETABLES):   S_MntCard_Games = -2.3079998164948 + 6.62914407452749 * MntCard_Games ;
3676921   +   S_MntMagazines  =    -0.83429946689635 +     17.2207552565663 *
3676922   +        MntMagazines ;
MPRINT(SCORETABLES):   S_MntMagazines = -0.83429946689635 + 17.2207552565663 * MntMagazines ;
3676923   +   S_NumCatalogPurchases  =    -3.14232988556526 +     13.6048658777273 *
3676924   +        NumCatalogPurchases ;
MPRINT(SCORETABLES):   S_NumCatalogPurchases = -3.14232988556526 + 13.6048658777273 *
NumCatalogPurchases ;
3676925   +   S_NumDealsPurchases  =     -1.4171090178645 +      11.303404896878 *
3676926   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   S_NumDealsPurchases = -1.4171090178645 + 11.303404896878 *
NumDealsPurchases ;
3676927   +   S_NumWebPurchases  =    -5.23336280802532 +     12.2576709113779 *
3676928   +        NumWebPurchases ;
MPRINT(SCORETABLES):   S_NumWebPurchases = -5.23336280802532 + 12.2576709113779 *
NumWebPurchases ;
3676929   +   S_RANGE_Frq  =    -1.37286527474303 +     4.24322472860292 * RANGE_Frq ;
MPRINT(SCORETABLES):   S_RANGE_Frq = -1.37286527474303 + 4.24322472860292 * RANGE_Frq ;
3676930   +   S_RANGE_Recency  =    -1.63967132284055 +     3.33224872286324 *
3676931   +        RANGE_Recency ;
MPRINT(SCORETABLES):   S_RANGE_Recency = -1.63967132284055 + 3.33224872286324 * RANGE_Recency ;
3676932   +   S_RANGE_average_purchase  =    -1.03800216530034 +     5.12896816358573 *
3676933   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   S_RANGE_average_purchase = -1.03800216530034 + 5.12896816358573 *
RANGE_average_purchase ;
3676934   +   S_RANGE_campaign_acceptance
3676935   +          =     -0.4775682943613 +     5.78927017197935 *
3676936   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   S_RANGE_campaign_acceptance = -0.4775682943613 + 5.78927017197935 *
RANGE_campaign_acceptance ;
3676937   +END;
MPRINT(SCORETABLES):   END;
3676938   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3676939   +   IF MISSING( MntCard_Games ) THEN S_MntCard_Games  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntCard_Games ) THEN S_MntCard_Games = . ;
3676940   +   ELSE S_MntCard_Games  =     -2.3079998164948 +     6.62914407452749 *
3676941   +        MntCard_Games ;
MPRINT(SCORETABLES):   ELSE S_MntCard_Games = -2.3079998164948 + 6.62914407452749 *
MntCard_Games ;
3676942   +   IF MISSING( MntMagazines ) THEN S_MntMagazines  = . ;
MPRINT(SCORETABLES):   IF MISSING( MntMagazines ) THEN S_MntMagazines = . ;
3676943   +   ELSE S_MntMagazines  =    -0.83429946689635 +     17.2207552565663 *
3676944   +        MntMagazines ;
MPRINT(SCORETABLES):   ELSE S_MntMagazines = -0.83429946689635 + 17.2207552565663 *
MntMagazines ;
3676945   +   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumCatalogPurchases ) THEN S_NumCatalogPurchases = . ;
3676946   +   ELSE S_NumCatalogPurchases
3676947   +          =    -3.14232988556526 +     13.6048658777273 * NumCatalogPurchases
3676948   +         ;
MPRINT(SCORETABLES):   ELSE S_NumCatalogPurchases = -3.14232988556526 + 13.6048658777273 *
NumCatalogPurchases ;
3676949   +   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumDealsPurchases ) THEN S_NumDealsPurchases = . ;
3676950   +   ELSE S_NumDealsPurchases  =     -1.4171090178645 +      11.303404896878 *
3676951   +        NumDealsPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumDealsPurchases = -1.4171090178645 + 11.303404896878 *
NumDealsPurchases ;
3676952   +   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases  = . ;
MPRINT(SCORETABLES):   IF MISSING( NumWebPurchases ) THEN S_NumWebPurchases = . ;
3676953   +   ELSE S_NumWebPurchases  =    -5.23336280802532 +     12.2576709113779 *
3676954   +        NumWebPurchases ;
MPRINT(SCORETABLES):   ELSE S_NumWebPurchases = -5.23336280802532 + 12.2576709113779 *
NumWebPurchases ;
3676955   +   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Frq ) THEN S_RANGE_Frq = . ;
3676956   +   ELSE S_RANGE_Frq  =    -1.37286527474303 +     4.24322472860292 * RANGE_Frq
3676957   +         ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Frq = -1.37286527474303 + 4.24322472860292 * RANGE_Frq ;
3676958   +   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_Recency ) THEN S_RANGE_Recency = . ;
3676959   +   ELSE S_RANGE_Recency  =    -1.63967132284055 +     3.33224872286324 *
3676960   +        RANGE_Recency ;
MPRINT(SCORETABLES):   ELSE S_RANGE_Recency = -1.63967132284055 + 3.33224872286324 *
RANGE_Recency ;
3676961   +   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase  = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_average_purchase ) THEN S_RANGE_average_purchase = . ;
3676962   +   ELSE S_RANGE_average_purchase
3676963   +          =    -1.03800216530034 +     5.12896816358573 *
3676964   +        RANGE_average_purchase ;
MPRINT(SCORETABLES):   ELSE S_RANGE_average_purchase = -1.03800216530034 + 5.12896816358573 *
RANGE_average_purchase ;
3676965   +   IF MISSING( RANGE_campaign_acceptance ) THEN S_RANGE_campaign_acceptance
3676966   +          = . ;
MPRINT(SCORETABLES):   IF MISSING( RANGE_campaign_acceptance ) THEN
S_RANGE_campaign_acceptance = . ;
3676967   +   ELSE S_RANGE_campaign_acceptance
3676968   +          =     -0.4775682943613 +     5.78927017197935 *
3676969   +        RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   ELSE S_RANGE_campaign_acceptance = -0.4775682943613 + 5.78927017197935
* RANGE_campaign_acceptance ;
3676970   +END;
MPRINT(SCORETABLES):   END;
3676971   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676972   +*** Writing the Node nom ;
MPRINT(SCORETABLES):   *** Writing the Node nom ;
3676973   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676974   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676975   +*** Writing the Node H1 ;
MPRINT(SCORETABLES):   *** Writing the Node H1 ;
3676976   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3676977   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3676978   +   H11  =     -0.0985056670514 * S_MntCard_Games  +     1.14817271193827 *
3676979   +        S_MntMagazines  +    -1.88428033181885 * S_NumCatalogPurchases
3676980   +          +      0.4201035012382 * S_NumDealsPurchases
3676981   +          +    -2.84759599821732 * S_NumWebPurchases
3676982   +          +     4.56274330717806 * S_RANGE_Frq  +    -4.07235286076192 *
3676983   +        S_RANGE_Recency  +     0.16692881647416 * S_RANGE_average_purchase
3676984   +          +    -0.27487936048345 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H11 = -0.0985056670514 * S_MntCard_Games + 1.14817271193827 *
S_MntMagazines + -1.88428033181885 * S_NumCatalogPurchases + 0.4201035012382 *
S_NumDealsPurchases + -2.84759599821732 * S_NumWebPurchases + 4.56274330717806 * S_RANGE_Frq +
-4.07235286076192 * S_RANGE_Recency + 0.16692881647416 * S_RANGE_average_purchase +
-0.27487936048345 * S_RANGE_campaign_acceptance ;
3676985   +   H12  =     1.70702816858751 * S_MntCard_Games  +    -0.82991010087518 *
3676986   +        S_MntMagazines  +     2.62711913675079 * S_NumCatalogPurchases
3676987   +          +     0.48471184950155 * S_NumDealsPurchases
3676988   +          +     1.01490994417582 * S_NumWebPurchases
3676989   +          +    -1.37904435058422 * S_RANGE_Frq  +    -3.19509495389618 *
3676990   +        S_RANGE_Recency  +     5.68278398558231 * S_RANGE_average_purchase
3676991   +          +     1.14225452283837 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H12 = 1.70702816858751 * S_MntCard_Games + -0.82991010087518 *
S_MntMagazines + 2.62711913675079 * S_NumCatalogPurchases + 0.48471184950155 *
S_NumDealsPurchases + 1.01490994417582 * S_NumWebPurchases + -1.37904435058422 * S_RANGE_Frq +
-3.19509495389618 * S_RANGE_Recency + 5.68278398558231 * S_RANGE_average_purchase +
1.14225452283837 * S_RANGE_campaign_acceptance ;
3676992   +   H13  =     1.01185801092706 * S_MntCard_Games  +    -3.24898706480794 *
3676993   +        S_MntMagazines  +    -2.78539907724605 * S_NumCatalogPurchases
3676994   +          +     0.04469270373185 * S_NumDealsPurchases
3676995   +          +    -4.51585769147293 * S_NumWebPurchases
3676996   +          +     0.36854048706022 * S_RANGE_Frq  +    -1.46015279814225 *
3676997   +        S_RANGE_Recency  +     4.20017300779032 * S_RANGE_average_purchase
3676998   +          +    -0.71317303550721 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H13 = 1.01185801092706 * S_MntCard_Games + -3.24898706480794 *
S_MntMagazines + -2.78539907724605 * S_NumCatalogPurchases + 0.04469270373185 *
S_NumDealsPurchases + -4.51585769147293 * S_NumWebPurchases + 0.36854048706022 * S_RANGE_Frq +
-1.46015279814225 * S_RANGE_Recency + 4.20017300779032 * S_RANGE_average_purchase +
-0.71317303550721 * S_RANGE_campaign_acceptance ;
3676999   +   H14  =    -1.27927012059944 * S_MntCard_Games  +     1.63318220156388 *
3677000   +        S_MntMagazines  +     0.09251786034368 * S_NumCatalogPurchases
3677001   +          +     -1.7148144195101 * S_NumDealsPurchases
3677002   +          +    -3.15740898425088 * S_NumWebPurchases
3677003   +          +       2.331159698919 * S_RANGE_Frq  +     3.97632031511652 *
3677004   +        S_RANGE_Recency  +    -3.62419972081949 * S_RANGE_average_purchase
3677005   +          +    -3.76115828619713 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H14 = -1.27927012059944 * S_MntCard_Games + 1.63318220156388 *
S_MntMagazines + 0.09251786034368 * S_NumCatalogPurchases + -1.7148144195101 *
S_NumDealsPurchases + -3.15740898425088 * S_NumWebPurchases + 2.331159698919 * S_RANGE_Frq +
3.97632031511652 * S_RANGE_Recency + -3.62419972081949 * S_RANGE_average_purchase +
-3.76115828619713 * S_RANGE_campaign_acceptance ;
3677006   +   H15  =     2.86392511097473 * S_MntCard_Games  +     1.70718240178026 *
3677007   +        S_MntMagazines  +     0.19350635315017 * S_NumCatalogPurchases
3677008   +          +     0.88365209673452 * S_NumDealsPurchases
3677009   +          +    -0.29485200978577 * S_NumWebPurchases
3677010   +          +    -1.38661482729961 * S_RANGE_Frq  +     0.44047010643832 *
3677011   +        S_RANGE_Recency  +     0.90435572164264 * S_RANGE_average_purchase
3677012   +          +     4.13455531232834 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H15 = 2.86392511097473 * S_MntCard_Games + 1.70718240178026 *
S_MntMagazines + 0.19350635315017 * S_NumCatalogPurchases + 0.88365209673452 *
S_NumDealsPurchases + -0.29485200978577 * S_NumWebPurchases + -1.38661482729961 * S_RANGE_Frq
+ 0.44047010643832 * S_RANGE_Recency + 0.90435572164264 * S_RANGE_average_purchase +
4.13455531232834 * S_RANGE_campaign_acceptance ;
3677013   +   H16  =    -2.92136199562424 * S_MntCard_Games  +     1.17769686948741 *
3677014   +        S_MntMagazines  +    -1.71017570754182 * S_NumCatalogPurchases
3677015   +          +    -2.87755651043379 * S_NumDealsPurchases
3677016   +          +     -1.3972392656555 * S_NumWebPurchases
3677017   +          +    -0.50950089792778 * S_RANGE_Frq  +     4.06351852225563 *
3677018   +        S_RANGE_Recency  +    -0.11891394392592 * S_RANGE_average_purchase
3677019   +          +    -2.36332659005711 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H16 = -2.92136199562424 * S_MntCard_Games + 1.17769686948741 *
S_MntMagazines + -1.71017570754182 * S_NumCatalogPurchases + -2.87755651043379 *
S_NumDealsPurchases + -1.3972392656555 * S_NumWebPurchases + -0.50950089792778 * S_RANGE_Frq +
4.06351852225563 * S_RANGE_Recency + -0.11891394392592 * S_RANGE_average_purchase +
-2.36332659005711 * S_RANGE_campaign_acceptance ;
3677020   +   H17  =       1.919829952219 * S_MntCard_Games  +     0.40961480297544 *
3677021   +        S_MntMagazines  +      2.6026471145522 * S_NumCatalogPurchases
3677022   +          +    -3.21415369866508 * S_NumDealsPurchases
3677023   +          +      1.1529945209277 * S_NumWebPurchases
3677024   +          +      0.1426740909152 * S_RANGE_Frq  +    -2.12798683127045 *
3677025   +        S_RANGE_Recency  +     0.87114789883867 * S_RANGE_average_purchase
3677026   +          +     0.70765961201641 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H17 = 1.919829952219 * S_MntCard_Games + 0.40961480297544 *
S_MntMagazines + 2.6026471145522 * S_NumCatalogPurchases + -3.21415369866508 *
S_NumDealsPurchases + 1.1529945209277 * S_NumWebPurchases + 0.1426740909152 * S_RANGE_Frq +
-2.12798683127045 * S_RANGE_Recency + 0.87114789883867 * S_RANGE_average_purchase +
0.70765961201641 * S_RANGE_campaign_acceptance ;
3677027   +   H18  =    -1.47435058833296 * S_MntCard_Games  +     1.65215143651641 *
3677028   +        S_MntMagazines  +     1.05186415059259 * S_NumCatalogPurchases
3677029   +          +     1.49309632305588 * S_NumDealsPurchases
3677030   +          +    -2.02128318829916 * S_NumWebPurchases
3677031   +          +     2.12966434801007 * S_RANGE_Frq  +    -2.74317522495894 *
3677032   +        S_RANGE_Recency  +     1.70248960612764 * S_RANGE_average_purchase
3677033   +          +     0.49447901225777 * S_RANGE_campaign_acceptance ;
MPRINT(SCORETABLES):   H18 = -1.47435058833296 * S_MntCard_Games + 1.65215143651641 *
S_MntMagazines + 1.05186415059259 * S_NumCatalogPurchases + 1.49309632305588 *
S_NumDealsPurchases + -2.02128318829916 * S_NumWebPurchases + 2.12966434801007 * S_RANGE_Frq +
-2.74317522495894 * S_RANGE_Recency + 1.70248960612764 * S_RANGE_average_purchase +
0.49447901225777 * S_RANGE_campaign_acceptance ;
3677034   +   H11  = H11  +      0.9494936054746 * Marital_StatusDivorced
3677035   +          +    -1.19865921921931 * Marital_StatusMarried
3677036   +          +     0.63023803048582 * Marital_StatusSingle
3677037   +          +     1.04514697699149 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H11 = H11 + 0.9494936054746 * Marital_StatusDivorced +
-1.19865921921931 * Marital_StatusMarried + 0.63023803048582 * Marital_StatusSingle +
1.04514697699149 * Marital_StatusTogether ;
3677038   +   H12  = H12  +    -1.15821762734746 * Marital_StatusDivorced
3677039   +          +    -2.68008863804409 * Marital_StatusMarried
3677040   +          +    -0.97793224821393 * Marital_StatusSingle
3677041   +          +     0.70502403806275 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H12 = H12 + -1.15821762734746 * Marital_StatusDivorced +
-2.68008863804409 * Marital_StatusMarried + -0.97793224821393 * Marital_StatusSingle +
0.70502403806275 * Marital_StatusTogether ;
3677042   +   H13  = H13  +     1.44348931030209 * Marital_StatusDivorced
3677043   +          +    -1.17719616310135 * Marital_StatusMarried
3677044   +          +     2.42311759779355 * Marital_StatusSingle
3677045   +          +     1.64663416666983 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H13 = H13 + 1.44348931030209 * Marital_StatusDivorced +
-1.17719616310135 * Marital_StatusMarried + 2.42311759779355 * Marital_StatusSingle +
1.64663416666983 * Marital_StatusTogether ;
3677046   +   H14  = H14  +     1.17512477355876 * Marital_StatusDivorced
3677047   +          +    -2.18960718894585 * Marital_StatusMarried
3677048   +          +     -6.0603685795294 * Marital_StatusSingle
3677049   +          +     3.69948168979241 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H14 = H14 + 1.17512477355876 * Marital_StatusDivorced +
-2.18960718894585 * Marital_StatusMarried + -6.0603685795294 * Marital_StatusSingle +
3.69948168979241 * Marital_StatusTogether ;
3677050   +   H15  = H15  +     1.13704070805914 * Marital_StatusDivorced
3677051   +          +     3.73889241061818 * Marital_StatusMarried
3677052   +          +    -4.50932158718513 * Marital_StatusSingle
3677053   +          +    -1.03149604709355 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H15 = H15 + 1.13704070805914 * Marital_StatusDivorced +
3.73889241061818 * Marital_StatusMarried + -4.50932158718513 * Marital_StatusSingle +
-1.03149604709355 * Marital_StatusTogether ;
3677054   +   H16  = H16  +    -0.15782820023753 * Marital_StatusDivorced
3677055   +          +     1.65164406433362 * Marital_StatusMarried
3677056   +          +    -0.28441112187606 * Marital_StatusSingle
3677057   +          +     0.85306787881509 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H16 = H16 + -0.15782820023753 * Marital_StatusDivorced +
1.65164406433362 * Marital_StatusMarried + -0.28441112187606 * Marital_StatusSingle +
0.85306787881509 * Marital_StatusTogether ;
3677058   +   H17  = H17  +     4.26532981701255 * Marital_StatusDivorced
3677059   +          +    -4.75176491742279 * Marital_StatusMarried
3677060   +          +     4.73186355261237 * Marital_StatusSingle
3677061   +          +    -3.12756468456074 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H17 = H17 + 4.26532981701255 * Marital_StatusDivorced +
-4.75176491742279 * Marital_StatusMarried + 4.73186355261237 * Marital_StatusSingle +
-3.12756468456074 * Marital_StatusTogether ;
3677062   +   H18  = H18  +     2.46719513823568 * Marital_StatusDivorced
3677063   +          +     -0.3915579464233 * Marital_StatusMarried
3677064   +          +    -2.10231853279411 * Marital_StatusSingle
3677065   +          +    -0.94444829218528 * Marital_StatusTogether ;
MPRINT(SCORETABLES):   H18 = H18 + 2.46719513823568 * Marital_StatusDivorced +
-0.3915579464233 * Marital_StatusMarried + -2.10231853279411 * Marital_StatusSingle +
-0.94444829218528 * Marital_StatusTogether ;
3677066   +   H11  =     2.93327296299726 + H11 ;
MPRINT(SCORETABLES):   H11 = 2.93327296299726 + H11 ;
3677067   +   H12  =      2.1329561766939 + H12 ;
MPRINT(SCORETABLES):   H12 = 2.1329561766939 + H12 ;
3677068   +   H13  =     0.98521528874651 + H13 ;
MPRINT(SCORETABLES):   H13 = 0.98521528874651 + H13 ;
3677069   +   H14  =     1.15837019712432 + H14 ;
MPRINT(SCORETABLES):   H14 = 1.15837019712432 + H14 ;
3677070   +   H15  =    -4.09256580694333 + H15 ;
MPRINT(SCORETABLES):   H15 = -4.09256580694333 + H15 ;
3677071   +   H16  =      5.4936837250692 + H16 ;
MPRINT(SCORETABLES):   H16 = 5.4936837250692 + H16 ;
3677072   +   H17  =    -10.3001663638833 + H17 ;
MPRINT(SCORETABLES):   H17 = -10.3001663638833 + H17 ;
3677073   +   H18  =    -9.99687185957031 + H18 ;
MPRINT(SCORETABLES):   H18 = -9.99687185957031 + H18 ;
3677074   +   H11  = TANH(H11 );
MPRINT(SCORETABLES):   H11 = TANH(H11 );
3677075   +   H12  = TANH(H12 );
MPRINT(SCORETABLES):   H12 = TANH(H12 );
3677076   +   H13  = TANH(H13 );
MPRINT(SCORETABLES):   H13 = TANH(H13 );
3677077   +   H14  = TANH(H14 );
MPRINT(SCORETABLES):   H14 = TANH(H14 );
3677078   +   H15  = TANH(H15 );
MPRINT(SCORETABLES):   H15 = TANH(H15 );
3677079   +   H16  = TANH(H16 );
MPRINT(SCORETABLES):   H16 = TANH(H16 );
3677080   +   H17  = TANH(H17 );
MPRINT(SCORETABLES):   H17 = TANH(H17 );
3677081   +   H18  = TANH(H18 );
MPRINT(SCORETABLES):   H18 = TANH(H18 );
3677082   +END;
MPRINT(SCORETABLES):   END;
3677083   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3677084   +   H11  = .;
MPRINT(SCORETABLES):   H11 = .;
3677085   +   H12  = .;
MPRINT(SCORETABLES):   H12 = .;
3677086   +   H13  = .;
MPRINT(SCORETABLES):   H13 = .;
3677087   +   H14  = .;
MPRINT(SCORETABLES):   H14 = .;
3677088   +   H15  = .;
MPRINT(SCORETABLES):   H15 = .;
3677089   +   H16  = .;
MPRINT(SCORETABLES):   H16 = .;
3677090   +   H17  = .;
MPRINT(SCORETABLES):   H17 = .;
3677091   +   H18  = .;
MPRINT(SCORETABLES):   H18 = .;
3677092   +END;
MPRINT(SCORETABLES):   END;
3677093   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3677094   +*** Writing the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Node DepVar ;
3677095   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3677096   +
3677097   +*** Generate dummy variables for DepVar ;
MPRINT(SCORETABLES):   *** Generate dummy variables for DepVar ;
3677098   +drop DepVar1 DepVar0 ;
MPRINT(SCORETABLES):   drop DepVar1 DepVar0 ;
3677099   +label F_DepVar = 'From: DepVar' ;
MPRINT(SCORETABLES):   label F_DepVar = 'From: DepVar' ;
3677100   +length F_DepVar $ 12;
MPRINT(SCORETABLES):   length F_DepVar $ 12;
3677101   +F_DepVar = put( DepVar , BEST. );
MPRINT(SCORETABLES):   F_DepVar = put( DepVar , BEST. );
3677102   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3677103   +if missing( DepVar ) then do;
MPRINT(SCORETABLES):   if missing( DepVar ) then do;
3677104   +   DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3677105   +   DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3677106   +end;
MPRINT(SCORETABLES):   end;
3677107   +else do;
MPRINT(SCORETABLES):   else do;
3677108   +   if F_DepVar = '0'  then do;
MPRINT(SCORETABLES):   if F_DepVar = '0' then do;
3677109   +      DepVar1 = 0;
MPRINT(SCORETABLES):   DepVar1 = 0;
3677110   +      DepVar0 = 1;
MPRINT(SCORETABLES):   DepVar0 = 1;
3677111   +   end;
MPRINT(SCORETABLES):   end;
3677112   +   else if F_DepVar = '1'  then do;
MPRINT(SCORETABLES):   else if F_DepVar = '1' then do;
3677113   +      DepVar1 = 1;
MPRINT(SCORETABLES):   DepVar1 = 1;
3677114   +      DepVar0 = 0;
MPRINT(SCORETABLES):   DepVar0 = 0;
3677115   +   end;
MPRINT(SCORETABLES):   end;
3677116   +   else do;
MPRINT(SCORETABLES):   else do;
3677117   +      DepVar1 = .;
MPRINT(SCORETABLES):   DepVar1 = .;
3677118   +      DepVar0 = .;
MPRINT(SCORETABLES):   DepVar0 = .;
3677119   +   end;
MPRINT(SCORETABLES):   end;
3677120   +end;
MPRINT(SCORETABLES):   end;
3677121   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 0 THEN DO;
3677122   +   P_DepVar1  =     4.64491287207524 * H11  +     5.28219592941748 * H12
3677123   +          +    -3.45448394973418 * H13  +    -7.93142244715969 * H14
3677124   +          +     3.32053013742208 * H15  +    -6.09896245960826 * H16
3677125   +          +     6.28365392663441 * H17  +     11.0716063134576 * H18 ;
MPRINT(SCORETABLES):   P_DepVar1 = 4.64491287207524 * H11 + 5.28219592941748 * H12 +
-3.45448394973418 * H13 + -7.93142244715969 * H14 + 3.32053013742208 * H15 + -6.09896245960826
* H16 + 6.28365392663441 * H17 + 11.0716063134576 * H18 ;
3677126   +   P_DepVar1  =    -0.17395538341319 + P_DepVar1 ;
MPRINT(SCORETABLES):   P_DepVar1 = -0.17395538341319 + P_DepVar1 ;
3677127   +   P_DepVar0  = 0;
MPRINT(SCORETABLES):   P_DepVar0 = 0;
3677128   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(SCORETABLES):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
3677129   +   _SUM_ = 0.;
MPRINT(SCORETABLES):   _SUM_ = 0.;
3677130   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
3677131   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar1 ;
3677132   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(SCORETABLES):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
3677133   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(SCORETABLES):   _SUM_ = _SUM_ + P_DepVar0 ;
3677134   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar1 = P_DepVar1 / _SUM_;
3677135   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(SCORETABLES):   P_DepVar0 = P_DepVar0 / _SUM_;
3677136   +END;
MPRINT(SCORETABLES):   END;
3677137   +ELSE DO;
MPRINT(SCORETABLES):   ELSE DO;
3677138   +   P_DepVar1  = .;
MPRINT(SCORETABLES):   P_DepVar1 = .;
3677139   +   P_DepVar0  = .;
MPRINT(SCORETABLES):   P_DepVar0 = .;
3677140   +END;
MPRINT(SCORETABLES):   END;
3677141   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCORETABLES):   IF _DM_BAD EQ 1 THEN DO;
3677142   +   P_DepVar1  =     0.13675998164295;
MPRINT(SCORETABLES):   P_DepVar1 = 0.13675998164295;
3677143   +   P_DepVar0  =     0.86324001835704;
MPRINT(SCORETABLES):   P_DepVar0 = 0.86324001835704;
3677144   +END;
MPRINT(SCORETABLES):   END;
3677145   +*** *****************************;
MPRINT(SCORETABLES):   *** *****************************;
3677146   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(SCORETABLES):   *** Writing the Residuals of the Node DepVar ;
3677147   +*** ******************************;
MPRINT(SCORETABLES):   *** ******************************;
3677148   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
3677149   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(SCORETABLES):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
3677150   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(SCORETABLES):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
3677151   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(SCORETABLES):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
3677152   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3677153   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(SCORETABLES):   *** Writing the I_DepVar AND U_DepVar ;
3677154   +*** *************************;
MPRINT(SCORETABLES):   *** *************************;
3677155   +_MAXP_ = P_DepVar1 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar1 ;
3677156   +I_DepVar  = "1           " ;
MPRINT(SCORETABLES):   I_DepVar = "1           " ;
3677157   +U_DepVar  =                    1;
MPRINT(SCORETABLES):   U_DepVar = 1;
3677158   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(SCORETABLES):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
3677159   +   _MAXP_ = P_DepVar0 ;
MPRINT(SCORETABLES):   _MAXP_ = P_DepVar0 ;
3677160   +   I_DepVar  = "0           " ;
MPRINT(SCORETABLES):   I_DepVar = "0           " ;
3677161   +   U_DepVar  =                    0;
MPRINT(SCORETABLES):   U_DepVar = 0;
3677162   +END;
MPRINT(SCORETABLES):   END;
3677163   +********************************;
MPRINT(SCORETABLES):   ********************************;
3677164   +*** End Scoring Code for Neural;
MPRINT(SCORETABLES):   *** End Scoring Code for Neural;
3677165   +********************************;
MPRINT(SCORETABLES):   ********************************;
3677166   +drop
3677167   +S_MntCard_Games
3677168   +S_MntMagazines
3677169   +S_NumCatalogPurchases
3677170   +S_NumDealsPurchases
3677171   +S_NumWebPurchases
3677172   +S_RANGE_Frq
3677173   +S_RANGE_Recency
3677174   +S_RANGE_average_purchase
3677175   +S_RANGE_campaign_acceptance
3677176   +H11
3677177   +H12
3677178   +H13
3677179   +H14
3677180   +H15
3677181   +H16
3677182   +H17
3677183   +H18
3677184   +;
MPRINT(SCORETABLES):   drop S_MntCard_Games S_MntMagazines S_NumCatalogPurchases
S_NumDealsPurchases S_NumWebPurchases S_RANGE_Frq S_RANGE_Recency S_RANGE_average_purchase
S_RANGE_campaign_acceptance H11 H12 H13 H14 H15 H16 H17 H18 ;
3677185   +*------------------------------------------------------------*;
MPRINT(SCORETABLES):   *------------------------------------------------------------*;
3677186   +* EndGrp12: EndGroup;
MPRINT(SCORETABLES):   * EndGrp12: EndGroup;
3677187   +* User: misil;
MPRINT(SCORETABLES):   * User: misil;
3677188   +* Date: 02JUN18: 16:25;
MPRINT(SCORETABLES):   * Date: 02JUN18: 16:25;
3677189   +* Group: ^(cv_var =10);
MPRINT(SCORETABLES):   * Group: ^(cv_var =10);
3677190   +*------------------------------------------------------------* ;
MPRINT(SCORETABLES):   *------------------------------------------------------------* ;
3677191   +end;
MPRINT(SCORETABLES):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORETABLES):   run;
 
NOTE: DATA STEP view saved on file EMWS1.ENDGRP12_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
 
MPRINT(POSTLOOP):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End POSTLOOP: EndGrp12;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3677192    *------------------------------------------------------------*;
3677193    * End POSTLOOP: EndGrp12;
3677194    *------------------------------------------------------------*;
3677195
 
NOTE: There were 10 observations read from the data set EMWS1.GRP12_EMLOOPINFO.
NOTE: The data set EMWS1.ENDGRP12_EMLOOPINFO has 10 observations and 3 variables.
3677196    proc print data=EMWS1.EndGrp12_EMLOOPINFO noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.EndGrp12_EMLOOPINFO noobs label;
3677197    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rptgroupsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Group Summary";
MPRINT(EM_DIAGRAM):   run;
3677198    run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP12_EMLOOPINFO.
NOTE: The PROCEDURE PRINT printed page 2412.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3677199    title9;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.EndGrp12_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_DepVar) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
3677223    data EMWS1.EndGrp12_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMOUTFIT;
3677224    set WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set WORK.OUTFITDATA;
3677225    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.ENDGRP12_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3677226    data EMWS1.EndGrp12_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMOUTFIT;
3677227    set EMWS1.EndGrp12_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMOUTFIT;
3677228    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3677229    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3677229  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3677230    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3677231    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP12_EMOUTFIT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3677232    proc sort data=EMWS1.EndGrp12_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp12_EMREPORTFIT nothreads;
3677233    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3677234    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP12_EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP12_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3677235    %let _EMwarndup = 0;
3677236    %let _EMtargetdup =;
3677237    %let _EMASEtargetdup =;
3677238    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3677239    set EMWS1.EndGrp12_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMOUTFIT;
3677240    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3677241    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3677242    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3677243    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3677244    end;
MPRINT(EM_DIAGRAM):   end;
3677245    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3677246    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3677247    * EndGrp12: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * EndGrp12: Computing metadata for TRAIN data;
3677248    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.ENDGRP12_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.EndGrp12_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.EndGrp12_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.EndGrp12_TRAIN out=WORK.M0HD8NHG noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0HD8NHG;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0HD8NHG(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0HD8NHG;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0HD8NHG;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M33U5WLN NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3FMHL8W(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID',
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   set WORK.M33U5WLN;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural4_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "EndGrp12";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "EndGrp12";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "EndGrp12";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp12: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3677599    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3677600    set EMWS1.EndGrp12_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMINFO;
3677601    where DATA='EndGrp12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='EndGrp12' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
3677602    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMINFO.
      WHERE (DATA='EndGrp12') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3677603    data EMWS1.EndGrp12_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMINFO;
3677604    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3677605    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3677606    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.ENDGRP12_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
3677610    run;
3677611    data EMWS1.EndGrp12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMINFO;
3677612    set EMWS1.EndGrp12_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMINFO WORK.MODELTEMP_INFO;
3677613    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.ENDGRP12_EMINFO.
NOTE: There were 1 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.ENDGRP12_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3677614    proc sort data = EMWS1.EndGrp12_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.EndGrp12_EMINFO NOTHREADS;
3677615    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3677616    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP12_EMINFO.
NOTE: The data set EMWS1.ENDGRP12_EMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3677617    proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3677618    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3677619    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3677620    proc sort data = EMWS1.EndGrp12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.EndGrp12_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3677621    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3677622    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP12_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3677623    data EMWS1.EndGrp12_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMINFO;
3677624    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3677625    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3677626    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.ENDGRP12_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3677627    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3677628    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3677629    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3677630    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS1.ENDGRP12_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp12: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EndGrp12: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WarGameStore_sasProject';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'WarGame classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * EndGrp12: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.DepVar;
MPRINT(EM_DECDATA):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   DepVar="1";
MPRINT(EM_DECDATA):   COUNT=334;
MPRINT(EM_DECDATA):   DATAPRIOR=0.13673708920187;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.13705375461633;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   DepVar="0";
MPRINT(EM_DECDATA):   COUNT=2103;
MPRINT(EM_DECDATA):   DATAPRIOR=0.86326291079812;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.86294624538366;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3678092    %let EMEXCEPTIONSTRING=;
3678093    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3678094    * POSTLOOPREPORT: EndGrp12;
MPRINT(EM_DIAGRAM):   * POSTLOOPREPORT: EndGrp12;
3678095    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3678096    %let EM_ACTION = POSTLOOPREPORT;
3678097    %let syscc = 0;
3678098    %macro main;
3678099       %if %upcase(&EM_ACTION) = TRAIN %then %do;
3678100
3678101           filename temp catalog 'sashelp.emutil.endgp_train.source';
3678102           %include temp;
3678103           filename temp;
3678104
3678105           %train;
3678106
3678107       %end;
3678108       %else
3678109          %if %upcase(&EM_ACTION) = SCORE %then %do;
3678110
3678111           filename temp catalog 'sashelp.emutil.endgp_score.source';
3678112           %include temp;
3678113           filename temp;
3678114
3678115           %score;
3678116       %end;
3678117       %else
3678118       %if %upcase(&EM_ACTION) = POSTLOOP %then %do;
3678119
3678120           filename temp catalog 'sashelp.emutil.endgp_postloop.source';
3678121           %include temp;
3678122           filename temp;
3678123
3678124           %postloop;
3678125
3678126       %end;
3678127
3678128       %doendm:
3678129    %mend main;
3678130
3678131    %main;
MPRINT(EM_DIAGRAM):
MPRINT(EM_DIAGRAM):  ;
3678132    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3678133    * End POSTLOOPREPORT: EndGrp12;
MPRINT(EM_DIAGRAM):   * End POSTLOOPREPORT: EndGrp12;
3678134    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3678135
 
3678136    proc sort data=EMWS1.Neural4_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural4_CMeta_TRAIN out=WORK.SUBSETINMETA;
3678137    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3678138    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.NEURAL4_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3678139    proc sort data=EMWS1.EndGrp12_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp12_VariableSet
out=WORK.SUBSETVARSET(keep=NAME REPORT);
3678140    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3678141    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP12_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
3678142    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3678143    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3678144    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3678145    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3678146    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3678147    set EMWS1.EndGrp12_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_CMeta_TRAIN;
3678148    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3678148  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
3678149    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.ENDGRP12_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3678150    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3678151    set EMWS1.EndGrp12_TRAIN(keep=
3678152    F_DepVar
3678153    I_DepVar
3678154    P_DepVar0
3678155    P_DepVar1
3678156    R_DepVar0
3678157    R_DepVar1
3678158    U_DepVar
3678159    _WARN_
3678160    DepVar
3678161    );
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 U_DepVar _WARN_ DepVar );
3678162    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2437 observations read from the data set EMWS1.EMCODE3_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.META_TRAIN.
NOTE: View EMWS1.ENDGRP12_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2437 observations read from the data set EMWS1.TRANS2_TRAIN.
NOTE: There were 2437 observations read from the data set EMWS1.ENDGRP12_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2437 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.EndGrp12_30W_FVF nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EndGrp12_30W_FVF;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 EVENT $32 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.EndGrp12_30W_FVF(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   retain EVENT '1';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp12_30W_FVF;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.EndGrp12_30W_FVF;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1370537546 _NEVENTS
334 _NNONEVENTS 2103 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2437));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 2.1641788574485E-26 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2437 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2437/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2437)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2437/20) ) / (
AVGNUMRESP / (2437/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2437 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2437/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2437/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2437;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3682449    %let grouptarget=0;
3682450    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3682451    set EMWS1.Grp12_EMLOOPINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Grp12_EMLOOPINFO;
3682452    if _TARGET_ ne "" then do;
MPRINT(EM_DIAGRAM):   if _TARGET_ ne "" then do;
3682453    call symput('grouptarget', '1');
MPRINT(EM_DIAGRAM):   call symput('grouptarget', '1');
3682454    stop;
MPRINT(EM_DIAGRAM):   stop;
3682455    end;
MPRINT(EM_DIAGRAM):   end;
3682456    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _TARGET_ is uninitialized.
NOTE: There were 10 observations read from the data set EMWS1.GRP12_EMLOOPINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682457    data work.EMOUTFIT;
MPRINT(EM_DIAGRAM):    data work.EMOUTFIT;
3682458    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682459    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682460    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682460  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682461    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682462    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682463    set EMWS1.EndGrp12_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMOUTFIT;
3682464    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMOUTFIT.
NOTE: The data set WORK.EMOUTFIT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682465    data EMWS1.EndGrp12_EMOUTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMOUTFIT_LOOP;
3682466    set EMWS1.EndGrp12_EMOUTFIT_LOOP work.EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMOUTFIT_LOOP work.EMOUTFIT;
3682467    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.ENDGRP12_EMOUTFIT_LOOP.
NOTE: There were 1 observations read from the data set WORK.EMOUTFIT.
NOTE: The data set EMWS1.ENDGRP12_EMOUTFIT_LOOP has 11 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682468    data work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):    data work.EMREPORTFIT;
3682469    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682470    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682471    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682471  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682472    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682473    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682474    set EMWS1.EndGrp12_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMREPORTFIT;
3682475    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.ENDGRP12_EMREPORTFIT.
NOTE: The data set WORK.EMREPORTFIT has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682476    data EMWS1.EndGrp12_EMREPORTFIT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMREPORTFIT_LOOP;
3682477    set EMWS1.EndGrp12_EMREPORTFIT_LOOP work.EMREPORTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMREPORTFIT_LOOP work.EMREPORTFIT;
3682478    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 210 observations read from the data set EMWS1.ENDGRP12_EMREPORTFIT_LOOP.
NOTE: There were 9 observations read from the data set WORK.EMREPORTFIT.
NOTE: The data set EMWS1.ENDGRP12_EMREPORTFIT_LOOP has 219 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3682479    data work.EMRANK;
MPRINT(EM_DIAGRAM):    data work.EMRANK;
3682480    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682481    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682482    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682482  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682483    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682484    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682485    set EMWS1.EndGrp12_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMRANK;
3682486    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP12_EMRANK.
NOTE: The data set WORK.EMRANK has 20 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682487    data EMWS1.EndGrp12_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMRANK_LOOP;
3682488    set EMWS1.EndGrp12_EMRANK_LOOP work.EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMRANK_LOOP work.EMRANK;
3682489    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.ENDGRP12_EMRANK_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMRANK.
NOTE: The data set EMWS1.ENDGRP12_EMRANK_LOOP has 220 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682490    data work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data work.EMSCOREDIST;
3682491    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682492    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682493    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682493  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682494    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682495    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682496    set EMWS1.EndGrp12_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMSCOREDIST;
3682497    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.ENDGRP12_EMSCOREDIST.
NOTE: The data set WORK.EMSCOREDIST has 20 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682498    data EMWS1.EndGrp12_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMSCOREDIST_LOOP;
3682499    set EMWS1.EndGrp12_EMSCOREDIST_LOOP work.EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMSCOREDIST_LOOP work.EMSCOREDIST;
3682500    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 199 observations read from the data set EMWS1.ENDGRP12_EMSCOREDIST_LOOP.
NOTE: There were 20 observations read from the data set WORK.EMSCOREDIST.
NOTE: The data set EMWS1.ENDGRP12_EMSCOREDIST_LOOP has 219 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3682501    data work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data work.EMCLASSIFICATION;
3682502    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682503    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682504    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682504  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682505    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682506    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682507    set EMWS1.EndGrp12_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMCLASSIFICATION;
3682508    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.ENDGRP12_EMCLASSIFICATION.
NOTE: The data set WORK.EMCLASSIFICATION has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682509    data EMWS1.EndGrp12_EMCLASSIFICATION_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMCLASSIFICATION_LOOP;
3682510    set EMWS1.EndGrp12_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMCLASSIFICATION_LOOP work.EMCLASSIFICATION;
3682511    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP.
NOTE: There were 4 observations read from the data set WORK.EMCLASSIFICATION.
NOTE: The data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682512    proc sort data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP out=_temp;
3682513    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3682514    where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
MPRINT(EM_DIAGRAM):   where _type_='PREDICTION' and correct and INTO ne '' and FROM ne '';
3682515    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP.
      WHERE (_type_='PREDICTION') and correct and (INTO not = ' ') and (FROM not = ' ');
NOTE: The data set WORK._TEMP has 22 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682516    data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL totalCount
3682516  ! totalPercent);
MPRINT(EM_DIAGRAM):   data _total(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
totalCount totalPercent);
3682517    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3682518    retain totalCount totalPercent;
MPRINT(EM_DIAGRAM):   retain totalCount totalPercent;
3682519    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3682520    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3682521    totalCount = count;
MPRINT(EM_DIAGRAM):   totalCount = count;
3682522    totalPercent = percent;
MPRINT(EM_DIAGRAM):   totalPercent = percent;
3682523    end;
MPRINT(EM_DIAGRAM):   end;
3682524    else do;
MPRINT(EM_DIAGRAM):   else do;
3682525    totalCount + count;
MPRINT(EM_DIAGRAM):   totalCount + count;
3682526    totalPercent + percent;
MPRINT(EM_DIAGRAM):   totalPercent + percent;
3682527    end;
MPRINT(EM_DIAGRAM):   end;
3682528    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3682529    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TOTAL has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682530    data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL eventCount
3682530  ! eventPercent);
MPRINT(EM_DIAGRAM):   data _event(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
eventCount eventPercent);
3682531    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3682532    where strip(FROM) eq strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) eq strip(EVENT);
3682533    by _LOOP_ DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ DATAROLE TARGET;
3682534    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3682535    eventCount = count;
MPRINT(EM_DIAGRAM):   eventCount = count;
3682536    eventPercent = percent;
MPRINT(EM_DIAGRAM):   eventPercent = percent;
3682537    end;
MPRINT(EM_DIAGRAM):   end;
3682538    else do;
MPRINT(EM_DIAGRAM):   else do;
3682539    eventCount + count;
MPRINT(EM_DIAGRAM):   eventCount + count;
3682540    eventPercent + percent;
MPRINT(EM_DIAGRAM):   eventPercent + percent;
3682541    end;
MPRINT(EM_DIAGRAM):   end;
3682542    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3682543    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable first.modelid is uninitialized.
NOTE: Variable last.modelid is uninitialized.
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM)=STRIP(EVENT);
NOTE: The data set WORK._EVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682544    data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL neventCount
3682544  ! neventPercent);
MPRINT(EM_DIAGRAM):   data _nevent(keep=_LOOP_ _WHERE_ MODELID DATAROLE TARGET TARGETLABEL
neventCount neventPercent);
3682545    set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
3682546    retain neventCount neventPercent 0;
MPRINT(EM_DIAGRAM):   retain neventCount neventPercent 0;
3682547    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3682548    where strip(FROM) ne strip(EVENT);
MPRINT(EM_DIAGRAM):   where strip(FROM) ne strip(EVENT);
3682549    if first._LOOP_ or first.modelid or first.target or first.datarole then do;
MPRINT(EM_DIAGRAM):   if first._LOOP_ or first.modelid or first.target or first.datarole then
do;
3682550    neventCount = count;
MPRINT(EM_DIAGRAM):   neventCount = count;
3682551    neventPercent = percent;
MPRINT(EM_DIAGRAM):   neventPercent = percent;
3682552    end;
MPRINT(EM_DIAGRAM):   end;
3682553    else do;
MPRINT(EM_DIAGRAM):   else do;
3682554    neventCount + count;
MPRINT(EM_DIAGRAM):   neventCount + count;
3682555    neventPercent + percent;
MPRINT(EM_DIAGRAM):   neventPercent + percent;
3682556    end;
MPRINT(EM_DIAGRAM):   end;
3682557    if last._LOOP_ or last.modelid or last.target or last.datarole then output;
MPRINT(EM_DIAGRAM):   if last._LOOP_ or last.modelid or last.target or last.datarole then
output;
3682558    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TEMP.
      WHERE STRIP(FROM) not = STRIP(EVENT);
NOTE: The data set WORK._NEVENT has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3682559    data EMWS1.EndGrp12_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMMISC_LOOP;
3682560    merge _total _event _nevent;
MPRINT(EM_DIAGRAM):   merge _total _event _nevent;
3682561    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3682562    label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,   NOQUOTE))"
3682562  ! targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3682562  ! eventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctEvent_vlabel,  NOQUOTE))"
3682563       eventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,  NOQUOTE))"
3682563  ! neventPercent = "%sysfunc(sasmsg(sashelp.dmine, assmt_pctNEvent_vlabel, NOQUOTE))"
3682563  ! neventCount = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumNEvent_vlabel, NOQUOTE))"
3682564       totalPercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel,    NOQUOTE))"
3682564  !  totalCount = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalcount_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable" targetLabel = "Target Label"
eventPercent = "Percentage of Events" eventCount = "Number of Events" neventPercent =
"Percentage of Nonevents" neventCount = "Number of Nonevents" totalPercent = "Total
Percentage" totalCount = "Total Count";
3682565    if neventCount = . then neventCount = 0;
MPRINT(EM_DIAGRAM):   if neventCount = . then neventCount = 0;
3682566    if eventCount = . then eventCount = 0;
MPRINT(EM_DIAGRAM):   if eventCount = . then eventCount = 0;
3682567    if neventPercent = . then neventPercent = 0;
MPRINT(EM_DIAGRAM):   if neventPercent = . then neventPercent = 0;
3682568    if eventPercent = . then eventPercent = 0;
MPRINT(EM_DIAGRAM):   if eventPercent = . then eventPercent = 0;
3682569    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TOTAL.
NOTE: There were 11 observations read from the data set WORK._EVENT.
NOTE: There were 11 observations read from the data set WORK._NEVENT.
NOTE: The data set EMWS1.ENDGRP12_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
3682570    proc sort data=EMWS1.EndGrp12_EMMISC_LOOP;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.EndGrp12_EMMISC_LOOP;
3682571    by _LOOP_ MODELID DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   by _LOOP_ MODELID DATAROLE TARGET;
3682572    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.ENDGRP12_EMMISC_LOOP.
NOTE: The data set EMWS1.ENDGRP12_EMMISC_LOOP has 11 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682573    data work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data work.EMEVENTREPORT;
3682574    length _LOOP_ 8 _WHERE_ $200;
MPRINT(EM_DIAGRAM):   length _LOOP_ 8 _WHERE_ $200;
3682575    format _LOOP_ 6.;
MPRINT(EM_DIAGRAM):   format _LOOP_ 6.;
3682576    label _LOOP_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_loop_vlabel, NOQUOTE))" _WHERE_ =
3682576  !  "%sysfunc(sasmsg(sashelp.dmine, rpt_where_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LOOP_ = "Group Index" _WHERE_ = "Group";
3682577    retain _LOOP_ 11;
MPRINT(EM_DIAGRAM):   retain _LOOP_ 11;
3682578    retain _WHERE_ "_OVERALL_";
MPRINT(EM_DIAGRAM):   retain _WHERE_ "_OVERALL_";
3682579    set EMWS1.EndGrp12_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMEVENTREPORT;
3682580    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMEVENTREPORT.
NOTE: The data set WORK.EMEVENTREPORT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682581    data EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
3682582    set work.EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set work.EMEVENTREPORT;
3682583    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.EMEVENTREPORT.
NOTE: The data set EMWS1.ENDGRP12_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682584    %let _cn = %sysfunc(getoption(CENTER));
3682585    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3682586    proc print data=EMWS1.EndGrp12_EMREPORTFIT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp12_EMREPORTFIT_LOOP noobs label;
3682587    var STAT LABEL TRAIN
3682588    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN ;
3682589    by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
MPRINT(EM_DIAGRAM):   by _WHERE_ notsorted TARGET notsorted TARGETLABEL notsorted;
3682590    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3682591    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3682592    run;
 
NOTE: There were 219 observations read from the data set EMWS1.ENDGRP12_EMREPORTFIT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2413.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682593    title10;
MPRINT(EM_DIAGRAM):   title10;
3682594    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3682595    proc sort data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP nothreads;
3682596    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3682597    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP.
NOTE: The data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP has 44 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3682598    %let _cn = %sysfunc(getoption(CENTER));
3682599    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3682600    proc print data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp12_EMCLASSIFICATION_LOOP noobs label;
3682601    var from into pct_row pct_col count percent
3682602    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3682603    by DATAROLE _WHERE_ TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE _WHERE_ TARGET TARGETLABEL;
3682604    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3682605    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3682606    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3682607    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3682608    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3682609    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3682610    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3682611    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3682612    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3682613    run;
 
NOTE: There were 44 observations read from the data set EMWS1.ENDGRP12_EMCLASSIFICATION_LOOP.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2414.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
3682614    title9;
MPRINT(EM_DIAGRAM):   title9;
3682615    title10;
MPRINT(EM_DIAGRAM):   title10;
3682616    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3682617    %let _cn = %sysfunc(getoption(CENTER));
3682618    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3682619    data EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   data EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
3682620    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3682620  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
3682621    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3682621  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3682621  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3682621  ! FALSEEVENT
3682622    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3682622  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3682622  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3682623       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
3682624    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3682625    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3682626    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3682627    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3682628    set EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
MPRINT(EM_DIAGRAM):   set EMWS1.EndGrp12_EMEVENTREPORT_LOOP;
3682629    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMEVENTREPORT_LOOP.
NOTE: The data set EMWS1.ENDGRP12_EMEVENTREPORT_LOOP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
3682630    proc print data=EMWS1.EndGrp12_EMEVENTREPORT_LOOP noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp12_EMEVENTREPORT_LOOP noobs label;
3682631    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3682632    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3682633    by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted TARGETLABEL;
3682634    run;
 
NOTE: There were 1 observations read from the data set EMWS1.ENDGRP12_EMEVENTREPORT_LOOP.
NOTE: The PROCEDURE PRINT printed page 2415.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3682635    title10;
MPRINT(EM_DIAGRAM):   title10;
3682636    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3682637    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3682638    modify EndGrp12_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp12_EMRANK_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3682639    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3682640    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3682640  ! ;
MPRINT(EM_DIAGRAM):   run;
3682641    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP12_EMRANK_LOOP.DATA.
3682642    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
3682643    %let _cn = %sysfunc(getoption(CENTER));
3682644    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3682645    proc print data=EMWS1.EndGrp12_EMRANK_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp12_EMRANK_LOOP label noobs;
3682646    var
3682647    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3682648    by
3682649    notsorted DATAROLE
3682650    notsorted _WHERE_
3682651    notsorted TARGET
3682652    notsorted TARGETLABEL
3682653    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3682654    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3682655    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3682656    run;
 
NOTE: There were 220 observations read from the data set EMWS1.ENDGRP12_EMRANK_LOOP.
NOTE: The PROCEDURE PRINT printed page 2416.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3682657    title10;
MPRINT(EM_DIAGRAM):   title10;
3682658    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3682659    proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
3682660    modify EndGrp12_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   modify EndGrp12_EMSCOREDIST_LOOP;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3682661    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3682661  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3682662    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3682662  ! ;
MPRINT(EM_DIAGRAM):   run;
3682663    run;
 
NOTE: MODIFY was successful for EMWS1.ENDGRP12_EMSCOREDIST_LOOP.DATA.
3682664    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
3682665    %let _cn = %sysfunc(getoption(CENTER));
3682666    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3682667    proc print data=EMWS1.EndGrp12_EMSCOREDIST_LOOP label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.EndGrp12_EMSCOREDIST_LOOP label noobs;
3682668    var
3682669    p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
3682670    by
3682671    notsorted DATAROLE
3682672    notsorted _WHERE_
3682673    notsorted TARGET
3682674    notsorted TARGETLABEL
3682675    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted _WHERE_ notsorted TARGET notsorted
TARGETLABEL ;
3682676    where TARGET in(
3682677    "DepVar"
3682678    );
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
3682679    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3682680    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
3682681    run;
 
NOTE: There were 219 observations read from the data set EMWS1.ENDGRP12_EMSCOREDIST_LOOP.
      WHERE TARGET='DepVar';
NOTE: The PROCEDURE PRINT printed page 2417.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3682682    title10;
MPRINT(EM_DIAGRAM):   title10;
3682683    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3682684    %let emexceptionstring =;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:25 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "02 June 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:08:26 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                misil";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Post Grouping Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\misil\Desktop\DM
2\Project\WarGameStore_sasProject\Workspaces\EMWS1\EndGrp12\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data EMWS1.EndGrp12_EMREPORT;
MPRINT(EM_DIAGRAM):   length ID 8 KEY $30 VALUE $512;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='PROPERTIES';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SETTINGS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=1;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="VARIABLES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=3;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMTRAINVARIABLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLLOG";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=4;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\EMLOG.log";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="TOOLOUTPUT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=5;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="NOTES";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Properties";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=6;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FLOWCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Sasresults";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=7;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='TEXT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="SASCODE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Scoring";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="EXTERNAL";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=8;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="MISCLASSIFICATIONMANY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMMISC_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=10;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="TOTALPERCENT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE="BAR";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="FITSTATPLOT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMOUTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=11;
MPRINT(EM_DIAGRAM):   KEY="FREQ";
MPRINT(EM_DIAGRAM):   VALUE="_ANYNUMERIC_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSRANKOVERLAY";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMRANK_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="DECILE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="LIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BASELIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="BESTLIFTC";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=12;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='LATTICE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='LATTICETYPE';
MPRINT(EM_DIAGRAM):   VALUE='LINEPLOT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="ASSESSSCOREDIST";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMSCOREDIST_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY='PARM';
MPRINT(EM_DIAGRAM):   VALUE="DepVar";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="WHERE";
MPRINT(EM_DIAGRAM):   VALUE="TARGET='DepVar'";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="X";
MPRINT(EM_DIAGRAM):   VALUE="SCORE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="Y";
MPRINT(EM_DIAGRAM):   VALUE="PERCENTAGEOFNONEVENTS";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEX";
MPRINT(EM_DIAGRAM):   VALUE="DATAROLE";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="LATTICEY";
MPRINT(EM_DIAGRAM):   VALUE="_WHERE_";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=13;
MPRINT(EM_DIAGRAM):   KEY="NROWS";
MPRINT(EM_DIAGRAM):   VALUE="1";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="REPORTFITSTAT";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=14;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMREPORTFIT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="eventratestat";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Assess";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=15;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMEVENTREPORT_LOOP";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='VIEWTYPE';
MPRINT(EM_DIAGRAM):   VALUE='DATA';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='DESCRIPTION';
MPRINT(EM_DIAGRAM):   VALUE="miningresult";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='BLOCK';
MPRINT(EM_DIAGRAM):   VALUE="Gp";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='AUTODISPLAY';
MPRINT(EM_DIAGRAM):   VALUE="Y";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='TYPE';
MPRINT(EM_DIAGRAM):   VALUE="DATA";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   id=16;
MPRINT(EM_DIAGRAM):   KEY='FILE';
MPRINT(EM_DIAGRAM):   VALUE="EndGrp12_EMLOOPINFO";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
